//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/EuclidianController.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GPoint.h"
#include "geogebra/common/awt/GPoint2D.h"
#include "geogebra/common/awt/GRectangle.h"
#include "geogebra/common/awt/GRectangle2D.h"
#include "geogebra/common/euclidian/DrawableND.h"
#include "geogebra/common/euclidian/EnvironmentStyle.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/euclidian/EuclidianController.h"
#include "geogebra/common/euclidian/EuclidianControllerCompanion.h"
#include "geogebra/common/euclidian/EuclidianPen.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/EuclidianViewCompanion.h"
#include "geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "geogebra/common/euclidian/Hits.h"
#include "geogebra/common/euclidian/MyButton.h"
#include "geogebra/common/euclidian/Previewable.h"
#include "geogebra/common/euclidian/TextDispatcher.h"
#include "geogebra/common/euclidian/draw/DrawConic.h"
#include "geogebra/common/euclidian/draw/DrawConicPart.h"
#include "geogebra/common/euclidian/draw/DrawSlider.h"
#include "geogebra/common/euclidian/event/AbstractEvent.h"
#include "geogebra/common/euclidian/event/PointerEventType.h"
#include "geogebra/common/euclidian/modes/ModeDelete.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/gui/view/data/PlotPanelEuclidianViewInterface.h"
#include "geogebra/common/javax/swing/GTextComponent.h"
#include "geogebra/common/kernel/AnimationManager.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Macro.h"
#include "geogebra/common/kernel/Manager3DInterface.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/ModeSetter.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/Region.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/UndoManager.h"
#include "geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "geogebra/common/kernel/algos/AlgoDynamicCoordinatesInterface.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoFunctionFreehand.h"
#include "geogebra/common/kernel/algos/AlgoRadius.h"
#include "geogebra/common/kernel/algos/AlgoTranslate.h"
#include "geogebra/common/kernel/algos/AlgoVector.h"
#include "geogebra/common/kernel/algos/AlgoVectorPoint.h"
#include "geogebra/common/kernel/algos/GetCommand.h"
#include "geogebra/common/kernel/arithmetic/BooleanValue.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/arithmetic/PolyFunction.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/Furniture.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoAxis.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoButton.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoConicPart.h"
#include "geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoImage.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoLocus.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoPoly.h"
#include "geogebra/common/kernel/geos/GeoPolyLine.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/geos/GeoRay.h"
#include "geogebra/common/kernel/geos/GeoSegment.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/geos/GeoTextField.h"
#include "geogebra/common/kernel/geos/GeoVec2D.h"
#include "geogebra/common/kernel/geos/GeoVec3D.h"
#include "geogebra/common/kernel/geos/GeoVector.h"
#include "geogebra/common/kernel/geos/PointProperties.h"
#include "geogebra/common/kernel/geos/PointRotateable.h"
#include "geogebra/common/kernel/geos/Test.h"
#include "geogebra/common/kernel/geos/Transformable.h"
#include "geogebra/common/kernel/geos/Translateable.h"
#include "geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "geogebra/common/kernel/kernelND/GeoAxisND.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoElementND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoQuadricND.h"
#include "geogebra/common/kernel/kernelND/GeoRayND.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "geogebra/common/kernel/statistics/AlgoFitLineY.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/DialogManager.h"
#include "geogebra/common/main/GeoElementSelectionListener.h"
#include "geogebra/common/main/GlobalKeyDispatcher.h"
#include "geogebra/common/main/GuiManagerInterface.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/main/SelectionManager.h"
#include "geogebra/common/main/settings/EuclidianSettings.h"
#include "geogebra/common/plugin/EuclidianStyleConstants.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "geogebra/common/plugin/Operation.h"
#include "geogebra/common/util/AsyncOperation.h"
#include "geogebra/common/util/MyMath.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/TreeSet.h"

#define GeogebraCommonEuclidianEuclidianController_ZOOM_RECT_THRESHOLD 30
#define GeogebraCommonEuclidianEuclidianController_DRAG_THRESHOLD 10
#define GeogebraCommonEuclidianEuclidianController_INCREASED_THRESHOLD_FACTOR 2

@interface GeogebraCommonEuclidianEuclidianController () {
 @public
  GeogebraCommonEuclidianModesModeDelete *deleteMode_;
  GeogebraCommonAwtGPoint2D_Double *startPoint_;
  jboolean externalHandling_;
  jlong lastMouseRelease_;
  jboolean textfieldHasFocus__;
  GeogebraCommonEuclidianMyButton *pressedButton_;
  GeogebraCommonKernelMatrixCoords *tmpCoordsL4_;
  GeogebraCommonKernelMatrixCoords *mouseLocRW_;
  GeogebraCommonEuclidianTextDispatcher *textDispatcher_;
  jdouble initxRW_;
  jdouble initFactor_;
  jboolean checkBoxOrButtonJustHitted_;
  jboolean scriptsHaveRun_;
  jboolean doubleClickStarted_;
  GeogebraCommonAwtGPoint *lastMouseUpLoc_;
  jboolean checkboxChangeOccured_;
  jlong lastMousePressedTime_;
  jboolean wheelZoomingOccurred_;
  GeogebraCommonEuclidianEventPointerEventTypeEnum *defaultEventType_;
  jboolean detachFromPath_, detachFromRegion_;
  jboolean needsAttach_;
}

- (IOSObjectArray *)segment;

+ (void)checkCoordCartesianWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point;

- (jboolean)clearHighlightedGeos;

- (jdouble)getTransformCoordsOffsetWithInt:(jint)i;

- (GeogebraCommonKernelKernelNDGeoConicND *)CircleWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                                                withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)c;

- (GeogebraCommonKernelKernelNDGeoConicND *)CircleCompassesWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                                                           withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
                                                           withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C;

- (void)addMovedGeoElementFreeInputPointsToTranslateableGeos;

- (jboolean)isCheckboxFixedWithGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)geoBool;

- (void)translateHitsByVectorWithGeogebraCommonEuclidianEventPointerEventTypeEnum:(GeogebraCommonEuclidianEventPointerEventTypeEnum *)type;

- (jboolean)shallMoveViewWithGeogebraCommonEuclidianEventAbstractEvent:(GeogebraCommonEuclidianEventAbstractEvent *)event;

- (jboolean)modeCreatesHelperPointsWithInt:(jint)mode2;

- (void)altClickedWithGeogebraCommonEuclidianEventPointerEventTypeEnum:(GeogebraCommonEuclidianEventPointerEventTypeEnum *)type;

- (void)processRightReleasedWithBoolean:(jboolean)right
                            withBoolean:(jboolean)control
withGeogebraCommonEuclidianEventPointerEventTypeEnum:(GeogebraCommonEuclidianEventPointerEventTypeEnum *)type;

- (void)moveAttachDetachWithBoolean:(jboolean)repaint
withGeogebraCommonEuclidianEventAbstractEvent:(GeogebraCommonEuclidianEventAbstractEvent *)event;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianController, deleteMode_, GeogebraCommonEuclidianModesModeDelete *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianController, startPoint_, GeogebraCommonAwtGPoint2D_Double *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianController, pressedButton_, GeogebraCommonEuclidianMyButton *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianController, tmpCoordsL4_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianController, mouseLocRW_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianController, textDispatcher_, GeogebraCommonEuclidianTextDispatcher *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianController, lastMouseUpLoc_, GeogebraCommonAwtGPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianController, defaultEventType_, GeogebraCommonEuclidianEventPointerEventTypeEnum *)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianEuclidianController, ZOOM_RECT_THRESHOLD, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianEuclidianController, DRAG_THRESHOLD, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianEuclidianController, INCREASED_THRESHOLD_FACTOR, jint)

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, JavaUtilArrayList *selectionList, jboolean doUpdateSelection);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(GeogebraCommonEuclidianEuclidianController *self, JavaUtilArrayList *selectionList);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedGeos(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_getSelectedPointsNDWithGeogebraCommonKernelKernelNDGeoPointNDArray_(GeogebraCommonEuclidianEuclidianController *self, IOSObjectArray *result);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedPoints(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedNumbers(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedLists(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedPolygons(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedPolyLines(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_getSelectedLinesNDWithGeogebraCommonKernelKernelNDGeoLineNDArray_(GeogebraCommonEuclidianEuclidianController *self, IOSObjectArray *lines);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedLinesND(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedLines(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_getSelectedSegmentsNDWithGeogebraCommonKernelKernelNDGeoSegmentNDArray_(GeogebraCommonEuclidianEuclidianController *self, IOSObjectArray *segments);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedSegmentsND(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_getSelectedVectorsNDWithGeogebraCommonKernelKernelNDGeoVectorNDArray_(GeogebraCommonEuclidianEuclidianController *self, IOSObjectArray *vectors);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedVectorsND(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedConics(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedCircles(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedConicsND(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedRegions(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedPaths(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedImplicitpoly(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedFunctions(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedCurves(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static id<GeogebraCommonKernelKernelNDGeoPointND> GeogebraCommonEuclidianEuclidianController_createNewPoint2DWithNSString_withBoolean_withGeogebraCommonKernelRegion_withDouble_withDouble_withBoolean_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, NSString *label, jboolean forPreviewable, id<GeogebraCommonKernelRegion> region, jdouble x, jdouble y, jboolean complex, jboolean coords2D);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_setHighlightedGeosWithBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean highlight);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_addToSelectionListWithJavaUtilArrayList_withId_withInt_(GeogebraCommonEuclidianEuclidianController *self, JavaUtilArrayList *selectionList, id geo, jint max);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_addToHighlightedListWithJavaUtilArrayList_withJavaUtilArrayList_withInt_(GeogebraCommonEuclidianEuclidianController *self, JavaUtilArrayList *selectionList, JavaUtilArrayList *geos, jint max);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_addToSelectionListWithJavaUtilArrayList_withJavaUtilArrayList_withInt_withBoolean_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, JavaUtilArrayList *selectionList, JavaUtilArrayList *geos, jint max, jboolean addMoreThanOneAllowed, jboolean tryDeselect);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_selGeos(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_selPoints(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_selNumbers(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_selLists(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_selPolyLines(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_selPolygons(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_selLines(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_selSegments(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_selVectors(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_selConics(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_selPaths(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_selRegions(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_selImplicitpoly(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_selFunctions(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_selCurves(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_addSelectedGeoWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_addSelectedNumericWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_addSelectedLineWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_addSelectedSegmentWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_addSelectedVectorWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_addSelectedVectorWithGeogebraCommonEuclidianHits_withInt_withBoolean_withGeogebraCommonKernelGeosTestEnum_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed, GeogebraCommonKernelGeosTestEnum *geoClass);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_addSelectedPathWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_addSelectedRegionWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_addSelectedImplicitpolyWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_addSelectedPolygonWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_addSelectedPolyLineWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_addSelectedListWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_addSelectedConicWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_addSelectedFunctionWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianController_addSelectedCurveWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_joinWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_segmentWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_segment(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_vectorWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_rayWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_polygonWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_polylineWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_parallelWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_checkCoordCartesianWithGeogebraCommonKernelKernelNDGeoPointND_(id<GeogebraCommonKernelKernelNDGeoPointND> point);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_parabolaWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_midpointWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianEuclidianController_functionInspectorWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_lineBisectorWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_angularBisectorWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_threePointsWithGeogebraCommonEuclidianHits_withInt_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint threePointsMode);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianEuclidianController_relationWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_locusWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_conic5WithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_tangentsWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_polarLineWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianEuclidianController_showHideLabelWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianEuclidianController_copyVisualStyleWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianEuclidianController_moveRotateWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianEuclidianController_pointWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianEuclidianController_geoElementSelectedWithGeogebraCommonEuclidianHits_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jboolean addToSelection);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianEuclidianController_segmentFixedWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_angleFixedWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_circleOrSphere2WithGeogebraCommonEuclidianHits_withInt_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint sphereMode);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianEuclidianController_showHideObjectWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianEuclidianController_textWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianEuclidianController_slider(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianEuclidianController_imageWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_mirrorAtPointWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_mirrorAtLineWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_mirrorAtCircleWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianEuclidianController_clearHighlightedGeos(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianEuclidianController_attachDetachWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_translateByVectorWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_rotateByAngleWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_dilateFromPointWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_fitLineWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoLine *GeogebraCommonEuclidianEuclidianController_FitLineYWithNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonEuclidianEuclidianController *self, NSString *label, GeogebraCommonKernelGeosGeoList *list);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_createListWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jdouble GeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(GeogebraCommonEuclidianEuclidianController *self, jint i);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_areaWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_angleWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_distanceWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianEuclidianController_showCheckBox(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_compassesWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static GeogebraCommonKernelKernelNDGeoConicND *GeogebraCommonEuclidianEuclidianController_CircleWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoQuadricND_(GeogebraCommonEuclidianEuclidianController *self, id<GeogebraCommonKernelKernelNDGeoPointND> A, GeogebraCommonKernelKernelNDGeoQuadricND *c);

__attribute__((unused)) static GeogebraCommonKernelKernelNDGeoConicND *GeogebraCommonEuclidianEuclidianController_CircleCompassesWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonEuclidianEuclidianController *self, id<GeogebraCommonKernelKernelNDGeoPointND> A, id<GeogebraCommonKernelKernelNDGeoPointND> B, id<GeogebraCommonKernelKernelNDGeoPointND> C);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonEuclidianEuclidianController_vectorFromPointWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianEuclidianController_circlePointRadiusWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static id<GeogebraCommonKernelKernelNDGeoPointND> GeogebraCommonEuclidianEuclidianController_updateNewPointWithBoolean_withGeogebraCommonEuclidianHits_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean forPreviewable, GeogebraCommonEuclidianHits *hits, jboolean onPathPossible, jboolean inRegionPossible, jboolean intersectPossible, jboolean chooseGeo, jboolean complex);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianEuclidianController_createNewPointWithGeogebraCommonEuclidianHits_withBoolean_withBoolean_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jboolean onPathPossible, jboolean intersectPossible, jboolean doSingleHighlighting);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_macroWithGeogebraCommonEuclidianHits_withGeogebraCommonUtilAsyncOperation_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, GeogebraCommonUtilAsyncOperation *callback2);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianEuclidianController_buttonWithBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean textfield);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianEuclidianController_endOfSwitchModeForProcessModeWithGeogebraCommonKernelGeosGeoElementArray_withBoolean_withGeogebraCommonUtilAsyncOperation_(GeogebraCommonEuclidianEuclidianController *self, IOSObjectArray *ret, jboolean changedKernel, GeogebraCommonUtilAsyncOperation *callback);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianEuclidianController_processModeWithGeogebraCommonEuclidianHits_withBoolean_withGeogebraCommonUtilAsyncOperation_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *processHits, jboolean isControlDown, GeogebraCommonUtilAsyncOperation *callback);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_rotateObjectWithBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean repaint);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_moveLabel(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_moveVectorWithBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean repaint);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_moveVectorWithDouble_withDouble_(GeogebraCommonEuclidianEuclidianController *self, jdouble x, jdouble y);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_moveVectorStartPointWithBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean repaint);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_moveTextWithBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean repaint);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_moveImageWithBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean repaint);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_moveConicWithBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean repaint);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_moveImplicitPolyWithBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean repaint);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_moveFreehandWithBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean repaint);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_moveFunctionWithBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean repaint);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_moveBooleanWithBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean repaint);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_moveButtonWithBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean repaint);

__attribute__((unused)) static jdouble GeogebraCommonEuclidianEuclidianController_getSliderValueWithGeogebraCommonKernelGeosGeoNumeric_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonKernelGeosGeoNumeric *movedSlider, jboolean click);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_moveNumericWithBoolean_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean repaint, jboolean click);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_moveSliderWithBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean repaint);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_moveAttachedWithBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean repaint);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianEuclidianController_handleMovedElementFreePoint(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianEuclidianController_handleMovedElementFreeText(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_addMovedGeoElementFreeInputPointsToTranslateableGeos(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianEuclidianController_isCheckboxFixedWithGeogebraCommonKernelGeosGeoBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonKernelGeosGeoBoolean *geoBool);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_handleMousePressedForMoveModeWithGeogebraCommonEuclidianEventAbstractEvent_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianEventAbstractEvent *e, jboolean drag);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_translateHitsByVectorWithGeogebraCommonEuclidianEventPointerEventTypeEnum_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianEventPointerEventTypeEnum *type);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_mousePressedTranslatedViewWithGeogebraCommonEuclidianEventPointerEventTypeEnum_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianEventPointerEventTypeEnum *type);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianEuclidianController_shallMoveViewWithGeogebraCommonEuclidianEventAbstractEvent_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianEventAbstractEvent *event);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianEuclidianController_modeCreatesHelperPointsWithInt_(GeogebraCommonEuclidianEuclidianController *self, jint mode2);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_altClickedWithGeogebraCommonEuclidianEventPointerEventTypeEnum_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianEventPointerEventTypeEnum *type);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_processRightReleasedWithBoolean_withBoolean_withGeogebraCommonEuclidianEventPointerEventTypeEnum_(GeogebraCommonEuclidianEuclidianController *self, jboolean right, jboolean control, GeogebraCommonEuclidianEventPointerEventTypeEnum *type);

__attribute__((unused)) static GeogebraCommonEuclidianEuclidianPen *GeogebraCommonEuclidianEuclidianController_getPen(GeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_twoTouchStartCommonWithDouble_withDouble_withDouble_withDouble_(GeogebraCommonEuclidianEuclidianController *self, jdouble x1, jdouble y1, jdouble x2, jdouble y2);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_twoTouchMoveCommonWithDouble_withDouble_withDouble_withDouble_(GeogebraCommonEuclidianEuclidianController *self, jdouble x1, jdouble y1, jdouble x2, jdouble y2);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_moveAttachDetachWithBoolean_withGeogebraCommonEuclidianEventAbstractEvent_(GeogebraCommonEuclidianEuclidianController *self, jboolean repaint, GeogebraCommonEuclidianEventAbstractEvent *event);

@interface GeogebraCommonEuclidianEuclidianController_$1 : GeogebraCommonUtilAsyncOperation {
 @public
  GeogebraCommonEuclidianEuclidianController *this$0_;
  GeogebraCommonUtilAsyncOperation *val$callback2_;
}

- (void)callbackWithId:(id)num;

- (instancetype)initWithGeogebraCommonEuclidianEuclidianController:(GeogebraCommonEuclidianEuclidianController *)outer$
                              withGeogebraCommonUtilAsyncOperation:(GeogebraCommonUtilAsyncOperation *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonEuclidianEuclidianController_$1)

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianController_$1, this$0_, GeogebraCommonEuclidianEuclidianController *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianController_$1, val$callback2_, GeogebraCommonUtilAsyncOperation *)

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_$1_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonUtilAsyncOperation_(GeogebraCommonEuclidianEuclidianController_$1 *self, GeogebraCommonEuclidianEuclidianController *outer$, GeogebraCommonUtilAsyncOperation *capture$0);

__attribute__((unused)) static GeogebraCommonEuclidianEuclidianController_$1 *new_GeogebraCommonEuclidianEuclidianController_$1_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonUtilAsyncOperation_(GeogebraCommonEuclidianEuclidianController *outer$, GeogebraCommonUtilAsyncOperation *capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonEuclidianEuclidianController_$1)

@interface GeogebraCommonEuclidianEuclidianController_$2 : GeogebraCommonUtilAsyncOperation {
 @public
  GeogebraCommonEuclidianEuclidianController *this$0_;
  GeogebraCommonUtilAsyncOperation *val$callback_;
}

- (void)callbackWithId:(id)ret;

- (instancetype)initWithGeogebraCommonEuclidianEuclidianController:(GeogebraCommonEuclidianEuclidianController *)outer$
                              withGeogebraCommonUtilAsyncOperation:(GeogebraCommonUtilAsyncOperation *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonEuclidianEuclidianController_$2)

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianController_$2, this$0_, GeogebraCommonEuclidianEuclidianController *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianController_$2, val$callback_, GeogebraCommonUtilAsyncOperation *)

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_$2_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonUtilAsyncOperation_(GeogebraCommonEuclidianEuclidianController_$2 *self, GeogebraCommonEuclidianEuclidianController *outer$, GeogebraCommonUtilAsyncOperation *capture$0);

__attribute__((unused)) static GeogebraCommonEuclidianEuclidianController_$2 *new_GeogebraCommonEuclidianEuclidianController_$2_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonUtilAsyncOperation_(GeogebraCommonEuclidianEuclidianController *outer$, GeogebraCommonUtilAsyncOperation *capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonEuclidianEuclidianController_$2)

@interface GeogebraCommonEuclidianEuclidianController_$3 : GeogebraCommonUtilAsyncOperation {
 @public
  GeogebraCommonEuclidianEuclidianController *this$0_;
  GeogebraCommonEuclidianHits *val$hits2_;
}

- (void)callbackWithId:(id)changedKernel;

- (instancetype)initWithGeogebraCommonEuclidianEuclidianController:(GeogebraCommonEuclidianEuclidianController *)outer$
                                   withGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonEuclidianEuclidianController_$3)

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianController_$3, this$0_, GeogebraCommonEuclidianEuclidianController *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianController_$3, val$hits2_, GeogebraCommonEuclidianHits *)

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_$3_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController_$3 *self, GeogebraCommonEuclidianEuclidianController *outer$, GeogebraCommonEuclidianHits *capture$0);

__attribute__((unused)) static GeogebraCommonEuclidianEuclidianController_$3 *new_GeogebraCommonEuclidianEuclidianController_$3_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *outer$, GeogebraCommonEuclidianHits *capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonEuclidianEuclidianController_$3)

@interface GeogebraCommonEuclidianEuclidianController_$4 : GeogebraCommonUtilAsyncOperation {
 @public
  GeogebraCommonEuclidianEuclidianController *this$0_;
  GeogebraCommonUtilAsyncOperation *val$callback_;
}

- (void)callbackWithId:(id)ret;

- (instancetype)initWithGeogebraCommonEuclidianEuclidianController:(GeogebraCommonEuclidianEuclidianController *)outer$
                              withGeogebraCommonUtilAsyncOperation:(GeogebraCommonUtilAsyncOperation *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonEuclidianEuclidianController_$4)

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianController_$4, this$0_, GeogebraCommonEuclidianEuclidianController *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianController_$4, val$callback_, GeogebraCommonUtilAsyncOperation *)

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_$4_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonUtilAsyncOperation_(GeogebraCommonEuclidianEuclidianController_$4 *self, GeogebraCommonEuclidianEuclidianController *outer$, GeogebraCommonUtilAsyncOperation *capture$0);

__attribute__((unused)) static GeogebraCommonEuclidianEuclidianController_$4 *new_GeogebraCommonEuclidianEuclidianController_$4_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonUtilAsyncOperation_(GeogebraCommonEuclidianEuclidianController *outer$, GeogebraCommonUtilAsyncOperation *capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonEuclidianEuclidianController_$4)

@interface GeogebraCommonEuclidianEuclidianController_$5 : GeogebraCommonUtilAsyncOperation {
 @public
  GeogebraCommonEuclidianEuclidianController *this$0_;
  GeogebraCommonEuclidianHits *val$hits2_;
  GeogebraCommonEuclidianEventAbstractEvent *val$event_;
}

- (void)callbackWithId:(id)changedKernel;

- (instancetype)initWithGeogebraCommonEuclidianEuclidianController:(GeogebraCommonEuclidianEuclidianController *)outer$
                                   withGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)capture$0
                     withGeogebraCommonEuclidianEventAbstractEvent:(GeogebraCommonEuclidianEventAbstractEvent *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonEuclidianEuclidianController_$5)

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianController_$5, this$0_, GeogebraCommonEuclidianEuclidianController *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianController_$5, val$hits2_, GeogebraCommonEuclidianHits *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianController_$5, val$event_, GeogebraCommonEuclidianEventAbstractEvent *)

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianController_$5_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonEuclidianHits_withGeogebraCommonEuclidianEventAbstractEvent_(GeogebraCommonEuclidianEuclidianController_$5 *self, GeogebraCommonEuclidianEuclidianController *outer$, GeogebraCommonEuclidianHits *capture$0, GeogebraCommonEuclidianEventAbstractEvent *capture$1);

__attribute__((unused)) static GeogebraCommonEuclidianEuclidianController_$5 *new_GeogebraCommonEuclidianEuclidianController_$5_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonEuclidianHits_withGeogebraCommonEuclidianEventAbstractEvent_(GeogebraCommonEuclidianEuclidianController *outer$, GeogebraCommonEuclidianHits *capture$0, GeogebraCommonEuclidianEventAbstractEvent *capture$1) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonEuclidianEuclidianController_$5)

@implementation GeogebraCommonEuclidianEuclidianController

+ (void)removeAxesWithJavaUtilArrayList:(JavaUtilArrayList *)geos {
  GeogebraCommonEuclidianEuclidianController_removeAxesWithJavaUtilArrayList_(geos);
}

- (GeogebraCommonEuclidianModesModeDelete *)getDeleteMode {
  if (deleteMode_ == nil && view_ != nil) {
    GeogebraCommonEuclidianEuclidianController_setAndConsume_deleteMode_(self, new_GeogebraCommonEuclidianModesModeDelete_initWithGeogebraCommonEuclidianEuclidianView_(view_));
  }
  return deleteMode_;
}

- (instancetype)initWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app {
  GeogebraCommonEuclidianEuclidianController_initWithGeogebraCommonMainApp_(self, app);
  return self;
}

- (void)createCompanions {
  GeogebraCommonEuclidianEuclidianController_set_companion_(self, [self newCompanion]);
}

- (GeogebraCommonEuclidianEuclidianControllerCompanion *)getCompanion {
  return companion_;
}

- (GeogebraCommonEuclidianEuclidianControllerCompanion *)newCompanion {
  return [new_GeogebraCommonEuclidianEuclidianControllerCompanion_initWithGeogebraCommonEuclidianEuclidianController_(self) autorelease];
}

- (void)startCollectingMinorRepaints {
  if (collectingRepaints_ < 0) collectingRepaints_ = 0;
  if (collectingRepaints_ == 0) collectedRepaints_ = NO;
  collectingRepaints_++;
}

- (void)stopCollectingMinorRepaints {
  collectingRepaints_--;
  if (collectingRepaints_ <= 0 && collectedRepaints_) {
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) repaintView];
    collectingRepaints_ = 0;
    collectedRepaints_ = NO;
  }
}

- (void)updatePastePreviewPosition {
  if (translationVec_ == nil) {
    GeogebraCommonEuclidianEuclidianController_setAndConsume_translationVec_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(2));
  }
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(translationVec_)) setXWithDouble:xRW_ - [self getStartPointX]];
  [translationVec_ setYWithDouble:yRW_ - [self getStartPointY]];
  [self setStartPointLocationWithDouble:xRW_ withDouble:yRW_];
  if (tmpCoordsL3_ == nil) {
    GeogebraCommonEuclidianEuclidianController_setAndConsume_tmpCoordsL3_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
  }
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoordsL3_)) setXWithDouble:xRW_];
  [tmpCoordsL3_ setYWithDouble:yRW_];
  [tmpCoordsL3_ setZWithDouble:0];
  GeogebraCommonKernelGeosGeoElement_moveObjectsWithJavaUtilArrayList_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonEuclidianEuclidianView_(pastePreviewSelected_, translationVec_, tmpCoordsL3_, nil, view_);
}

- (void)setPastePreviewSelected {
  if (pastePreviewSelected_ != nil) {
    while (![pastePreviewSelected_ isEmpty]) {
      GeogebraCommonKernelGeosGeoElement *geo = [pastePreviewSelected_ getWithInt:0];
      [pastePreviewSelected_ removeWithId:geo];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) remove];
    }
  }
  else {
    GeogebraCommonEuclidianEuclidianController_setAndConsume_pastePreviewSelected_(self, new_JavaUtilArrayList_init());
  }
  GeogebraCommonEuclidianEuclidianController_setAndConsume_pastePreviewSelectedAndDependent_(self, new_JavaUtilArrayList_init());
  [pastePreviewSelectedAndDependent_ addAllWithJavaUtilCollection:[self getAppSelectedGeos]];
  GeogebraCommonKernelGeosGeoElement *geo;
  jboolean firstMoveable = YES;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk([self getAppSelectedGeos])) size]; i++) {
    geo = [((JavaUtilArrayList *) nil_chk([self getAppSelectedGeos])) getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isIndependent] && [geo isMoveable]) {
      [((JavaUtilArrayList *) nil_chk(pastePreviewSelected_)) addWithId:geo];
      if (firstMoveable) {
        if ([geo isGeoPoint]) {
          if ([geo isKindOfClass:[GeogebraCommonKernelGeosGeoPoint class]]) {
            [self setStartPointLocationWithDouble:[((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPoint class])) getInhomX] withDouble:[((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPoint class])) getInhomY]];
          }
          else if ([geo isGeoElement3D]) {
            [self setStartPointLocationWithDouble:[((id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoPointND))) getInhomX] withDouble:[((id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoPointND))) getInhomY]];
          }
          firstMoveable = NO;
        }
        else if ([geo isGeoText]) {
          if ([((GeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoText class])) hasAbsoluteLocation]) {
            id<GeogebraCommonKernelKernelNDGeoPointND> loc = [((GeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoText class])) getStartPoint];
            [self setStartPointLocationWithDouble:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(loc)) getInhomX] withDouble:[loc getInhomY]];
            firstMoveable = NO;
          }
        }
        else if ([geo isGeoNumeric]) {
          if (![((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class])) isAbsoluteScreenLocActive]) {
            [self setStartPointLocationWithDouble:[((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class])) getRealWorldLocX] withDouble:[((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class])) getRealWorldLocY]];
            firstMoveable = NO;
          }
          else {
            [self setStartPointLocationWithDouble:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toRealWorldCoordXWithDouble:[((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class])) getAbsoluteScreenLocX]] withDouble:[view_ toRealWorldCoordYWithDouble:[((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class])) getAbsoluteScreenLocY]]];
            firstMoveable = NO;
          }
        }
        else if ([geo isGeoImage]) {
          if ([((GeogebraCommonKernelGeosGeoImage *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoImage class])) hasAbsoluteLocation]) {
            GeogebraCommonKernelGeosGeoPoint *loc = IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelGeosGeoImage *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoImage class])) getStartPoints]), 2);
            if (loc != nil) {
              [self setStartPointLocationWithDouble:loc->inhomX_ withDouble:loc->inhomY_];
              firstMoveable = NO;
            }
            else {
              loc = [((GeogebraCommonKernelGeosGeoImage *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoImage class])) getStartPoint];
              if (loc != nil) {
                [self setStartPointLocationWithDouble:loc->inhomX_ withDouble:loc->inhomY_];
                firstMoveable = NO;
              }
              else {
                loc = IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelGeosGeoImage *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoImage class])) getStartPoints]), 1);
                if (loc != nil) {
                  [self setStartPointLocationWithDouble:loc->inhomX_ withDouble:loc->inhomY_];
                  firstMoveable = NO;
                }
              }
            }
          }
        }
        else if ([geo isGeoBoolean]) {
          [self setStartPointLocationWithDouble:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toRealWorldCoordXWithDouble:[((GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoBoolean class])) getAbsoluteScreenLocX]] withDouble:[view_ toRealWorldCoordYWithDouble:[((GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoBoolean class])) getAbsoluteScreenLocY] + 20]];
          firstMoveable = NO;
        }
        else if ([GeogebraCommonKernelGeosFurniture_class_() isInstance:geo]) {
          [self setStartPointLocationWithDouble:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toRealWorldCoordXWithDouble:[((id<GeogebraCommonKernelGeosFurniture>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosFurniture))) getAbsoluteScreenLocX] - 5] withDouble:[view_ toRealWorldCoordYWithDouble:[((id<GeogebraCommonKernelGeosFurniture>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosFurniture))) getAbsoluteScreenLocY] + 30]];
          firstMoveable = NO;
        }
      }
    }
  }
  if (firstMoveable) {
    [self setStartPointLocationWithDouble:([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getXmin] + [view_ getXmax]) / 2 withDouble:([view_ getYmin] + [view_ getYmax]) / 2];
  }
  if ((pastePreviewSelected_ != nil) && ![pastePreviewSelected_ isEmpty]) {
    previousPointCapturing_ = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getPointCapturingMode];
    [view_ setPointCapturingWithInt:GeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_STICKY_POINTS];
    for (jint i = 0; i < [pastePreviewSelectedAndDependent_ size]; i++) {
      geo = [pastePreviewSelectedAndDependent_ getWithInt:i];
      if ([GeogebraCommonKernelKernelNDGeoPointND_class_() isInstance:geo]) {
        if ([((JavaUtilArrayList *) nil_chk([view_ getStickyPointList])) containsWithId:geo]) {
          [((JavaUtilArrayList *) nil_chk([view_ getStickyPointList])) removeWithId:geo];
        }
      }
    }
    GeogebraCommonEuclidianEuclidianController_setAndConsume_persistentStickyPointList_(self, new_JavaUtilArrayList_init());
    [persistentStickyPointList_ addAllWithJavaUtilCollection:[view_ getStickyPointList]];
    if (mouseLoc_ != nil) {
      [self transformCoords];
      [self updatePastePreviewPosition];
      [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
    }
  }
}

- (jboolean)mayPaste {
  if (pastePreviewSelected_ == nil) {
    return YES;
  }
  return [((JavaUtilArrayList *) nil_chk(pastePreviewSelected_)) isEmpty];
}

- (void)deletePastePreviewSelected {
  if (pastePreviewSelected_ != nil) {
    while (![pastePreviewSelected_ isEmpty]) {
      GeogebraCommonKernelGeosGeoElement *geo = [pastePreviewSelected_ getWithInt:0];
      [pastePreviewSelected_ removeWithId:geo];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) remove];
    }
    GeogebraCommonEuclidianEuclidianController_set_pastePreviewSelected_(self, nil);
  }
  if (pastePreviewSelectedAndDependent_ != nil) {
    GeogebraCommonEuclidianEuclidianController_set_pastePreviewSelectedAndDependent_(self, nil);
  }
}

- (void)mergeStickyPointsAfterPaste {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(pastePreviewSelected_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [pastePreviewSelected_ getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint] && ([geo isKindOfClass:[GeogebraCommonKernelGeosGeoPoint class]]) && [geo isIndependent]) {
      for (jint j = 0; j < [((JavaUtilArrayList *) nil_chk(persistentStickyPointList_)) size]; j++) {
        id<GeogebraCommonKernelKernelNDGeoPointND> geo2 = [persistentStickyPointList_ getWithInt:j];
        if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(geo2)) getInhomX], [((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPoint class])) getInhomX]) && GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([geo2 getInhomY], [((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPoint class])) getInhomY])) {
          [geo setEuclidianVisibleWithBoolean:NO];
          NSString *geolabel = [geo getLabelSimple];
          [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgebraProcessor])) processAlgebraCommandWithNSString:JreStrcat("$C$", [geo getLabelSimple], '=', [((GeogebraCommonKernelGeosGeoElement *) check_class_cast(geo2, [GeogebraCommonKernelGeosGeoElement class])) getLabelSimple]) withBoolean:NO];
          [((GeogebraCommonKernelGeosGeoElement *) nil_chk([kernel_ lookupLabelWithNSString:geolabel])) setEuclidianVisibleWithBoolean:NO];
          [((GeogebraCommonKernelGeosGeoElement *) nil_chk([kernel_ lookupLabelWithNSString:geolabel])) updateRepaint];
          break;
        }
      }
    }
  }
}

- (jint)getMode {
  return mode_;
}

- (jint)getMoveMode {
  return moveMode__;
}

- (void)endOfModeWithInt:(jint)endMode {
  {
    id<JavaUtilCollection> coll;
    id<JavaUtilIterator> it;
    switch (endMode) {
      case GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE:
      [self deletePastePreviewSelected];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_SHOW_HIDE_OBJECT:
      coll = [self getAppSelectedGeos];
      it = [((id<JavaUtilCollection>) nil_chk(coll)) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        GeogebraCommonKernelGeosGeoElement *geo = [it next];
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setEuclidianVisibleWithBoolean:NO];
        [geo updateRepaint];
      }
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_PEN:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_FREEHAND_SHAPE:
      [((GeogebraCommonEuclidianEuclidianPen *) nil_chk(GeogebraCommonEuclidianEuclidianController_getPen(self))) resetPenOffsets];
      [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setSelectionRectangleWithGeogebraCommonAwtGRectangle:nil];
      break;
    }
  }
  if (toggleModeChangedKernel_) {
    [((GeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
  }
}

- (void)clearSelectionWithJavaUtilArrayList:(JavaUtilArrayList *)selectionList
                                withBoolean:(jboolean)doUpdateSelection {
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(self, selectionList, doUpdateSelection);
}

- (void)clearSelectionWithJavaUtilArrayList:(JavaUtilArrayList *)selectionList {
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, selectionList);
}

- (GeogebraCommonEuclidianHits *)getRegionHitsWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getRegionHitsWithGeogebraCommonEuclidianHits:tempArrayList_];
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getSingleIntersectionPointWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty] || ([hits size] < 2)) {
    return nil;
  }
  GeogebraCommonKernelGeosGeoElement *a = [hits getWithInt:0];
  GeogebraCommonKernelGeosGeoElement *b = [hits getWithInt:1];
  return [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(companion_)) getSingleIntersectionPointWithGeogebraCommonKernelGeosGeoElement:a withGeogebraCommonKernelGeosGeoElement:b withBoolean:YES];
}

- (IOSObjectArray *)getSelectedGeos {
  return GeogebraCommonEuclidianEuclidianController_getSelectedGeos(self);
}

- (void)getSelectedPointsNDWithGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)result {
  GeogebraCommonEuclidianEuclidianController_getSelectedPointsNDWithGeogebraCommonKernelKernelNDGeoPointNDArray_(self, result);
}

- (IOSObjectArray *)getSelectedPointsND {
  return GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
}

- (IOSObjectArray *)getSelectedPoints {
  return GeogebraCommonEuclidianEuclidianController_getSelectedPoints(self);
}

- (IOSObjectArray *)getSelectedNumbers {
  return GeogebraCommonEuclidianEuclidianController_getSelectedNumbers(self);
}

- (IOSObjectArray *)getSelectedNumberValues {
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(selectedNumberValues_)) size] type:GeogebraCommonKernelArithmeticNumberValue_class_()];
  for (jint i = 0; i < [selectedNumberValues_ size]; i++) {
    IOSObjectArray_Set(ret, i, [selectedNumberValues_ getWithInt:i]);
  }
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, selectedNumberValues_);
  return ret;
}

- (IOSObjectArray *)getSelectedLists {
  return GeogebraCommonEuclidianEuclidianController_getSelectedLists(self);
}

- (IOSObjectArray *)getSelectedPolygons {
  return GeogebraCommonEuclidianEuclidianController_getSelectedPolygons(self);
}

- (IOSObjectArray *)getSelectedPolyLines {
  return GeogebraCommonEuclidianEuclidianController_getSelectedPolyLines(self);
}

- (void)getSelectedLinesNDWithGeogebraCommonKernelKernelNDGeoLineNDArray:(IOSObjectArray *)lines {
  GeogebraCommonEuclidianEuclidianController_getSelectedLinesNDWithGeogebraCommonKernelKernelNDGeoLineNDArray_(self, lines);
}

- (IOSObjectArray *)getSelectedLinesND {
  return GeogebraCommonEuclidianEuclidianController_getSelectedLinesND(self);
}

- (IOSObjectArray *)getSelectedLines {
  return GeogebraCommonEuclidianEuclidianController_getSelectedLines(self);
}

- (void)getSelectedSegmentsNDWithGeogebraCommonKernelKernelNDGeoSegmentNDArray:(IOSObjectArray *)segments {
  GeogebraCommonEuclidianEuclidianController_getSelectedSegmentsNDWithGeogebraCommonKernelKernelNDGeoSegmentNDArray_(self, segments);
}

- (IOSObjectArray *)getSelectedSegmentsND {
  return GeogebraCommonEuclidianEuclidianController_getSelectedSegmentsND(self);
}

- (IOSObjectArray *)getSelectedSegments {
  IOSObjectArray *segments = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(selectedSegments_)) size] type:GeogebraCommonKernelGeosGeoSegment_class_()];
  GeogebraCommonEuclidianEuclidianController_getSelectedSegmentsNDWithGeogebraCommonKernelKernelNDGeoSegmentNDArray_(self, segments);
  return segments;
}

- (void)getSelectedVectorsNDWithGeogebraCommonKernelKernelNDGeoVectorNDArray:(IOSObjectArray *)vectors {
  GeogebraCommonEuclidianEuclidianController_getSelectedVectorsNDWithGeogebraCommonKernelKernelNDGeoVectorNDArray_(self, vectors);
}

- (IOSObjectArray *)getSelectedVectorsND {
  return GeogebraCommonEuclidianEuclidianController_getSelectedVectorsND(self);
}

- (IOSObjectArray *)getSelectedVectors {
  IOSObjectArray *vectors = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(selectedVectors_)) size] type:GeogebraCommonKernelGeosGeoVector_class_()];
  GeogebraCommonEuclidianEuclidianController_getSelectedVectorsNDWithGeogebraCommonKernelKernelNDGeoVectorNDArray_(self, vectors);
  return vectors;
}

- (IOSObjectArray *)getSelectedConics {
  return GeogebraCommonEuclidianEuclidianController_getSelectedConics(self);
}

- (IOSObjectArray *)getSelectedCircles {
  return GeogebraCommonEuclidianEuclidianController_getSelectedCircles(self);
}

- (IOSObjectArray *)getSelectedCirclesND {
  IOSObjectArray *circles = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(selectedConicsND_)) size] type:GeogebraCommonKernelKernelNDGeoConicND_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [selectedConicsND_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelKernelNDGeoConicND *c = [it next];
    if ([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c)) isCircle]) {
      IOSObjectArray_Set(circles, i, c);
      i++;
    }
  }
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, selectedConicsND_);
  return circles;
}

- (IOSObjectArray *)getSelectedConicsND {
  return GeogebraCommonEuclidianEuclidianController_getSelectedConicsND(self);
}

- (IOSObjectArray *)getSelectedDirections {
  IOSObjectArray *directions = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(selectedDirections_)) size] type:GeogebraCommonKernelKernelNDGeoDirectionND_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [selectedDirections_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSObjectArray_Set(directions, i, [it next]);
    i++;
  }
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, selectedDirections_);
  return directions;
}

- (IOSObjectArray *)getSelectedRegions {
  return GeogebraCommonEuclidianEuclidianController_getSelectedRegions(self);
}

- (IOSObjectArray *)getSelectedPaths {
  return GeogebraCommonEuclidianEuclidianController_getSelectedPaths(self);
}

- (IOSObjectArray *)getSelectedImplicitpoly {
  return GeogebraCommonEuclidianEuclidianController_getSelectedImplicitpoly(self);
}

- (IOSObjectArray *)getSelectedFunctions {
  return GeogebraCommonEuclidianEuclidianController_getSelectedFunctions(self);
}

- (IOSObjectArray *)getSelectedCurves {
  return GeogebraCommonEuclidianEuclidianController_getSelectedCurves(self);
}

- (jboolean)allowPointCreation {
  return (mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_POINT) || (mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_POINT_ON_OBJECT) || (mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_COMPLEX_NUMBER) || [((GeogebraCommonMainApp *) nil_chk(app_)) isOnTheFlyPointCreationActive];
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)createNewPoint2DWithNSString:(NSString *)label
                                                               withBoolean:(jboolean)forPreviewable
                                              withGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>)path
                                                                withDouble:(jdouble)x
                                                                withDouble:(jdouble)y
                                                               withBoolean:(jboolean)complex
                                                               withBoolean:(jboolean)coords2D {
  [self checkZoomingWithBoolean:forPreviewable];
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) PointWithNSString:label withGeogebraCommonKernelPath:path withDouble:x withDouble:y withBoolean:!forPreviewable withBoolean:complex withBoolean:coords2D];
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)createNewPoint2DWithNSString:(NSString *)label
                                                               withBoolean:(jboolean)forPreviewable
                                            withGeogebraCommonKernelRegion:(id<GeogebraCommonKernelRegion>)region
                                                                withDouble:(jdouble)x
                                                                withDouble:(jdouble)y
                                                               withBoolean:(jboolean)complex
                                                               withBoolean:(jboolean)coords2D {
  return GeogebraCommonEuclidianEuclidianController_createNewPoint2DWithNSString_withBoolean_withGeogebraCommonKernelRegion_withDouble_withDouble_withBoolean_withBoolean_(self, label, forPreviewable, region, x, y, complex, coords2D);
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)createNewPointWithNSString:(NSString *)label
                                                             withBoolean:(jboolean)forPreviewable
                                          withGeogebraCommonKernelRegion:(id<GeogebraCommonKernelRegion>)region
                                                              withDouble:(jdouble)x
                                                              withDouble:(jdouble)y
                                                              withDouble:(jdouble)z
                                                             withBoolean:(jboolean)complex
                                                             withBoolean:(jboolean)coords2D {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([((id<GeogebraCommonKernelRegion>) nil_chk(region)) toGeoElement])) isGeoElement3D]) {
    [self checkZoomingWithBoolean:forPreviewable];
    if (tmpCoordsL4_ == nil) {
      GeogebraCommonEuclidianEuclidianController_setAndConsume_tmpCoordsL4_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
    }
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoordsL4_)) setXWithDouble:x];
    [tmpCoordsL4_ setYWithDouble:y];
    [tmpCoordsL4_ setZWithDouble:z];
    [tmpCoordsL4_ setWWithDouble:1];
    id<GeogebraCommonKernelKernelNDGeoPointND> point = [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getManager3D])) Point3DInWithNSString:label withGeogebraCommonKernelRegion:region withGeogebraCommonKernelMatrixCoords:tmpCoordsL4_ withBoolean:!forPreviewable withBoolean:coords2D];
    return point;
  }
  return GeogebraCommonEuclidianEuclidianController_createNewPoint2DWithNSString_withBoolean_withGeogebraCommonKernelRegion_withDouble_withDouble_withBoolean_withBoolean_(self, label, forPreviewable, region, x, y, complex, coords2D);
}

- (void)setKernelWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonEuclidianEuclidianController_set_kernel_(self, kernel);
}

- (GeogebraCommonKernelKernel *)getKernel {
  return kernel_;
}

- (void)clearJustCreatedGeos {
  jboolean needsUpdate = [((JavaUtilArrayList *) nil_chk(justCreatedGeos_)) size] > 0;
  [justCreatedGeos_ clear];
  if (needsUpdate) {
    [((GeogebraCommonMainApp *) nil_chk(app_)) updateStyleBars];
    if ([app_ isUsingFullGui] && [app_ getGuiManager] != nil) {
      [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) updateMenubarSelection];
    }
  }
}

- (JavaUtilArrayList *)getJustCreatedGeos {
  return justCreatedGeos_;
}

- (void)memorizeJustCreatedGeosWithJavaUtilArrayList:(JavaUtilArrayList *)geos {
  [((JavaUtilArrayList *) nil_chk(justCreatedGeos_)) clear];
  [justCreatedGeos_ addAllWithJavaUtilCollection:geos];
  if ([((GeogebraCommonMainApp *) nil_chk(app_)) isUsingFullGui] && [app_ getGuiManager] != nil) {
    [app_ updateStyleBars];
    [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) updateMenubarSelection];
  }
}

- (void)memorizeJustCreatedGeosWithGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)geos {
  [((JavaUtilArrayList *) nil_chk(justCreatedGeos_)) clear];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(geos))->size_; i++) {
    if (IOSObjectArray_Get(geos, i) != nil) {
      [justCreatedGeos_ addWithId:IOSObjectArray_Get(geos, i)];
    }
  }
  if ([((GeogebraCommonMainApp *) nil_chk(app_)) isUsingFullGui] && [app_ getGuiManager] != nil) {
    [app_ updateStyleBars];
    [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) updateMenubarSelection];
  }
}

- (void)setHighlightedGeosWithBoolean:(jboolean)highlight {
  GeogebraCommonEuclidianEuclidianController_setHighlightedGeosWithBoolean_(self, highlight);
}

- (void)doSingleHighlightingWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (geo == nil) {
    return;
  }
  if ([((GeogebraCommonEuclidianHits *) nil_chk(highlightedGeos_)) size] > 0) {
    GeogebraCommonEuclidianEuclidianController_setHighlightedGeosWithBoolean_(self, NO);
  }
  [highlightedGeos_ addWithId:geo];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setHighlightedWithBoolean:YES];
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
}

- (jboolean)mouseIsOverLabel {
  return mouseIsOverLabel__;
}

- (void)removeParentPointsWithJavaUtilArrayList:(JavaUtilArrayList *)selGeos {
  [((GeogebraCommonEuclidianHits *) nil_chk(tempArrayList_)) clear];
  [tempArrayList_ addAllWithJavaUtilCollection:selGeos];
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(selGeos)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [selGeos getWithInt:i];
    {
      GeogebraCommonKernelGeosGeoLine *line;
      GeogebraCommonKernelGeosGeoConicPart *cp;
      JavaUtilArrayList *ip;
      GeogebraCommonKernelGeosGeoPolygon *poly;
      IOSObjectArray *points;
      IOSObjectArray *segs;
      GeogebraCommonKernelGeosGeoPolyLine *polyl;
      switch ([[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getGeoClassType] ordinal]) {
        case GeogebraCommonPluginGeoClass_SEGMENT:
        case GeogebraCommonPluginGeoClass_RAY:
        line = (GeogebraCommonKernelGeosGeoLine *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoLine class]);
        [tempArrayList_ removeWithId:[line getStartPoint]];
        [tempArrayList_ removeWithId:[line getEndPoint]];
        break;
        case GeogebraCommonPluginGeoClass_CONICPART:
        cp = (GeogebraCommonKernelGeosGeoConicPart *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoConicPart class]);
        ip = [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([cp getParentAlgorithm])) getInputPoints];
        [tempArrayList_ removeAllWithJavaUtilCollection:ip];
        break;
        case GeogebraCommonPluginGeoClass_POLYGON:
        poly = (GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPolygon class]);
        points = [poly getPoints];
        for (jint k = 0; k < ((IOSObjectArray *) nil_chk(points))->size_; k++) {
          [tempArrayList_ removeWithId:IOSObjectArray_Get(points, k)];
        }
        segs = [poly getSegments];
        for (jint k = 0; k < ((IOSObjectArray *) nil_chk(segs))->size_; k++) {
          [tempArrayList_ removeWithId:IOSObjectArray_Get(segs, k)];
        }
        break;
        case GeogebraCommonPluginGeoClass_PENSTROKE:
        case GeogebraCommonPluginGeoClass_POLYLINE:
        polyl = (GeogebraCommonKernelGeosGeoPolyLine *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPolyLine class]);
        points = [polyl getPoints];
        for (jint k = 0; k < ((IOSObjectArray *) nil_chk(points))->size_; k++) {
          [tempArrayList_ removeWithId:IOSObjectArray_Get(points, k)];
        }
        break;
      }
    }
  }
  [selGeos clear];
  [selGeos addAllWithJavaUtilCollection:tempArrayList_];
}

- (jint)addToSelectionListWithJavaUtilArrayList:(JavaUtilArrayList *)selectionList
                                         withId:(id)geo
                                        withInt:(jint)max {
  return GeogebraCommonEuclidianEuclidianController_addToSelectionListWithJavaUtilArrayList_withId_withInt_(self, selectionList, geo, max);
}

- (jint)addToHighlightedListWithJavaUtilArrayList:(JavaUtilArrayList *)selectionList
                            withJavaUtilArrayList:(JavaUtilArrayList *)geos
                                          withInt:(jint)max {
  return GeogebraCommonEuclidianEuclidianController_addToHighlightedListWithJavaUtilArrayList_withJavaUtilArrayList_withInt_(self, selectionList, geos, max);
}

- (GeogebraCommonKernelGeosGeoElement *)chooseGeoWithJavaUtilArrayList:(JavaUtilArrayList *)geos
                                                           withBoolean:(jboolean)includeFixed {
  return [self chooseGeoWithJavaUtilArrayList:geos withBoolean:includeFixed withBoolean:YES];
}

- (GeogebraCommonKernelGeosGeoElement *)chooseGeoWithJavaUtilArrayList:(JavaUtilArrayList *)geos
                                                           withBoolean:(jboolean)includeFixed
                                                           withBoolean:(jboolean)includeConstants {
  if (geos == nil) {
    return nil;
  }
  if ([((JavaUtilArrayList *) nil_chk(geos)) size] > 1 || !includeConstants) {
    GeogebraCommonEuclidianEuclidianController_removeAxesWithJavaUtilArrayList_(geos);
  }
  GeogebraCommonKernelGeosGeoElement *ret = nil;
  GeogebraCommonKernelGeosGeoElement *retFree = nil;
  GeogebraCommonKernelGeosGeoElement *retPath = nil;
  GeogebraCommonKernelGeosGeoElement *retIndex = nil;
  GeogebraCommonKernelGeosGeoElement *retSegment = nil;
  {
    jint maxLayer;
    jint layerCount;
    jint pointCount;
    jint freePointCount;
    jint pointOnPathCount;
    jint segmentCount;
    jint minIndex;
    jboolean allFixed;
    switch ([geos size]) {
      case 0:
      break;
      case 1:
      ret = [geos getWithInt:0];
      if (!includeFixed && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(ret)) isFixed]) {
        return nil;
      }
      break;
      default:
      maxLayer = -1;
      layerCount = 0;
      for (jint i = 0; i < [geos size]; i++) {
        GeogebraCommonKernelGeosGeoElement *geo = ([geos getWithInt:i]);
        jint layer = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLayer];
        if ((layer > maxLayer) && (includeFixed || ![geo isFixed])) {
          maxLayer = layer;
          layerCount = 1;
          ret = geo;
        }
        else if (layer == maxLayer) {
          layerCount++;
        }
      }
      if (layerCount == 1) {
        return ret;
      }
      pointCount = 0;
      freePointCount = 0;
      pointOnPathCount = 0;
      segmentCount = 0;
      minIndex = JavaLangInteger_MAX_VALUE;
      for (jint i = 0; i < [geos size]; i++) {
        GeogebraCommonKernelGeosGeoElement *geo = ([geos getWithInt:i]);
        if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint] && ([geo getLayer] == maxLayer) && (includeFixed || ![geo isFixed])) {
          pointCount++;
          ret = geo;
          jint index = [geo getConstructionIndex];
          if (index < minIndex) {
            minIndex = index;
            retIndex = geo;
          }
          if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoPointND))) isPointOnPath] || [((id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoPointND))) isPointInRegion]) {
            pointOnPathCount++;
            if (retPath == nil) {
              retPath = geo;
            }
            else {
              if ([geo getConstructionIndex] > [retPath getConstructionIndex]) {
                retPath = geo;
              }
            }
          }
          if ([geo isIndependent]) {
            freePointCount++;
            if (retFree == nil) {
              retFree = geo;
            }
            else {
              if ([geo getConstructionIndex] > [retFree getConstructionIndex]) {
                retFree = geo;
              }
            }
          }
        }
      }
      if (pointOnPathCount > 0) {
        return retPath;
      }
      if (freePointCount > 0) {
        return retFree;
      }
      if (pointCount == 1) {
        return ret;
      }
      if (pointCount > 1) {
        return retIndex;
      }
      allFixed = NO;
      if (!includeFixed && ([geos size] > 1)) {
        allFixed = YES;
        for (jint i = 0; i < [geos size]; i++) {
          if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk([geos getWithInt:i])) isFixed]) {
            allFixed = NO;
          }
        }
        if (!allFixed) {
          for (jint i = [geos size] - 1; i >= 0; i--) {
            GeogebraCommonKernelGeosGeoElement *geo = [geos getWithInt:i];
            if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isFixed]) {
              [geos removeWithInt:i];
            }
          }
        }
        if ([geos size] == 1) {
          return [geos getWithInt:0];
        }
      }
      for (jint i = 0; i < [geos size]; i++) {
        GeogebraCommonKernelGeosGeoElement *geo = ([geos getWithInt:i]);
        if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoSegment]) {
          segmentCount++;
          if (retSegment == nil) {
            retSegment = geo;
          }
          else {
            if (([retSegment getLayer] < [geo getLayer]) || (([retSegment getLayer] == [geo getLayer]) && ([retSegment getConstructionIndex] > [geo getConstructionIndex]))) {
              retSegment = geo;
            }
          }
        }
      }
      if (segmentCount > 0) {
        return retSegment;
      }
      if (!includeFixed && allFixed) {
        return nil;
      }
      ret = [geos getWithInt:0];
      for (jint i = 0; i < [geos size]; i++) {
        if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([geos getWithInt:i])) drawBeforeWithGeogebraCommonKernelGeosGeoElement:ret withBoolean:YES]) {
          ret = [geos getWithInt:i];
        }
      }
    }
  }
  return ret;
}

- (GeogebraCommonKernelGeosGeoElement *)chooseGeoWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                            withGeogebraCommonKernelGeosTestEnum:(GeogebraCommonKernelGeosTestEnum *)geoclass {
  return [self chooseGeoWithJavaUtilArrayList:[((GeogebraCommonEuclidianHits *) nil_chk(hits)) getHitsWithGeogebraCommonKernelGeosTestEnum:geoclass withGeogebraCommonEuclidianHits:tempArrayList_] withBoolean:YES];
}

- (jint)addToSelectionListWithJavaUtilArrayList:(JavaUtilArrayList *)selectionList
                          withJavaUtilArrayList:(JavaUtilArrayList *)geos
                                        withInt:(jint)max
                                    withBoolean:(jboolean)addMoreThanOneAllowed
                                    withBoolean:(jboolean)tryDeselect {
  return GeogebraCommonEuclidianEuclidianController_addToSelectionListWithJavaUtilArrayList_withJavaUtilArrayList_withInt_withBoolean_withBoolean_(self, selectionList, geos, max, addMoreThanOneAllowed, tryDeselect);
}

- (jint)selGeos {
  return GeogebraCommonEuclidianEuclidianController_selGeos(self);
}

- (jint)selPoints {
  return GeogebraCommonEuclidianEuclidianController_selPoints(self);
}

- (jint)selNumbers {
  return GeogebraCommonEuclidianEuclidianController_selNumbers(self);
}

- (jint)selNumberValues {
  return [((JavaUtilArrayList *) nil_chk(selectedNumberValues_)) size];
}

- (jint)selLists {
  return GeogebraCommonEuclidianEuclidianController_selLists(self);
}

- (jint)selPolyLines {
  return GeogebraCommonEuclidianEuclidianController_selPolyLines(self);
}

- (jint)selPolygons {
  return GeogebraCommonEuclidianEuclidianController_selPolygons(self);
}

- (jint)selLines {
  return GeogebraCommonEuclidianEuclidianController_selLines(self);
}

- (jint)selDirections {
  return [((JavaUtilArrayList *) nil_chk(selectedDirections_)) size];
}

- (jint)selSegments {
  return GeogebraCommonEuclidianEuclidianController_selSegments(self);
}

- (jint)selVectors {
  return GeogebraCommonEuclidianEuclidianController_selVectors(self);
}

- (jint)selConics {
  return GeogebraCommonEuclidianEuclidianController_selConics(self);
}

- (jint)selPaths {
  return GeogebraCommonEuclidianEuclidianController_selPaths(self);
}

- (jint)selRegions {
  return GeogebraCommonEuclidianEuclidianController_selRegions(self);
}

- (jint)selImplicitpoly {
  return GeogebraCommonEuclidianEuclidianController_selImplicitpoly(self);
}

- (jint)selFunctions {
  return GeogebraCommonEuclidianEuclidianController_selFunctions(self);
}

- (jint)selCurves {
  return GeogebraCommonEuclidianEuclidianController_selCurves(self);
}

- (jint)handleAddSelectedWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                 withInt:(jint)max
                                             withBoolean:(jboolean)addMore
                                   withJavaUtilArrayList:(JavaUtilArrayList *)list
                    withGeogebraCommonKernelGeosTestEnum:(GeogebraCommonKernelGeosTestEnum *)geoClass {
  if (selectionPreview_) {
    return GeogebraCommonEuclidianEuclidianController_addToHighlightedListWithJavaUtilArrayList_withJavaUtilArrayList_withInt_(self, list, [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getHitsWithGeogebraCommonKernelGeosTestEnum:geoClass withGeogebraCommonEuclidianHits:handleAddSelectedArrayList_], max);
  }
  return GeogebraCommonEuclidianEuclidianController_addToSelectionListWithJavaUtilArrayList_withJavaUtilArrayList_withInt_withBoolean_withBoolean_(self, list, [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getHitsWithGeogebraCommonKernelGeosTestEnum:geoClass withGeogebraCommonEuclidianHits:handleAddSelectedArrayList_], max, addMore, [hits size] == 1);
}

- (jint)handleAddSelectedRegionsWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                        withInt:(jint)max
                                                    withBoolean:(jboolean)addMore
                                          withJavaUtilArrayList:(JavaUtilArrayList *)list {
  if (selectionPreview_) {
    return GeogebraCommonEuclidianEuclidianController_addToHighlightedListWithJavaUtilArrayList_withJavaUtilArrayList_withInt_(self, list, [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getRegionHitsWithGeogebraCommonEuclidianHits:handleAddSelectedArrayList_], max);
  }
  return GeogebraCommonEuclidianEuclidianController_addToSelectionListWithJavaUtilArrayList_withJavaUtilArrayList_withInt_withBoolean_withBoolean_(self, list, [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getRegionHitsWithGeogebraCommonEuclidianHits:handleAddSelectedArrayList_], max, addMore, [hits size] == 1);
}

- (jint)addSelectedGeoWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                              withInt:(jint)max
                                          withBoolean:(jboolean)addMoreThanOneAllowed {
  return GeogebraCommonEuclidianEuclidianController_addSelectedGeoWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (jint)addSelectedPointWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                withInt:(jint)max
                                            withBoolean:(jboolean)addMoreThanOneAllowed {
  return GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (jint)addSelectedNumericWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                  withInt:(jint)max
                                              withBoolean:(jboolean)addMoreThanOneAllowed {
  return GeogebraCommonEuclidianEuclidianController_addSelectedNumericWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (jint)addSelectedNumberValueWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                      withInt:(jint)max
                                                  withBoolean:(jboolean)addMoreThanOneAllowed {
  return [self handleAddSelectedWithGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:selectedNumberValues_ withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_NUMBERVALUE()];
}

- (jint)addSelectedLineWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                               withInt:(jint)max
                                           withBoolean:(jboolean)addMoreThanOneAllowed {
  return GeogebraCommonEuclidianEuclidianController_addSelectedLineWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (jint)addSelectedSegmentWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                  withInt:(jint)max
                                              withBoolean:(jboolean)addMoreThanOneAllowed {
  return GeogebraCommonEuclidianEuclidianController_addSelectedSegmentWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (jint)addSelectedVectorWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                 withInt:(jint)max
                                             withBoolean:(jboolean)addMoreThanOneAllowed {
  return GeogebraCommonEuclidianEuclidianController_addSelectedVectorWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (jint)addSelectedVectorWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                 withInt:(jint)max
                                             withBoolean:(jboolean)addMoreThanOneAllowed
                    withGeogebraCommonKernelGeosTestEnum:(GeogebraCommonKernelGeosTestEnum *)geoClass {
  return GeogebraCommonEuclidianEuclidianController_addSelectedVectorWithGeogebraCommonEuclidianHits_withInt_withBoolean_withGeogebraCommonKernelGeosTestEnum_(self, hits, max, addMoreThanOneAllowed, geoClass);
}

- (jint)addSelectedPathWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                               withInt:(jint)max
                                           withBoolean:(jboolean)addMoreThanOneAllowed {
  return GeogebraCommonEuclidianEuclidianController_addSelectedPathWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (jint)addSelectedRegionWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                 withInt:(jint)max
                                             withBoolean:(jboolean)addMoreThanOneAllowed {
  return GeogebraCommonEuclidianEuclidianController_addSelectedRegionWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (jint)addSelectedImplicitpolyWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                       withInt:(jint)max
                                                   withBoolean:(jboolean)addMoreThanOneAllowed {
  return GeogebraCommonEuclidianEuclidianController_addSelectedImplicitpolyWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (jint)addSelectedPolygonWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                  withInt:(jint)max
                                              withBoolean:(jboolean)addMoreThanOneAllowed {
  return GeogebraCommonEuclidianEuclidianController_addSelectedPolygonWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (jint)addSelectedPolyLineWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                   withInt:(jint)max
                                               withBoolean:(jboolean)addMoreThanOneAllowed {
  return GeogebraCommonEuclidianEuclidianController_addSelectedPolyLineWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (jint)addSelectedListWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                               withInt:(jint)max
                                           withBoolean:(jboolean)addMoreThanOneAllowed {
  return GeogebraCommonEuclidianEuclidianController_addSelectedListWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (jint)addSelectedDirectionWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                    withInt:(jint)max
                                                withBoolean:(jboolean)addMoreThanOneAllowed {
  return [self handleAddSelectedWithGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:selectedDirections_ withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEODIRECTIONND()];
}

- (jint)addSelectedCircleWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                 withInt:(jint)max
                                             withBoolean:(jboolean)addMoreThanOneAllowed {
  JavaUtilArrayList *selectedCircles = [new_JavaUtilArrayList_init() autorelease];
  for (id __strong c in nil_chk(selectedConicsND_)) {
    if ([((GeogebraCommonKernelGeosGeoConic *) nil_chk(((GeogebraCommonKernelGeosGeoConic *) check_class_cast(c, [GeogebraCommonKernelGeosGeoConic class])))) isCircle]) {
      [selectedCircles addWithId:(GeogebraCommonKernelGeosGeoConic *) check_class_cast(c, [GeogebraCommonKernelGeosGeoConic class])];
    }
  }
  return [self handleAddSelectedWithGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:selectedCircles withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOCONIC()];
}

- (jint)addSelectedConicWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                withInt:(jint)max
                                            withBoolean:(jboolean)addMoreThanOneAllowed {
  return GeogebraCommonEuclidianEuclidianController_addSelectedConicWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (jint)addSelectedFunctionWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                   withInt:(jint)max
                                               withBoolean:(jboolean)addMoreThanOneAllowed {
  return GeogebraCommonEuclidianEuclidianController_addSelectedFunctionWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (jint)addSelectedCurveWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                withInt:(jint)max
                                            withBoolean:(jboolean)addMoreThanOneAllowed {
  return GeogebraCommonEuclidianEuclidianController_addSelectedCurveWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (void)createNewPointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)sourcePoint {
}

- (void)createNewPointIntersectionWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)intersectionPoint {
}

- (IOSObjectArray *)joinWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_joinWithGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)join {
  IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
  IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(points), 0), [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, 1), [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) {
    IOSObjectArray_Set(ret, 0, [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) Line3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1)]);
  }
  else {
    IOSObjectArray_Set(ret, 0, [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) LineWithNSString:nil withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, 0), [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, 1), [GeogebraCommonKernelGeosGeoPoint class])]);
  }
  return ret;
}

- (void)updateMovedGeoPointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  GeogebraCommonEuclidianEuclidianController_set_movedGeoPoint_(self, point);
}

- (IOSObjectArray *)ray {
  IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
  IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(points), 0), [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, 1), [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) {
    IOSObjectArray_Set(ret, 0, [((id<GeogebraCommonKernelKernelNDGeoRayND>) nil_chk([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) Ray3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1)])) toGeoElement]);
  }
  else {
    IOSObjectArray_Set(ret, 0, [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) RayWithNSString:nil withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, 0), [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, 1), [GeogebraCommonKernelGeosGeoPoint class])]);
  }
  return ret;
}

- (IOSObjectArray *)segmentWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_segmentWithGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)segment {
  return GeogebraCommonEuclidianEuclidianController_segment(self);
}

- (IOSObjectArray *)vectorWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_vectorWithGeogebraCommonEuclidianHits_(self, hits);
}

- (GeogebraCommonKernelGeosGeoElement *)vectorWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)a
                                              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)b {
  [self checkZooming];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(a, [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(b, [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) {
    return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getManager3D])) Vector3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:a withGeogebraCommonKernelKernelNDGeoPointND:b];
  }
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) VectorWithNSString:nil withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(a, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(b, [GeogebraCommonKernelGeosGeoPoint class])];
}

- (IOSObjectArray *)rayWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_rayWithGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)polygonWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_polygonWithGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)polylineWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_polylineWithGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)polygon {
  [self checkZooming];
  if (polygonMode_ == GeogebraCommonEuclidianEuclidianController_POLYGON_RIGID) {
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    IOSObjectArray *ret0 = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) RigidPolygonWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoPointNDArray:GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self)];
    if (ret0 != nil) {
      IOSObjectArray_Set(ret, 0, IOSObjectArray_Get(ret0, 0));
    }
    return ret;
  }
  else if (polygonMode_ == GeogebraCommonEuclidianEuclidianController_POLYGON_VECTOR) {
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    IOSObjectArray *ret0 = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) VectorPolygonWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoPointNDArray:GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self)];
    if (ret0 != nil) {
      IOSObjectArray_Set(ret, 0, IOSObjectArray_Get(ret0, 0));
    }
    return ret;
  }
  else {
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    IOSObjectArray *ret0 = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) PolygonWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoPointNDArray:GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self)];
    if (ret0 != nil) {
      IOSObjectArray_Set(ret, 0, IOSObjectArray_Get(ret0, 0));
    }
    return ret;
  }
}

- (IOSObjectArray *)intersectWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)intersectHits {
  GeogebraCommonEuclidianHits *hits = intersectHits;
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) size] > 2) {
    GeogebraCommonEuclidianEuclidianController_removeAxesWithJavaUtilArrayList_(hits);
  }
  if ([hits isEmpty]) {
    return nil;
  }
  jboolean singlePointWanted = GeogebraCommonEuclidianEuclidianController_selGeos(self) == 0;
  if (!selectionPreview_ && ([hits size] > (2 - GeogebraCommonEuclidianEuclidianController_selGeos(self)))) {
    GeogebraCommonEuclidianHits *goodHits = [new_GeogebraCommonEuclidianHits_init() autorelease];
    [hits getHitsWithGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOLINEND() withGeogebraCommonEuclidianHits:tempArrayList_];
    [goodHits addAllWithJavaUtilCollection:tempArrayList_];
    if ([goodHits size] < 2) {
      [hits getHitsWithGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOCONICND() withGeogebraCommonEuclidianHits:tempArrayList_];
      [goodHits addAllWithJavaUtilCollection:tempArrayList_];
    }
    if ([goodHits size] < 2) {
      [hits getHitsWithGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOFUNCTION() withGeogebraCommonEuclidianHits:tempArrayList_];
      [goodHits addAllWithJavaUtilCollection:tempArrayList_];
    }
    if ([goodHits size] < 2) {
      [hits getHitsWithGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOPOLYGON() withGeogebraCommonEuclidianHits:tempArrayList_];
      [goodHits addAllWithJavaUtilCollection:tempArrayList_];
    }
    if ([goodHits size] < 2) {
      [hits getHitsWithGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOPOLYLINE() withGeogebraCommonEuclidianHits:tempArrayList_];
      [goodHits addAllWithJavaUtilCollection:tempArrayList_];
    }
    hits = goodHits;
  }
  GeogebraCommonEuclidianEuclidianController_addSelectedLineWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 10, YES);
  GeogebraCommonEuclidianEuclidianController_addSelectedConicWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 10, YES);
  GeogebraCommonEuclidianEuclidianController_addSelectedFunctionWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 10, YES);
  GeogebraCommonEuclidianEuclidianController_addSelectedImplicitpolyWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 10, YES);
  GeogebraCommonEuclidianEuclidianController_addSelectedPolygonWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 10, YES);
  GeogebraCommonEuclidianEuclidianController_addSelectedPolyLineWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 10, YES);
  GeogebraCommonEuclidianEuclidianController_addSelectedCurveWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 10, YES);
  singlePointWanted = (singlePointWanted && (GeogebraCommonEuclidianEuclidianController_selGeos(self) >= 2));
  if (GeogebraCommonEuclidianEuclidianController_selLines(self) >= 2) {
    IOSObjectArray *lines = GeogebraCommonEuclidianEuclidianController_getSelectedLinesND(self);
    [self checkZooming];
    id<GeogebraCommonKernelKernelNDGeoPointND> point = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLinesWithNSString:nil withGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(lines), 0) withGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(lines, 1)];
    GeogebraCommonEuclidianEuclidianController_checkCoordCartesianWithGeogebraCommonKernelKernelNDGeoPointND_(point);
    return [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  }
  else if (GeogebraCommonEuclidianEuclidianController_selConics(self) >= 2) {
    IOSObjectArray *conics = GeogebraCommonEuclidianEuclidianController_getSelectedConicsND(self);
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    if (singlePointWanted) {
      [self checkZooming];
      IOSObjectArray_Set(ret, 0, [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectConicsSingleWithNSString:nil withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(nil_chk(conics), 0), [GeogebraCommonKernelGeosGeoConic class]) withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(conics, 1), [GeogebraCommonKernelGeosGeoConic class]) withDouble:xRW_ withDouble:yRW_]);
      GeogebraCommonEuclidianEuclidianController_checkCoordCartesianWithGeogebraCommonKernelKernelNDGeoPointND_((id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(ret, 0), @protocol(GeogebraCommonKernelKernelNDGeoPointND)));
    }
    else {
      ret = (IOSObjectArray *) check_class_cast([((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectConicsWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(nil_chk(conics), 0) withGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(conics, 1)], [IOSObjectArray class]);
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(ret))->size_; i++) {
        GeogebraCommonEuclidianEuclidianController_checkCoordCartesianWithGeogebraCommonKernelKernelNDGeoPointND_((id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(ret, i), @protocol(GeogebraCommonKernelKernelNDGeoPointND)));
      }
    }
    return ret;
  }
  else if (GeogebraCommonEuclidianEuclidianController_selFunctions(self) >= 2) {
    IOSObjectArray *fun = GeogebraCommonEuclidianEuclidianController_getSelectedFunctions(self);
    jboolean polynomials = [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(IOSObjectArray_Get(nil_chk(fun), 0))) isPolynomialFunctionWithBoolean:NO] && [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(IOSObjectArray_Get(fun, 1))) isPolynomialFunctionWithBoolean:NO];
    if (!polynomials) {
      GeogebraCommonKernelGeosGeoPoint *initPoint = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction]) autorelease];
      [initPoint setCoordsWithDouble:xRW_ withDouble:yRW_ withDouble:1.0];
      [self checkZooming];
      return [IOSObjectArray arrayWithObjects:(id[]){ [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectFunctionsWithNSString:nil withGeogebraCommonKernelGeosGeoFunction:IOSObjectArray_Get(fun, 0) withGeogebraCommonKernelGeosGeoFunction:IOSObjectArray_Get(fun, 1) withGeogebraCommonKernelGeosGeoPoint:initPoint] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    }
    if (singlePointWanted) {
      [self checkZooming];
      return [IOSObjectArray arrayWithObjects:(id[]){ [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectPolynomialsSingleWithNSString:nil withGeogebraCommonKernelGeosGeoFunction:IOSObjectArray_Get(fun, 0) withGeogebraCommonKernelGeosGeoFunction:IOSObjectArray_Get(fun, 1) withDouble:xRW_ withDouble:yRW_] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    }
    return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectPolynomialsWithNSStringArray:nil withGeogebraCommonKernelGeosGeoFunction:IOSObjectArray_Get(fun, 0) withGeogebraCommonKernelGeosGeoFunction:IOSObjectArray_Get(fun, 1)];
  }
  else if ((GeogebraCommonEuclidianEuclidianController_selLines(self) >= 1) && (GeogebraCommonEuclidianEuclidianController_selConics(self) >= 1)) {
    IOSObjectArray *conic = GeogebraCommonEuclidianEuclidianController_getSelectedConicsND(self);
    IOSObjectArray *line = GeogebraCommonEuclidianEuclidianController_getSelectedLinesND(self);
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    [self checkZooming];
    if (singlePointWanted) {
      IOSObjectArray_Set(ret, 0, [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLineConicSingleWithNSString:nil withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(nil_chk(line), 0), [GeogebraCommonKernelGeosGeoLine class]) withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(nil_chk(conic), 0), [GeogebraCommonKernelGeosGeoConic class]) withDouble:xRW_ withDouble:yRW_]);
      GeogebraCommonEuclidianEuclidianController_checkCoordCartesianWithGeogebraCommonKernelKernelNDGeoPointND_((id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(ret, 0), @protocol(GeogebraCommonKernelKernelNDGeoPointND)));
    }
    else {
      ret = (IOSObjectArray *) check_class_cast([((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLineConicWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(line), 0) withGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(nil_chk(conic), 0)], [IOSObjectArray class]);
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(ret))->size_; i++) {
        GeogebraCommonEuclidianEuclidianController_checkCoordCartesianWithGeogebraCommonKernelKernelNDGeoPointND_((id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(ret, i), @protocol(GeogebraCommonKernelKernelNDGeoPointND)));
      }
    }
    return ret;
  }
  else if ((GeogebraCommonEuclidianEuclidianController_selLines(self) >= 1) && (GeogebraCommonEuclidianEuclidianController_selPolyLines(self) >= 1)) {
    GeogebraCommonKernelGeosGeoLine *line = IOSObjectArray_Get(nil_chk(GeogebraCommonEuclidianEuclidianController_getSelectedLines(self)), 0);
    GeogebraCommonKernelGeosGeoPolyLine *polyLine = IOSObjectArray_Get(nil_chk(GeogebraCommonEuclidianEuclidianController_getSelectedPolyLines(self)), 0);
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    [self checkZooming];
    ret = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLinePolyLineWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:NSString_class_()] withGeogebraCommonKernelGeosGeoLine:line withGeogebraCommonKernelGeosGeoPolyLine:polyLine];
    return ret;
  }
  else if ((GeogebraCommonEuclidianEuclidianController_selLines(self) >= 1) && (GeogebraCommonEuclidianEuclidianController_selCurves(self) >= 1)) {
    GeogebraCommonKernelGeosGeoLine *line = IOSObjectArray_Get(nil_chk(GeogebraCommonEuclidianEuclidianController_getSelectedLines(self)), 0);
    GeogebraCommonKernelGeosGeoCurveCartesian *curve = IOSObjectArray_Get(nil_chk(GeogebraCommonEuclidianEuclidianController_getSelectedCurves(self)), 0);
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    [self checkZooming];
    ret = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLineCurveWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:NSString_class_()] withGeogebraCommonKernelGeosGeoLine:line withGeogebraCommonKernelGeosGeoCurveCartesian:curve];
    return ret;
  }
  else if ((GeogebraCommonEuclidianEuclidianController_selCurves(self) >= 2)) {
    IOSObjectArray *curves = GeogebraCommonEuclidianEuclidianController_getSelectedCurves(self);
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    [self checkZooming];
    if (singlePointWanted) {
      ret = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectCurveCurveSingleWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:NSString_class_()] withGeogebraCommonKernelGeosGeoCurveCartesian:IOSObjectArray_Get(nil_chk(curves), 0) withGeogebraCommonKernelGeosGeoCurveCartesian:IOSObjectArray_Get(curves, 1) withDouble:xRW_ withDouble:yRW_];
    }
    else {
      ret = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectCurveCurveWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:NSString_class_()] withGeogebraCommonKernelGeosGeoCurveCartesian:IOSObjectArray_Get(nil_chk(curves), 0) withGeogebraCommonKernelGeosGeoCurveCartesian:IOSObjectArray_Get(curves, 1)];
    }
    return ret;
  }
  else if ((GeogebraCommonEuclidianEuclidianController_selLines(self) >= 1) && (GeogebraCommonEuclidianEuclidianController_selPolygons(self) >= 1)) {
    GeogebraCommonKernelGeosGeoLine *line = IOSObjectArray_Get(nil_chk(GeogebraCommonEuclidianEuclidianController_getSelectedLines(self)), 0);
    GeogebraCommonKernelGeosGeoPolygon *polygon = IOSObjectArray_Get(nil_chk(GeogebraCommonEuclidianEuclidianController_getSelectedPolygons(self)), 0);
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    [self checkZooming];
    ret = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLinePolygonWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:NSString_class_()] withGeogebraCommonKernelGeosGeoLine:line withGeogebraCommonKernelGeosGeoPolygon:polygon];
    return ret;
  }
  else if ((GeogebraCommonEuclidianEuclidianController_selLines(self) >= 1) && (GeogebraCommonEuclidianEuclidianController_selFunctions(self) >= 1)) {
    IOSObjectArray *line = GeogebraCommonEuclidianEuclidianController_getSelectedLines(self);
    IOSObjectArray *fun = GeogebraCommonEuclidianEuclidianController_getSelectedFunctions(self);
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    [self checkZooming];
    if ([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(IOSObjectArray_Get(nil_chk(fun), 0))) isPolynomialFunctionWithBoolean:NO]) {
      if (singlePointWanted) {
        IOSObjectArray_Set(ret, 0, [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectPolynomialLineSingleWithNSString:nil withGeogebraCommonKernelGeosGeoFunction:IOSObjectArray_Get(fun, 0) withGeogebraCommonKernelGeosGeoLine:IOSObjectArray_Get(nil_chk(line), 0) withDouble:xRW_ withDouble:yRW_]);
      }
      else {
        ret = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectPolynomialLineWithNSStringArray:nil withGeogebraCommonKernelGeosGeoFunction:IOSObjectArray_Get(fun, 0) withGeogebraCommonKernelGeosGeoLine:IOSObjectArray_Get(nil_chk(line), 0)];
      }
    }
    else {
      GeogebraCommonKernelGeosGeoPoint *initPoint = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction]) autorelease];
      [initPoint setCoordsWithDouble:xRW_ withDouble:yRW_ withDouble:1.0];
      IOSObjectArray_Set(ret, 0, [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectFunctionLineWithNSString:nil withGeogebraCommonKernelGeosGeoFunction:IOSObjectArray_Get(fun, 0) withGeogebraCommonKernelGeosGeoLine:IOSObjectArray_Get(nil_chk(line), 0) withGeogebraCommonKernelGeosGeoPoint:initPoint]);
    }
    return ret;
  }
  else if ((GeogebraCommonEuclidianEuclidianController_selFunctions(self) >= 1) && (GeogebraCommonEuclidianEuclidianController_selConics(self) >= 1)) {
    IOSObjectArray *conic = GeogebraCommonEuclidianEuclidianController_getSelectedConics(self);
    IOSObjectArray *fun = GeogebraCommonEuclidianEuclidianController_getSelectedFunctions(self);
    [self checkZooming];
    if (singlePointWanted) {
      return [IOSObjectArray arrayWithObjects:(id[]){ [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectPolynomialConicSingleWithNSString:nil withGeogebraCommonKernelGeosGeoFunction:IOSObjectArray_Get(nil_chk(fun), 0) withGeogebraCommonKernelGeosGeoConic:IOSObjectArray_Get(nil_chk(conic), 0) withDouble:xRW_ withDouble:yRW_] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    }
    return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectPolynomialConicWithNSStringArray:nil withGeogebraCommonKernelGeosGeoFunction:IOSObjectArray_Get(nil_chk(fun), 0) withGeogebraCommonKernelGeosGeoConic:IOSObjectArray_Get(nil_chk(conic), 0)];
  }
  else if (GeogebraCommonEuclidianEuclidianController_selImplicitpoly(self) >= 1) {
    if (GeogebraCommonEuclidianEuclidianController_selFunctions(self) >= 1) {
      GeogebraCommonKernelImplicitGeoImplicitPoly *p = IOSObjectArray_Get(nil_chk(GeogebraCommonEuclidianEuclidianController_getSelectedImplicitpoly(self)), 0);
      GeogebraCommonKernelGeosGeoFunction *fun = IOSObjectArray_Get(nil_chk(GeogebraCommonEuclidianEuclidianController_getSelectedFunctions(self)), 0);
      [self checkZooming];
      if (singlePointWanted) {
        return [IOSObjectArray arrayWithObjects:(id[]){ [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectImplicitpolyPolynomialSingleWithNSString:nil withGeogebraCommonKernelImplicitGeoImplicitPoly:p withGeogebraCommonKernelGeosGeoFunction:fun withDouble:xRW_ withDouble:yRW_] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      }
      return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectImplicitpolyPolynomialWithNSStringArray:nil withGeogebraCommonKernelImplicitGeoImplicitPoly:p withGeogebraCommonKernelGeosGeoFunction:fun];
    }
    else if (GeogebraCommonEuclidianEuclidianController_selLines(self) >= 1) {
      GeogebraCommonKernelImplicitGeoImplicitPoly *p = IOSObjectArray_Get(nil_chk(GeogebraCommonEuclidianEuclidianController_getSelectedImplicitpoly(self)), 0);
      GeogebraCommonKernelGeosGeoLine *l = IOSObjectArray_Get(nil_chk(GeogebraCommonEuclidianEuclidianController_getSelectedLines(self)), 0);
      [self checkZooming];
      if (singlePointWanted) {
        return [IOSObjectArray arrayWithObjects:(id[]){ [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectImplicitpolyLineSingleWithNSString:nil withGeogebraCommonKernelImplicitGeoImplicitPoly:p withGeogebraCommonKernelGeosGeoLine:l withDouble:xRW_ withDouble:yRW_] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      }
      return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectImplicitpolyLineWithNSStringArray:nil withGeogebraCommonKernelImplicitGeoImplicitPoly:p withGeogebraCommonKernelGeosGeoLine:l];
    }
    else if (GeogebraCommonEuclidianEuclidianController_selConics(self) >= 1) {
      GeogebraCommonKernelImplicitGeoImplicitPoly *p = IOSObjectArray_Get(nil_chk(GeogebraCommonEuclidianEuclidianController_getSelectedImplicitpoly(self)), 0);
      GeogebraCommonKernelGeosGeoConic *c = IOSObjectArray_Get(nil_chk(GeogebraCommonEuclidianEuclidianController_getSelectedConics(self)), 0);
      [self checkZooming];
      if (singlePointWanted) {
        return [IOSObjectArray arrayWithObjects:(id[]){ [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectImplicitpolyConicSingleWithNSString:nil withGeogebraCommonKernelImplicitGeoImplicitPoly:p withGeogebraCommonKernelGeosGeoConic:c withDouble:xRW_ withDouble:yRW_] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      }
      return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectImplicitpolyConicWithNSStringArray:nil withGeogebraCommonKernelImplicitGeoImplicitPoly:p withGeogebraCommonKernelGeosGeoConic:c];
    }
    else if (GeogebraCommonEuclidianEuclidianController_selImplicitpoly(self) >= 2) {
      IOSObjectArray *p = GeogebraCommonEuclidianEuclidianController_getSelectedImplicitpoly(self);
      [self checkZooming];
      if (singlePointWanted) {
        return [IOSObjectArray arrayWithObjects:(id[]){ [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectImplicitpolysSingleWithNSString:nil withGeogebraCommonKernelImplicitGeoImplicitPoly:IOSObjectArray_Get(nil_chk(p), 0) withGeogebraCommonKernelImplicitGeoImplicitPoly:IOSObjectArray_Get(p, 1) withDouble:xRW_ withDouble:yRW_] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      }
      return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectImplicitpolysWithNSStringArray:nil withGeogebraCommonKernelImplicitGeoImplicitPoly:IOSObjectArray_Get(nil_chk(p), 0) withGeogebraCommonKernelImplicitGeoImplicitPoly:IOSObjectArray_Get(p, 1)];
    }
  }
  return nil;
}

- (IOSObjectArray *)parallelWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_parallelWithGeogebraCommonEuclidianHits_(self, hits);
}

+ (void)checkCoordCartesianWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  GeogebraCommonEuclidianEuclidianController_checkCoordCartesianWithGeogebraCommonKernelKernelNDGeoPointND_(point);
}

- (IOSObjectArray *)parabolaWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_parabolaWithGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)orthogonalWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jboolean hitPoint = (GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO) != 0);
  return [self orthogonalWithGeogebraCommonEuclidianHits:hits withBoolean:hitPoint];
}

- (IOSObjectArray *)orthogonalWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                  withBoolean:(jboolean)hitPoint {
  if (!hitPoint) {
    if (GeogebraCommonEuclidianEuclidianController_selLines(self) == 0) {
      GeogebraCommonEuclidianEuclidianController_addSelectedVectorWithGeogebraCommonEuclidianHits_withInt_withBoolean_withGeogebraCommonKernelGeosTestEnum_(self, hits, 1, NO, GeogebraCommonKernelGeosTestEnum_get_GEOVECTOR());
    }
    if (GeogebraCommonEuclidianEuclidianController_selVectors(self) == 0) {
      GeogebraCommonEuclidianEuclidianController_addSelectedLineWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    }
  }
  if (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 1) {
    if (GeogebraCommonEuclidianEuclidianController_selVectors(self) == 1) {
      IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
      IOSObjectArray *vectors = GeogebraCommonEuclidianEuclidianController_getSelectedVectorsND(self);
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(points), 0), [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) {
        return nil;
      }
      [self checkZooming];
      IOSObjectArray_Set(ret, 0, [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) OrthogonalLineWithNSString:nil withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, 0), [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoVector:(GeogebraCommonKernelGeosGeoVector *) check_class_cast(IOSObjectArray_Get(nil_chk(vectors), 0), [GeogebraCommonKernelGeosGeoVector class])]);
      return ret;
    }
    else if (GeogebraCommonEuclidianEuclidianController_selLines(self) == 1) {
      IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
      IOSObjectArray *lines = GeogebraCommonEuclidianEuclidianController_getSelectedLinesND(self);
      return [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(companion_)) orthogonalWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(lines), 0)];
    }
  }
  return nil;
}

- (IOSObjectArray *)midpointWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_midpointWithGeogebraCommonEuclidianHits_(self, hits);
}

- (jboolean)functionInspectorWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_functionInspectorWithGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)lineBisectorWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_lineBisectorWithGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)angularBisectorWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_angularBisectorWithGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)threePointsWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                       withInt:(jint)threePointsMode {
  return GeogebraCommonEuclidianEuclidianController_threePointsWithGeogebraCommonEuclidianHits_withInt_(self, hits, threePointsMode);
}

- (IOSObjectArray *)switchModeForThreePointsWithInt:(jint)threePointsMode {
  IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
  IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  switch (threePointsMode) {
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_THREE_POINTS:
    [self checkZooming];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(points), 0), [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, 1), [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, 2), [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) {
      IOSObjectArray_Set(ret, 0, [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getManager3D])) Circle3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 2)]);
    }
    else {
      IOSObjectArray_Set(ret, 0, [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) CircleWithNSString:nil withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, 0), [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, 1), [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, 2), [GeogebraCommonKernelGeosGeoPoint class])]);
    }
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_ELLIPSE_THREE_POINTS:
    [self checkZooming];
    IOSObjectArray_Set(ret, 0, [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(companion_)) ellipseHyperbolaWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 2) withInt:GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE]);
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_HYPERBOLA_THREE_POINTS:
    [self checkZooming];
    IOSObjectArray_Set(ret, 0, [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(companion_)) ellipseHyperbolaWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 2) withInt:GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA]);
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCUMCIRCLE_ARC_THREE_POINTS:
    [self checkZooming];
    IOSObjectArray_Set(ret, 0, [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(companion_)) circumcircleArcWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 2)]);
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCUMCIRCLE_SECTOR_THREE_POINTS:
    [self checkZooming];
    IOSObjectArray_Set(ret, 0, [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(companion_)) circumcircleSectorWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 2)]);
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_ARC_THREE_POINTS:
    [self checkZooming];
    IOSObjectArray_Set(ret, 0, [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(companion_)) circleArcSectorWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 2) withInt:GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_ARC]);
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_SECTOR_THREE_POINTS:
    [self checkZooming];
    IOSObjectArray_Set(ret, 0, [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(companion_)) circleArcSectorWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 2) withInt:GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_SECTOR]);
    break;
    default:
    return nil;
  }
  return ret;
}

- (jboolean)relationWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_relationWithGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)locusWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_locusWithGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)conic5WithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_conic5WithGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)slopeWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  GeogebraCommonEuclidianEuclidianController_addSelectedLineWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  if (GeogebraCommonEuclidianEuclidianController_selLines(self) == 1) {
    GeogebraCommonKernelGeosGeoLine *line = IOSObjectArray_Get(nil_chk(GeogebraCommonEuclidianEuclidianController_getSelectedLines(self)), 0);
    return [((GeogebraCommonEuclidianTextDispatcher *) nil_chk([self getTextDispatcher])) createSlopeTextWithGeogebraCommonKernelGeosGeoLine:line withGeogebraCommonAwtGPoint:mouseLoc_];
  }
  return nil;
}

- (IOSObjectArray *)tangentsWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_tangentsWithGeogebraCommonEuclidianHits_(self, hits);
}

- (jboolean)deleteAllWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return NO;
  }
  for (jint i = 0; i < [hits size]; i++) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk([hits getWithInt:i])) removeOrSetUndefinedIfHasFixedDescendent];
  }
  return YES;
}

- (IOSObjectArray *)polarLineWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_polarLineWithGeogebraCommonEuclidianHits_(self, hits);
}

- (jboolean)showHideLabelWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_showHideLabelWithGeogebraCommonEuclidianHits_(self, hits);
}

- (jboolean)copyVisualStyleWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_copyVisualStyleWithGeogebraCommonEuclidianHits_(self, hits);
}

- (GeogebraCommonAwtGPoint *)getMouseLoc {
  return mouseLoc_;
}

- (void)textfieldHasFocusWithBoolean:(jboolean)hasFocus {
  textfieldHasFocus__ = hasFocus;
}

- (jboolean)checkBoxOrTextfieldOrButtonJustHitted {
  return checkBoxOrButtonJustHitted_ || [self isTextfieldHasFocus];
}

- (void)initToolTipManager {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)initShowMouseCoords {
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setShowMouseCoordsWithBoolean:(mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_POINT) || (mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE)];
}

- (void)wrapMouseEntered {
  if ([self isTextfieldHasFocus]) {
    return;
  }
  [self initToolTipManager];
  [self initShowMouseCoords];
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) mouseEntered];
}

- (jboolean)getSelectablesWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  GeogebraCommonEuclidianEuclidianController_addSelectedGeoWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getSelectableHits], 1, NO);
  return NO;
}

- (jboolean)moveRotateWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_moveRotateWithGeogebraCommonEuclidianHits_(self, hits);
}

- (jboolean)pointWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_pointWithGeogebraCommonEuclidianHits_(self, hits);
}

- (jboolean)geoElementSelectedWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                  withBoolean:(jboolean)addToSelection {
  return GeogebraCommonEuclidianEuclidianController_geoElementSelectedWithGeogebraCommonEuclidianHits_withBoolean_(self, hits, addToSelection);
}

- (jboolean)segmentFixedWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_segmentFixedWithGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)angleFixedWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_angleFixedWithGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)switchModeForCircleOrSphere2WithInt:(jint)sphereMode {
  [self checkZooming];
  IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
  if (sphereMode == GeogebraCommonEuclidianEuclidianConstants_MODE_SEMICIRCLE) {
    return [IOSObjectArray arrayWithObjects:(id[]){ [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(companion_)) semicircleWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1)] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  }
  return [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(companion_)) createCircle2WithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1)];
}

- (IOSObjectArray *)circleOrSphere2WithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                           withInt:(jint)sphereMode {
  return GeogebraCommonEuclidianEuclidianController_circleOrSphere2WithGeogebraCommonEuclidianHits_withInt_(self, hits, sphereMode);
}

- (jboolean)showHideObjectWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_showHideObjectWithGeogebraCommonEuclidianHits_(self, hits);
}

- (jboolean)textWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_textWithGeogebraCommonEuclidianHits_(self, hits);
}

- (jboolean)isAltDown {
  return altDown_;
}

- (void)setAltDownWithBoolean:(jboolean)altDown {
  self->altDown_ = altDown;
}

- (jboolean)slider {
  return GeogebraCommonEuclidianEuclidianController_slider(self);
}

- (jboolean)imageWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_imageWithGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)mirrorAtPointWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_mirrorAtPointWithGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)mirrorAtLineWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_mirrorAtLineWithGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)mirrorAtCircleWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_mirrorAtCircleWithGeogebraCommonEuclidianHits_(self, hits);
}

- (jboolean)clearHighlightedGeos {
  return GeogebraCommonEuclidianEuclidianController_clearHighlightedGeos(self);
}

- (jboolean)refreshHighlightingWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                   withBoolean:(jboolean)isControlDown {
  GeogebraCommonEuclidianHits *oldHighlightedGeos = [((GeogebraCommonEuclidianHits *) nil_chk(highlightedGeos_)) clone];
  jboolean repaintNeeded = GeogebraCommonEuclidianEuclidianController_clearHighlightedGeos(self);
  selectionPreview_ = YES;
  GeogebraCommonEuclidianEuclidianController_processModeWithGeogebraCommonEuclidianHits_withBoolean_withGeogebraCommonUtilAsyncOperation_(self, hits, isControlDown, nil);
  if (highlightJustCreatedGeos_) {
    [highlightedGeos_ addAllWithJavaUtilCollection:justCreatedGeos_];
  }
  selectionPreview_ = NO;
  if ([highlightedGeos_ size] > 0) {
    GeogebraCommonEuclidianEuclidianController_setHighlightedGeosWithBoolean_(self, YES);
    repaintNeeded = YES;
  }
  if (!repaintNeeded) return NO;
  else if ([((GeogebraCommonEuclidianHits *) nil_chk(oldHighlightedGeos)) size] == [highlightedGeos_ size] && [oldHighlightedGeos containsAllWithJavaUtilCollection:highlightedGeos_]) return NO;
  return YES;
}

- (jboolean)highlightWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  jboolean repaintNeeded = GeogebraCommonEuclidianEuclidianController_clearHighlightedGeos(self);
  if (geo != nil) {
    [((GeogebraCommonEuclidianHits *) nil_chk(highlightedGeos_)) addWithId:geo];
    GeogebraCommonEuclidianEuclidianController_setHighlightedGeosWithBoolean_(self, YES);
    repaintNeeded = YES;
  }
  return repaintNeeded;
}

- (jboolean)highlightWithJavaUtilArrayList:(JavaUtilArrayList *)geos {
  jboolean repaintNeeded = GeogebraCommonEuclidianEuclidianController_clearHighlightedGeos(self);
  if (geos != nil && [geos size] > 0) {
    for (GeogebraCommonKernelGeosGeoElement * __strong geo in geos) [((GeogebraCommonEuclidianHits *) nil_chk(highlightedGeos_)) addWithId:geo];
    GeogebraCommonEuclidianEuclidianController_setHighlightedGeosWithBoolean_(self, YES);
    repaintNeeded = YES;
  }
  return repaintNeeded;
}

- (void)clearSelections {
  [self clearSelectionsWithBoolean:YES withBoolean:YES];
}

- (void)clearSelectionsWithBoolean:(jboolean)repaint
                       withBoolean:(jboolean)updateSelection {
  [self startCollectingMinorRepaints];
  [self clearSelected];
  [((GeogebraCommonMainSelectionManager *) nil_chk(selection_)) clearSelectedGeosWithBoolean:repaint withBoolean:updateSelection];
  [self clearJustCreatedGeos];
  [self refreshHighlightingWithGeogebraCommonEuclidianHits:nil withBoolean:NO];
  [self stopCollectingMinorRepaints];
}

- (void)clearSelected {
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(self, selectedNumbers_, NO);
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(self, selectedNumberValues_, NO);
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(self, selectedPoints_, NO);
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(self, selectedLines_, NO);
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(self, selectedSegments_, NO);
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(self, selectedConicsND_, NO);
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(self, selectedVectors_, NO);
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(self, selectedPolygons_, NO);
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(self, selectedGeos_, NO);
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(self, selectedFunctions_, NO);
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(self, selectedCurves_, NO);
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(self, selectedLists_, NO);
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(self, selectedPaths_, NO);
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(self, selectedRegions_, NO);
}

- (jboolean)attachDetachWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_attachDetachWithGeogebraCommonEuclidianHits_(self, hits);
}

- (GeogebraCommonKernelMatrixCoords *)getMouseLocRW {
  if (mouseLocRW_ == nil) {
    GeogebraCommonEuclidianEuclidianController_set_mouseLocRW_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
  }
  if (mouseLoc_ == nil) {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(mouseLocRW_)) setXWithDouble:0];
    [mouseLocRW_ setYWithDouble:0];
  }
  else {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(mouseLocRW_)) setXWithDouble:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toRealWorldCoordXWithDouble:mouseLoc_->x_]];
    [mouseLocRW_ setYWithDouble:[view_ toRealWorldCoordYWithDouble:mouseLoc_->y_]];
  }
  return mouseLocRW_;
}

- (IOSObjectArray *)translateByVectorWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_translateByVectorWithGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)rotateByAngleWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_rotateByAngleWithGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)dilateFromPointWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_dilateFromPointWithGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)fitLineWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_fitLineWithGeogebraCommonEuclidianHits_(self, hits);
}

- (GeogebraCommonKernelGeosGeoLine *)FitLineYWithNSString:(NSString *)label
                      withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list {
  return GeogebraCommonEuclidianEuclidianController_FitLineYWithNSString_withGeogebraCommonKernelGeosGeoList_(self, label, list);
}

- (IOSObjectArray *)createListWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_createListWithGeogebraCommonEuclidianHits_(self, hits);
}

- (void)calcRWcoords {
  xRW_ = (((GeogebraCommonAwtGPoint *) nil_chk(mouseLoc_))->x_ - [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getXZero]) * [view_ getInvXscale];
  yRW_ = ([view_ getYZero] - mouseLoc_->y_) * [view_ getInvYscale];
}

- (void)setMouseLocationWithGeogebraCommonEuclidianEventAbstractEvent:(GeogebraCommonEuclidianEventAbstractEvent *)event {
  [self setMouseLocationWithBoolean:[((GeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) isAltDown] withInt:[event getX] withInt:[event getY]];
}

- (void)setMouseLocationWithBoolean:(jboolean)alt
                            withInt:(jint)x
                            withInt:(jint)y {
  GeogebraCommonEuclidianEuclidianController_setAndConsume_mouseLoc_(self, new_GeogebraCommonAwtGPoint_initWithInt_withInt_(x, y));
  [self setAltDownWithBoolean:alt];
  if (mouseLoc_->x_ < 0) {
    mouseLoc_->x_ = 0;
  }
  else if (mouseLoc_->x_ > [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getViewWidth]) {
    mouseLoc_->x_ = [view_ getViewWidth];
  }
  if (mouseLoc_->y_ < 0) {
    mouseLoc_->y_ = 0;
  }
  else if (mouseLoc_->y_ > [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getViewHeight]) {
    mouseLoc_->y_ = [view_ getViewHeight];
  }
}

- (jfloat)getPointCapturingPercentage {
  return GeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_GRID;
}

- (void)transformCoords {
  [self calcRWcoords];
  if (((mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_JOIN) || (mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_SEGMENT) || (mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_RAY) || (mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_VECTOR) || (mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_POLYGON) || (mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_POLYLINE)) && useLineEndPoint_ && (lineEndPoint_ != nil)) {
    xRW_ = lineEndPoint_->x_;
    yRW_ = lineEndPoint_->y_;
    return;
  }
  if ((mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE) && ((moveMode__ == GeogebraCommonEuclidianEuclidianController_MOVE_NUMERIC) || (moveMode__ == GeogebraCommonEuclidianEuclidianController_MOVE_VECTOR_NO_GRID) || (moveMode__ == GeogebraCommonEuclidianEuclidianController_MOVE_POINT_WITH_OFFSET))) {
    return;
  }
  jdouble pointCapturingPercentage = 1;
  {
    JavaUtilArrayList *spl;
    jboolean captured;
    switch ([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getPointCapturingMode]) {
      case GeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_STICKY_POINTS:
      pointCapturingPercentage = 0.125;
      spl = [view_ getStickyPointList];
      captured = NO;
      if (spl != nil) {
        for (jint i = 0; i < [spl size]; i++) {
          GeogebraCommonKernelGeosGeoPoint *gp = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([spl getWithInt:i], [GeogebraCommonKernelGeosGeoPoint class]);
          if ((JavaLangMath_absWithDouble_([((GeogebraCommonKernelGeosGeoPoint *) nil_chk(gp)) getInhomX] - xRW_) < ([view_ getGridDistancesWithInt:0] * pointCapturingPercentage)) && (JavaLangMath_absWithDouble_([gp getInhomY] - yRW_) < ([view_ getGridDistancesWithInt:1] * pointCapturingPercentage))) {
            xRW_ = [gp getInhomX];
            yRW_ = [gp getInhomY];
            captured = YES;
            break;
          }
        }
      }
      if (captured) {
        break;
      }
      case GeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_AUTOMATIC:
      if (![view_ isGridOrAxesShown]) {
        break;
      }
      case GeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_ON:
      pointCapturingPercentage = [self getPointCapturingPercentage];
      case GeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_ON_GRID:
      xRW_ += GeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 0);
      yRW_ += GeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 1);
      {
        jdouble root3;
        jdouble isoGrid;
        jint oddOrEvenRow;
        jdouble x;
        jdouble y;
        jdouble a;
        jdouble b;
        jdouble r;
        jdouble r2;
        jdouble angle;
        jdouble angleOffset;
        jdouble x1;
        jdouble y1;
        jdouble a1;
        jdouble b1;
        switch ([view_ getGridType]) {
          case GeogebraCommonEuclidianEuclidianView_GRID_ISOMETRIC:
          root3 = JavaLangMath_sqrtWithDouble_(3.0);
          isoGrid = [view_ getGridDistancesWithInt:0];
          oddOrEvenRow = (jint) JavaLangMath_roundWithDouble_((2.0 * JavaLangMath_absWithDouble_(yRW_ - GeogebraCommonKernelKernel_roundToScaleWithDouble_withDouble_(yRW_, isoGrid))) / isoGrid);
          if (oddOrEvenRow == 0) {
            jdouble x = GeogebraCommonKernelKernel_roundToScaleWithDouble_withDouble_(xRW_ / root3, isoGrid);
            jdouble y = GeogebraCommonKernelKernel_roundToScaleWithDouble_withDouble_(yRW_, isoGrid);
            jdouble a = JavaLangMath_absWithDouble_(x - (xRW_ / root3));
            jdouble b = JavaLangMath_absWithDouble_(y - yRW_);
            if ((a < (isoGrid * pointCapturingPercentage)) && (b < (isoGrid * pointCapturingPercentage))) {
              xRW_ = (x * root3) - GeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 0);
              yRW_ = y - GeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 1);
            }
            else {
              xRW_ -= GeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 0);
              yRW_ -= GeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 1);
            }
          }
          else {
            jdouble x = GeogebraCommonKernelKernel_roundToScaleWithDouble_withDouble_((xRW_ / root3) - ([view_ getGridDistancesWithInt:0] / 2), isoGrid);
            jdouble y = GeogebraCommonKernelKernel_roundToScaleWithDouble_withDouble_(yRW_ - (isoGrid / 2), isoGrid);
            jdouble a = JavaLangMath_absWithDouble_(x - ((xRW_ / root3) - (isoGrid / 2)));
            jdouble b = JavaLangMath_absWithDouble_(y - (yRW_ - (isoGrid / 2)));
            if ((a < (isoGrid * pointCapturingPercentage)) && (b < (isoGrid * pointCapturingPercentage))) {
              xRW_ = ((x + (isoGrid / 2)) * root3) - GeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 0);
              yRW_ = (y + (isoGrid / 2)) - GeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 1);
            }
            else {
              xRW_ -= GeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 0);
              yRW_ -= GeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 1);
            }
          }
          break;
          case GeogebraCommonEuclidianEuclidianView_GRID_CARTESIAN:
          x = GeogebraCommonKernelKernel_roundToScaleWithDouble_withDouble_(xRW_, [view_ getGridDistancesWithInt:0]);
          y = GeogebraCommonKernelKernel_roundToScaleWithDouble_withDouble_(yRW_, [view_ getGridDistancesWithInt:1]);
          a = JavaLangMath_absWithDouble_(x - xRW_);
          b = JavaLangMath_absWithDouble_(y - yRW_);
          if ((a < ([view_ getGridDistancesWithInt:0] * pointCapturingPercentage)) && (b < ([view_ getGridDistancesWithInt:1] * pointCapturingPercentage))) {
            xRW_ = x - GeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 0);
            yRW_ = y - GeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 1);
          }
          else {
            xRW_ -= GeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 0);
            yRW_ -= GeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 1);
          }
          break;
          case GeogebraCommonEuclidianEuclidianView_GRID_POLAR:
          r = GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(xRW_, yRW_);
          r2 = GeogebraCommonKernelKernel_roundToScaleWithDouble_withDouble_(r, [view_ getGridDistancesWithInt:0]);
          angle = JavaLangMath_atan2WithDouble_withDouble_(yRW_, xRW_);
          angleOffset = fmod(angle, [view_ getGridDistancesWithInt:2]);
          if (angleOffset < ([view_ getGridDistancesWithInt:2] / 2)) {
            angle = angle - angleOffset;
          }
          else {
            angle = (angle - angleOffset) + [view_ getGridDistancesWithInt:2];
          }
          x1 = r2 * JavaLangMath_cosWithDouble_(angle);
          y1 = r2 * JavaLangMath_sinWithDouble_(angle);
          a1 = JavaLangMath_absWithDouble_(x1 - xRW_);
          b1 = JavaLangMath_absWithDouble_(y1 - yRW_);
          if ((a1 < ([view_ getGridDistancesWithInt:0] * pointCapturingPercentage)) && (b1 < ([view_ getGridDistancesWithInt:1] * pointCapturingPercentage))) {
            xRW_ = x1 - GeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 0);
            yRW_ = y1 - GeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 1);
          }
          else {
            xRW_ -= GeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 0);
            yRW_ -= GeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 1);
          }
          break;
        }
      }
      default:
      ;
    }
  }
}

- (jdouble)getTransformCoordsOffsetWithInt:(jint)i {
  return GeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, i);
}

- (GeogebraCommonKernelAlgosAlgoDispatcher *)getAlgoDispatcher {
  return [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgoDispatcher];
}

- (IOSObjectArray *)areaWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_areaWithGeogebraCommonEuclidianHits_(self, hits);
}

- (jboolean)regularPolygonWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return NO;
  }
  GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
  if (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 2) {
    IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
    [((GeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showNumberInputDialogRegularPolygonWithNSString:[((GeogebraCommonMainLocalization *) nil_chk(l10n_)) getMenuWithNSString:[((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getModeTextWithInt:mode_]] withGeogebraCommonEuclidianEuclidianController:self withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1)];
    return YES;
  }
  return NO;
}

- (jint)addSelectedPlanesForAngleWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                         withInt:(jint)count {
  return count;
}

- (GeogebraCommonKernelGeosGeoAngle *)createAngle3D {
  return nil;
}

- (IOSObjectArray *)angleWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_angleWithGeogebraCommonEuclidianHits_(self, hits);
}

- (GeogebraCommonEuclidianTextDispatcher *)getTextDispatcher {
  if (textDispatcher_ == nil) {
    GeogebraCommonEuclidianEuclidianController_setAndConsume_textDispatcher_(self, new_GeogebraCommonEuclidianTextDispatcher_initWithGeogebraCommonKernelKernel_withGeogebraCommonEuclidianEuclidianView_(kernel_, view_));
  }
  return textDispatcher_;
}

- (IOSObjectArray *)distanceWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_distanceWithGeogebraCommonEuclidianHits_(self, hits);
}

- (jboolean)showCheckBox {
  return GeogebraCommonEuclidianEuclidianController_showCheckBox(self);
}

- (IOSObjectArray *)compassesWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_compassesWithGeogebraCommonEuclidianHits_(self, hits);
}

- (GeogebraCommonKernelKernelNDGeoConicND *)CircleWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                                                withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)c {
  return GeogebraCommonEuclidianEuclidianController_CircleWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoQuadricND_(self, A, c);
}

- (GeogebraCommonKernelKernelNDGeoConicND *)CircleCompassesWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                                                           withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
                                                           withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C {
  return GeogebraCommonEuclidianEuclidianController_CircleCompassesWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, A, B, C);
}

- (IOSObjectArray *)vectorFromPointWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_vectorFromPointWithGeogebraCommonEuclidianHits_(self, hits);
}

- (jboolean)circlePointRadiusWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonEuclidianEuclidianController_circlePointRadiusWithGeogebraCommonEuclidianHits_(self, hits);
}

- (GeogebraCommonKernelGeosGeoElement *)getMovedGeoPoint {
  return ((GeogebraCommonKernelGeosGeoElement *) check_class_cast(movedGeoPoint_, [GeogebraCommonKernelGeosGeoElement class]));
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)updateNewPointWithBoolean:(jboolean)forPreviewable
                                        withGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                            withBoolean:(jboolean)onPathPossible
                                                            withBoolean:(jboolean)inRegionPossible
                                                            withBoolean:(jboolean)intersectPossible
                                                            withBoolean:(jboolean)chooseGeo
                                                            withBoolean:(jboolean)complex {
  return GeogebraCommonEuclidianEuclidianController_updateNewPointWithBoolean_withGeogebraCommonEuclidianHits_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(self, forPreviewable, hits, onPathPossible, inRegionPossible, intersectPossible, chooseGeo, complex);
}

- (jboolean)createNewPointInRegionPossibleWithGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)conic {
  return ((mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_POINT_ON_OBJECT) && ([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic)) getLastHitType] == GeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_FILLING()));
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getNewPointWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                                             withBoolean:(jboolean)onPathPossible
                                                                             withBoolean:(jboolean)inRegionPossible
                                                                             withBoolean:(jboolean)intersectPossible
                                                                             withBoolean:(jboolean)complex {
  return GeogebraCommonEuclidianEuclidianController_updateNewPointWithBoolean_withGeogebraCommonEuclidianHits_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(self, NO, hits, onPathPossible, inRegionPossible, intersectPossible, YES, complex);
}

- (jboolean)createNewPointWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                              withBoolean:(jboolean)onPathPossible
                                              withBoolean:(jboolean)inRegionPossible
                                              withBoolean:(jboolean)intersectPossible
                                              withBoolean:(jboolean)doSingleHighlighting
                                              withBoolean:(jboolean)complex {
  GeogebraCommonEuclidianEuclidianController_set_pointCreated_(self, nil);
  if (![self allowPointCreation]) {
    return NO;
  }
  id<GeogebraCommonKernelKernelNDGeoPointND> point = [self getNewPointWithGeogebraCommonEuclidianHits:hits withBoolean:onPathPossible withBoolean:inRegionPossible withBoolean:intersectPossible withBoolean:complex];
  if (point != nil) {
    GeogebraCommonEuclidianEuclidianController_set_pointCreated_(self, point);
    [self handleMovedElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [GeogebraCommonKernelGeosGeoElement class]) withBoolean:NO withGeogebraCommonEuclidianEventPointerEventTypeEnum:GeogebraCommonEuclidianEventPointerEventTypeEnum_get_MOUSE()];
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setDragCursor];
    if (doSingleHighlighting) {
      [self doSingleHighlightingWithGeogebraCommonKernelGeosGeoElement:[self getMovedGeoPoint]];
    }
    return YES;
  }
  moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_NONE;
  return NO;
}

- (jboolean)createNewPointWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                              withBoolean:(jboolean)onPathPossible
                                              withBoolean:(jboolean)intersectPossible
                                              withBoolean:(jboolean)doSingleHighlighting {
  return GeogebraCommonEuclidianEuclidianController_createNewPointWithGeogebraCommonEuclidianHits_withBoolean_withBoolean_withBoolean_(self, hits, onPathPossible, intersectPossible, doSingleHighlighting);
}

- (void)macroWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
        withGeogebraCommonUtilAsyncOperation:(GeogebraCommonUtilAsyncOperation *)callback2 {
  GeogebraCommonEuclidianEuclidianController_macroWithGeogebraCommonEuclidianHits_withGeogebraCommonUtilAsyncOperation_(self, hits, callback2);
}

- (void)readNumberOrAngleIfNeededWithGeogebraCommonUtilAsyncOperation:(GeogebraCommonUtilAsyncOperation *)callback3 {
  if (++index_ < ((IOSObjectArray *) nil_chk(macroInput_))->size_) {
    if ([((GeogebraCommonKernelGeosTestEnum *) nil_chk(IOSObjectArray_Get(macroInput_, index_))) isEqual:GeogebraCommonKernelGeosTestEnum_get_GEONUMERIC()]) {
      [((GeogebraCommonMainDialogManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getDialogManager])) showNumberInputDialogWithNSString:[((GeogebraCommonKernelMacro *) nil_chk(macro__)) getToolOrCommandName] withNSString:[((GeogebraCommonMainLocalization *) nil_chk(l10n_)) getPlainWithNSString:@"Numeric"] withNSString:nil withGeogebraCommonUtilAsyncOperation:callback3];
    }
    else if ([((GeogebraCommonKernelGeosTestEnum *) nil_chk(IOSObjectArray_Get(macroInput_, index_))) isEqual:GeogebraCommonKernelGeosTestEnum_get_GEOANGLE()]) {
      [((GeogebraCommonMainDialogManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getDialogManager])) showAngleInputDialogWithNSString:[((GeogebraCommonKernelMacro *) nil_chk(macro__)) getToolOrCommandName] withNSString:[((GeogebraCommonMainLocalization *) nil_chk(l10n_)) getPlainWithNSString:@"Angle"] withNSString:@"45\u00b0" withGeogebraCommonUtilAsyncOperation:callback3];
    }
  }
}

- (void)macroProcessWithGeogebraCommonUtilAsyncOperation:(GeogebraCommonUtilAsyncOperation *)callback2 {
  if (GeogebraCommonEuclidianEuclidianController_selGeos(self) == ((IOSObjectArray *) nil_chk(macroInput_))->size_) {
    [self checkZooming];
    [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) useMacroWithNSStringArray:nil withGeogebraCommonKernelMacro:macro__ withGeogebraCommonKernelGeosGeoElementArray:GeogebraCommonEuclidianEuclidianController_getSelectedGeos(self)];
    if (callback2 != nil) [callback2 callbackWithId:JavaLangBoolean_valueOfWithBoolean_(YES)];
    return;
  }
  if (callback2 != nil) [callback2 callbackWithId:JavaLangBoolean_valueOfWithBoolean_(NO)];
}

- (jboolean)buttonWithBoolean:(jboolean)textfield {
  return GeogebraCommonEuclidianEuclidianController_buttonWithBoolean_(self, textfield);
}

- (jboolean)switchModeForProcessModeWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                        withBoolean:(jboolean)isControlDown
                               withGeogebraCommonUtilAsyncOperation:(GeogebraCommonUtilAsyncOperation *)callback {
  JavaLangBoolean *changedKernel = JavaLangBoolean_valueOfWithBoolean_(NO);
  IOSObjectArray *ret = nil;
  {
    jboolean addToSelection;
    GeogebraCommonUtilAsyncOperation *callback2;
    switch (mode_) {
      case GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE:
      if (selectionPreview_) {
        [self getSelectablesWithGeogebraCommonEuclidianHits:[((GeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits]];
      }
      else {
        if (draggingOccured_ && ([((GeogebraCommonMainSelectionManager *) nil_chk(selection_)) selectedGeosSize] == 1)) {
          [selection_ clearSelectedGeos];
        }
      }
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE_ROTATE:
      if (selectionPreview_) {
        GeogebraCommonEuclidianEuclidianController_moveRotateWithGeogebraCommonEuclidianHits_(self, [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits]);
      }
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_POINT:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_COMPLEX_NUMBER:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_POINT_ON_OBJECT:
      if (selectionPreview_) {
        if ((mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_POINT) || (mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_COMPLEX_NUMBER)) {
          [((GeogebraCommonEuclidianHits *) nil_chk(hits)) keepOnlyHitsForNewPointMode];
        }
        GeogebraCommonEuclidianEuclidianController_pointWithGeogebraCommonEuclidianHits_(self, hits);
      }
      else {
        IOSObjectArray *ret0 = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        IOSObjectArray_Set(ret0, 0, [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getFirstHitWithGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOPOINTND()]);
        ret = ret0;
        GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, selectedPoints_);
      }
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_SELECTION_LISTENER:
      addToSelection = isControlDown;
      GeogebraCommonEuclidianEuclidianController_geoElementSelectedWithGeogebraCommonEuclidianHits_withBoolean_(self, [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits], addToSelection);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_JOIN:
      ret = GeogebraCommonEuclidianEuclidianController_joinWithGeogebraCommonEuclidianHits_(self, hits);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_SEGMENT:
      ret = GeogebraCommonEuclidianEuclidianController_segmentWithGeogebraCommonEuclidianHits_(self, hits);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_SEGMENT_FIXED:
      changedKernel = JavaLangBoolean_valueOfWithBoolean_(GeogebraCommonEuclidianEuclidianController_segmentFixedWithGeogebraCommonEuclidianHits_(self, hits));
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_ANGLE_FIXED:
      ret = GeogebraCommonEuclidianEuclidianController_angleFixedWithGeogebraCommonEuclidianHits_(self, hits);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_MIDPOINT:
      ret = GeogebraCommonEuclidianEuclidianController_midpointWithGeogebraCommonEuclidianHits_(self, hits);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_RAY:
      ret = GeogebraCommonEuclidianEuclidianController_rayWithGeogebraCommonEuclidianHits_(self, hits);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_POLYLINE:
      ret = GeogebraCommonEuclidianEuclidianController_polylineWithGeogebraCommonEuclidianHits_(self, hits);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_POLYGON:
      polygonMode_ = GeogebraCommonEuclidianEuclidianController_POLYGON_NORMAL;
      ret = GeogebraCommonEuclidianEuclidianController_polygonWithGeogebraCommonEuclidianHits_(self, hits);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_RIGID_POLYGON:
      polygonMode_ = GeogebraCommonEuclidianEuclidianController_POLYGON_RIGID;
      ret = GeogebraCommonEuclidianEuclidianController_polygonWithGeogebraCommonEuclidianHits_(self, hits);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_VECTOR_POLYGON:
      polygonMode_ = GeogebraCommonEuclidianEuclidianController_POLYGON_VECTOR;
      ret = GeogebraCommonEuclidianEuclidianController_polygonWithGeogebraCommonEuclidianHits_(self, hits);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_VECTOR:
      ret = GeogebraCommonEuclidianEuclidianController_vectorWithGeogebraCommonEuclidianHits_(self, hits);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECT:
      ret = [self intersectWithGeogebraCommonEuclidianHits:hits];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_PARALLEL:
      ret = GeogebraCommonEuclidianEuclidianController_parallelWithGeogebraCommonEuclidianHits_(self, hits);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_PARABOLA:
      ret = GeogebraCommonEuclidianEuclidianController_parabolaWithGeogebraCommonEuclidianHits_(self, hits);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_ORTHOGONAL:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_ORTHOGONAL_THREE_D:
      ret = [self orthogonalWithGeogebraCommonEuclidianHits:hits];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_LINE_BISECTOR:
      ret = GeogebraCommonEuclidianEuclidianController_lineBisectorWithGeogebraCommonEuclidianHits_(self, hits);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_ANGULAR_BISECTOR:
      ret = GeogebraCommonEuclidianEuclidianController_angularBisectorWithGeogebraCommonEuclidianHits_(self, hits);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_TWO_POINTS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_SEMICIRCLE:
      ret = GeogebraCommonEuclidianEuclidianController_circleOrSphere2WithGeogebraCommonEuclidianHits_withInt_(self, hits, mode_);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_LOCUS:
      ret = GeogebraCommonEuclidianEuclidianController_locusWithGeogebraCommonEuclidianHits_(self, hits);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_THREE_POINTS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_ELLIPSE_THREE_POINTS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_HYPERBOLA_THREE_POINTS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_ARC_THREE_POINTS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_SECTOR_THREE_POINTS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCUMCIRCLE_ARC_THREE_POINTS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCUMCIRCLE_SECTOR_THREE_POINTS:
      ret = GeogebraCommonEuclidianEuclidianController_threePointsWithGeogebraCommonEuclidianHits_withInt_(self, hits, mode_);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CONIC_FIVE_POINTS:
      ret = GeogebraCommonEuclidianEuclidianController_conic5WithGeogebraCommonEuclidianHits_(self, hits);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_RELATION:
      GeogebraCommonEuclidianEuclidianController_relationWithGeogebraCommonEuclidianHits_(self, [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits]);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_TANGENTS:
      ret = GeogebraCommonEuclidianEuclidianController_tangentsWithGeogebraCommonEuclidianHits_(self, [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits]);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_POLAR_DIAMETER:
      ret = GeogebraCommonEuclidianEuclidianController_polarLineWithGeogebraCommonEuclidianHits_(self, [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits]);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_DELETE:
      changedKernel = JavaLangBoolean_valueOfWithBoolean_([((GeogebraCommonEuclidianModesModeDelete *) nil_chk([self getDeleteMode])) processWithGeogebraCommonEuclidianHits:[((GeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits] withBoolean:isControlDown]);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_SHOW_HIDE_OBJECT:
      if (GeogebraCommonEuclidianEuclidianController_showHideObjectWithGeogebraCommonEuclidianHits_(self, [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits])) {
        toggleModeChangedKernel_ = YES;
      }
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_SHOW_HIDE_LABEL:
      if (GeogebraCommonEuclidianEuclidianController_showHideLabelWithGeogebraCommonEuclidianHits_(self, [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits])) {
        toggleModeChangedKernel_ = YES;
      }
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_COPY_VISUAL_STYLE:
      if (GeogebraCommonEuclidianEuclidianController_copyVisualStyleWithGeogebraCommonEuclidianHits_(self, [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits])) {
        toggleModeChangedKernel_ = YES;
      }
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_TEXT:
      changedKernel = JavaLangBoolean_valueOfWithBoolean_(GeogebraCommonEuclidianEuclidianController_textWithGeogebraCommonEuclidianHits_(self, [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getOtherHitsWithGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOIMAGE() withGeogebraCommonEuclidianHits:tempArrayList_]));
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_IMAGE:
      changedKernel = JavaLangBoolean_valueOfWithBoolean_(GeogebraCommonEuclidianEuclidianController_imageWithGeogebraCommonEuclidianHits_(self, [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getOtherHitsWithGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOIMAGE() withGeogebraCommonEuclidianHits:tempArrayList_]));
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_SLIDER:
      changedKernel = JavaLangBoolean_valueOfWithBoolean_(GeogebraCommonEuclidianEuclidianController_slider(self));
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_POINT:
      ret = GeogebraCommonEuclidianEuclidianController_mirrorAtPointWithGeogebraCommonEuclidianHits_(self, [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits]);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_LINE:
      ret = GeogebraCommonEuclidianEuclidianController_mirrorAtLineWithGeogebraCommonEuclidianHits_(self, [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits]);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_CIRCLE:
      ret = GeogebraCommonEuclidianEuclidianController_mirrorAtCircleWithGeogebraCommonEuclidianHits_(self, [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits]);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_ATTACH_DETACH:
      changedKernel = JavaLangBoolean_valueOfWithBoolean_(GeogebraCommonEuclidianEuclidianController_attachDetachWithGeogebraCommonEuclidianHits_(self, [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits]));
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATE_BY_VECTOR:
      ret = GeogebraCommonEuclidianEuclidianController_translateByVectorWithGeogebraCommonEuclidianHits_(self, [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits]);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_ROTATE_BY_ANGLE:
      ret = GeogebraCommonEuclidianEuclidianController_rotateByAngleWithGeogebraCommonEuclidianHits_(self, [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits]);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_DILATE_FROM_POINT:
      ret = GeogebraCommonEuclidianEuclidianController_dilateFromPointWithGeogebraCommonEuclidianHits_(self, [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits]);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_FITLINE:
      ret = GeogebraCommonEuclidianEuclidianController_fitLineWithGeogebraCommonEuclidianHits_(self, hits);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CREATE_LIST:
      ret = GeogebraCommonEuclidianEuclidianController_createListWithGeogebraCommonEuclidianHits_(self, hits);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_POINT_RADIUS:
      changedKernel = JavaLangBoolean_valueOfWithBoolean_(GeogebraCommonEuclidianEuclidianController_circlePointRadiusWithGeogebraCommonEuclidianHits_(self, hits));
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_ANGLE:
      ret = GeogebraCommonEuclidianEuclidianController_angleWithGeogebraCommonEuclidianHits_(self, [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits]);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_VECTOR_FROM_POINT:
      ret = GeogebraCommonEuclidianEuclidianController_vectorFromPointWithGeogebraCommonEuclidianHits_(self, hits);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_DISTANCE:
      ret = GeogebraCommonEuclidianEuclidianController_distanceWithGeogebraCommonEuclidianHits_(self, hits);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_MACRO:
      callback2 = [new_GeogebraCommonEuclidianEuclidianController_$2_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonUtilAsyncOperation_(self, callback) autorelease];
      GeogebraCommonEuclidianEuclidianController_macroWithGeogebraCommonEuclidianHits_withGeogebraCommonUtilAsyncOperation_(self, hits, callback2);
      return NO;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_AREA:
      ret = GeogebraCommonEuclidianEuclidianController_areaWithGeogebraCommonEuclidianHits_(self, hits);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_SLOPE:
      ret = [self slopeWithGeogebraCommonEuclidianHits:hits];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_REGULAR_POLYGON:
      changedKernel = JavaLangBoolean_valueOfWithBoolean_([self regularPolygonWithGeogebraCommonEuclidianHits:hits]);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_SHOW_HIDE_CHECKBOX:
      changedKernel = JavaLangBoolean_valueOfWithBoolean_(GeogebraCommonEuclidianEuclidianController_showCheckBox(self));
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_BUTTON_ACTION:
      changedKernel = JavaLangBoolean_valueOfWithBoolean_(GeogebraCommonEuclidianEuclidianController_buttonWithBoolean_(self, NO));
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_TEXTFIELD_ACTION:
      changedKernel = JavaLangBoolean_valueOfWithBoolean_(GeogebraCommonEuclidianEuclidianController_buttonWithBoolean_(self, YES));
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_PEN:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_FREEHAND_SHAPE:
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_COMPASSES:
      ret = GeogebraCommonEuclidianEuclidianController_compassesWithGeogebraCommonEuclidianHits_(self, hits);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_FUNCTION_INSPECTOR:
      changedKernel = JavaLangBoolean_valueOfWithBoolean_(GeogebraCommonEuclidianEuclidianController_functionInspectorWithGeogebraCommonEuclidianHits_(self, hits));
      break;
      default:
      ;
    }
  }
  return GeogebraCommonEuclidianEuclidianController_endOfSwitchModeForProcessModeWithGeogebraCommonKernelGeosGeoElementArray_withBoolean_withGeogebraCommonUtilAsyncOperation_(self, ret, [changedKernel booleanValue], callback);
}

- (jboolean)endOfSwitchModeForProcessModeWithGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)ret
                                                                         withBoolean:(jboolean)changedKernel
                                                withGeogebraCommonUtilAsyncOperation:(GeogebraCommonUtilAsyncOperation *)callback {
  return GeogebraCommonEuclidianEuclidianController_endOfSwitchModeForProcessModeWithGeogebraCommonKernelGeosGeoElementArray_withBoolean_withGeogebraCommonUtilAsyncOperation_(self, ret, changedKernel, callback);
}

- (void)memorizeJustCreatedGeosAfterProcessModeWithGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)ret {
  if (ret != nil) {
    [self memorizeJustCreatedGeosWithGeogebraCommonKernelGeosGeoElementArray:ret];
  }
  else if (!selectionPreview_) {
    [self clearJustCreatedGeos];
  }
}

- (void)processModeLock {
  GeogebraCommonEuclidianHits *getTopHits = [((GeogebraCommonEuclidianHits *) nil_chk(highlightedGeos_)) getTopHits];
  if ([((GeogebraCommonEuclidianHits *) nil_chk(getTopHits)) size] == 0) {
    getTopHits = [((GeogebraCommonEuclidianHits *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits])) getTopHits];
  }
  if ([((GeogebraCommonEuclidianHits *) nil_chk(getTopHits)) size] > 0) {
    GeogebraCommonKernelGeosGeoElement *geo = [getTopHits getWithInt:0];
    if ([((GeogebraCommonKernelGeosTestEnum *) nil_chk(GeogebraCommonKernelGeosTestEnum_get_PATH_NO_FILL_HIT())) checkWithId:geo] && ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPolygon]) {
      [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(companion_)) processModeLockWithGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelPath))];
    }
    else if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint]) {
      [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(companion_)) processModeLockWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoPointND))];
    }
    else {
      [self transformCoords];
    }
  }
  else {
    if (![self isAltDown]) {
      [self transformCoords];
    }
  }
}

- (jboolean)processModeWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)processHits
                                           withBoolean:(jboolean)isControlDown {
  GeogebraCommonEuclidianHits *hits2 = processHits;
  GeogebraCommonUtilAsyncOperation *callback = [new_GeogebraCommonEuclidianEuclidianController_$3_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonEuclidianHits_(self, hits2) autorelease];
  return GeogebraCommonEuclidianEuclidianController_processModeWithGeogebraCommonEuclidianHits_withBoolean_withGeogebraCommonUtilAsyncOperation_(self, processHits, isControlDown, callback);
}

- (jboolean)processModeWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)processHits
                                           withBoolean:(jboolean)isControlDown
                  withGeogebraCommonUtilAsyncOperation:(GeogebraCommonUtilAsyncOperation *)callback {
  return GeogebraCommonEuclidianEuclidianController_processModeWithGeogebraCommonEuclidianHits_withBoolean_withGeogebraCommonUtilAsyncOperation_(self, processHits, isControlDown, callback);
}

- (void)toolCompleted {
}

- (void)updatePreview {
  if ([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getPreviewDrawable] != nil) {
    [view_ updatePreviewableForProcessMode];
    if (mouseLoc_ != nil) {
      xRW_ = [view_ toRealWorldCoordXWithDouble:mouseLoc_->x_];
      yRW_ = [view_ toRealWorldCoordYWithDouble:mouseLoc_->y_];
      [self processModeLock];
      [((id<GeogebraCommonEuclidianPreviewable>) nil_chk([view_ getPreviewDrawable])) updateMousePosWithDouble:xRW_ withDouble:yRW_];
    }
    [view_ repaintView];
  }
}

- (void)processReleaseForMovedGeoPointWithBoolean:(jboolean)rightClick {
  if ([((GeogebraCommonMainApp *) nil_chk(app_)) isUsingFullGui]) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getMovedGeoPoint])) resetTraceColumns];
  }
}

- (jboolean)processRightReleaseFor3DWithGeogebraCommonEuclidianEventPointerEventTypeEnum:(GeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  return NO;
}

- (void)rotateObjectWithBoolean:(jboolean)repaint {
  GeogebraCommonEuclidianEuclidianController_rotateObjectWithBoolean_(self, repaint);
}

- (void)moveLabel {
  GeogebraCommonEuclidianEuclidianController_moveLabel(self);
}

- (void)movePointWithOffsetWithBoolean:(jboolean)repaint {
  [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(movedGeoPoint_)) setCoordsWithDouble:GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(xRW_ - IOSDoubleArray_Get(nil_chk(transformCoordsOffset_), 0)) withDouble:GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(yRW_ - IOSDoubleArray_Get(transformCoordsOffset_, 1)) withDouble:1.0];
  [((GeogebraCommonKernelGeosGeoElement *) check_class_cast(movedGeoPoint_, [GeogebraCommonKernelGeosGeoElement class])) updateCascade];
  movedGeoPointDragged_ = YES;
  if (repaint) {
    [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
  }
}

- (void)moveLineWithBoolean:(jboolean)repaint {
  [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(movedGeoLine_)) setLineThroughWithDouble:xRW_ withDouble:yRW_];
  GeogebraCommonEuclidianEuclidianController_updateAfterMoveWithGeogebraCommonKernelGeosGeoElement_withBoolean_((GeogebraCommonKernelGeosGeoElement *) check_class_cast(movedGeoLine_, [GeogebraCommonKernelGeosGeoElement class]), repaint);
}

+ (void)updateAfterMoveWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                  withBoolean:(jboolean)repaint {
  GeogebraCommonEuclidianEuclidianController_updateAfterMoveWithGeogebraCommonKernelGeosGeoElement_withBoolean_(geo, repaint);
}

- (void)moveVectorWithBoolean:(jboolean)repaint {
  GeogebraCommonEuclidianEuclidianController_moveVectorWithBoolean_(self, repaint);
}

- (void)moveVector {
  id<GeogebraCommonKernelKernelNDGeoPointND> P = [((id<GeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(movedGeoVector_)) getStartPoint];
  if (P == nil) {
    GeogebraCommonEuclidianEuclidianController_moveVectorWithDouble_withDouble_(self, xRW_ - IOSDoubleArray_Get(nil_chk(transformCoordsOffset_), 0), yRW_ - IOSDoubleArray_Get(transformCoordsOffset_, 1));
  }
  else {
    GeogebraCommonKernelMatrixCoords *c = [((GeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCompanion])) getCoordsForViewWithGeogebraCommonKernelKernelNDGeoPointND:P];
    GeogebraCommonEuclidianEuclidianController_moveVectorWithDouble_withDouble_(self, xRW_ - [((GeogebraCommonKernelMatrixCoords *) nil_chk(c)) getX], yRW_ - [c getY]);
  }
}

- (void)moveVectorWithDouble:(jdouble)x
                  withDouble:(jdouble)y {
  GeogebraCommonEuclidianEuclidianController_moveVectorWithDouble_withDouble_(self, x, y);
}

- (void)moveVectorStartPointWithBoolean:(jboolean)repaint {
  GeogebraCommonEuclidianEuclidianController_moveVectorStartPointWithBoolean_(self, repaint);
}

- (void)moveTextWithBoolean:(jboolean)repaint {
  GeogebraCommonEuclidianEuclidianController_moveTextWithBoolean_(self, repaint);
}

- (void)moveTextAbsoluteLocation {
  GeogebraCommonKernelGeosGeoPoint *loc = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([((GeogebraCommonKernelGeosGeoText *) nil_chk(movedGeoText_)) getStartPoint], [GeogebraCommonKernelGeosGeoPoint class]);
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(loc)) setCoordsWithDouble:xRW_ - [self getStartPointX] withDouble:yRW_ - [self getStartPointY] withDouble:1.0];
}

- (void)moveImageWithBoolean:(jboolean)repaint {
  GeogebraCommonEuclidianEuclidianController_moveImageWithBoolean_(self, repaint);
}

- (void)moveConicWithBoolean:(jboolean)repaint {
  GeogebraCommonEuclidianEuclidianController_moveConicWithBoolean_(self, repaint);
}

- (void)moveImplicitPolyWithBoolean:(jboolean)repaint {
  GeogebraCommonEuclidianEuclidianController_moveImplicitPolyWithBoolean_(self, repaint);
}

- (void)moveFreehandWithBoolean:(jboolean)repaint {
  GeogebraCommonEuclidianEuclidianController_moveFreehandWithBoolean_(self, repaint);
}

- (void)moveFunctionWithBoolean:(jboolean)repaint {
  GeogebraCommonEuclidianEuclidianController_moveFunctionWithBoolean_(self, repaint);
}

- (void)moveBooleanWithBoolean:(jboolean)repaint {
  GeogebraCommonEuclidianEuclidianController_moveBooleanWithBoolean_(self, repaint);
}

- (void)moveButtonWithBoolean:(jboolean)repaint {
  GeogebraCommonEuclidianEuclidianController_moveButtonWithBoolean_(self, repaint);
}

- (jdouble)getSliderValueWithGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)movedSlider
                                                    withBoolean:(jboolean)click {
  return GeogebraCommonEuclidianEuclidianController_getSliderValueWithGeogebraCommonKernelGeosGeoNumeric_withBoolean_(self, movedSlider, click);
}

- (void)moveNumericWithBoolean:(jboolean)repaint
                   withBoolean:(jboolean)click {
  GeogebraCommonEuclidianEuclidianController_moveNumericWithBoolean_withBoolean_(self, repaint, click);
}

- (void)moveSliderWithBoolean:(jboolean)repaint {
  GeogebraCommonEuclidianEuclidianController_moveSliderWithBoolean_(self, repaint);
}

- (void)moveDependentWithBoolean:(jboolean)repaint {
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(translationVec_)) setXWithDouble:xRW_ - [self getStartPointX]];
  [translationVec_ setYWithDouble:yRW_ - [self getStartPointY]];
  [self setStartPointLocationWithDouble:xRW_ withDouble:yRW_];
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) movingGeoSet];
  if (tmpCoordsL3_ == nil) {
    GeogebraCommonEuclidianEuclidianController_setAndConsume_tmpCoordsL3_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
  }
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoordsL3_)) setXWithDouble:xRW_];
  [tmpCoordsL3_ setYWithDouble:yRW_];
  [tmpCoordsL3_ setZWithDouble:0];
  GeogebraCommonKernelGeosGeoElement_moveObjectsWithJavaUtilArrayList_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonEuclidianEuclidianView_(translateableGeos_, translationVec_, tmpCoordsL3_, nil, view_);
  [kernel_ movedGeoSetWithJavaUtilArrayList:translateableGeos_];
  if (repaint) {
    [kernel_ notifyRepaint];
  }
}

- (void)moveAttachedWithBoolean:(jboolean)repaint {
  GeogebraCommonEuclidianEuclidianController_moveAttachedWithBoolean_(self, repaint);
}

- (void)moveMultipleObjectsWithBoolean:(jboolean)repaint {
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(translationVec_)) setXWithDouble:xRW_ - [self getStartPointX]];
  [translationVec_ setYWithDouble:yRW_ - [self getStartPointY]];
  [self setStartPointLocationWithDouble:xRW_ withDouble:yRW_];
  GeogebraCommonEuclidianEuclidianController_set_startLoc_(self, mouseLoc_);
  if (tmpCoordsL3_ == nil) {
    GeogebraCommonEuclidianEuclidianController_setAndConsume_tmpCoordsL3_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
  }
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoordsL3_)) setXWithDouble:xRW_];
  [tmpCoordsL3_ setYWithDouble:yRW_];
  [tmpCoordsL3_ setZWithDouble:0];
  GeogebraCommonKernelGeosGeoElement_moveObjectsWithJavaUtilArrayList_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonEuclidianEuclidianView_([((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(companion_)) removeParentsOfViewWithJavaUtilArrayList:[self getAppSelectedGeos]], translationVec_, tmpCoordsL3_, nil, view_);
  if (repaint) {
    [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
  }
}

- (jdouble)getStartPointX {
  return ((GeogebraCommonAwtGPoint2D_Double *) nil_chk(startPoint_))->x_;
}

- (jdouble)getStartPointY {
  return ((GeogebraCommonAwtGPoint2D_Double *) nil_chk(startPoint_))->y_;
}

- (void)setMovedGeoPointWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonEuclidianEuclidianController_set_movedGeoPoint_(self, (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoPointND)));
  GeogebraCommonKernelAlgosAlgoElement *algo = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(movedGeoPoint_, [GeogebraCommonKernelGeosGeoElement class])))) getParentAlgorithm];
  if ((algo != nil) && ([GeogebraCommonKernelAlgosAlgoDynamicCoordinatesInterface_class_() isInstance:algo])) {
    GeogebraCommonEuclidianEuclidianController_set_movedGeoPoint_(self, [((id<GeogebraCommonKernelAlgosAlgoDynamicCoordinatesInterface>) check_protocol_cast(algo, @protocol(GeogebraCommonKernelAlgosAlgoDynamicCoordinatesInterface))) getParentPoint]);
  }
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setShowMouseCoordsWithBoolean:![((GeogebraCommonMainApp *) nil_chk(app_)) isApplet] && ![((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(movedGeoPoint_)) hasPath]];
  [view_ setDragCursor];
}

- (void)switchModeForRemovePolygonsWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  switch (mode_) {
    case GeogebraCommonEuclidianEuclidianConstants_MODE_POINT:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_COMPLEX_NUMBER:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_POINT_ON_OBJECT:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_ATTACH_DETACH:
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE:
    [((GeogebraCommonEuclidianHits *) nil_chk(hits)) removePolygonsIfSidePresent];
    break;
    default:
    [((GeogebraCommonEuclidianHits *) nil_chk(hits)) removePolygons];
    break;
  }
}

- (jboolean)switchModeForMouseReleasedWithInt:(jint)evMode
              withGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hitsReleased
                                  withBoolean:(jboolean)kernelChanged
                                  withBoolean:(jboolean)controlDown
withGeogebraCommonEuclidianEventPointerEventTypeEnum:(GeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  GeogebraCommonEuclidianHits *hits = hitsReleased;
  jboolean changedKernel = kernelChanged;
  jboolean focusNeeded = YES;
  switch (evMode) {
    case GeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATE_BY_VECTOR:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_DILATE_FROM_POINT:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_POINT:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_LINE:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_CIRCLE:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_ROTATE_BY_ANGLE:
    [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
    hits = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
    [((GeogebraCommonEuclidianHits *) nil_chk(hits)) removePolygons];
    if ([hits isEmpty]) {
      changedKernel = GeogebraCommonEuclidianEuclidianController_createNewPointWithGeogebraCommonEuclidianHits_withBoolean_withBoolean_withBoolean_(self, hits, NO, NO, YES);
    }
    else {
      changedKernel = (pointCreated_ != nil);
    }
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_BUTTON_ACTION:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_TEXTFIELD_ACTION:
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_ZOOM_IN:
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) zoomWithDouble:((GeogebraCommonAwtGPoint *) nil_chk(mouseLoc_))->x_ withDouble:mouseLoc_->y_ withDouble:GeogebraCommonEuclidianEuclidianView_MODE_ZOOM_FACTOR withInt:15 withBoolean:NO];
    toggleModeChangedKernel_ = YES;
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_ZOOM_OUT:
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) zoomWithDouble:((GeogebraCommonAwtGPoint *) nil_chk(mouseLoc_))->x_ withDouble:mouseLoc_->y_ withDouble:1.0 / GeogebraCommonEuclidianEuclidianView_MODE_ZOOM_FACTOR withInt:15 withBoolean:NO];
    toggleModeChangedKernel_ = YES;
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATEVIEW:
    if (draggingOccured_ || !temporaryMode_) {
      changedKernel = YES;
    }
    else {
      [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      [self handleSelectClickWithJavaUtilArrayList:[((GeogebraCommonEuclidianHits *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits])) getTopHits] withBoolean:controlDown];
    }
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_SELECTION_LISTENER:
    [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
    [self handleSelectClickWithJavaUtilArrayList:[((GeogebraCommonEuclidianHits *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits])) getTopHits] withBoolean:controlDown];
    default:
    [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
    hits = [((GeogebraCommonEuclidianHits *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits])) getTopHits];
    if (![((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
      GeogebraCommonKernelGeosGeoElement *hit = [hits getWithInt:0];
      if (hit != nil) {
        if ([hit isGeoButton] && !([hit isGeoTextField])) {
          checkBoxOrButtonJustHitted_ = YES;
          [((GeogebraCommonMainSelectionManager *) nil_chk(selection_)) removeSelectedGeoWithGeogebraCommonKernelGeosGeoElement:hit withBoolean:YES withBoolean:NO];
          [((GeogebraCommonMainApp *) nil_chk(app_)) updateSelectionWithBoolean:NO];
        }
        else if ([hit isGeoBoolean]) {
          GeogebraCommonKernelGeosGeoBoolean *bool_ = (GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(([hits getWithInt:0]), [GeogebraCommonKernelGeosGeoBoolean class]);
          if (!GeogebraCommonEuclidianEuclidianController_isCheckboxFixedWithGeogebraCommonKernelGeosGeoBoolean_(self, bool_)) {
            [self hitCheckBoxWithGeogebraCommonKernelGeosGeoBoolean:bool_];
            [((GeogebraCommonMainSelectionManager *) nil_chk(selection_)) removeSelectedGeoWithGeogebraCommonKernelGeosGeoElement:bool_ withBoolean:YES withBoolean:NO];
            [((GeogebraCommonMainApp *) nil_chk(app_)) updateSelectionWithBoolean:NO];
            [((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(bool_)) updateCascade];
          }
        }
        else {
          GeogebraCommonKernelGeosGeoElement *geo1 = [self chooseGeoWithJavaUtilArrayList:hits withBoolean:YES];
          if (geo1 != nil) {
            focusNeeded = NO;
            [self runScriptsIfNeededWithGeogebraCommonKernelGeosGeoElement:geo1];
          }
        }
      }
    }
  }
  if (focusNeeded && mode_ != GeogebraCommonEuclidianEuclidianConstants_MODE_SELECTION_LISTENER) {
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) requestFocusInWindow];
  }
  return changedKernel;
}

- (void)hitCheckBoxWithGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)bool_ {
  [bool_ setValueWithBoolean:![((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(bool_)) getBoolean]];
  self->checkboxChangeOccured_ = YES;
  self->checkBoxOrButtonJustHitted_ = YES;
}

- (GeogebraCommonEuclidianHits *)addPointCreatedForMouseReleasedWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)releasedHits {
  GeogebraCommonEuclidianHits *hits = releasedHits;
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    hits = [new_GeogebraCommonEuclidianHits_init() autorelease];
    [hits addWithId:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(pointCreated_, [GeogebraCommonKernelGeosGeoElement class])];
  }
  return hits;
}

- (jboolean)moveModeWithInt:(jint)evMode {
  if (evMode == GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE) {
    return YES;
  }
  return NO;
}

- (jboolean)hitResetIcon {
  return [((GeogebraCommonMainApp *) nil_chk(app_)) showResetIcon] && ((((GeogebraCommonAwtGPoint *) nil_chk(mouseLoc_))->y_ < 18) && (mouseLoc_->x_ > ([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getViewWidth] - 18)));
}

- (void)processMouseMovedWithGeogebraCommonEuclidianEventAbstractEvent:(GeogebraCommonEuclidianEventAbstractEvent *)event {
  jboolean repaintNeeded;
  if ([self hitResetIcon]) {
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setToolTipTextWithNSString:[((GeogebraCommonMainLocalization *) nil_chk(l10n_)) getPlainTooltipWithNSString:@"resetConstruction"]];
    [view_ setHitCursor];
    return;
  }
  jboolean hitAnimationButton = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) hitAnimationButtonWithInt:[((GeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) getX] withInt:[event getY]];
  repaintNeeded = [view_ setAnimationButtonsHighlightedWithBoolean:hitAnimationButton];
  if (hitAnimationButton) {
    if ([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) isAnimationPaused]) {
      [view_ setToolTipTextWithNSString:[((GeogebraCommonMainLocalization *) nil_chk(l10n_)) getPlainTooltipWithNSString:@"Play"]];
    }
    else {
      [view_ setToolTipTextWithNSString:[((GeogebraCommonMainLocalization *) nil_chk(l10n_)) getPlainTooltipWithNSString:@"Pause"]];
    }
    [view_ setHitCursor];
    [view_ repaintView];
    return;
  }
  GeogebraCommonEuclidianHits *hits = [new_GeogebraCommonEuclidianHits_init() autorelease];
  jboolean noHighlighting = NO;
  [self setAltDownWithBoolean:[event isAltDown]];
  GeogebraCommonKernelGeosGeoElement *geo = [view_ getLabelHitWithGeogebraCommonAwtGPoint:mouseLoc_ withGeogebraCommonEuclidianEventPointerEventTypeEnum:[event getType]];
  if (geo != nil) {
    mouseIsOverLabel__ = YES;
  }
  else {
    mouseIsOverLabel__ = NO;
  }
  if ([self moveModeWithInt:mode_]) {
    if (geo != nil) {
      noHighlighting = YES;
      [((GeogebraCommonEuclidianHits *) nil_chk(tempArrayList_)) clear];
      [tempArrayList_ addWithId:geo];
      hits = tempArrayList_;
    }
  }
  if ([hits isEmpty]) {
    [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:[event getType]];
    hits = [view_ getHits];
    [self switchModeForRemovePolygonsWithGeogebraCommonEuclidianHits:hits];
  }
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    [view_ setToolTipTextWithNSString:nil];
    [view_ setDefaultCursor];
  }
  else {
    if (([event isShiftDown] || mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATEVIEW) && ([hits size] >= 1)) {
      if ([hits hasXAxis]) {
        [view_ setResizeXAxisCursor];
      }
      else if ([hits hasYAxis]) {
        [view_ setResizeYAxisCursor];
      }
      else {
        [view_ setHitCursor];
      }
    }
    else {
      [view_ setHitCursor];
    }
  }
  GeogebraCommonEuclidianHits *tempFullHits = [hits clone];
  hits = [hits getTopHits];
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) size] == 1) {
    GeogebraCommonKernelGeosGeoElement *hit = [hits getWithInt:0];
    jint labelMode = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(hit)) getLabelMode];
    if ([hit isGeoNumeric] && [((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(hit, [GeogebraCommonKernelGeosGeoNumeric class])) isSlider] && ((labelMode == GeogebraCommonKernelGeosGeoElement_LABEL_NAME_VALUE) || (labelMode == GeogebraCommonKernelGeosGeoElement_LABEL_VALUE))) {
      if ((pastePreviewSelected_ == nil) ? YES : ([pastePreviewSelected_ isEmpty])) {
        [self setStartPointLocationWithDouble:[((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(hit, [GeogebraCommonKernelGeosGeoNumeric class])) getSliderX] withDouble:[((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(hit, [GeogebraCommonKernelGeosGeoNumeric class])) getSliderY]];
      }
    }
  }
  if (![hits isEmpty]) {
    jboolean alwaysOn = NO;
    if ([view_ getAllowToolTips] == GeogebraCommonPluginEuclidianStyleConstants_TOOLTIPS_ON) {
      alwaysOn = YES;
    }
    NSString *text = GeogebraCommonKernelGeosGeoElement_getToolTipDescriptionHTMLWithJavaUtilArrayList_withBoolean_withBoolean_withBoolean_(hits, YES, YES, alwaysOn);
    if ([@"<html></html>" isEqual:text]) {
      text = nil;
    }
    [view_ setToolTipTextWithNSString:text];
  }
  else {
    [view_ setToolTipTextWithNSString:nil];
  }
  if ([view_ getPreviewDrawable] != nil) {
    [view_ updatePreviewable];
    repaintNeeded = YES;
  }
  if ((pastePreviewSelected_ != nil) && ![pastePreviewSelected_ isEmpty]) {
    [self transformCoords];
    [self updatePastePreviewPosition];
    repaintNeeded = YES;
  }
  else if ([view_ getShowMouseCoords] && [view_ getAllowShowMouseCoords]) {
    [self transformCoords];
    repaintNeeded = YES;
  }
  [self startCollectingMinorRepaints];
  jboolean control = [((GeogebraCommonMainApp *) nil_chk(app_)) isControlDownWithGeogebraCommonEuclidianEventAbstractEvent:event];
  if (noHighlighting ? [self refreshHighlightingWithGeogebraCommonEuclidianHits:nil withBoolean:control] : [self refreshHighlightingWithGeogebraCommonEuclidianHits:tempFullHits withBoolean:control]) {
    [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
  }
  else if (repaintNeeded) {
    [view_ repaintView];
  }
  [self stopCollectingMinorRepaints];
}

- (void)wrapMouseMovedWithGeogebraCommonEuclidianEventAbstractEvent:(GeogebraCommonEuclidianEventAbstractEvent *)event {
  if ([self isTextfieldHasFocus]) {
    return;
  }
  [self setMouseLocationWithGeogebraCommonEuclidianEventAbstractEvent:event];
  [self processMouseMovedWithGeogebraCommonEuclidianEventAbstractEvent:event];
}

- (void)resetToolTipManager {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)wrapMouseExitedWithGeogebraCommonEuclidianEventAbstractEvent:(GeogebraCommonEuclidianEventAbstractEvent *)event {
  if ([self isTextfieldHasFocus]) {
    return;
  }
  [((GeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfoIfSetCoordSystemOccured];
  [self startCollectingMinorRepaints];
  [self refreshHighlightingWithGeogebraCommonEuclidianHits:nil withBoolean:[app_ isControlDownWithGeogebraCommonEuclidianEventAbstractEvent:event]];
  [self resetToolTipManager];
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setAnimationButtonsHighlightedWithBoolean:NO];
  [view_ setShowMouseCoordsWithBoolean:NO];
  GeogebraCommonEuclidianEuclidianController_set_mouseLoc_(self, nil);
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
  [self stopCollectingMinorRepaints];
  [view_ mouseExited];
}

- (void)handleSelectClickWithJavaUtilArrayList:(JavaUtilArrayList *)geos
                                   withBoolean:(jboolean)ctrlDown {
  if (geos == nil) {
    [((GeogebraCommonMainSelectionManager *) nil_chk(selection_)) clearSelectedGeos];
  }
  else {
    if (ctrlDown) {
      [((GeogebraCommonMainSelectionManager *) nil_chk(selection_)) toggleSelectedGeoWithGeogebraCommonKernelGeosGeoElement:[self chooseGeoWithJavaUtilArrayList:geos withBoolean:YES]];
    }
    else {
      if (!moveModeSelectionHandled_) {
        GeogebraCommonKernelGeosGeoElement *geo = [self chooseGeoWithJavaUtilArrayList:geos withBoolean:YES];
        if (geo != nil) {
          [((GeogebraCommonMainSelectionManager *) nil_chk(selection_)) clearSelectedGeosWithBoolean:NO];
          [selection_ addSelectedGeoWithGeogebraCommonKernelGeosGeoElement:geo];
        }
      }
    }
  }
}

- (void)wrapMouseclickedWithBoolean:(jboolean)control
                            withInt:(jint)clickCount
withGeogebraCommonEuclidianEventPointerEventTypeEnum:(GeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  if (clickCount == 2) {
    if ([((GeogebraCommonMainApp *) nil_chk(app_)) isApplet] || control) {
      return;
    }
    [((GeogebraCommonMainSelectionManager *) nil_chk(selection_)) clearSelectedGeosWithBoolean:YES withBoolean:NO];
    [app_ updateSelectionWithBoolean:NO];
    [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
    GeogebraCommonEuclidianHits *hits = [((GeogebraCommonEuclidianHits *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits])) getTopHits];
    [self switchModeForRemovePolygonsWithGeogebraCommonEuclidianHits:hits];
    if (![((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
      [app_ setModeWithInt:GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE];
      GeogebraCommonKernelGeosGeoElement *geo0 = [hits getWithInt:0];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo0)) isGeoNumeric] && [((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo0, [GeogebraCommonKernelGeosGeoNumeric class])) isSlider]) {
        [((GeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showPropertiesDialogWithJavaUtilArrayList:hits];
      }
      else if (![geo0 isFixed] && !([geo0 isGeoBoolean] && [geo0 isIndependent]) && !([geo0 isGeoImage] && [geo0 isIndependent]) && ![geo0 isGeoButton]) {
        [((GeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showRedefineDialogWithGeogebraCommonKernelGeosGeoElement:[hits getWithInt:0] withBoolean:YES];
      }
    }
  }
}

- (jboolean)textfieldJustFocusedWWithInt:(jint)x
                                 withInt:(jint)y
withGeogebraCommonEuclidianEventPointerEventTypeEnum:(GeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  return NO;
}

- (void)resetMovedGeoPoint {
  GeogebraCommonEuclidianEuclidianController_set_movedGeoPoint_(self, nil);
}

- (void)setStartPointLocation {
  [self setStartPointLocationWithDouble:xRW_ withDouble:yRW_];
}

- (void)setStartPointLocationWithOriginWithDouble:(jdouble)x
                                       withDouble:(jdouble)y {
  [self setStartPointLocationWithDouble:xRW_ - x withDouble:yRW_ - y];
}

- (void)handleMovedElementMultiple {
  moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_MULTIPLE_OBJECTS;
  [self setStartPointLocation];
  GeogebraCommonEuclidianEuclidianController_set_startLoc_(self, mouseLoc_);
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setDragCursor];
  if (translationVec_ == nil) {
    GeogebraCommonEuclidianEuclidianController_setAndConsume_translationVec_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(2));
  }
}

- (void)handleMovedElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                     withBoolean:(jboolean)multiple
            withGeogebraCommonEuclidianEventPointerEventTypeEnum:(GeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  [self resetMovedGeoPoint];
  GeogebraCommonEuclidianEuclidianController_set_movedGeoElement_(self, geo);
  moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_NONE;
  if ((movedGeoElement_ != nil) && multiple) {
    [self handleMovedElementMultiple];
  }
  else if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(movedGeoElement_)) isMoveableWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:view_]) {
    [self handleMovedElementDependent];
  }
  else {
    [self handleMovedElementFreeWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
  }
}

- (jboolean)handleMovedElementDependentWithChangeableCoordParentNumbers {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(movedGeoElement_)) hasChangeableCoordParentNumbers]) {
    [movedGeoElement_ recordChangeableCoordParentNumbers];
    GeogebraCommonEuclidianEuclidianController_setAndConsume_translateableGeos_(self, new_JavaUtilArrayList_init());
    [translateableGeos_ addWithId:movedGeoElement_];
    return YES;
  }
  return NO;
}

- (void)handleMovedElementDependent {
  GeogebraCommonEuclidianEuclidianController_set_translateableGeos_(self, nil);
  GeogebraCommonKernelGeosGeoVector *vec = nil;
  jboolean sameVector = YES;
  if ([GeogebraCommonKernelGeosGeoPoly_class_() isInstance:movedGeoElement_]) {
    id<GeogebraCommonKernelGeosGeoPoly> poly = (id<GeogebraCommonKernelGeosGeoPoly>) check_protocol_cast(movedGeoElement_, @protocol(GeogebraCommonKernelGeosGeoPoly));
    IOSObjectArray *pts = [((id<GeogebraCommonKernelGeosGeoPoly>) nil_chk(poly)) getPoints];
    GeogebraCommonKernelAlgosAlgoElement *algo = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(pts), 0), [GeogebraCommonKernelGeosGeoElement class])))) getParentAlgorithm];
    if ([algo isKindOfClass:[GeogebraCommonKernelAlgosAlgoTranslate class]]) {
      IOSObjectArray *input = [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getInput];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(input), 1))) isIndependent]) {
        vec = (GeogebraCommonKernelGeosGeoVector *) check_class_cast(IOSObjectArray_Get(input, 1), [GeogebraCommonKernelGeosGeoVector class]);
        for (jint i = 1; i < pts->size_; i++) {
          algo = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(pts, i), [GeogebraCommonKernelGeosGeoElement class])))) getParentAlgorithm];
          if (!([algo isKindOfClass:[GeogebraCommonKernelAlgosAlgoTranslate class]])) {
            sameVector = NO;
            break;
          }
          input = [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getInput];
          GeogebraCommonKernelGeosGeoVector *vec2 = (GeogebraCommonKernelGeosGeoVector *) check_class_cast(IOSObjectArray_Get(nil_chk(input), 1), [GeogebraCommonKernelGeosGeoVector class]);
          if (vec != vec2) {
            sameVector = NO;
            break;
          }
        }
      }
    }
  }
  else if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(movedGeoElement_)) isGeoSegment] || [movedGeoElement_ isGeoRay] || ([[movedGeoElement_ getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoVector class]])) {
    id<GeogebraCommonKernelKernelNDGeoPointND> start = nil;
    id<GeogebraCommonKernelKernelNDGeoPointND> end = nil;
    if ([[movedGeoElement_ getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoVector class]]) {
      GeogebraCommonKernelAlgosAlgoVector *algoVec = (GeogebraCommonKernelAlgosAlgoVector *) check_class_cast([movedGeoElement_ getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoVector class]);
      start = [((JavaUtilArrayList *) nil_chk([((GeogebraCommonKernelAlgosAlgoVector *) nil_chk(algoVec)) getInputPoints])) getWithInt:0];
      end = [((JavaUtilArrayList *) nil_chk([algoVec getInputPoints])) getWithInt:1];
      if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(start)) isIndependent] && ![((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(end)) isIndependent]) {
        end = nil;
        GeogebraCommonKernelMatrixCoords *coords = [start getInhomCoords];
        *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) = xRW_ - [((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX];
        *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) = yRW_ - [coords getY];
        moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_POINT_WITH_OFFSET;
        GeogebraCommonEuclidianEuclidianController_set_movedGeoPoint_(self, start);
        return;
      }
    }
    else {
      id<GeogebraCommonKernelKernelNDGeoLineND> line = (id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(movedGeoElement_, @protocol(GeogebraCommonKernelKernelNDGeoLineND));
      start = [line getStartPoint];
      end = [line getEndPoint];
    }
    if ((start != nil) && (end != nil)) {
      GeogebraCommonKernelAlgosAlgoElement *algo = [start getParentAlgorithm];
      GeogebraCommonKernelAlgosAlgoElement *algo2 = [end getParentAlgorithm];
      if (([algo isKindOfClass:[GeogebraCommonKernelAlgosAlgoTranslate class]]) && ([algo2 isKindOfClass:[GeogebraCommonKernelAlgosAlgoTranslate class]])) {
        IOSObjectArray *input = [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getInput];
        vec = (GeogebraCommonKernelGeosGeoVector *) check_class_cast(IOSObjectArray_Get(nil_chk(input), 1), [GeogebraCommonKernelGeosGeoVector class]);
        IOSObjectArray *input2 = [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo2)) getInput];
        GeogebraCommonKernelGeosGeoVector *vec2 = (GeogebraCommonKernelGeosGeoVector *) check_class_cast(IOSObjectArray_Get(nil_chk(input2), 1), [GeogebraCommonKernelGeosGeoVector class]);
        if (vec != vec2) {
          sameVector = NO;
        }
      }
    }
  }
  else if ([movedGeoElement_ isTranslateable]) {
    GeogebraCommonKernelAlgosAlgoElement *algo = [movedGeoElement_ getParentAlgorithm];
    if ([algo isKindOfClass:[GeogebraCommonKernelAlgosAlgoTranslate class]]) {
      IOSObjectArray *input = [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getInput];
      if (([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(input), 1))) isIndependent] || [[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, 1))) getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoVectorPoint class]]) && [GeogebraCommonKernelKernelNDGeoVectorND_class_() isInstance:IOSObjectArray_Get(input, 1)]) {
        vec = (GeogebraCommonKernelGeosGeoVector *) check_class_cast(IOSObjectArray_Get(input, 1), [GeogebraCommonKernelGeosGeoVector class]);
      }
    }
  }
  else if ([[movedGeoElement_ getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoVectorPoint class]]) {
    vec = (GeogebraCommonKernelGeosGeoVector *) check_class_cast(movedGeoElement_, [GeogebraCommonKernelGeosGeoVector class]);
  }
  if (vec != nil) {
    if ([[vec getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoVectorPoint class]]) {
      GeogebraCommonKernelAlgosAlgoVectorPoint *algo = (GeogebraCommonKernelAlgosAlgoVectorPoint *) check_class_cast([vec getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoVectorPoint class]);
      moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_POINT_WITH_OFFSET;
      *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) = xRW_ - vec->x_;
      *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) = yRW_ - vec->y_;
      GeogebraCommonEuclidianEuclidianController_set_movedGeoPoint_(self, [((GeogebraCommonKernelAlgosAlgoVectorPoint *) nil_chk(algo)) getP]);
      return;
    }
    if (sameVector && (([vec getLabelSimple] == nil) || [vec isIndependent])) {
      *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) = xRW_ - vec->x_;
      *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) = yRW_ - vec->y_;
      GeogebraCommonEuclidianEuclidianController_set_movedGeoVector_(self, vec);
      moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_VECTOR_NO_GRID;
      return;
    }
  }
  if (![self handleMovedElementDependentWithChangeableCoordParentNumbers] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(movedGeoElement_)) hasMoveableInputPointsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:view_]) {
    if ([movedGeoElement_ isGeoLine] || [movedGeoElement_ isGeoPolygon] || ([movedGeoElement_ isKindOfClass:[GeogebraCommonKernelGeosGeoPolyLine class]]) || [movedGeoElement_ isGeoConic] || [movedGeoElement_ isGeoImage] || [movedGeoElement_ isGeoList] || [movedGeoElement_ isGeoVector]) {
      if (translateableGeos_ == nil) GeogebraCommonEuclidianEuclidianController_setAndConsume_translateableGeos_(self, new_JavaUtilArrayList_init());
      else [translateableGeos_ clear];
      GeogebraCommonEuclidianEuclidianController_addMovedGeoElementFreeInputPointsToTranslateableGeos(self);
      if ([movedGeoElement_ isGeoList]) [((JavaUtilArrayList *) nil_chk(translateableGeos_)) addWithId:movedGeoElement_];
    }
  }
  [self handleMovedElementDependentInitMode];
}

- (void)handleMovedElementDependentInitMode {
  if (translateableGeos_ != nil && [translateableGeos_ size] > 0) {
    moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_DEPENDENT;
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([translateableGeos_ getWithInt:0])) isGeoPoint]) {
      id<GeogebraCommonKernelKernelNDGeoPointND> point = ((id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([translateableGeos_ getWithInt:0], @protocol(GeogebraCommonKernelKernelNDGeoPointND)));
      if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getParentAlgorithm] != nil) {
        *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) = 0;
        *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) = 0;
      }
      else {
        [point getInhomCoordsWithDoubleArray:transformCoordsOffset_];
        *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) -= xRW_;
        *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) -= yRW_;
      }
    }
    [self setStartPointLocation];
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setDragCursor];
    if (translationVec_ == nil) {
      GeogebraCommonEuclidianEuclidianController_setAndConsume_translationVec_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(2));
    }
  }
  else {
    moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_NONE;
  }
}

- (jboolean)handleMovedElementFreePoint {
  return GeogebraCommonEuclidianEuclidianController_handleMovedElementFreePoint(self);
}

- (jboolean)handleMovedElementFreeText {
  return GeogebraCommonEuclidianEuclidianController_handleMovedElementFreeText(self);
}

- (void)handleMovedElementFreeWithGeogebraCommonEuclidianEventPointerEventTypeEnum:(GeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  if (GeogebraCommonEuclidianEuclidianController_handleMovedElementFreePoint(self)) {
    return;
  }
  else if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(movedGeoElement_)) isGeoLine]) {
    moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_LINE;
    GeogebraCommonEuclidianEuclidianController_set_movedGeoLine_(self, (id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(movedGeoElement_, @protocol(GeogebraCommonKernelKernelNDGeoLineND)));
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setShowMouseCoordsWithBoolean:YES];
    [view_ setDragCursor];
  }
  else if ([movedGeoElement_ isGeoVector]) {
    GeogebraCommonEuclidianEuclidianController_set_movedGeoVector_(self, (id<GeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast(movedGeoElement_, @protocol(GeogebraCommonKernelKernelNDGeoVectorND)));
    if ([movedGeoVector_ hasAbsoluteLocation]) {
      id<GeogebraCommonKernelKernelNDGeoPointND> sP = [movedGeoVector_ getStartPoint];
      jdouble sx = 0;
      jdouble sy = 0;
      if (sP != nil) {
        GeogebraCommonKernelMatrixCoords *c = [((GeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCompanion])) getCoordsForViewWithGeogebraCommonKernelKernelNDGeoPointND:sP];
        sx = [((GeogebraCommonKernelMatrixCoords *) nil_chk(c)) getX];
        sy = [c getY];
      }
      GeogebraCommonKernelMatrixCoords *vCoords = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[movedGeoVector_ getCoordsInD3]];
      if ((2.0 * GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(xRW_ - sx, yRW_ - sy)) < GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(vCoords)) getX], [vCoords getY])) {
        moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_VECTOR_STARTPOINT;
        if (sP == nil) {
          sP = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction]) autorelease];
          [sP setCoordsWithDouble:xRW_ withDouble:xRW_ withDouble:1.0];
          @try {
            [movedGeoVector_ setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:sP];
          }
          @catch (JavaLangException *ex) {
            [((JavaLangException *) nil_chk(ex)) printStackTrace];
          }
        }
      }
      else {
        moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_VECTOR;
      }
    }
    else {
      moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_VECTOR;
    }
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setShowMouseCoordsWithBoolean:YES];
    [view_ setDragCursor];
  }
  else if (GeogebraCommonEuclidianEuclidianController_handleMovedElementFreeText(self)) {
    return;
  }
  else if ([movedGeoElement_ isGeoConic]) {
    moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_CONIC;
    GeogebraCommonEuclidianEuclidianController_set_movedGeoConic_(self, (GeogebraCommonKernelGeosGeoConic *) check_class_cast(movedGeoElement_, [GeogebraCommonKernelGeosGeoConic class]));
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setShowMouseCoordsWithBoolean:NO];
    [view_ setDragCursor];
    if ([movedGeoConic_ getType] == GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA) {
      jdouble vX = [((GeogebraCommonKernelGeosGeoVec2D *) nil_chk(movedGeoConic_->b_)) getX];
      jdouble vY = [movedGeoConic_->b_ getY];
      *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) = vX - xRW_;
      *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) = vY - yRW_;
    }
    [self setStartPointLocation];
    if (tempConic_ == nil) {
      GeogebraCommonEuclidianEuclidianController_setAndConsume_tempConic_(self, new_GeogebraCommonKernelGeosGeoConic_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction]));
    }
    [((GeogebraCommonKernelGeosGeoConic *) nil_chk(tempConic_)) setWithGeogebraCommonKernelGeosGeoElement:movedGeoConic_];
  }
  else if ([movedGeoElement_ isGeoImplicitPoly]) {
    moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_IMPLICITPOLY;
    GeogebraCommonEuclidianEuclidianController_set_movedGeoImplicitPoly_(self, (GeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(movedGeoElement_, [GeogebraCommonKernelImplicitGeoImplicitPoly class]));
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setShowMouseCoordsWithBoolean:NO];
    [view_ setDragCursor];
    [self setStartPointLocation];
    if (tempImplicitPoly_ == nil) {
      GeogebraCommonEuclidianEuclidianController_setAndConsume_tempImplicitPoly_(self, new_GeogebraCommonKernelImplicitGeoImplicitPoly_initWithGeogebraCommonKernelImplicitGeoImplicitPoly_(movedGeoImplicitPoly_));
    }
    else {
      [tempImplicitPoly_ setWithGeogebraCommonKernelGeosGeoElement:movedGeoImplicitPoly_];
    }
    if (tempDependentPointX_ == nil) {
      GeogebraCommonEuclidianEuclidianController_setAndConsume_tempDependentPointX_(self, new_JavaUtilArrayList_init());
    }
    else {
      [tempDependentPointX_ clear];
    }
    if (tempDependentPointY_ == nil) {
      GeogebraCommonEuclidianEuclidianController_setAndConsume_tempDependentPointY_(self, new_JavaUtilArrayList_init());
    }
    else {
      [tempDependentPointY_ clear];
    }
    if (moveDependentPoints_ == nil) {
      GeogebraCommonEuclidianEuclidianController_setAndConsume_moveDependentPoints_(self, new_JavaUtilArrayList_init());
    }
    else {
      [moveDependentPoints_ clear];
    }
    for (GeogebraCommonKernelGeosGeoElement * __strong f in nil_chk([movedGeoImplicitPoly_ getAllChildren])) {
      if (([f isKindOfClass:[GeogebraCommonKernelGeosGeoPoint class]]) && [movedGeoImplicitPoly_ isParentOfWithGeogebraCommonKernelKernelNDGeoElementND:f]) {
        GeogebraCommonKernelGeosGeoPoint *g = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(f, [GeogebraCommonKernelGeosGeoPoint class]);
        if (!GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelGeosGeoPoint *) nil_chk(g)) getZ])) {
          [((JavaUtilArrayList *) nil_chk(moveDependentPoints_)) addWithId:g];
          [((JavaUtilArrayList *) nil_chk(tempDependentPointX_)) addWithId:JavaLangDouble_valueOfWithDouble_([g getX] / [g getZ])];
          [((JavaUtilArrayList *) nil_chk(tempDependentPointY_)) addWithId:JavaLangDouble_valueOfWithDouble_([g getY] / [g getZ])];
        }
      }
    }
  }
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(movedGeoElement_)) isGeoFunction]) {
    if ([[movedGeoElement_ getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoFunctionFreehand class]]) {
      GeogebraCommonKernelAlgosAlgoFunctionFreehand *algo = (GeogebraCommonKernelAlgosAlgoFunctionFreehand *) check_class_cast([movedGeoElement_ getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoFunctionFreehand class]);
      GeogebraCommonKernelGeosGeoElement *input = IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelAlgosAlgoFunctionFreehand *) nil_chk(algo)) getInput]), 0);
      if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk([algo getInput]), 0))) isLabelSet] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(input)) getParentAlgorithm] == nil) {
        moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_FREEHAND;
        GeogebraCommonEuclidianEuclidianController_set_movedGeoFunction_(self, (GeogebraCommonKernelGeosGeoFunction *) check_class_cast(movedGeoElement_, [GeogebraCommonKernelGeosGeoFunction class]));
      }
    }
    else if ([movedGeoElement_ isIndependent]) {
      moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_FUNCTION;
      GeogebraCommonEuclidianEuclidianController_set_movedGeoFunction_(self, (GeogebraCommonKernelGeosGeoFunction *) check_class_cast(movedGeoElement_, [GeogebraCommonKernelGeosGeoFunction class]));
      vertexX_ = JavaLangDouble_NaN;
      vertexY_ = JavaLangDouble_NaN;
      initxRW_ = JavaLangDouble_NaN;
      initFactor_ = JavaLangDouble_NaN;
      if ([((GeogebraCommonKernelArithmeticFunction *) nil_chk([movedGeoFunction_ getFunction])) getSymbolicPolynomialFactorsWithBoolean:NO withBoolean:YES] != nil) {
        JavaUtilLinkedList *factors = [((GeogebraCommonKernelArithmeticFunction *) nil_chk([movedGeoFunction_ getFunction])) getPolynomialFactorsWithBoolean:NO];
        if ([((JavaUtilLinkedList *) nil_chk(factors)) size] == 1 && [((GeogebraCommonKernelArithmeticPolyFunction *) nil_chk([factors getWithInt:0])) getDegree] == 2) {
          jdouble c = [movedGeoFunction_ evaluateWithDouble:0];
          jdouble s = [movedGeoFunction_ evaluateWithDouble:1];
          jdouble a = 0.5 * (s + [movedGeoFunction_ evaluateWithDouble:-1]) - c;
          jdouble b = s - a - c;
          vertexX_ = -b / a / 2.0;
          vertexY_ = -(b * b - 4.0 * a * c) / (4.0 * a);
          *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) = vertexX_ - xRW_;
          *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) = vertexY_ - yRW_;
        }
      }
    }
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setShowMouseCoordsWithBoolean:NO];
    [view_ setDragCursor];
    [self setStartPointLocation];
    if (tempFunction_ == nil) {
      GeogebraCommonEuclidianEuclidianController_setAndConsume_tempFunction_(self, new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction]));
    }
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(tempFunction_)) setWithGeogebraCommonKernelGeosGeoElement:movedGeoFunction_];
  }
  else if ([movedGeoElement_ isGeoNumeric] && [movedGeoElement_ getParentAlgorithm] == nil) {
    GeogebraCommonEuclidianEuclidianController_set_movedGeoNumeric_(self, (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(movedGeoElement_, [GeogebraCommonKernelGeosGeoNumeric class]));
    moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_NUMERIC;
    GeogebraCommonEuclidianDrawableND *d = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getDrawableForWithGeogebraCommonKernelGeosGeoElement:movedGeoNumeric_];
    if ([d isKindOfClass:[GeogebraCommonEuclidianDrawDrawSlider class]] && [movedGeoElement_ isEuclidianVisible] && mouseLoc_ != nil) {
      if ([self isMoveSliderExpectedWithInt:[((GeogebraCommonMainApp *) nil_chk(app_)) getCapturingThresholdWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type]]) {
        moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_SLIDER;
        if ([movedGeoNumeric_ isAbsoluteScreenLocActive]) {
          [((GeogebraCommonAwtGPoint *) nil_chk(oldLoc_)) setLocationWithInt:[movedGeoNumeric_ getAbsoluteScreenLocX] withInt:[movedGeoNumeric_ getAbsoluteScreenLocY]];
          GeogebraCommonEuclidianEuclidianController_set_startLoc_(self, mouseLoc_);
          [self setStartPointLocationWithDouble:xRW_ - [view_ toRealWorldCoordXWithDouble:oldLoc_->x_] withDouble:yRW_ - [view_ toRealWorldCoordYWithDouble:oldLoc_->y_]];
          *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) = [view_ toRealWorldCoordXWithDouble:oldLoc_->x_] - xRW_;
          *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) = [view_ toRealWorldCoordYWithDouble:oldLoc_->y_] - yRW_;
        }
        else {
          [self setStartPointLocationWithDouble:xRW_ - [movedGeoNumeric_ getRealWorldLocX] withDouble:yRW_ - [movedGeoNumeric_ getRealWorldLocY]];
          *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) = [movedGeoNumeric_ getRealWorldLocX] - xRW_;
          *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) = [movedGeoNumeric_ getRealWorldLocY] - yRW_;
        }
      }
      else {
        [self setStartPointLocationWithDouble:[movedGeoNumeric_ getSliderX] withDouble:[movedGeoNumeric_ getSliderY]];
        GeogebraCommonEuclidianEuclidianController_moveNumericWithBoolean_withBoolean_(self, YES, YES);
      }
    }
    [view_ setShowMouseCoordsWithBoolean:NO];
    [view_ setDragCursor];
  }
  else if ([movedGeoElement_ isGeoBoolean]) {
    GeogebraCommonEuclidianEuclidianController_set_movedGeoBoolean_(self, (GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(movedGeoElement_, [GeogebraCommonKernelGeosGeoBoolean class]));
    if (GeogebraCommonEuclidianEuclidianController_isCheckboxFixedWithGeogebraCommonKernelGeosGeoBoolean_(self, movedGeoBoolean_)) {
      [movedGeoBoolean_ setValueWithBoolean:![movedGeoBoolean_ getBoolean]];
      [((GeogebraCommonMainSelectionManager *) nil_chk(selection_)) removeSelectedGeoWithGeogebraCommonKernelGeosGeoElement:movedGeoBoolean_];
      [movedGeoBoolean_ updateCascade];
      self->checkboxChangeOccured_ = YES;
    }
    moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_BOOLEAN;
    GeogebraCommonEuclidianEuclidianController_set_startLoc_(self, mouseLoc_);
    ((GeogebraCommonAwtGPoint *) nil_chk(oldLoc_))->x_ = [movedGeoBoolean_ getAbsoluteScreenLocX];
    oldLoc_->y_ = [movedGeoBoolean_ getAbsoluteScreenLocY];
    [self setStartPointLocationWithDouble:xRW_ - [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toRealWorldCoordXWithDouble:oldLoc_->x_] withDouble:yRW_ - [view_ toRealWorldCoordYWithDouble:oldLoc_->y_]];
    *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) = [view_ toRealWorldCoordXWithDouble:oldLoc_->x_ + 5] - xRW_;
    *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) = [view_ toRealWorldCoordYWithDouble:oldLoc_->y_ + 5] - yRW_;
    [view_ setShowMouseCoordsWithBoolean:NO];
    [view_ setDragCursor];
  }
  else if ([GeogebraCommonKernelGeosFurniture_class_() isInstance:movedGeoElement_] && [((id<GeogebraCommonKernelGeosFurniture>) check_protocol_cast(movedGeoElement_, @protocol(GeogebraCommonKernelGeosFurniture))) isFurniture]) {
    if (![((GeogebraCommonMainApp *) nil_chk(app_)) isApplet] || temporaryMode_) {
      GeogebraCommonEuclidianEuclidianController_set_movedGeoButton_(self, (id<GeogebraCommonKernelGeosFurniture>) check_protocol_cast(movedGeoElement_, @protocol(GeogebraCommonKernelGeosFurniture)));
      moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_BUTTON;
      GeogebraCommonEuclidianEuclidianController_set_startLoc_(self, mouseLoc_);
      ((GeogebraCommonAwtGPoint *) nil_chk(oldLoc_))->x_ = [movedGeoButton_ getAbsoluteScreenLocX];
      oldLoc_->y_ = [movedGeoButton_ getAbsoluteScreenLocY];
      [self setStartPointLocationWithDouble:xRW_ - [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toRealWorldCoordXWithDouble:oldLoc_->x_] withDouble:yRW_ - [view_ toRealWorldCoordYWithDouble:oldLoc_->y_]];
      *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) = [view_ toRealWorldCoordXWithDouble:oldLoc_->x_] - xRW_;
      *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) = [view_ toRealWorldCoordYWithDouble:oldLoc_->y_] - yRW_;
      [view_ setShowMouseCoordsWithBoolean:NO];
      [view_ setDragCursor];
    }
    else {
      if (!([movedGeoElement_ isKindOfClass:[GeogebraCommonKernelGeosGeoTextField class]])) {
        [self runScriptsIfNeededWithGeogebraCommonKernelGeosGeoElement:movedGeoElement_];
      }
    }
  }
  else if ([movedGeoElement_ isGeoImage] && [movedGeoElement_ isMoveableWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:view_]) {
    moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_IMAGE;
    GeogebraCommonEuclidianEuclidianController_set_movedGeoImage_(self, (GeogebraCommonKernelGeosGeoImage *) check_class_cast(movedGeoElement_, [GeogebraCommonKernelGeosGeoImage class]));
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setShowMouseCoordsWithBoolean:NO];
    [view_ setDragCursor];
    if ([movedGeoImage_ isAbsoluteScreenLocActive]) {
      [((GeogebraCommonAwtGPoint *) nil_chk(oldLoc_)) setLocationWithInt:[movedGeoImage_ getAbsoluteScreenLocX] withInt:[movedGeoImage_ getAbsoluteScreenLocY]];
      GeogebraCommonEuclidianEuclidianController_set_startLoc_(self, mouseLoc_);
      [self setStartPointLocationWithDouble:xRW_ - [view_ toRealWorldCoordXWithDouble:oldLoc_->x_] withDouble:yRW_ - [view_ toRealWorldCoordYWithDouble:oldLoc_->y_]];
      *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) = [view_ toRealWorldCoordXWithDouble:oldLoc_->x_] - xRW_;
      *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) = [view_ toRealWorldCoordYWithDouble:oldLoc_->y_] - yRW_;
    }
    else if ([movedGeoImage_ hasAbsoluteLocation]) {
      [self setStartPointLocation];
      GeogebraCommonEuclidianEuclidianController_setAndConsume_oldImage_(self, new_GeogebraCommonKernelGeosGeoImage_initWithGeogebraCommonKernelGeosGeoImage_(movedGeoImage_));
      GeogebraCommonKernelGeosGeoPoint *loc = IOSObjectArray_Get(nil_chk([movedGeoImage_ getStartPoints]), 2);
      if (loc != nil) {
        *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) = loc->inhomX_ - xRW_;
        *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) = loc->inhomY_ - yRW_;
      }
      else {
        loc = [movedGeoImage_ getStartPoint];
        if (loc != nil) {
          *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) = loc->inhomX_ - xRW_;
          *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) = loc->inhomY_ - yRW_;
        }
        else {
          loc = IOSObjectArray_Get(nil_chk([movedGeoImage_ getStartPoints]), 1);
          if (loc != nil) {
            *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) = loc->inhomX_ - xRW_;
            *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) = loc->inhomY_ - yRW_;
          }
        }
      }
    }
  }
}

- (void)addMovedGeoElementFreeInputPointsToTranslateableGeos {
  GeogebraCommonEuclidianEuclidianController_addMovedGeoElementFreeInputPointsToTranslateableGeos(self);
}

- (jboolean)isMoveSliderExpectedWithInt:(jint)hitThreshold {
  GeogebraCommonEuclidianDrawDrawSlider *ds = (GeogebraCommonEuclidianDrawDrawSlider *) check_class_cast([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getDrawableForWithGeogebraCommonKernelGeosGeoElement:movedGeoNumeric_], [GeogebraCommonEuclidianDrawDrawSlider class]);
  return ((temporaryMode_ && [((GeogebraCommonMainApp *) nil_chk(app_)) isRightClickEnabled]) || ![((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(movedGeoNumeric_)) isSliderFixed]) && ![((GeogebraCommonEuclidianDrawDrawSlider *) nil_chk(ds)) hitPointWithInt:((GeogebraCommonAwtGPoint *) nil_chk(mouseLoc_))->x_ withInt:mouseLoc_->y_ withInt:hitThreshold] && [ds hitSliderWithInt:mouseLoc_->x_ withInt:mouseLoc_->y_ withInt:hitThreshold];
}

- (void)setStartPointLocationWithDouble:(jdouble)x
                             withDouble:(jdouble)y {
  [((GeogebraCommonAwtGPoint2D_Double *) nil_chk(startPoint_)) setLocationWithDouble:x withDouble:y];
}

- (jboolean)isCheckboxFixedWithGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)geoBool {
  return GeogebraCommonEuclidianEuclidianController_isCheckboxFixedWithGeogebraCommonKernelGeosGeoBoolean_(self, geoBool);
}

- (void)updateSelectionRectangleWithBoolean:(jboolean)keepScreenRatio {
  if ([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getSelectionRectangle] == nil) {
    [view_ setSelectionRectangleWithGeogebraCommonAwtGRectangle:[((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithInt:0 withInt:0]];
  }
  jint dx = ((GeogebraCommonAwtGPoint *) nil_chk(mouseLoc_))->x_ - ((GeogebraCommonAwtGPoint *) nil_chk(selectionStartPoint_))->x_;
  jint dy = mouseLoc_->y_ - selectionStartPoint_->y_;
  jint dxabs = JavaLangMath_absWithInt_(dx);
  jint dyabs = JavaLangMath_absWithInt_(dy);
  jint width = dx;
  jint height = dy;
  if (keepScreenRatio) {
    jdouble ratio = (jdouble) [view_ getViewWidth] / (jdouble) [view_ getViewHeight];
    if (dxabs >= (dyabs * ratio)) {
      height = (jint) (JavaLangMath_roundWithDouble_(dxabs / ratio));
      if (dy < 0) {
        height = -height;
      }
    }
    else {
      width = (jint) JavaLangMath_roundWithDouble_(dyabs * ratio);
      if (dx < 0) {
        width = -width;
      }
    }
  }
  id<GeogebraCommonAwtGRectangle> rect = [view_ getSelectionRectangle];
  if (height >= 0) {
    if (width >= 0) {
      [((id<GeogebraCommonAwtGRectangle>) nil_chk(rect)) setLocationWithInt:selectionStartPoint_->x_ withInt:selectionStartPoint_->y_];
      [rect setSizeWithInt:width withInt:height];
    }
    else {
      [((id<GeogebraCommonAwtGRectangle>) nil_chk(rect)) setLocationWithInt:selectionStartPoint_->x_ + width withInt:selectionStartPoint_->y_];
      [rect setSizeWithInt:-width withInt:height];
    }
  }
  else {
    if (width >= 0) {
      [((id<GeogebraCommonAwtGRectangle>) nil_chk(rect)) setLocationWithInt:selectionStartPoint_->x_ withInt:selectionStartPoint_->y_ + height];
      [rect setSizeWithInt:width withInt:-height];
    }
    else {
      [((id<GeogebraCommonAwtGRectangle>) nil_chk(rect)) setLocationWithInt:selectionStartPoint_->x_ + width withInt:selectionStartPoint_->y_ + height];
      [rect setSizeWithInt:-width withInt:-height];
    }
  }
}

- (jboolean)isDraggingBeyondThreshold {
  return mouseLoc_ != nil && (JavaLangMath_absWithInt_(mouseLoc_->x_ - ((GeogebraCommonAwtGPoint *) nil_chk(selectionStartPoint_))->x_) > GeogebraCommonEuclidianEuclidianController_DRAG_THRESHOLD || JavaLangMath_absWithInt_(mouseLoc_->y_ - selectionStartPoint_->y_) > GeogebraCommonEuclidianEuclidianController_DRAG_THRESHOLD);
}

- (jboolean)freehandModePrepared {
  return NO;
}

- (void)handleMouseDraggedWithBoolean:(jboolean)repaint
withGeogebraCommonEuclidianEventAbstractEvent:(GeogebraCommonEuclidianEventAbstractEvent *)event {
  [self startCollectingMinorRepaints];
  if (!draggingBeyondThreshold_ && [self isDraggingBeyondThreshold]) {
    draggingBeyondThreshold_ = YES;
  }
  if ([self freehandModePrepared]) {
    [self stopCollectingMinorRepaints];
    return;
  }
  if (draggingBeyondThreshold_ && mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_DELETE) {
    [((GeogebraCommonEuclidianModesModeDelete *) nil_chk([self getDeleteMode])) handleMouseDraggedForDeleteWithGeogebraCommonEuclidianEventAbstractEvent:event withInt:[self getDeleteToolSize] withBoolean:NO];
    [self stopCollectingMinorRepaints];
    [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
    return;
  }
  switch (moveMode__) {
    case GeogebraCommonEuclidianEuclidianController_MOVE_ROTATE:
    GeogebraCommonEuclidianEuclidianController_rotateObjectWithBoolean_(self, repaint);
    break;
    case GeogebraCommonEuclidianEuclidianController_MOVE_POINT:
    [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(companion_)) movePointWithBoolean:repaint withGeogebraCommonEuclidianEventAbstractEvent:event];
    break;
    case GeogebraCommonEuclidianEuclidianController_MOVE_POINT_WITH_OFFSET:
    [self movePointWithOffsetWithBoolean:repaint];
    break;
    case GeogebraCommonEuclidianEuclidianController_MOVE_ATTACH_DETACH:
    GeogebraCommonEuclidianEuclidianController_moveAttachDetachWithBoolean_withGeogebraCommonEuclidianEventAbstractEvent_(self, repaint, event);
    break;
    case GeogebraCommonEuclidianEuclidianController_MOVE_LINE:
    [self moveLineWithBoolean:repaint];
    break;
    case GeogebraCommonEuclidianEuclidianController_MOVE_VECTOR:
    case GeogebraCommonEuclidianEuclidianController_MOVE_VECTOR_NO_GRID:
    GeogebraCommonEuclidianEuclidianController_moveVectorWithBoolean_(self, repaint);
    break;
    case GeogebraCommonEuclidianEuclidianController_MOVE_VECTOR_STARTPOINT:
    GeogebraCommonEuclidianEuclidianController_moveVectorStartPointWithBoolean_(self, repaint);
    break;
    case GeogebraCommonEuclidianEuclidianController_MOVE_CONIC:
    GeogebraCommonEuclidianEuclidianController_moveConicWithBoolean_(self, repaint);
    break;
    case GeogebraCommonEuclidianEuclidianController_MOVE_IMPLICITPOLY:
    GeogebraCommonEuclidianEuclidianController_moveImplicitPolyWithBoolean_(self, repaint);
    break;
    case GeogebraCommonEuclidianEuclidianController_MOVE_FREEHAND:
    GeogebraCommonEuclidianEuclidianController_moveFreehandWithBoolean_(self, repaint);
    break;
    case GeogebraCommonEuclidianEuclidianController_MOVE_FUNCTION:
    GeogebraCommonEuclidianEuclidianController_moveFunctionWithBoolean_(self, repaint);
    break;
    case GeogebraCommonEuclidianEuclidianController_MOVE_LABEL:
    GeogebraCommonEuclidianEuclidianController_moveLabel(self);
    break;
    case GeogebraCommonEuclidianEuclidianController_MOVE_TEXT:
    GeogebraCommonEuclidianEuclidianController_moveTextWithBoolean_(self, repaint);
    break;
    case GeogebraCommonEuclidianEuclidianController_MOVE_IMAGE:
    GeogebraCommonEuclidianEuclidianController_moveImageWithBoolean_(self, repaint);
    break;
    case GeogebraCommonEuclidianEuclidianController_MOVE_NUMERIC:
    GeogebraCommonEuclidianEuclidianController_moveNumericWithBoolean_withBoolean_(self, repaint, NO);
    break;
    case GeogebraCommonEuclidianEuclidianController_MOVE_SLIDER:
    GeogebraCommonEuclidianEuclidianController_moveSliderWithBoolean_(self, repaint);
    break;
    case GeogebraCommonEuclidianEuclidianController_MOVE_BOOLEAN:
    GeogebraCommonEuclidianEuclidianController_moveBooleanWithBoolean_(self, repaint);
    break;
    case GeogebraCommonEuclidianEuclidianController_MOVE_BUTTON:
    GeogebraCommonEuclidianEuclidianController_moveButtonWithBoolean_(self, repaint);
    break;
    case GeogebraCommonEuclidianEuclidianController_MOVE_DEPENDENT:
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(movedGeoElement_)) getParentAlgorithm] != nil && [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([movedGeoElement_ getParentAlgorithm])) getClassName] == GeogebraCommonKernelCommandsCommandsEnum_get_AttachCopyToView()) {
      GeogebraCommonEuclidianEuclidianController_moveAttachedWithBoolean_(self, repaint);
    }
    else {
      [self moveDependentWithBoolean:repaint];
    }
    break;
    case GeogebraCommonEuclidianEuclidianController_MOVE_PLANE:
    [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(companion_)) movePlaneWithBoolean:repaint withGeogebraCommonEuclidianEventAbstractEvent:event];
    break;
    case GeogebraCommonEuclidianEuclidianController_MOVE_MULTIPLE_OBJECTS:
    [self moveMultipleObjectsWithBoolean:repaint];
    break;
    case GeogebraCommonEuclidianEuclidianController_MOVE_VIEW:
    if (repaint) {
      if (temporaryMode_ && mode_ != GeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATEVIEW) {
        [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setMoveCursor];
      }
      [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setCoordSystemFromMouseMoveWithInt:((GeogebraCommonAwtGPoint *) nil_chk(mouseLoc_))->x_ - ((GeogebraCommonAwtGPoint *) nil_chk(startLoc_))->x_ withInt:mouseLoc_->y_ - startLoc_->y_ withInt:GeogebraCommonEuclidianEuclidianController_MOVE_VIEW];
    }
    break;
    case GeogebraCommonEuclidianEuclidianController_MOVE_X_AXIS:
    if (repaint) {
      if (temporaryMode_) {
        [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setResizeXAxisCursor];
      }
      jdouble xzero = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getXZero];
      jdouble xzeroRW = 0;
      jdouble newXZero = xzero;
      if (xzero < 0) {
        xzero = 0;
        xzeroRW = [view_ getXmin];
      }
      else if (xzero > [view_ getWidth]) {
        xzero = [view_ getWidth];
        xzeroRW = [view_ getXmax];
      }
      if (JavaLangMath_absWithDouble_(((GeogebraCommonAwtGPoint *) nil_chk(mouseLoc_))->x_ - xzero) < 2) {
        mouseLoc_->x_ = (jint) JavaLangMath_roundWithDouble_(mouseLoc_->x_ > xzero ? xzero + 2 : xzero - 2);
      }
      jdouble xscale = (mouseLoc_->x_ - xzero) / (xTemp_ - xzeroRW);
      if (newXZero < 0) {
        newXZero = -xzeroRW * xscale;
      }
      else if (newXZero > [view_ getWidth]) {
        newXZero = [view_ getWidth] - xzeroRW * xscale;
      }
      [view_ setCoordSystemWithDouble:newXZero withDouble:[view_ getYZero] withDouble:xscale withDouble:[view_ getYscale]];
    }
    break;
    case GeogebraCommonEuclidianEuclidianController_MOVE_Y_AXIS:
    if (repaint) {
      if (temporaryMode_) {
        [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setResizeYAxisCursor];
      }
      jdouble yzero = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getYZero];
      jdouble yzeroRW = 0;
      jdouble newYZero = yzero;
      if (yzero < 0) {
        yzero = 0;
        yzeroRW = [view_ getYmax];
      }
      else if (yzero > [view_ getHeight]) {
        yzero = [view_ getHeight];
        yzeroRW = [view_ getYmin];
      }
      if (JavaLangMath_absWithDouble_(((GeogebraCommonAwtGPoint *) nil_chk(mouseLoc_))->y_ - yzero) < 2) {
        mouseLoc_->y_ = (jint) JavaLangMath_roundWithDouble_(mouseLoc_->y_ > yzero ? [view_ getYZero] + 2 : yzero - 2);
      }
      jdouble yscale = (yzero - mouseLoc_->y_) / (yTemp_ - yzeroRW);
      if (newYZero < 0) {
        newYZero = yzeroRW * yscale;
      }
      else if (newYZero > [view_ getHeight]) {
        newYZero = [view_ getHeight] + yzeroRW * yscale;
      }
      [view_ setCoordSystemWithDouble:[view_ getXZero] withDouble:newYZero withDouble:[view_ getXscale] withDouble:yscale];
    }
    break;
    default:
    ;
  }
  [self stopCollectingMinorRepaints];
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
}

- (jboolean)viewHasHitsForMouseDragged {
  return !([((GeogebraCommonEuclidianHits *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits])) isEmpty]);
}

- (jboolean)processRotate3DView {
  return NO;
}

- (jboolean)allowSelectionRectangle {
  {
    id<GeogebraCommonMainGeoElementSelectionListener> sel;
    switch (mode_) {
      case GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE:
      return moveMode__ == GeogebraCommonEuclidianEuclidianController_MOVE_NONE;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE_ROTATE:
      return GeogebraCommonEuclidianEuclidianController_selPoints(self) > 0;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_SELECTION_LISTENER:
      sel = [((GeogebraCommonMainApp *) nil_chk(app_)) getCurrentSelectionListener];
      if (sel == nil) {
        return NO;
      }
      if ([app_ isUsingFullGui] && [app_ getGuiManager] != nil) {
        return ![((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) isInputFieldSelectionListener];
      }
      return YES;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATE_BY_VECTOR:
      return allowSelectionRectangleForTranslateByVector_;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_DILATE_FROM_POINT:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_POINT:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_LINE:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_CIRCLE:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_ROTATE_BY_ANGLE:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_FITLINE:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CREATE_LIST:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_COPY_VISUAL_STYLE:
      return YES;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_SHOW_HIDE_CHECKBOX:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_BUTTON_ACTION:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_TEXTFIELD_ACTION:
      return YES;
      default:
      return NO;
    }
  }
}

- (void)handleMousePressedForMoveModeWithGeogebraCommonEuclidianEventAbstractEvent:(GeogebraCommonEuclidianEventAbstractEvent *)e
                                                                       withBoolean:(jboolean)drag {
  GeogebraCommonEuclidianEuclidianController_handleMousePressedForMoveModeWithGeogebraCommonEuclidianEventAbstractEvent_withBoolean_(self, e, drag);
}

- (jboolean)shouldCancelDrag {
  if (JavaLangSystem_currentTimeMillis() < GeogebraCommonEuclidianEuclidianConstants_DRAGGING_DELAY + lastMousePressedTime_) {
    return !GeogebraCommonEuclidianEuclidianView_isPenModeWithInt_(mode_);
  }
  return NO;
}

- (void)wrapMouseDraggedWithGeogebraCommonEuclidianEventAbstractEvent:(GeogebraCommonEuclidianEventAbstractEvent *)event
                                                          withBoolean:(jboolean)startCapture {
  if ([self shouldCancelDrag]) {
    return;
  }
  scriptsHaveRun_ = NO;
  if ([self isTextfieldHasFocus] && moveMode__ != GeogebraCommonEuclidianEuclidianController_MOVE_BUTTON) {
    return;
  }
  if (pressedButton_ != nil) {
    [pressedButton_ setDraggedOrContextWithBoolean:YES];
  }
  if (GeogebraCommonEuclidianEuclidianController_penModeWithInt_(mode_)) {
    penDragged_ = YES;
    [((GeogebraCommonEuclidianEuclidianPen *) nil_chk(GeogebraCommonEuclidianEuclidianController_getPen(self))) handleMouseDraggedForPenModeWithGeogebraCommonEuclidianEventAbstractEvent:event];
    return;
  }
  [self clearJustCreatedGeos];
  if (!draggingOccured_) {
    draggingOccured_ = YES;
    if ([self hitResetIcon]) {
      [((GeogebraCommonMainApp *) nil_chk(app_)) reset];
      return;
    }
    else if ([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) hitAnimationButtonWithInt:[((GeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) getX] withInt:[event getY]]) {
      if ([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) isAnimationRunning]) {
        [((GeogebraCommonKernelAnimationManager *) nil_chk([kernel_ getAnimatonManager])) stopAnimation];
      }
      else {
        [((GeogebraCommonKernelAnimationManager *) nil_chk([kernel_ getAnimatonManager])) startAnimation];
      }
      [view_ repaintView];
      [((GeogebraCommonMainApp *) nil_chk(app_)) setUnsaved];
      return;
    }
    if ((mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATE_BY_VECTOR) && (GeogebraCommonEuclidianEuclidianController_selGeos(self) == 0)) {
      GeogebraCommonEuclidianEuclidianController_translateHitsByVectorWithGeogebraCommonEuclidianEventPointerEventTypeEnum_(self, [((GeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) getType]);
    }
    if ([((GeogebraCommonMainApp *) nil_chk(app_)) isRightClickWithGeogebraCommonEuclidianEventAbstractEvent:event] || (mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_POINT) || (mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_COMPLEX_NUMBER) || (mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_POINT_ON_OBJECT) || (mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_SLIDER) || (mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_BUTTON_ACTION) || (mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_TEXTFIELD_ACTION) || (mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_SHOW_HIDE_CHECKBOX) || (mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_TEXT)) {
      [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:[((GeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) getType]];
      GeogebraCommonKernelGeosGeoElement *geo0 = nil;
      GeogebraCommonEuclidianHits *hits0 = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      if (![((GeogebraCommonEuclidianHits *) nil_chk(hits0)) isEmpty]) {
        geo0 = [hits0 getWithInt:0];
      }
      if (![app_ showToolBar] && geo0 != nil && ([geo0 isGeoTextField] || [geo0 isGeoBoolean] || [geo0 isGeoButton] || ([geo0 isGeoNumeric] && [((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo0, [GeogebraCommonKernelGeosGeoNumeric class])) isSlider]))) {
        draggingOccured_ = NO;
        return;
      }
      if (mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_SLIDER) {
        if ([((GeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) size] != 1) {
          return;
        }
        if (!([[((GeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) getWithInt:0] isKindOfClass:[GeogebraCommonKernelGeosGeoNumeric class]])) {
          return;
        }
      }
      else if ((mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_BUTTON_ACTION) || (mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_TEXTFIELD_ACTION)) {
        if ([((GeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) size] != 1) {
          return;
        }
        if (!([[((GeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) getWithInt:0] isKindOfClass:[GeogebraCommonKernelGeosGeoButton class]])) {
          return;
        }
      }
      else if (mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_SHOW_HIDE_CHECKBOX) {
        if ([((GeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) size] != 1) {
          return;
        }
        if (!([[((GeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) getWithInt:0] isKindOfClass:[GeogebraCommonKernelGeosGeoBoolean class]])) {
          return;
        }
      }
      else if (mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_TEXT) {
        if ([((GeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) size] != 1) {
          return;
        }
        if (!([[((GeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) getWithInt:0] isKindOfClass:[GeogebraCommonKernelGeosGeoText class]])) {
          return;
        }
      }
      if ([self viewHasHitsForMouseDragged]) {
        temporaryMode_ = YES;
        oldMode_ = mode_;
        [view_ setModeWithInt:GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE];
        GeogebraCommonEuclidianEuclidianController_handleMousePressedForMoveModeWithGeogebraCommonEuclidianEventAbstractEvent_withBoolean_(self, event, YES);
        dontClearSelection_ = YES;
        return;
      }
    }
    if (![app_ isRightClickEnabled]) {
      return;
    }
    if (mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE_ROTATE) {
      [((GeogebraCommonMainSelectionManager *) nil_chk(selection_)) clearSelectedGeosWithBoolean:NO];
      [selection_ addSelectedGeoWithGeogebraCommonKernelGeosGeoElement:rotationCenter_ withBoolean:NO withBoolean:YES];
    }
  }
  GeogebraCommonEuclidianEuclidianController_set_lastMouseLoc_(self, mouseLoc_);
  [self setMouseLocationWithGeogebraCommonEuclidianEventAbstractEvent:event];
  [self transformCoords];
  if (moveMode__ == GeogebraCommonEuclidianEuclidianController_MOVE_ROTATE_VIEW) {
    if ([self processRotate3DView]) {
      return;
    }
  }
  if ([((GeogebraCommonMainApp *) nil_chk(app_)) isRightClickWithGeogebraCommonEuclidianEventAbstractEvent:event]) {
    if ((!temporaryMode_) || ([((GeogebraCommonEuclidianHits *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits])) size] == 0) || ![((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) getWithInt:0])) isMoveableWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:view_] || (![((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) getWithInt:0])) isGeoPoint] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) getWithInt:0])) hasDrawable3D])) {
      if ([self processRotate3DView]) {
        if (temporaryMode_) {
          temporaryMode_ = NO;
          mode_ = oldMode_;
          [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setModeWithInt:mode_];
        }
        return;
      }
    }
  }
  if ([((GeogebraCommonEuclidianHits *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits])) isEmpty]) {
    if ([app_ isSelectionRectangleAllowed] && (([app_ isRightClickWithGeogebraCommonEuclidianEventAbstractEvent:event]) || [self allowSelectionRectangle]) && !temporaryMode_) {
      if ([app_ isPrerelease]) {
        [self updateSelectionRectangleWithBoolean:NO];
      }
      else {
        [self updateSelectionRectangleWithBoolean:([app_ isRightClickWithGeogebraCommonEuclidianEventAbstractEvent:event] && ![((GeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) isShiftDown]) || ([app_ isMacOS] && [app_ isControlDownWithGeogebraCommonEuclidianEventAbstractEvent:event] && ![((GeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) isShiftDown] && ![app_ isRightClickWithGeogebraCommonEuclidianEventAbstractEvent:event]) || [view_ isLockedAxesRatio]];
      }
      [view_ repaintView];
      return;
    }
  }
  if ([view_ getPreviewDrawable] != nil) {
    [((id<GeogebraCommonEuclidianPreviewable>) nil_chk([view_ getPreviewDrawable])) updateMousePosWithDouble:[view_ toRealWorldCoordXWithDouble:((GeogebraCommonAwtGPoint *) nil_chk(mouseLoc_))->x_] withDouble:[view_ toRealWorldCoordYWithDouble:mouseLoc_->y_]];
  }
  if ([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) isContinuous] && (lastMouseLoc_ != nil)) {
    jdouble dx = ((GeogebraCommonAwtGPoint *) nil_chk(mouseLoc_))->x_ - lastMouseLoc_->x_;
    jdouble dy = mouseLoc_->y_ - lastMouseLoc_->y_;
    jdouble distsq = (dx * dx) + (dy * dy);
    if (distsq > GeogebraCommonEuclidianEuclidianController_MOUSE_DRAG_MAX_DIST_SQUARE) {
      jdouble factor = JavaLangMath_sqrtWithDouble_(GeogebraCommonEuclidianEuclidianController_MOUSE_DRAG_MAX_DIST_SQUARE / distsq);
      dx *= factor;
      dy *= factor;
      jint steps = JavaLangMath_minWithInt_withInt_(J2ObjCFpToInt((1.0 / factor)), GeogebraCommonEuclidianEuclidianController_MAX_CONTINUITY_STEPS);
      jint mlocx = mouseLoc_->x_;
      jint mlocy = mouseLoc_->y_;
      for (jint i = 1; i <= steps; i++) {
        mouseLoc_->x_ = (jint) JavaLangMath_roundWithDouble_(lastMouseLoc_->x_ + (i * dx));
        mouseLoc_->y_ = (jint) JavaLangMath_roundWithDouble_(lastMouseLoc_->y_ + (i * dy));
        [self calcRWcoords];
        [self handleMouseDraggedWithBoolean:NO withGeogebraCommonEuclidianEventAbstractEvent:event];
      }
      if ((mouseLoc_->x_ != mlocx) || (mouseLoc_->y_ != mlocy)) {
        mouseLoc_->x_ = mlocx;
        mouseLoc_->y_ = mlocy;
        [self calcRWcoords];
      }
    }
  }
  if (pastePreviewSelected_ != nil) {
    if (![pastePreviewSelected_ isEmpty]) {
      [self updatePastePreviewPosition];
    }
  }
  [self handleMouseDraggedWithBoolean:YES withGeogebraCommonEuclidianEventAbstractEvent:event];
}

- (void)translateHitsByVectorWithGeogebraCommonEuclidianEventPointerEventTypeEnum:(GeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  GeogebraCommonEuclidianEuclidianController_translateHitsByVectorWithGeogebraCommonEuclidianEventPointerEventTypeEnum_(self, type);
}

- (id<GeogebraCommonKernelKernelNDGeoVectorND>)createVectorForTranslation {
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) Vector];
}

- (id<GeogebraCommonKernelKernelNDGeoVectorND>)createVectorForTranslationWithNSString:(NSString *)label {
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) VectorWithNSString:label];
}

- (void)setTranslateStartWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                    withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)vec {
  *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) = xRW_;
  *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) = yRW_;
}

+ (jboolean)penModeWithInt:(jint)mode2 {
  return GeogebraCommonEuclidianEuclidianController_penModeWithInt_(mode2);
}

- (jboolean)handleMousePressedForViewButtons {
  return NO;
}

- (jboolean)processRightPressFor3D {
  return NO;
}

- (void)createNewPointForModePointWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                      withBoolean:(jboolean)complex {
  if ((mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_POINT) || (mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_COMPLEX_NUMBER)) {
    [((GeogebraCommonEuclidianHits *) nil_chk(hits)) removeAllPolygons];
    [hits removeConicsHittedOnFilling];
    [self createNewPointWithGeogebraCommonEuclidianHits:hits withBoolean:YES withBoolean:NO withBoolean:YES withBoolean:YES withBoolean:complex];
  }
  else {
    [self createNewPointWithGeogebraCommonEuclidianHits:hits withBoolean:YES withBoolean:YES withBoolean:YES withBoolean:YES withBoolean:complex];
  }
}

- (void)createNewPointForModeOtherWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  [self createNewPointWithGeogebraCommonEuclidianHits:hits withBoolean:YES withBoolean:NO withBoolean:YES withBoolean:YES withBoolean:NO];
}

- (void)handleMousePressedForRotateModeWithGeogebraCommonEuclidianEventPointerEventTypeEnum:(GeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  GeogebraCommonKernelGeosGeoElement *geo;
  GeogebraCommonEuclidianHits *hits;
  if (rotationCenter_ == nil) {
    [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
    GeogebraCommonEuclidianEuclidianController_set_rotationCenter_(self, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([self chooseGeoWithJavaUtilArrayList:[((GeogebraCommonEuclidianHits *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits])) getHitsWithGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOPOINT() withGeogebraCommonEuclidianHits:tempArrayList_] withBoolean:YES], [GeogebraCommonKernelGeosGeoPoint class]));
    [((GeogebraCommonMainSelectionManager *) nil_chk(selection_)) addSelectedGeoWithGeogebraCommonKernelGeosGeoElement:rotationCenter_];
    moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_NONE;
  }
  else {
    [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
    hits = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
    [((GeogebraCommonEuclidianHits *) nil_chk(hits)) removePolygons];
    if (![hits isEmpty] && [hits containsWithId:rotationCenter_]) {
      [((GeogebraCommonMainSelectionManager *) nil_chk(selection_)) removeSelectedGeoWithGeogebraCommonKernelGeosGeoElement:rotationCenter_];
      GeogebraCommonEuclidianEuclidianController_set_rotationCenter_(self, nil);
      moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_NONE;
      return;
    }
    moveModeSelectionHandled_ = YES;
    hits = [hits getPointRotateableHitsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:view_ withGeogebraCommonKernelKernelNDGeoPointND:rotationCenter_];
    if (![((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty] && [hits containsWithId:rotGeoElement_]) {
      geo = rotGeoElement_;
    }
    else {
      geo = [self chooseGeoWithJavaUtilArrayList:hits withBoolean:YES];
      [((GeogebraCommonMainSelectionManager *) nil_chk(selection_)) addSelectedGeoWithGeogebraCommonKernelGeosGeoElement:geo];
    }
    GeogebraCommonEuclidianEuclidianController_set_rotGeoElement_(self, geo);
    if (geo != nil) {
      [self doSingleHighlightingWithGeogebraCommonKernelGeosGeoElement:rotGeoElement_];
      rotationLastAngle_ = JavaLangMath_atan2WithDouble_withDouble_(yRW_ - ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(rotationCenter_))->inhomY_, xRW_ - rotationCenter_->inhomX_);
      moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_ROTATE;
    }
    else {
      moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_NONE;
    }
  }
}

- (void)mousePressedTranslatedViewWithGeogebraCommonEuclidianEventPointerEventTypeEnum:(GeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  GeogebraCommonEuclidianEuclidianController_mousePressedTranslatedViewWithGeogebraCommonEuclidianEventPointerEventTypeEnum_(self, type);
}

- (jboolean)moveAxesPossible {
  return ![((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) isLockedAxesRatio] && [view_ isZoomable];
}

- (void)setDragCursorIfMoveView {
  if (moveMode__ == GeogebraCommonEuclidianEuclidianController_MOVE_VIEW) {
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setDragCursor];
  }
}

- (void)switchModeForMousePressedWithGeogebraCommonEuclidianEventAbstractEvent:(GeogebraCommonEuclidianEventAbstractEvent *)e {
  GeogebraCommonEuclidianEventPointerEventTypeEnum *type = [((GeogebraCommonEuclidianEventAbstractEvent *) nil_chk(e)) getType];
  GeogebraCommonEuclidianHits *hits;
  if (mode_ > 1000) [((GeogebraCommonMainApp *) nil_chk(app_)) setModeWithInt:GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE];
  {
    GeogebraCommonKernelGeosGeoPoint *p;
    switch (mode_) {
      case GeogebraCommonEuclidianEuclidianConstants_MODE_COMPLEX_NUMBER:
      [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      [self createNewPointForModePointWithGeogebraCommonEuclidianHits:hits withBoolean:YES];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_POINT:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_POINT_ON_OBJECT:
      [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      [self createNewPointForModePointWithGeogebraCommonEuclidianHits:hits withBoolean:NO];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_SEGMENT:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_SEGMENT_FIXED:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_JOIN:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_RAY:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_VECTOR:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_TWO_POINTS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_POINT_RADIUS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_THREE_POINTS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_ELLIPSE_THREE_POINTS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_HYPERBOLA_THREE_POINTS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_ARC_THREE_POINTS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_SECTOR_THREE_POINTS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCUMCIRCLE_ARC_THREE_POINTS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCUMCIRCLE_SECTOR_THREE_POINTS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_SEMICIRCLE:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CONIC_FIVE_POINTS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_POLYGON:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_POLYLINE:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_REGULAR_POLYGON:
      [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      [((GeogebraCommonEuclidianHits *) nil_chk(hits)) removePolygons];
      [self createNewPointForModeOtherWithGeogebraCommonEuclidianHits:hits];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_VECTOR_POLYGON:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_RIGID_POLYGON:
      [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) size] > 1) {
        [hits removePolygons];
      }
      if ([hits size] == 1 && [((GeogebraCommonKernelGeosGeoElement *) nil_chk([hits getWithInt:0])) isGeoPolygon]) {
      }
      else {
        [self createNewPointWithGeogebraCommonEuclidianHits:hits withBoolean:NO withBoolean:NO withBoolean:NO withBoolean:NO withBoolean:NO];
      }
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATE_BY_VECTOR:
      if (!allowSelectionRectangleForTranslateByVector_) {
        [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
        hits = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
        [((GeogebraCommonEuclidianHits *) nil_chk(hits)) removePolygons];
        if ([hits size] == 0) {
          GeogebraCommonEuclidianEuclidianController_createNewPointWithGeogebraCommonEuclidianHits_withBoolean_withBoolean_withBoolean_(self, hits, NO, YES, YES);
        }
      }
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_PARALLEL:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_ORTHOGONAL:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_ORTHOGONAL_THREE_D:
      [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      [((GeogebraCommonEuclidianHits *) nil_chk(hits)) removePolygons];
      if ([hits size] == 0) {
        GeogebraCommonEuclidianEuclidianController_createNewPointWithGeogebraCommonEuclidianHits_withBoolean_withBoolean_withBoolean_(self, hits, NO, YES, YES);
      }
      else if (GeogebraCommonEuclidianEuclidianController_selLines(self) == 1 && [((GeogebraCommonKernelGeosGeoElement *) nil_chk([hits getWithInt:0])) isPath]) {
        [self createNewPointForModeOtherWithGeogebraCommonEuclidianHits:hits];
      }
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_PARABOLA:
      [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) size] > 0 && [((GeogebraCommonKernelGeosGeoElement *) nil_chk([hits getWithInt:0])) isGeoLine]) {
      }
      else {
        [self createNewPointWithGeogebraCommonEuclidianHits:hits withBoolean:NO withBoolean:NO withBoolean:NO withBoolean:NO withBoolean:NO];
      }
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_LINE_BISECTOR:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_ANGULAR_BISECTOR:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_TANGENTS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_POLAR_DIAMETER:
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_COMPASSES:
      if (type == GeogebraCommonEuclidianEventPointerEventTypeEnum_get_TOUCH()) {
        [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setPreviewWithGeogebraCommonEuclidianPreviewable:nil];
      }
      [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      [((GeogebraCommonEuclidianHits *) nil_chk(hits)) removePolygons];
      if ([hits isEmpty]) {
        GeogebraCommonEuclidianEuclidianController_createNewPointWithGeogebraCommonEuclidianHits_withBoolean_withBoolean_withBoolean_(self, hits, NO, YES, YES);
      }
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_ANGLE:
      [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((GeogebraCommonEuclidianHits *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits])) getTopHits];
      if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
        GeogebraCommonEuclidianEuclidianController_createNewPointWithGeogebraCommonEuclidianHits_withBoolean_withBoolean_withBoolean_(self, hits, NO, NO, YES);
      }
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_ANGLE_FIXED:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_MIDPOINT:
      [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      [((GeogebraCommonEuclidianHits *) nil_chk(hits)) removePolygons];
      if ([hits isEmpty] || (![((GeogebraCommonKernelGeosGeoElement *) nil_chk([hits getWithInt:0])) isGeoSegment] && ![((GeogebraCommonKernelGeosGeoElement *) nil_chk([hits getWithInt:0])) isGeoConic])) {
        GeogebraCommonEuclidianEuclidianController_createNewPointWithGeogebraCommonEuclidianHits_withBoolean_withBoolean_withBoolean_(self, hits, NO, NO, YES);
      }
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE_ROTATE:
      [self handleMousePressedForRotateModeWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE:
      GeogebraCommonEuclidianEuclidianController_handleMousePressedForMoveModeWithGeogebraCommonEuclidianEventAbstractEvent_withBoolean_(self, e, NO);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATEVIEW:
      GeogebraCommonEuclidianEuclidianController_mousePressedTranslatedViewWithGeogebraCommonEuclidianEventPointerEventTypeEnum_(self, type);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_ATTACH_DETACH:
      p = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([((GeogebraCommonEuclidianHits *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getHits])) getFirstHitWithGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOPOINT()], [GeogebraCommonKernelGeosGeoPoint class]);
      if (p != nil && [p isMoveable]) {
        [self handleMovedElementWithGeogebraCommonKernelGeosGeoElement:p withBoolean:NO withGeogebraCommonEuclidianEventPointerEventTypeEnum:GeogebraCommonEuclidianEventPointerEventTypeEnum_get_MOUSE()];
        self->moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_ATTACH_DETACH;
      }
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_DELETE:
      [((GeogebraCommonEuclidianModesModeDelete *) nil_chk([self getDeleteMode])) mousePressedWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      default:
      moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_NONE;
    }
  }
}

- (void)wrapMousePressedWithGeogebraCommonEuclidianEventAbstractEvent:(GeogebraCommonEuclidianEventAbstractEvent *)event {
  if (self->lastMouseRelease_ + GeogebraCommonEuclidianEuclidianConstants_DOUBLE_CLICK_DELAY > JavaLangSystem_currentTimeMillis() && GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_([((GeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) getX] - ((GeogebraCommonAwtGPoint *) nil_chk(lastMouseUpLoc_))->x_, [event getY] - lastMouseUpLoc_->y_) <= 3) {
    self->doubleClickStarted_ = YES;
  }
  lastMousePressedTime_ = JavaLangSystem_currentTimeMillis();
  [((GeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfoIfSetCoordSystemOccured];
  [app_ maySetCoordSystem];
  scriptsHaveRun_ = NO;
  penDragged_ = NO;
  if ([app_ isUsingFullGui] && [app_ getGuiManager] != nil) {
    [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) setFocusedPanelWithGeogebraCommonEuclidianEventAbstractEvent:event withBoolean:NO];
    [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) mousePressedForPropertiesView];
    if ([GeogebraCommonGuiViewDataPlotPanelEuclidianViewInterface_class_() isInstance:view_]) {
      [self setModeWithInt:GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE];
    }
  }
  [self setMouseLocationWithGeogebraCommonEuclidianEventAbstractEvent:event];
  if ([self handleMousePressedForViewButtons]) {
    return;
  }
  GeogebraCommonEuclidianHits *hits;
  if (GeogebraCommonEuclidianEuclidianController_penModeWithInt_(mode_)) {
    [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:[((GeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) getType]];
    hits = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
    [((GeogebraCommonEuclidianHits *) nil_chk(hits)) removeAllButImages];
    [((GeogebraCommonEuclidianEuclidianPen *) nil_chk(GeogebraCommonEuclidianEuclidianController_getPen(self))) handleMousePressedForPenModeWithGeogebraCommonEuclidianEventAbstractEvent:event withGeogebraCommonEuclidianHits:hits];
    return;
  }
  GeogebraCommonEuclidianEuclidianController_set_pressedButton_(self, [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHitButtonWithGeogebraCommonAwtGPoint:mouseLoc_ withGeogebraCommonEuclidianEventPointerEventTypeEnum:[((GeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) getType]]);
  if (pressedButton_ != nil) {
    [pressedButton_ setPressedWithBoolean:YES];
    [pressedButton_ setDraggedOrContextWithBoolean:[event isMetaDown] || [event isPopupTrigger]];
    if (![event isRightClick]) {
      [self runScriptsIfNeededWithGeogebraCommonKernelGeosGeoElement:[pressedButton_ getButton]];
    }
  }
  [self transformCoords];
  moveModeSelectionHandled_ = NO;
  draggingOccured_ = NO;
  draggingBeyondThreshold_ = NO;
  [view_ setSelectionRectangleWithGeogebraCommonAwtGRectangle:nil];
  [((GeogebraCommonAwtGPoint *) nil_chk(selectionStartPoint_)) setLocationWithGeogebraCommonAwtGPoint:mouseLoc_];
  if ([self hitResetIcon] || [view_ hitAnimationButtonWithInt:[event getX] withInt:[event getY]]) {
    return;
  }
  if ([app_ isRightClickWithGeogebraCommonEuclidianEventAbstractEvent:event]) {
    [self processRightPressFor3D];
    return;
  }
  else if (GeogebraCommonEuclidianEuclidianController_shallMoveViewWithGeogebraCommonEuclidianEventAbstractEvent_(self, event)) {
    [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:[event getType]];
    hits = [view_ getHits];
    [self switchModeForRemovePolygonsWithGeogebraCommonEuclidianHits:hits];
    if (![((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
      dontClearSelection_ = YES;
    }
    if ([hits isEmpty] || ![app_ isPrerelease]) {
      temporaryMode_ = YES;
      oldMode_ = mode_;
      [view_ setModeWithInt:GeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATEVIEW];
    }
    if ([((GeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) hasXAxis] || [((GeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) hasYAxis]) {
      [self processMouseMovedWithGeogebraCommonEuclidianEventAbstractEvent:event];
    }
  }
  [self switchModeForMousePressedWithGeogebraCommonEuclidianEventAbstractEvent:event];
}

- (jboolean)shallMoveViewWithGeogebraCommonEuclidianEventAbstractEvent:(GeogebraCommonEuclidianEventAbstractEvent *)event {
  return GeogebraCommonEuclidianEuclidianController_shallMoveViewWithGeogebraCommonEuclidianEventAbstractEvent_(self, event);
}

- (void)runScriptsIfNeededWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo1 {
  if ([((GeogebraCommonEuclidianHits *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits])) size] > 0 && [[((GeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) getWithInt:0] isKindOfClass:[GeogebraCommonKernelGeosGeoTextField class]]) {
    [view_ requestFocusInWindow];
  }
  if (!scriptsHaveRun_) {
    scriptsHaveRun_ = YES;
    [((GeogebraCommonMainApp *) nil_chk(app_)) runScriptsWithGeogebraCommonKernelGeosGeoElement:geo1 withNSString:nil];
  }
}

- (jboolean)processZoomRectangle {
  id<GeogebraCommonAwtGRectangle> rect = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getSelectionRectangle];
  if (rect == nil) {
    return NO;
  }
  if (([((id<GeogebraCommonAwtGRectangle>) nil_chk(rect)) getWidth] < GeogebraCommonEuclidianEuclidianController_ZOOM_RECT_THRESHOLD) || ([rect getHeight] < GeogebraCommonEuclidianEuclidianController_ZOOM_RECT_THRESHOLD) || ![((GeogebraCommonMainApp *) nil_chk(app_)) isShiftDragZoomEnabled]) {
    [view_ setSelectionRectangleWithGeogebraCommonAwtGRectangle:nil];
    [view_ repaintView];
    return NO;
  }
  [view_ resetMode];
  [view_ setSelectionRectangleWithGeogebraCommonAwtGRectangle:nil];
  [view_ setAnimatedRealWorldCoordSystemWithDouble:[view_ toRealWorldCoordXWithDouble:[rect getMinX]] withDouble:[view_ toRealWorldCoordXWithDouble:[rect getMaxX]] withDouble:[view_ toRealWorldCoordYWithDouble:[rect getMaxY]] withDouble:[view_ toRealWorldCoordYWithDouble:[rect getMinY]] withInt:15 withBoolean:YES];
  return YES;
}

- (void)processSelectionRectangleForTransformationsWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                              withGeogebraCommonKernelGeosTestEnum:(GeogebraCommonKernelGeosTestEnum *)test {
  for (jint i = 0; i < [((GeogebraCommonEuclidianHits *) nil_chk(hits)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [hits getWithInt:i];
    if (!([((GeogebraCommonKernelGeosTestEnum *) nil_chk(test)) checkWithId:geo])) {
      [hits removeWithInt:i];
    }
  }
  [self removeParentPointsWithJavaUtilArrayList:hits];
  [((JavaUtilArrayList *) nil_chk(selectedGeos_)) addAllWithJavaUtilCollection:hits];
  [self setAppSelectedGeosWithJavaUtilArrayList:hits withBoolean:NO];
  [((GeogebraCommonMainApp *) nil_chk(app_)) updateSelectionWithBoolean:[hits size] > 0];
}

- (void)processSelectionRectangleWithBoolean:(jboolean)alt
                                 withBoolean:(jboolean)isControlDown {
  [self startCollectingMinorRepaints];
  [self clearSelections];
  [view_ setHitsWithGeogebraCommonAwtGRectangle:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getSelectionRectangle]];
  GeogebraCommonEuclidianHits *hits = [view_ getHits];
  jboolean changedKernel = NO;
  switch (mode_) {
    case GeogebraCommonEuclidianEuclidianConstants_MODE_SELECTION_LISTENER:
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_POINT:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_LINE:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_CIRCLE:
    [self processSelectionRectangleForTransformationsWithGeogebraCommonEuclidianHits:hits withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_TRANSFORMABLE()];
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_ROTATE_BY_ANGLE:
    [self processSelectionRectangleForTransformationsWithGeogebraCommonEuclidianHits:hits withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_TRANSFORMABLE()];
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATE_BY_VECTOR:
    [self processSelectionRectangleForTransformationsWithGeogebraCommonEuclidianHits:hits withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_TRANSFORMABLE()];
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_DILATE_FROM_POINT:
    [self processSelectionRectangleForTransformationsWithGeogebraCommonEuclidianHits:hits withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_DILATEABLE()];
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CREATE_LIST:
    [self removeParentPointsWithJavaUtilArrayList:hits];
    [((JavaUtilArrayList *) nil_chk(selectedGeos_)) addAllWithJavaUtilCollection:hits];
    [self setAppSelectedGeosWithJavaUtilArrayList:hits];
    changedKernel = GeogebraCommonEuclidianEuclidianController_processModeWithGeogebraCommonEuclidianHits_withBoolean_withGeogebraCommonUtilAsyncOperation_(self, hits, isControlDown, nil);
    [view_ setSelectionRectangleWithGeogebraCommonAwtGRectangle:nil];
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_FITLINE:
    if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) size] == 1) {
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([hits getWithInt:0])) isGeoList]) {
        [((JavaUtilArrayList *) nil_chk(selectedGeos_)) addAllWithJavaUtilCollection:hits];
        [self setAppSelectedGeosWithJavaUtilArrayList:hits];
        changedKernel = GeogebraCommonEuclidianEuclidianController_processModeWithGeogebraCommonEuclidianHits_withBoolean_withGeogebraCommonUtilAsyncOperation_(self, hits, isControlDown, nil);
        [view_ setSelectionRectangleWithGeogebraCommonAwtGRectangle:nil];
        break;
      }
    }
    for (jint i = 0; i < [hits size]; i++) {
      GeogebraCommonKernelGeosGeoElement *geo = [hits getWithInt:i];
      if (!([((GeogebraCommonKernelGeosTestEnum *) nil_chk(GeogebraCommonKernelGeosTestEnum_get_GEOPOINT())) checkWithId:geo])) {
        [hits removeWithInt:i];
      }
    }
    if ([hits size] < 3) {
      [hits clear];
    }
    else {
      [self removeParentPointsWithJavaUtilArrayList:hits];
      [((JavaUtilArrayList *) nil_chk(selectedGeos_)) addAllWithJavaUtilCollection:hits];
      [self setAppSelectedGeosWithJavaUtilArrayList:hits];
      changedKernel = GeogebraCommonEuclidianEuclidianController_processModeWithGeogebraCommonEuclidianHits_withBoolean_withGeogebraCommonUtilAsyncOperation_(self, hits, isControlDown, nil);
      [view_ setSelectionRectangleWithGeogebraCommonAwtGRectangle:nil];
    }
    break;
    default:
    [self setAppSelectedGeosWithJavaUtilArrayList:hits withBoolean:NO];
    [((GeogebraCommonMainApp *) nil_chk(app_)) updateSelectionWithBoolean:(hits != nil)];
    if ((hits != nil) && ([hits size] > 0) && alt && [app_ isUsingFullGui] && [app_ getGuiManager] != nil && [app_ showAlgebraInput]) {
      GeogebraCommonJavaxSwingGTextComponent *textComponent = [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) getAlgebraInputTextField];
      JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
      [sb appendWithNSString:@" {"];
      for (jint i = 0; i < [hits size]; i++) {
        [sb appendWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([hits getWithInt:i])) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
        if (i < ([hits size] - 1)) {
          [sb appendWithNSString:@", "];
        }
      }
      [sb appendWithNSString:@"} "];
      [((GeogebraCommonJavaxSwingGTextComponent *) nil_chk(textComponent)) replaceSelectionWithNSString:[sb description]];
    }
    break;
  }
  if (changedKernel) {
    [((GeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
  }
  [self stopCollectingMinorRepaints];
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
}

- (void)processSelection {
  [self startCollectingMinorRepaints];
  GeogebraCommonEuclidianHits *hits = [new_GeogebraCommonEuclidianHits_init() autorelease];
  [hits addAllWithJavaUtilCollection:[self getAppSelectedGeos]];
  [self clearSelections];
  switch (mode_) {
    case GeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_POINT:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_LINE:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_CIRCLE:
    [self processSelectionRectangleForTransformationsWithGeogebraCommonEuclidianHits:hits withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_TRANSFORMABLE()];
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_ROTATE_BY_ANGLE:
    [self processSelectionRectangleForTransformationsWithGeogebraCommonEuclidianHits:hits withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_TRANSFORMABLE()];
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATE_BY_VECTOR:
    [self processSelectionRectangleForTransformationsWithGeogebraCommonEuclidianHits:hits withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_TRANSFORMABLE()];
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_DILATE_FROM_POINT:
    [self processSelectionRectangleForTransformationsWithGeogebraCommonEuclidianHits:hits withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_DILATEABLE()];
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_FITLINE:
    for (jint i = 0; i < [hits size]; i++) {
      GeogebraCommonKernelGeosGeoElement *geo = [hits getWithInt:i];
      if (!([((GeogebraCommonKernelGeosTestEnum *) nil_chk(GeogebraCommonKernelGeosTestEnum_get_GEOPOINT())) checkWithId:geo])) {
        [hits removeWithInt:i];
      }
    }
    if ([hits size] < 3) {
      [hits clear];
    }
    else {
      [self removeParentPointsWithJavaUtilArrayList:hits];
      [((JavaUtilArrayList *) nil_chk(selectedGeos_)) addAllWithJavaUtilCollection:hits];
      [self setAppSelectedGeosWithJavaUtilArrayList:hits];
      GeogebraCommonEuclidianEuclidianController_processModeWithGeogebraCommonEuclidianHits_withBoolean_withGeogebraCommonUtilAsyncOperation_(self, hits, NO, nil);
      [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setSelectionRectangleWithGeogebraCommonAwtGRectangle:nil];
    }
    break;
    default:
    break;
  }
  [self stopCollectingMinorRepaints];
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
}

- (void)showDrawingPadPopupWithGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)mouse {
  if ([((GeogebraCommonMainApp *) nil_chk(app_)) getGuiManager] != nil) {
    [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) showDrawingPadPopupWithGeogebraCommonEuclidianEuclidianViewInterfaceCommon:view_ withGeogebraCommonAwtGPoint:mouse];
  }
}

- (void)wrapMouseReleasedWithGeogebraCommonEuclidianEventAbstractEvent:(GeogebraCommonEuclidianEventAbstractEvent *)event {
  jint x = [((GeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) getX];
  jint y = [event getY];
  jboolean right = [((GeogebraCommonMainApp *) nil_chk(app_)) isRightClickWithGeogebraCommonEuclidianEventAbstractEvent:event];
  jboolean control = [app_ isControlDownWithGeogebraCommonEuclidianEventAbstractEvent:event];
  jboolean alt = [event isAltDown];
  jboolean meta = [event isPopupTrigger] || [event isMetaDown];
  GeogebraCommonEuclidianEventPointerEventTypeEnum *type = [event getType];
  if (self->doubleClickStarted_ && !draggingOccured_) {
    [self wrapMouseclickedWithBoolean:control withInt:2 withGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
  }
  self->doubleClickStarted_ = NO;
  self->lastMouseRelease_ = JavaLangSystem_currentTimeMillis();
  GeogebraCommonEuclidianEuclidianController_setAndConsume_lastMouseUpLoc_(self, new_GeogebraCommonAwtGPoint_initWithInt_withInt_(x, y));
  [app_ storeUndoInfoIfSetCoordSystemOccured];
  if (pressedButton_ != nil) {
    [pressedButton_ setDraggedOrContextWithBoolean:[pressedButton_ getDraggedOrContext] || meta];
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) requestFocusInWindow];
    [pressedButton_ setPressedWithBoolean:NO];
    GeogebraCommonEuclidianEuclidianController_set_pressedButton_(self, nil);
  }
  if ([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getDeletionRectangle] != nil) {
    [view_ setDeletionRectangleWithGeogebraCommonAwtGRectangle:nil];
    [view_ repaintView];
    [app_ storeUndoInfo];
  }
  *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) = 0;
  *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) = 0;
  if ([self textfieldJustFocusedWWithInt:x withInt:y withGeogebraCommonEuclidianEventPointerEventTypeEnum:type]) {
    return;
  }
  if (GeogebraCommonEuclidianEuclidianController_penModeWithInt_(mode_) && penDragged_) {
    [((GeogebraCommonEuclidianEuclidianPen *) nil_chk(GeogebraCommonEuclidianEuclidianController_getPen(self))) handleMouseReleasedForPenModeWithBoolean:right withInt:x withInt:y];
    [app_ storeUndoInfo];
    return;
  }
  jboolean changedKernel0 = NO;
  if (pastePreviewSelected_ != nil) {
    [self mergeStickyPointsAfterPaste];
    for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(pastePreviewSelectedAndDependent_)) size]; i++) {
      GeogebraCommonKernelGeosGeoElement *geo = [pastePreviewSelectedAndDependent_ getWithInt:i];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint]) {
        if (![((JavaUtilArrayList *) nil_chk([view_ getStickyPointList])) containsWithId:geo]) {
          [((JavaUtilArrayList *) nil_chk([view_ getStickyPointList])) addWithId:(id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoPointND))];
        }
      }
    }
    GeogebraCommonEuclidianEuclidianController_setAndConsume_persistentStickyPointList_(self, new_JavaUtilArrayList_init());
    GeogebraCommonEuclidianEuclidianController_set_pastePreviewSelected_(self, nil);
    GeogebraCommonEuclidianEuclidianController_set_pastePreviewSelectedAndDependent_(self, nil);
    [view_ setPointCapturingWithInt:previousPointCapturing_];
    changedKernel0 = YES;
    [((GeogebraCommonKernelUndoManager *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([app_ getKernel])) getConstruction])) getUndoManager])) storeUndoInfoAfterPasteOrAdd];
  }
  if ([self getMovedGeoPoint] != nil) {
    [self processReleaseForMovedGeoPointWithBoolean:right];
  }
  if (movedGeoNumeric_ != nil) {
    if ([app_ isUsingFullGui]) {
      [movedGeoNumeric_ resetTraceColumns];
    }
  }
  movedGeoPointDragged_ = NO;
  movedGeoNumericDragged_ = NO;
  if (([view_ getHits] == nil) || ([((GeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) size] == 0) || !([[((GeogebraCommonEuclidianHits *) nil_chk([((GeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) getTopHits])) getWithInt:0] isKindOfClass:[GeogebraCommonKernelGeosGeoTextField class]] || [[((GeogebraCommonEuclidianHits *) nil_chk([((GeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) getTopHits])) getWithInt:0] isKindOfClass:[GeogebraCommonKernelGeosGeoList class]])) {
    [view_ requestFocusInWindow];
  }
  [self setMouseLocationWithBoolean:alt withInt:x withInt:y];
  [self transformCoords];
  GeogebraCommonEuclidianHits *hits = nil;
  if ([self hitResetIcon]) {
    [app_ reset];
    return;
  }
  else if ([view_ hitAnimationButtonWithInt:x withInt:y]) {
    if ([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) isAnimationRunning]) {
      [((GeogebraCommonKernelAnimationManager *) nil_chk([kernel_ getAnimatonManager])) stopAnimation];
    }
    else {
      [((GeogebraCommonKernelAnimationManager *) nil_chk([kernel_ getAnimatonManager])) startAnimation];
    }
    [view_ repaintView];
    [app_ setUnsaved];
    return;
  }
  if (right || (control && draggingOccured_)) {
    if ([self processRightReleaseFor3DWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type]) {
      return;
    }
    if (!temporaryMode_) {
      GeogebraCommonEuclidianEuclidianController_processRightReleasedWithBoolean_withBoolean_withGeogebraCommonEuclidianEventPointerEventTypeEnum_(self, right, control, type);
      return;
    }
  }
  jboolean changedKernel = NO;
  if (draggingOccured_) {
    draggingOccuredBeforeRelease_ = YES;
    draggingOccured_ = NO;
    changedKernel = (((movedGeoElement_ != nil) && [movedGeoElement_ isLabelSet]) && (moveMode__ != GeogebraCommonEuclidianEuclidianController_MOVE_NONE));
    GeogebraCommonEuclidianEuclidianController_set_movedGeoElement_(self, nil);
    GeogebraCommonEuclidianEuclidianController_set_rotGeoElement_(self, nil);
    if (!temporaryMode_) {
      if ([self allowSelectionRectangle]) {
        [self processSelectionRectangleWithBoolean:alt withBoolean:control];
        return;
      }
    }
  }
  else {
    changedKernel = [self switchModeForMouseReleasedWithInt:mode_ withGeogebraCommonEuclidianHits:hits withBoolean:changedKernel withBoolean:control withGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
  }
  [self startCollectingMinorRepaints];
  if ((changedKernel || self->checkboxChangeOccured_) && !changedKernel0 && !GeogebraCommonEuclidianEuclidianController_modeCreatesHelperPointsWithInt_(self, mode_)) {
    self->checkboxChangeOccured_ = NO;
    [app_ storeUndoInfo];
  }
  if (useLineEndPoint_ && (lineEndPoint_ != nil)) {
    ((GeogebraCommonAwtGPoint *) nil_chk(mouseLoc_))->x_ = [view_ toScreenCoordXWithDouble:lineEndPoint_->x_];
    mouseLoc_->y_ = [view_ toScreenCoordYWithDouble:lineEndPoint_->y_];
    useLineEndPoint_ = NO;
  }
  [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
  hits = [view_ getHits];
  [self switchModeForRemovePolygonsWithGeogebraCommonEuclidianHits:hits];
  if (pointCreated_ != nil) {
    hits = [self addPointCreatedForMouseReleasedWithGeogebraCommonEuclidianHits:hits];
  }
  GeogebraCommonEuclidianEuclidianController_set_pointCreated_(self, nil);
  if (temporaryMode_) {
    [view_ setModeWithInt:oldMode_];
    temporaryMode_ = NO;
    if (dontClearSelection_ == NO) {
      [self clearSelections];
    }
    dontClearSelection_ = NO;
  }
  else {
    GeogebraCommonEuclidianHits *hits2 = hits;
    GeogebraCommonUtilAsyncOperation *callback = [new_GeogebraCommonEuclidianEuclidianController_$5_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonEuclidianHits_withGeogebraCommonEuclidianEventAbstractEvent_(self, hits2, event) autorelease];
    GeogebraCommonEuclidianEuclidianController_processModeWithGeogebraCommonEuclidianHits_withBoolean_withGeogebraCommonUtilAsyncOperation_(self, hits, control, callback);
  }
  [self endOfWrapMouseReleasedWithGeogebraCommonEuclidianHits:hits withGeogebraCommonEuclidianEventAbstractEvent:event];
  draggingOccuredBeforeRelease_ = NO;
}

- (jboolean)modeCreatesHelperPointsWithInt:(jint)mode2 {
  return GeogebraCommonEuclidianEuclidianController_modeCreatesHelperPointsWithInt_(self, mode2);
}

- (void)endOfWrapMouseReleasedWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                withGeogebraCommonEuclidianEventAbstractEvent:(GeogebraCommonEuclidianEventAbstractEvent *)event {
  jboolean control = [((GeogebraCommonMainApp *) nil_chk(app_)) isControlDownWithGeogebraCommonEuclidianEventAbstractEvent:event];
  jboolean alt = [((GeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) isAltDown];
  GeogebraCommonEuclidianEventPointerEventTypeEnum *type = [event getType];
  [self endOfWrapMouseReleasedWithGeogebraCommonEuclidianHits:hits withBoolean:control withBoolean:alt withGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
}

- (void)endOfWrapMouseReleasedWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                  withBoolean:(jboolean)control
                                                  withBoolean:(jboolean)alt
         withGeogebraCommonEuclidianEventPointerEventTypeEnum:(GeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  if (![((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setDefaultCursor];
  }
  else {
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setHitCursor];
  }
  [self refreshHighlightingWithGeogebraCommonEuclidianHits:nil withBoolean:control];
  moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_NONE;
  [self initShowMouseCoords];
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setShowAxesRatioWithBoolean:NO];
  if (![self setJustCreatedGeosSelected]) {
    if ([((GeogebraCommonMainApp *) nil_chk(app_)) isUsingFullGui] && [app_ getGuiManager] != nil) {
      if (checkBoxOrButtonJustHitted_) checkBoxOrButtonJustHitted_ = NO;
      else [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) mouseReleasedForPropertiesViewWithBoolean:mode_ != GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE && mode_ != GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE_ROTATE];
    }
  }
  if (alt && [((GeogebraCommonMainApp *) nil_chk(app_)) showAlgebraInput]) {
    GeogebraCommonEuclidianEuclidianController_altClickedWithGeogebraCommonEuclidianEventPointerEventTypeEnum_(self, type);
  }
  [self stopCollectingMinorRepaints];
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
}

- (void)altClickedWithGeogebraCommonEuclidianEventPointerEventTypeEnum:(GeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  GeogebraCommonEuclidianEuclidianController_altClickedWithGeogebraCommonEuclidianEventPointerEventTypeEnum_(self, type);
}

- (void)processRightReleasedWithBoolean:(jboolean)right
                            withBoolean:(jboolean)control
withGeogebraCommonEuclidianEventPointerEventTypeEnum:(GeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  GeogebraCommonEuclidianEuclidianController_processRightReleasedWithBoolean_withBoolean_withGeogebraCommonEuclidianEventPointerEventTypeEnum_(self, right, control, type);
}

- (jboolean)setJustCreatedGeosSelected {
  if (justCreatedGeos_ != nil && [justCreatedGeos_ size] > 0) {
    [self setAppSelectedGeosWithJavaUtilArrayList:justCreatedGeos_];
    return YES;
  }
  return NO;
}

- (void)wrapMouseWheelMovedWithInt:(jint)x
                           withInt:(jint)y
                        withDouble:(jdouble)delta
                       withBoolean:(jboolean)shiftOrMeta
                       withBoolean:(jboolean)alt {
  if ([self isTextfieldHasFocus]) {
    return;
  }
  if (GeogebraCommonEuclidianEuclidianController_penModeWithInt_(mode_)) {
    return;
  }
  [((GeogebraCommonMainApp *) nil_chk(app_)) maySetCoordSystem];
  jboolean allowMouseWheel = ![app_ isApplet] || (mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_ZOOM_IN) || (mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_ZOOM_OUT) || ([app_ isShiftDragZoomEnabled] && shiftOrMeta);
  if (!allowMouseWheel) {
    return;
  }
  wheelZoomingOccurred_ = YES;
  [self setMouseLocationWithBoolean:alt withInt:x withInt:y];
  jdouble px = ((GeogebraCommonAwtGPoint *) nil_chk(mouseLoc_))->x_;
  jdouble py = mouseLoc_->y_;
  jdouble xFactor = 1;
  if (alt) {
    xFactor = 1.5;
  }
  jdouble reverse = [app_ isMouseWheelReversed] ? -1 : 1;
  jdouble factor = ((delta * reverse) > 0) ? GeogebraCommonEuclidianEuclidianView_MOUSE_WHEEL_ZOOM_FACTOR * xFactor : 1.0 / (GeogebraCommonEuclidianEuclidianView_MOUSE_WHEEL_ZOOM_FACTOR * xFactor);
  [view_ setAnimatedCoordSystemWithDouble:px withDouble:py withDouble:factor withDouble:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getXscale] * factor withInt:4 withBoolean:NO];
  [app_ setUnsaved];
}

- (void)setLineEndPointWithGeogebraCommonAwtGPoint2D:(GeogebraCommonAwtGPoint2D *)p {
  if (p == nil) GeogebraCommonEuclidianEuclidianController_set_lineEndPoint_(self, nil);
  else GeogebraCommonEuclidianEuclidianController_setAndConsume_lineEndPoint_(self, new_GeogebraCommonAwtGPoint2D_Double_initWithDouble_withDouble_([p getX], [p getY]));
  useLineEndPoint_ = YES;
}

- (GeogebraCommonEuclidianHits *)getHighlightedgeos {
  return [((GeogebraCommonEuclidianHits *) nil_chk(highlightedGeos_)) clone];
}

- (void)setAlphaWithFloat:(jfloat)alpha {
  JavaUtilArrayList *geos = [self getAppSelectedGeos];
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geos)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geos getWithInt:i];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setAlphaValueWithFloat:alpha];
    [geo updateRepaint];
  }
}

- (void)setSizeWithInt:(jint)size {
  JavaUtilArrayList *geos = [self getAppSelectedGeos];
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geos)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geos getWithInt:i];
    if ([GeogebraCommonKernelGeosPointProperties_class_() isInstance:geo]) {
      [((id<GeogebraCommonKernelGeosPointProperties>) nil_chk(((id<GeogebraCommonKernelGeosPointProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosPointProperties))))) setPointSizeWithInt:size];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) updateRepaint];
    }
    else {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setLineThicknessWithInt:size];
      [geo updateRepaint];
    }
  }
}

- (void)setLineEndPointWithGeogebraCommonAwtGPoint2D_Double:(GeogebraCommonAwtGPoint2D_Double *)point {
  GeogebraCommonEuclidianEuclidianController_set_lineEndPoint_(self, point);
  useLineEndPoint_ = YES;
}

- (id<GeogebraCommonEuclidianPreviewable>)switchPreviewableForInitNewModeWithInt:(jint)mode1 {
  id<GeogebraCommonEuclidianPreviewable> previewDrawable = nil;
  {
    id<JavaUtilIterator> it;
    switch (mode1) {
      case GeogebraCommonEuclidianEuclidianConstants_MODE_FREEHAND_SHAPE:
      [((GeogebraCommonEuclidianEuclidianPen *) nil_chk(GeogebraCommonEuclidianEuclidianController_getPen(self))) setFreehandWithBoolean:YES];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_PEN:
      [((GeogebraCommonEuclidianEuclidianPen *) nil_chk(GeogebraCommonEuclidianEuclidianController_getPen(self))) setFreehandWithBoolean:NO];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_PARALLEL:
      previewDrawable = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) createPreviewParallelLineWithJavaUtilArrayList:selectedPoints_ withJavaUtilArrayList:selectedLines_];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_PARABOLA:
      previewDrawable = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) createPreviewParabolaWithJavaUtilArrayList:selectedPoints_ withJavaUtilArrayList:selectedLines_];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_ANGULAR_BISECTOR:
      previewDrawable = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) createPreviewAngleBisectorWithJavaUtilArrayList:selectedPoints_];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_ORTHOGONAL:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_ORTHOGONAL_THREE_D:
      previewDrawable = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) createPreviewPerpendicularLineWithJavaUtilArrayList:selectedPoints_ withJavaUtilArrayList:selectedLines_];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_LINE_BISECTOR:
      previewDrawable = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) createPreviewPerpendicularBisectorWithJavaUtilArrayList:selectedPoints_];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CONIC_FIVE_POINTS:
      previewDrawable = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) createPreviewConicWithInt:mode1 withJavaUtilArrayList:selectedPoints_];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_JOIN:
      useLineEndPoint_ = NO;
      previewDrawable = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) createPreviewLineWithJavaUtilArrayList:selectedPoints_];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_SEGMENT:
      useLineEndPoint_ = NO;
      previewDrawable = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) createPreviewSegmentWithJavaUtilArrayList:selectedPoints_];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_RAY:
      useLineEndPoint_ = NO;
      previewDrawable = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) createPreviewRayWithJavaUtilArrayList:selectedPoints_];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_VECTOR:
      useLineEndPoint_ = NO;
      previewDrawable = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) createPreviewVectorWithJavaUtilArrayList:selectedPoints_];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_POLYGON:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_RIGID_POLYGON:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_VECTOR_POLYGON:
      previewDrawable = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) createPreviewPolygonWithJavaUtilArrayList:selectedPoints_];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_POLYLINE:
      previewDrawable = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) createPreviewPolyLineWithJavaUtilArrayList:selectedPoints_];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_TWO_POINTS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_THREE_POINTS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_ELLIPSE_THREE_POINTS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_HYPERBOLA_THREE_POINTS:
      previewDrawable = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) createPreviewConicWithInt:mode1 withJavaUtilArrayList:selectedPoints_];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_ANGLE:
      previewDrawable = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) createPreviewAngleWithJavaUtilArrayList:selectedPoints_];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_COMPASSES:
      previewDrawable = [new_GeogebraCommonEuclidianDrawDrawConic_initWithGeogebraCommonEuclidianEuclidianView_withInt_withJavaUtilArrayList_withJavaUtilArrayList_withJavaUtilArrayList_(view_, mode1, selectedPoints_, selectedSegments_, selectedConicsND_) autorelease];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_SEMICIRCLE:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_ARC_THREE_POINTS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCUMCIRCLE_ARC_THREE_POINTS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_SECTOR_THREE_POINTS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCUMCIRCLE_SECTOR_THREE_POINTS:
      previewDrawable = [new_GeogebraCommonEuclidianDrawDrawConicPart_initWithGeogebraCommonEuclidianEuclidianView_withInt_withJavaUtilArrayList_(view_, mode1, selectedPoints_) autorelease];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATE_BY_VECTOR:
      useLineEndPoint_ = NO;
      previewDrawable = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) createPreviewVectorWithJavaUtilArrayList:selectedPoints_];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_SHOW_HIDE_OBJECT:
      if ([((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getEuclidianViewNo] == 1 && [((GeogebraCommonMainApp *) nil_chk(app_)) hasEuclidianView2WithInt:1]) {
        return previewDrawable;
      }
      it = [((JavaUtilTreeSet *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction])) getGeoSetConstructionOrder])) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        GeogebraCommonKernelGeosGeoElement *geo = [it next];
        if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isSetEuclidianVisible] && !(([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo] || [GeogebraCommonKernelArithmeticBooleanValue_class_() isInstance:geo]) && [geo isIndependent])) {
          [geo setEuclidianVisibleWithBoolean:YES];
          [((GeogebraCommonMainSelectionManager *) nil_chk(selection_)) addSelectedGeoWithGeogebraCommonKernelGeosGeoElement:geo];
          [geo updateRepaint];
        }
      }
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_COPY_VISUAL_STYLE:
      [((GeogebraCommonMainApp *) nil_chk(app_)) setGeoForCopyStyleWithGeogebraCommonKernelGeosGeoElement:nil];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE_ROTATE:
      GeogebraCommonEuclidianEuclidianController_set_rotationCenter_(self, nil);
      break;
      default:
      if (mode1 >= GeogebraCommonEuclidianEuclidianConstants_MACRO_MODE_ID_OFFSET) {
        jint macroID = mode1 - GeogebraCommonEuclidianEuclidianConstants_MACRO_MODE_ID_OFFSET;
        GeogebraCommonEuclidianEuclidianController_set_macro__(self, [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getMacroWithInt:macroID]);
        GeogebraCommonEuclidianEuclidianController_set_macroInput_(self, [((GeogebraCommonKernelMacro *) nil_chk(macro__)) getInputTypes]);
        self->mode_ = GeogebraCommonEuclidianEuclidianConstants_MODE_MACRO;
      }
      break;
    }
  }
  return previewDrawable;
}

- (void)initNewModeWithInt:(jint)newMode {
  if ([((GeogebraCommonMainApp *) nil_chk(app_)) getGuiManager] == nil && newMode != GeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATEVIEW && newMode != GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE) return;
  self->mode_ = newMode;
  [self initShowMouseCoords];
  if (!temporaryMode_ && !(GeogebraCommonEuclidianEuclidianView_usesSelectionRectangleAsInputWithInt_(newMode) && [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getSelectionRectangle] != nil)) {
    [self clearSelections];
  }
  moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_NONE;
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setPreviewWithGeogebraCommonEuclidianPreviewable:[self switchPreviewableForInitNewModeWithInt:newMode]];
  toggleModeChangedKernel_ = NO;
}

- (void)setModeWithInt:(jint)newMode {
  if (pen_ != nil) {
    [pen_ resetPenOffsets];
  }
  if ((newMode == GeogebraCommonEuclidianEuclidianConstants_MODE_SPREADSHEET_ONEVARSTATS) || (newMode == GeogebraCommonEuclidianEuclidianConstants_MODE_SPREADSHEET_TWOVARSTATS) || (newMode == GeogebraCommonEuclidianEuclidianConstants_MODE_SPREADSHEET_MULTIVARSTATS)) {
    return;
  }
  [self endOfModeWithInt:mode_];
  allowSelectionRectangleForTranslateByVector_ = YES;
  if (GeogebraCommonEuclidianEuclidianView_usesSelectionRectangleAsInputWithInt_(newMode) && ([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getSelectionRectangle] != nil)) {
    [self initNewModeWithInt:newMode];
    if ([((GeogebraCommonMainApp *) nil_chk(app_)) getActiveEuclidianView] == view_) {
      [self processSelectionRectangleWithBoolean:NO withBoolean:NO];
    }
  }
  else if (GeogebraCommonEuclidianEuclidianView_usesSelectionAsInputWithInt_(newMode)) {
    [self initNewModeWithInt:newMode];
    if ([((GeogebraCommonMainApp *) nil_chk(app_)) getActiveEuclidianView] == view_) {
      [self processSelection];
    }
  }
  else {
    if (!temporaryMode_) {
      [((GeogebraCommonMainSelectionManager *) nil_chk(selection_)) clearSelectedGeosWithBoolean:NO];
    }
    [self initNewModeWithInt:newMode];
  }
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
}

- (void)zoomInOutWithBoolean:(jboolean)altPressed
                 withBoolean:(jboolean)minusPressed {
  jdouble factor = minusPressed ? 1.0 / GeogebraCommonEuclidianEuclidianView_MOUSE_WHEEL_ZOOM_FACTOR : GeogebraCommonEuclidianEuclidianView_MOUSE_WHEEL_ZOOM_FACTOR;
  if (altPressed) {
    factor *= minusPressed ? 2.0 / 3.0 : 1.5;
  }
  [self zoomInOutWithDouble:factor withInt:4];
}

- (void)zoomInOutWithDouble:(jdouble)factor
                    withInt:(jint)steps {
  jboolean allowZoom = ![((GeogebraCommonMainApp *) nil_chk(app_)) isApplet] || (mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_ZOOM_IN) || (mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_ZOOM_OUT) || [app_ isShiftDragZoomEnabled];
  if (!allowZoom) {
    return;
  }
  jdouble px, py;
  if (mouseLoc_ != nil) {
    px = mouseLoc_->x_;
    py = mouseLoc_->y_;
  }
  else {
    px = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getWidth] / 2;
    py = [view_ getHeight] / 2;
  }
  [view_ setAnimatedCoordSystemWithDouble:px withDouble:py withDouble:factor withDouble:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getXscale] * factor withInt:steps withBoolean:NO];
  [app_ setUnsaved];
}

- (GeogebraCommonMainApp *)getApplication {
  return app_;
}

- (void)showPopupMenuChooseGeoWithJavaUtilArrayList:(JavaUtilArrayList *)selectedGeos1
                    withGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  if ([((GeogebraCommonMainApp *) nil_chk(app_)) getGuiManager] != nil) {
    [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) showPopupChooseGeoWithJavaUtilArrayList:selectedGeos1 withJavaUtilArrayList:hits withGeogebraCommonEuclidianEuclidianViewInterfaceCommon:view_ withGeogebraCommonAwtGPoint:mouseLoc_];
  }
}

- (GeogebraCommonEuclidianEuclidianPen *)getPen {
  return GeogebraCommonEuclidianEuclidianController_getPen(self);
}

- (void)resetPen {
  if (pen_ != nil) {
    [pen_ resetPenOffsets];
  }
}

- (void)checkZooming {
  [self checkZoomingWithBoolean:NO];
}

- (void)checkZoomingWithBoolean:(jboolean)forPreviewable {
}

- (jint)getDeleteToolSize {
  GeogebraCommonMainSettingsEuclidianSettings *settings = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getSettings];
  if (settings != nil) {
    return [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([self->view_ getSettings])) getDeleteToolSize];
  }
  return GeogebraCommonEuclidianEuclidianConstants_DEFAULT_ERASER_SIZE;
}

- (jboolean)isCollectingRepaints {
  return collectingRepaints_ > 0;
}

- (void)setCollectedRepaintsWithBoolean:(jboolean)collected {
  collectedRepaints_ = collected;
}

- (GeogebraCommonMainDialogManager *)getDialogManager {
  return [((GeogebraCommonMainApp *) nil_chk(app_)) getDialogManager];
}

- (JavaUtilArrayList *)getAppSelectedGeos {
  return [((GeogebraCommonMainSelectionManager *) nil_chk(selection_)) getSelectedGeos];
}

- (void)setAppSelectedGeosWithJavaUtilArrayList:(JavaUtilArrayList *)geos {
  [((GeogebraCommonMainSelectionManager *) nil_chk(selection_)) setSelectedGeosWithJavaUtilArrayList:geos];
}

- (void)setAppSelectedGeosWithJavaUtilArrayList:(JavaUtilArrayList *)geos
                                    withBoolean:(jboolean)updateSelection {
  [((GeogebraCommonMainSelectionManager *) nil_chk(selection_)) setSelectedGeosWithJavaUtilArrayList:geos withBoolean:updateSelection];
}

- (jboolean)isTextfieldHasFocus {
  return textfieldHasFocus__;
}

- (void)calculateEnvironment {
}

- (void)setExternalHandlingWithBoolean:(jboolean)b {
  self->externalHandling_ = b;
}

- (GeogebraCommonEuclidianEnvironmentStyle *)getEnvironmentStyle {
  return nil;
}

- (void)onPinchWithInt:(jint)x
               withInt:(jint)y
            withDouble:(jdouble)scaleFactor {
  GeogebraCommonEuclidianEuclidianController_setAndConsume_mouseLoc_(self, new_GeogebraCommonAwtGPoint_initWithInt_withInt_(x, y));
  [self zoomInOutWithDouble:scaleFactor withInt:scaleFactor < GeogebraCommonEuclidianEuclidianView_MOUSE_WHEEL_ZOOM_FACTOR ? 1 : 2];
}

- (void)twoTouchStartWithDouble:(jdouble)x1
                     withDouble:(jdouble)y1
                     withDouble:(jdouble)x2
                     withDouble:(jdouble)y2 {
  GeogebraCommonEuclidianEuclidianController_twoTouchStartCommonWithDouble_withDouble_withDouble_withDouble_(self, x1, y1, x2, y2);
}

- (void)twoTouchStartCommonWithDouble:(jdouble)x1
                           withDouble:(jdouble)y1
                           withDouble:(jdouble)x2
                           withDouble:(jdouble)y2 {
  GeogebraCommonEuclidianEuclidianController_twoTouchStartCommonWithDouble_withDouble_withDouble_withDouble_(self, x1, y1, x2, y2);
}

- (void)twoTouchMoveWithDouble:(jdouble)x1
                    withDouble:(jdouble)y1
                    withDouble:(jdouble)x2
                    withDouble:(jdouble)y2 {
  GeogebraCommonEuclidianEuclidianController_twoTouchMoveCommonWithDouble_withDouble_withDouble_withDouble_(self, x1, y1, x2, y2);
}

- (void)twoTouchMoveCommonWithDouble:(jdouble)x1
                          withDouble:(jdouble)y1
                          withDouble:(jdouble)x2
                          withDouble:(jdouble)y2 {
  GeogebraCommonEuclidianEuclidianController_twoTouchMoveCommonWithDouble_withDouble_withDouble_withDouble_(self, x1, y1, x2, y2);
}

- (jboolean)isExternalHandling {
  return externalHandling_;
}

- (jint)getEvNo {
  return ((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_))->evNo_;
}

- (void)setDefaultEventTypeWithGeogebraCommonEuclidianEventPointerEventTypeEnum:(GeogebraCommonEuclidianEventPointerEventTypeEnum *)pointerEventType {
  GeogebraCommonEuclidianEuclidianController_set_defaultEventType_(self, pointerEventType);
}

- (GeogebraCommonEuclidianEventPointerEventTypeEnum *)getDefaultEventType {
  return self->defaultEventType_;
}

- (void)moveAttachDetachWithBoolean:(jboolean)repaint
withGeogebraCommonEuclidianEventAbstractEvent:(GeogebraCommonEuclidianEventAbstractEvent *)event {
  GeogebraCommonEuclidianEuclidianController_moveAttachDetachWithBoolean_withGeogebraCommonEuclidianEventAbstractEvent_(self, repaint, event);
}

- (void)setViewWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setDialogOccurred {
}

- (void)moveIfWaiting {
}

- (void)setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:(GeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
}

- (jboolean)isTemporaryMode {
  return temporaryMode_;
}

- (void)resetModeAfterFreehand {
}

- (void)prepareModeForFreehand {
}

- (void)onPointerEventStartWithGeogebraCommonEuclidianEventAbstractEvent:(GeogebraCommonEuclidianEventAbstractEvent *)e {
}

- (void)dealloc {
  RELEASE_(deleteMode_);
  RELEASE_(tempConic_);
  RELEASE_(tempImplicitPoly_);
  RELEASE_(moveDependentPoints_);
  RELEASE_(tempFunction_);
  RELEASE_(movedGeoPoint_);
  RELEASE_(movedGeoLine_);
  RELEASE_(movedGeoConic_);
  RELEASE_(movedGeoImplicitPoly_);
  RELEASE_(movedGeoVector_);
  RELEASE_(movedGeoText_);
  RELEASE_(oldImage_);
  RELEASE_(movedGeoImage_);
  RELEASE_(movedGeoFunction_);
  RELEASE_(movedGeoNumeric_);
  RELEASE_(movedGeoBoolean_);
  RELEASE_(movedGeoButton_);
  RELEASE_(movedLabelGeoElement_);
  RELEASE_(movedGeoElement_);
  RELEASE_(tempNum_);
  RELEASE_(translateableGeos_);
  RELEASE_(translationVec_);
  RELEASE_(tempArrayList_);
  RELEASE_(tempArrayList2_);
  RELEASE_(tempArrayList3_);
  RELEASE_(selectedPoints_);
  RELEASE_(selectedNumbers_);
  RELEASE_(selectedNumberValues_);
  RELEASE_(selectedLines_);
  RELEASE_(selectedDirections_);
  RELEASE_(selectedSegments_);
  RELEASE_(selectedRegions_);
  RELEASE_(selectedPaths_);
  RELEASE_(selectedConicsND_);
  RELEASE_(selectedImplicitpoly_);
  RELEASE_(selectedFunctions_);
  RELEASE_(selectedCurves_);
  RELEASE_(selectedVectors_);
  RELEASE_(selectedPolygons_);
  RELEASE_(selectedPolyLines_);
  RELEASE_(selectedGeos_);
  RELEASE_(selectedLists_);
  RELEASE_(highlightedGeos_);
  RELEASE_(justCreatedGeos_);
  RELEASE_(resultedGeo_);
  RELEASE_(pointCreated_);
  RELEASE_(pastePreviewSelected_);
  RELEASE_(pastePreviewSelectedAndDependent_);
  RELEASE_(macro__);
  RELEASE_(macroInput_);
  RELEASE_(rotGeoElement_);
  RELEASE_(rotationCenter_);
  RELEASE_(transformCoordsOffset_);
  RELEASE_(persistentStickyPointList_);
  RELEASE_(app_);
  RELEASE_(selection_);
  RELEASE_(l10n_);
  RELEASE_(kernel_);
  RELEASE_(startLoc_);
  RELEASE_(mouseLoc_);
  RELEASE_(lastMouseLoc_);
  RELEASE_(oldLoc_);
  RELEASE_(startPoint_);
  RELEASE_(lineEndPoint_);
  RELEASE_(selectionStartPoint_);
  RELEASE_(tempDependentPointX_);
  RELEASE_(tempDependentPointY_);
  RELEASE_(view_);
  RELEASE_(companion_);
  RELEASE_(pen_);
  RELEASE_(handleAddSelectedArrayList_);
  RELEASE_(pressedButton_);
  RELEASE_(tmpCoordsL3_);
  RELEASE_(tmpCoordsL4_);
  RELEASE_(mouseLocRW_);
  RELEASE_(textDispatcher_);
  RELEASE_(lastMouseUpLoc_);
  RELEASE_(defaultEventType_);
  RELEASE_(detachFrom_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "removeAxesWithJavaUtilArrayList:", "removeAxes", "V", 0xc, NULL, NULL },
    { "getDeleteMode", NULL, "Lgeogebra.common.euclidian.modes.ModeDelete;", 0x0, NULL, NULL },
    { "initWithGeogebraCommonMainApp:", "EuclidianController", NULL, 0x1, NULL, NULL },
    { "createCompanions", NULL, "V", 0x4, NULL, NULL },
    { "getCompanion", NULL, "Lgeogebra.common.euclidian.EuclidianControllerCompanion;", 0x1, NULL, NULL },
    { "newCompanion", NULL, "Lgeogebra.common.euclidian.EuclidianControllerCompanion;", 0x4, NULL, NULL },
    { "startCollectingMinorRepaints", NULL, "V", 0x1, NULL, NULL },
    { "stopCollectingMinorRepaints", NULL, "V", 0x1, NULL, NULL },
    { "updatePastePreviewPosition", NULL, "V", 0x4, NULL, NULL },
    { "setPastePreviewSelected", NULL, "V", 0x11, NULL, NULL },
    { "mayPaste", NULL, "Z", 0x1, NULL, NULL },
    { "deletePastePreviewSelected", NULL, "V", 0x1, NULL, NULL },
    { "mergeStickyPointsAfterPaste", NULL, "V", 0x1, NULL, NULL },
    { "getMode", NULL, "I", 0x1, NULL, NULL },
    { "getMoveMode", NULL, "I", 0x1, NULL, NULL },
    { "endOfModeWithInt:", "endOfMode", "V", 0x4, NULL, NULL },
    { "clearSelectionWithJavaUtilArrayList:withBoolean:", "clearSelection", "V", 0x14, NULL, NULL },
    { "clearSelectionWithJavaUtilArrayList:", "clearSelection", "V", 0x14, NULL, NULL },
    { "getRegionHitsWithGeogebraCommonEuclidianHits:", "getRegionHits", "Lgeogebra.common.euclidian.Hits;", 0x4, NULL, NULL },
    { "getSingleIntersectionPointWithGeogebraCommonEuclidianHits:", "getSingleIntersectionPoint", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "getSelectedGeos", NULL, "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "getSelectedPointsNDWithGeogebraCommonKernelKernelNDGeoPointNDArray:", "getSelectedPointsND", "V", 0x14, NULL, NULL },
    { "getSelectedPointsND", NULL, "[Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x14, NULL, NULL },
    { "getSelectedPoints", NULL, "[Lgeogebra.common.kernel.geos.GeoPoint;", 0x14, NULL, NULL },
    { "getSelectedNumbers", NULL, "[Lgeogebra.common.kernel.geos.GeoNumeric;", 0x14, NULL, NULL },
    { "getSelectedNumberValues", NULL, "[Lgeogebra.common.kernel.arithmetic.NumberValue;", 0x14, NULL, NULL },
    { "getSelectedLists", NULL, "[Lgeogebra.common.kernel.geos.GeoList;", 0x14, NULL, NULL },
    { "getSelectedPolygons", NULL, "[Lgeogebra.common.kernel.geos.GeoPolygon;", 0x14, NULL, NULL },
    { "getSelectedPolyLines", NULL, "[Lgeogebra.common.kernel.geos.GeoPolyLine;", 0x14, NULL, NULL },
    { "getSelectedLinesNDWithGeogebraCommonKernelKernelNDGeoLineNDArray:", "getSelectedLinesND", "V", 0x14, NULL, NULL },
    { "getSelectedLinesND", NULL, "[Lgeogebra.common.kernel.kernelND.GeoLineND;", 0x14, NULL, NULL },
    { "getSelectedLines", NULL, "[Lgeogebra.common.kernel.geos.GeoLine;", 0x14, NULL, NULL },
    { "getSelectedSegmentsNDWithGeogebraCommonKernelKernelNDGeoSegmentNDArray:", "getSelectedSegmentsND", "V", 0x14, NULL, NULL },
    { "getSelectedSegmentsND", NULL, "[Lgeogebra.common.kernel.kernelND.GeoSegmentND;", 0x14, NULL, NULL },
    { "getSelectedSegments", NULL, "[Lgeogebra.common.kernel.geos.GeoSegment;", 0x14, NULL, NULL },
    { "getSelectedVectorsNDWithGeogebraCommonKernelKernelNDGeoVectorNDArray:", "getSelectedVectorsND", "V", 0x14, NULL, NULL },
    { "getSelectedVectorsND", NULL, "[Lgeogebra.common.kernel.kernelND.GeoVectorND;", 0x14, NULL, NULL },
    { "getSelectedVectors", NULL, "[Lgeogebra.common.kernel.geos.GeoVector;", 0x14, NULL, NULL },
    { "getSelectedConics", NULL, "[Lgeogebra.common.kernel.geos.GeoConic;", 0x14, NULL, NULL },
    { "getSelectedCircles", NULL, "[Lgeogebra.common.kernel.geos.GeoConic;", 0x14, NULL, NULL },
    { "getSelectedCirclesND", NULL, "[Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x14, NULL, NULL },
    { "getSelectedConicsND", NULL, "[Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x14, NULL, NULL },
    { "getSelectedDirections", NULL, "[Lgeogebra.common.kernel.kernelND.GeoDirectionND;", 0x14, NULL, NULL },
    { "getSelectedRegions", NULL, "[Lgeogebra.common.kernel.Region;", 0x14, NULL, NULL },
    { "getSelectedPaths", NULL, "[Lgeogebra.common.kernel.Path;", 0x14, NULL, NULL },
    { "getSelectedImplicitpoly", NULL, "[Lgeogebra.common.kernel.implicit.GeoImplicitPoly;", 0x14, NULL, NULL },
    { "getSelectedFunctions", NULL, "[Lgeogebra.common.kernel.geos.GeoFunction;", 0x14, NULL, NULL },
    { "getSelectedCurves", NULL, "[Lgeogebra.common.kernel.geos.GeoCurveCartesian;", 0x14, NULL, NULL },
    { "allowPointCreation", NULL, "Z", 0x4, NULL, NULL },
    { "createNewPoint2DWithNSString:withBoolean:withGeogebraCommonKernelPath:withDouble:withDouble:withBoolean:withBoolean:", "createNewPoint2D", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "createNewPoint2DWithNSString:withBoolean:withGeogebraCommonKernelRegion:withDouble:withDouble:withBoolean:withBoolean:", "createNewPoint2D", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x14, NULL, NULL },
    { "createNewPointWithNSString:withBoolean:withGeogebraCommonKernelRegion:withDouble:withDouble:withDouble:withBoolean:withBoolean:", "createNewPoint", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x11, NULL, NULL },
    { "setKernelWithGeogebraCommonKernelKernel:", "setKernel", "V", 0x1, NULL, NULL },
    { "getKernel", NULL, "Lgeogebra.common.kernel.Kernel;", 0x1, NULL, NULL },
    { "clearJustCreatedGeos", NULL, "V", 0x1, NULL, NULL },
    { "getJustCreatedGeos", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "memorizeJustCreatedGeosWithJavaUtilArrayList:", "memorizeJustCreatedGeos", "V", 0x1, NULL, NULL },
    { "memorizeJustCreatedGeosWithGeogebraCommonKernelGeosGeoElementArray:", "memorizeJustCreatedGeos", "V", 0x1, NULL, NULL },
    { "setHighlightedGeosWithBoolean:", "setHighlightedGeos", "V", 0x14, NULL, NULL },
    { "doSingleHighlightingWithGeogebraCommonKernelGeosGeoElement:", "doSingleHighlighting", "V", 0x1, NULL, NULL },
    { "mouseIsOverLabel", NULL, "Z", 0x1, NULL, NULL },
    { "removeParentPointsWithJavaUtilArrayList:", "removeParentPoints", "V", 0x4, NULL, NULL },
    { "addToSelectionListWithJavaUtilArrayList:withId:withInt:", "addToSelectionList", "I", 0x14, NULL, "<T:Ljava/lang/Object;>(Ljava/util/ArrayList<TT;>;TT;I)I" },
    { "addToHighlightedListWithJavaUtilArrayList:withJavaUtilArrayList:withInt:", "addToHighlightedList", "I", 0x14, NULL, NULL },
    { "chooseGeoWithJavaUtilArrayList:withBoolean:", "chooseGeo", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "chooseGeoWithJavaUtilArrayList:withBoolean:withBoolean:", "chooseGeo", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "chooseGeoWithGeogebraCommonEuclidianHits:withGeogebraCommonKernelGeosTestEnum:", "chooseGeo", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "addToSelectionListWithJavaUtilArrayList:withJavaUtilArrayList:withInt:withBoolean:withBoolean:", "addToSelectionList", "I", 0x14, NULL, "<T::Lgeogebra/common/kernel/kernelND/GeoElementND;>(Ljava/util/ArrayList<TT;>;Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;IZZ)I" },
    { "selGeos", NULL, "I", 0x11, NULL, NULL },
    { "selPoints", NULL, "I", 0x11, NULL, NULL },
    { "selNumbers", NULL, "I", 0x14, NULL, NULL },
    { "selNumberValues", NULL, "I", 0x14, NULL, NULL },
    { "selLists", NULL, "I", 0x14, NULL, NULL },
    { "selPolyLines", NULL, "I", 0x14, NULL, NULL },
    { "selPolygons", NULL, "I", 0x14, NULL, NULL },
    { "selLines", NULL, "I", 0x14, NULL, NULL },
    { "selDirections", NULL, "I", 0x14, NULL, NULL },
    { "selSegments", NULL, "I", 0x14, NULL, NULL },
    { "selVectors", NULL, "I", 0x14, NULL, NULL },
    { "selConics", NULL, "I", 0x14, NULL, NULL },
    { "selPaths", NULL, "I", 0x14, NULL, NULL },
    { "selRegions", NULL, "I", 0x14, NULL, NULL },
    { "selImplicitpoly", NULL, "I", 0x14, NULL, NULL },
    { "selFunctions", NULL, "I", 0x14, NULL, NULL },
    { "selCurves", NULL, "I", 0x14, NULL, NULL },
    { "handleAddSelectedWithGeogebraCommonEuclidianHits:withInt:withBoolean:withJavaUtilArrayList:withGeogebraCommonKernelGeosTestEnum:", "handleAddSelected", "I", 0x4, NULL, NULL },
    { "handleAddSelectedRegionsWithGeogebraCommonEuclidianHits:withInt:withBoolean:withJavaUtilArrayList:", "handleAddSelectedRegions", "I", 0x4, NULL, NULL },
    { "addSelectedGeoWithGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedGeo", "I", 0x11, NULL, NULL },
    { "addSelectedPointWithGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedPoint", "I", 0x14, NULL, NULL },
    { "addSelectedNumericWithGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedNumeric", "I", 0x11, NULL, NULL },
    { "addSelectedNumberValueWithGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedNumberValue", "I", 0x11, NULL, NULL },
    { "addSelectedLineWithGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedLine", "I", 0x14, NULL, NULL },
    { "addSelectedSegmentWithGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedSegment", "I", 0x14, NULL, NULL },
    { "addSelectedVectorWithGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedVector", "I", 0x14, NULL, NULL },
    { "addSelectedVectorWithGeogebraCommonEuclidianHits:withInt:withBoolean:withGeogebraCommonKernelGeosTestEnum:", "addSelectedVector", "I", 0x14, NULL, NULL },
    { "addSelectedPathWithGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedPath", "I", 0x14, NULL, NULL },
    { "addSelectedRegionWithGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedRegion", "I", 0x14, NULL, NULL },
    { "addSelectedImplicitpolyWithGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedImplicitpoly", "I", 0x14, NULL, NULL },
    { "addSelectedPolygonWithGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedPolygon", "I", 0x14, NULL, NULL },
    { "addSelectedPolyLineWithGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedPolyLine", "I", 0x14, NULL, NULL },
    { "addSelectedListWithGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedList", "I", 0x14, NULL, NULL },
    { "addSelectedDirectionWithGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedDirection", "I", 0x14, NULL, NULL },
    { "addSelectedCircleWithGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedCircle", "I", 0x14, NULL, NULL },
    { "addSelectedConicWithGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedConic", "I", 0x14, NULL, NULL },
    { "addSelectedFunctionWithGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedFunction", "I", 0x14, NULL, NULL },
    { "addSelectedCurveWithGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedCurve", "I", 0x14, NULL, NULL },
    { "createNewPointWithGeogebraCommonKernelKernelNDGeoPointND:", "createNewPoint", "V", 0x4, NULL, NULL },
    { "createNewPointIntersectionWithGeogebraCommonKernelKernelNDGeoPointND:", "createNewPointIntersection", "V", 0x4, NULL, NULL },
    { "joinWithGeogebraCommonEuclidianHits:", "join", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "join", NULL, "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "updateMovedGeoPointWithGeogebraCommonKernelKernelNDGeoPointND:", "updateMovedGeoPoint", "V", 0x4, NULL, NULL },
    { "ray", NULL, "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "segmentWithGeogebraCommonEuclidianHits:", "segment", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "segment", NULL, "[Lgeogebra.common.kernel.geos.GeoElement;", 0x12, NULL, NULL },
    { "vectorWithGeogebraCommonEuclidianHits:", "vector", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "vectorWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "vector", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "rayWithGeogebraCommonEuclidianHits:", "ray", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "polygonWithGeogebraCommonEuclidianHits:", "polygon", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "polylineWithGeogebraCommonEuclidianHits:", "polyline", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "polygon", NULL, "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "intersectWithGeogebraCommonEuclidianHits:", "intersect", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "parallelWithGeogebraCommonEuclidianHits:", "parallel", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "checkCoordCartesianWithGeogebraCommonKernelKernelNDGeoPointND:", "checkCoordCartesian", "V", 0xa, NULL, NULL },
    { "parabolaWithGeogebraCommonEuclidianHits:", "parabola", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "orthogonalWithGeogebraCommonEuclidianHits:", "orthogonal", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "orthogonalWithGeogebraCommonEuclidianHits:withBoolean:", "orthogonal", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "midpointWithGeogebraCommonEuclidianHits:", "midpoint", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "functionInspectorWithGeogebraCommonEuclidianHits:", "functionInspector", "Z", 0x14, NULL, NULL },
    { "lineBisectorWithGeogebraCommonEuclidianHits:", "lineBisector", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "angularBisectorWithGeogebraCommonEuclidianHits:", "angularBisector", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "threePointsWithGeogebraCommonEuclidianHits:withInt:", "threePoints", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "switchModeForThreePointsWithInt:", "switchModeForThreePoints", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "relationWithGeogebraCommonEuclidianHits:", "relation", "Z", 0x14, NULL, NULL },
    { "locusWithGeogebraCommonEuclidianHits:", "locus", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "conic5WithGeogebraCommonEuclidianHits:", "conic5", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "slopeWithGeogebraCommonEuclidianHits:", "slope", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "tangentsWithGeogebraCommonEuclidianHits:", "tangents", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "deleteAllWithGeogebraCommonEuclidianHits:", "deleteAll", "Z", 0x1, NULL, NULL },
    { "polarLineWithGeogebraCommonEuclidianHits:", "polarLine", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "showHideLabelWithGeogebraCommonEuclidianHits:", "showHideLabel", "Z", 0x14, NULL, NULL },
    { "copyVisualStyleWithGeogebraCommonEuclidianHits:", "copyVisualStyle", "Z", 0x14, NULL, NULL },
    { "getMouseLoc", NULL, "Lgeogebra.common.awt.GPoint;", 0x1, NULL, NULL },
    { "textfieldHasFocusWithBoolean:", "textfieldHasFocus", "V", 0x1, NULL, NULL },
    { "checkBoxOrTextfieldOrButtonJustHitted", NULL, "Z", 0x1, NULL, NULL },
    { "initToolTipManager", NULL, "V", 0x404, NULL, NULL },
    { "initShowMouseCoords", NULL, "V", 0x4, NULL, NULL },
    { "wrapMouseEntered", NULL, "V", 0x11, NULL, NULL },
    { "getSelectablesWithGeogebraCommonEuclidianHits:", "getSelectables", "Z", 0x4, NULL, NULL },
    { "moveRotateWithGeogebraCommonEuclidianHits:", "moveRotate", "Z", 0x14, NULL, NULL },
    { "pointWithGeogebraCommonEuclidianHits:", "point", "Z", 0x14, NULL, NULL },
    { "geoElementSelectedWithGeogebraCommonEuclidianHits:withBoolean:", "geoElementSelected", "Z", 0x14, NULL, NULL },
    { "segmentFixedWithGeogebraCommonEuclidianHits:", "segmentFixed", "Z", 0x14, NULL, NULL },
    { "angleFixedWithGeogebraCommonEuclidianHits:", "angleFixed", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "switchModeForCircleOrSphere2WithInt:", "switchModeForCircleOrSphere2", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "circleOrSphere2WithGeogebraCommonEuclidianHits:withInt:", "circleOrSphere2", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "showHideObjectWithGeogebraCommonEuclidianHits:", "showHideObject", "Z", 0x14, NULL, NULL },
    { "textWithGeogebraCommonEuclidianHits:", "text", "Z", 0x14, NULL, NULL },
    { "isAltDown", NULL, "Z", 0x1, NULL, NULL },
    { "setAltDownWithBoolean:", "setAltDown", "V", 0x1, NULL, NULL },
    { "slider", NULL, "Z", 0x14, NULL, NULL },
    { "imageWithGeogebraCommonEuclidianHits:", "image", "Z", 0x14, NULL, NULL },
    { "mirrorAtPointWithGeogebraCommonEuclidianHits:", "mirrorAtPoint", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "mirrorAtLineWithGeogebraCommonEuclidianHits:", "mirrorAtLine", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "mirrorAtCircleWithGeogebraCommonEuclidianHits:", "mirrorAtCircle", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "clearHighlightedGeos", NULL, "Z", 0x2, NULL, NULL },
    { "refreshHighlightingWithGeogebraCommonEuclidianHits:withBoolean:", "refreshHighlighting", "Z", 0x1, NULL, NULL },
    { "highlightWithGeogebraCommonKernelGeosGeoElement:", "highlight", "Z", 0x1, NULL, NULL },
    { "highlightWithJavaUtilArrayList:", "highlight", "Z", 0x1, NULL, NULL },
    { "clearSelections", NULL, "V", 0x1, NULL, NULL },
    { "clearSelectionsWithBoolean:withBoolean:", "clearSelections", "V", 0x1, NULL, NULL },
    { "clearSelected", NULL, "V", 0x1, NULL, NULL },
    { "attachDetachWithGeogebraCommonEuclidianHits:", "attachDetach", "Z", 0x14, NULL, NULL },
    { "getMouseLocRW", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x4, NULL, NULL },
    { "translateByVectorWithGeogebraCommonEuclidianHits:", "translateByVector", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "rotateByAngleWithGeogebraCommonEuclidianHits:", "rotateByAngle", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "dilateFromPointWithGeogebraCommonEuclidianHits:", "dilateFromPoint", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "fitLineWithGeogebraCommonEuclidianHits:", "fitLine", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "FitLineYWithNSString:withGeogebraCommonKernelGeosGeoList:", "FitLineY", "Lgeogebra.common.kernel.geos.GeoLine;", 0x11, NULL, NULL },
    { "createListWithGeogebraCommonEuclidianHits:", "createList", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "calcRWcoords", NULL, "V", 0x4, NULL, NULL },
    { "setMouseLocationWithGeogebraCommonEuclidianEventAbstractEvent:", "setMouseLocation", "V", 0x4, NULL, NULL },
    { "setMouseLocationWithBoolean:withInt:withInt:", "setMouseLocation", "V", 0x4, NULL, NULL },
    { "getPointCapturingPercentage", NULL, "F", 0x1, NULL, NULL },
    { "transformCoords", NULL, "V", 0x1, NULL, NULL },
    { "getTransformCoordsOffsetWithInt:", "getTransformCoordsOffset", "D", 0x2, NULL, NULL },
    { "getAlgoDispatcher", NULL, "Lgeogebra.common.kernel.algos.AlgoDispatcher;", 0x1, NULL, NULL },
    { "areaWithGeogebraCommonEuclidianHits:", "area", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "regularPolygonWithGeogebraCommonEuclidianHits:", "regularPolygon", "Z", 0x4, NULL, NULL },
    { "addSelectedPlanesForAngleWithGeogebraCommonEuclidianHits:withInt:", "addSelectedPlanesForAngle", "I", 0x4, NULL, NULL },
    { "createAngle3D", NULL, "Lgeogebra.common.kernel.geos.GeoAngle;", 0x4, NULL, NULL },
    { "angleWithGeogebraCommonEuclidianHits:", "angle", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "getTextDispatcher", NULL, "Lgeogebra.common.euclidian.TextDispatcher;", 0x4, NULL, NULL },
    { "distanceWithGeogebraCommonEuclidianHits:", "distance", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "showCheckBox", NULL, "Z", 0x14, NULL, NULL },
    { "compassesWithGeogebraCommonEuclidianHits:", "compasses", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "CircleWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoQuadricND:", "Circle", "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x12, NULL, NULL },
    { "CircleCompassesWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "CircleCompasses", "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x12, NULL, NULL },
    { "vectorFromPointWithGeogebraCommonEuclidianHits:", "vectorFromPoint", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "circlePointRadiusWithGeogebraCommonEuclidianHits:", "circlePointRadius", "Z", 0x14, NULL, NULL },
    { "getMovedGeoPoint", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "updateNewPointWithBoolean:withGeogebraCommonEuclidianHits:withBoolean:withBoolean:withBoolean:withBoolean:withBoolean:", "updateNewPoint", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x11, NULL, NULL },
    { "createNewPointInRegionPossibleWithGeogebraCommonKernelKernelNDGeoConicND:", "createNewPointInRegionPossible", "Z", 0x4, NULL, NULL },
    { "getNewPointWithGeogebraCommonEuclidianHits:withBoolean:withBoolean:withBoolean:withBoolean:", "getNewPoint", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "createNewPointWithGeogebraCommonEuclidianHits:withBoolean:withBoolean:withBoolean:withBoolean:withBoolean:", "createNewPoint", "Z", 0x4, NULL, NULL },
    { "createNewPointWithGeogebraCommonEuclidianHits:withBoolean:withBoolean:withBoolean:", "createNewPoint", "Z", 0x14, NULL, NULL },
    { "macroWithGeogebraCommonEuclidianHits:withGeogebraCommonUtilAsyncOperation:", "macro", "V", 0x14, NULL, NULL },
    { "readNumberOrAngleIfNeededWithGeogebraCommonUtilAsyncOperation:", "readNumberOrAngleIfNeeded", "V", 0x1, NULL, NULL },
    { "macroProcessWithGeogebraCommonUtilAsyncOperation:", "macroProcess", "V", 0x1, NULL, NULL },
    { "buttonWithBoolean:", "button", "Z", 0x14, NULL, NULL },
    { "switchModeForProcessModeWithGeogebraCommonEuclidianHits:withBoolean:withGeogebraCommonUtilAsyncOperation:", "switchModeForProcessMode", "Z", 0x4, NULL, NULL },
    { "endOfSwitchModeForProcessModeWithGeogebraCommonKernelGeosGeoElementArray:withBoolean:withGeogebraCommonUtilAsyncOperation:", "endOfSwitchModeForProcessMode", "Z", 0x14, NULL, NULL },
    { "memorizeJustCreatedGeosAfterProcessModeWithGeogebraCommonKernelGeosGeoElementArray:", "memorizeJustCreatedGeosAfterProcessMode", "V", 0x4, NULL, NULL },
    { "processModeLock", NULL, "V", 0x1, NULL, NULL },
    { "processModeWithGeogebraCommonEuclidianHits:withBoolean:", "processMode", "Z", 0x11, NULL, NULL },
    { "processModeWithGeogebraCommonEuclidianHits:withBoolean:withGeogebraCommonUtilAsyncOperation:", "processMode", "Z", 0x11, NULL, NULL },
    { "toolCompleted", NULL, "V", 0x1, NULL, NULL },
    { "updatePreview", NULL, "V", 0x1, NULL, NULL },
    { "processReleaseForMovedGeoPointWithBoolean:", "processReleaseForMovedGeoPoint", "V", 0x4, NULL, NULL },
    { "processRightReleaseFor3DWithGeogebraCommonEuclidianEventPointerEventTypeEnum:", "processRightReleaseFor3D", "Z", 0x4, NULL, NULL },
    { "rotateObjectWithBoolean:", "rotateObject", "V", 0x14, NULL, NULL },
    { "moveLabel", NULL, "V", 0x14, NULL, NULL },
    { "movePointWithOffsetWithBoolean:", "movePointWithOffset", "V", 0x4, NULL, NULL },
    { "moveLineWithBoolean:", "moveLine", "V", 0x4, NULL, NULL },
    { "updateAfterMoveWithGeogebraCommonKernelGeosGeoElement:withBoolean:", "updateAfterMove", "V", 0x1c, NULL, NULL },
    { "moveVectorWithBoolean:", "moveVector", "V", 0x14, NULL, NULL },
    { "moveVector", NULL, "V", 0x4, NULL, NULL },
    { "moveVectorWithDouble:withDouble:", "moveVector", "V", 0x14, NULL, NULL },
    { "moveVectorStartPointWithBoolean:", "moveVectorStartPoint", "V", 0x14, NULL, NULL },
    { "moveTextWithBoolean:", "moveText", "V", 0x14, NULL, NULL },
    { "moveTextAbsoluteLocation", NULL, "V", 0x4, NULL, NULL },
    { "moveImageWithBoolean:", "moveImage", "V", 0x14, NULL, NULL },
    { "moveConicWithBoolean:", "moveConic", "V", 0x14, NULL, NULL },
    { "moveImplicitPolyWithBoolean:", "moveImplicitPoly", "V", 0x14, NULL, NULL },
    { "moveFreehandWithBoolean:", "moveFreehand", "V", 0x14, NULL, NULL },
    { "moveFunctionWithBoolean:", "moveFunction", "V", 0x14, NULL, NULL },
    { "moveBooleanWithBoolean:", "moveBoolean", "V", 0x14, NULL, NULL },
    { "moveButtonWithBoolean:", "moveButton", "V", 0x14, NULL, NULL },
    { "getSliderValueWithGeogebraCommonKernelGeosGeoNumeric:withBoolean:", "getSliderValue", "D", 0x14, NULL, NULL },
    { "moveNumericWithBoolean:withBoolean:", "moveNumeric", "V", 0x14, NULL, NULL },
    { "moveSliderWithBoolean:", "moveSlider", "V", 0x14, NULL, NULL },
    { "moveDependentWithBoolean:", "moveDependent", "V", 0x4, NULL, NULL },
    { "moveAttachedWithBoolean:", "moveAttached", "V", 0x14, NULL, NULL },
    { "moveMultipleObjectsWithBoolean:", "moveMultipleObjects", "V", 0x4, NULL, NULL },
    { "getStartPointX", NULL, "D", 0x4, NULL, NULL },
    { "getStartPointY", NULL, "D", 0x4, NULL, NULL },
    { "setMovedGeoPointWithGeogebraCommonKernelGeosGeoElement:", "setMovedGeoPoint", "V", 0x1, NULL, NULL },
    { "switchModeForRemovePolygonsWithGeogebraCommonEuclidianHits:", "switchModeForRemovePolygons", "V", 0x4, NULL, NULL },
    { "switchModeForMouseReleasedWithInt:withGeogebraCommonEuclidianHits:withBoolean:withBoolean:withGeogebraCommonEuclidianEventPointerEventTypeEnum:", "switchModeForMouseReleased", "Z", 0x4, NULL, NULL },
    { "hitCheckBoxWithGeogebraCommonKernelGeosGeoBoolean:", "hitCheckBox", "V", 0x4, NULL, NULL },
    { "addPointCreatedForMouseReleasedWithGeogebraCommonEuclidianHits:", "addPointCreatedForMouseReleased", "Lgeogebra.common.euclidian.Hits;", 0x4, NULL, NULL },
    { "moveModeWithInt:", "moveMode", "Z", 0x4, NULL, NULL },
    { "hitResetIcon", NULL, "Z", 0x4, NULL, NULL },
    { "processMouseMovedWithGeogebraCommonEuclidianEventAbstractEvent:", "processMouseMoved", "V", 0x4, NULL, NULL },
    { "wrapMouseMovedWithGeogebraCommonEuclidianEventAbstractEvent:", "wrapMouseMoved", "V", 0x1, NULL, NULL },
    { "resetToolTipManager", NULL, "V", 0x404, NULL, NULL },
    { "wrapMouseExitedWithGeogebraCommonEuclidianEventAbstractEvent:", "wrapMouseExited", "V", 0x1, NULL, NULL },
    { "handleSelectClickWithJavaUtilArrayList:withBoolean:", "handleSelectClick", "V", 0x4, NULL, NULL },
    { "wrapMouseclickedWithBoolean:withInt:withGeogebraCommonEuclidianEventPointerEventTypeEnum:", "wrapMouseclicked", "V", 0x4, NULL, NULL },
    { "textfieldJustFocusedWWithInt:withInt:withGeogebraCommonEuclidianEventPointerEventTypeEnum:", "textfieldJustFocusedW", "Z", 0x4, NULL, NULL },
    { "resetMovedGeoPoint", NULL, "V", 0x1, NULL, NULL },
    { "setStartPointLocation", NULL, "V", 0x1, NULL, NULL },
    { "setStartPointLocationWithOriginWithDouble:withDouble:", "setStartPointLocationWithOrigin", "V", 0x1, NULL, NULL },
    { "handleMovedElementMultiple", NULL, "V", 0x4, NULL, NULL },
    { "handleMovedElementWithGeogebraCommonKernelGeosGeoElement:withBoolean:withGeogebraCommonEuclidianEventPointerEventTypeEnum:", "handleMovedElement", "V", 0x1, NULL, NULL },
    { "handleMovedElementDependentWithChangeableCoordParentNumbers", NULL, "Z", 0x4, NULL, NULL },
    { "handleMovedElementDependent", NULL, "V", 0x4, NULL, NULL },
    { "handleMovedElementDependentInitMode", NULL, "V", 0x4, NULL, NULL },
    { "handleMovedElementFreePoint", NULL, "Z", 0x14, NULL, NULL },
    { "handleMovedElementFreeText", NULL, "Z", 0x14, NULL, NULL },
    { "handleMovedElementFreeWithGeogebraCommonEuclidianEventPointerEventTypeEnum:", "handleMovedElementFree", "V", 0x4, NULL, NULL },
    { "addMovedGeoElementFreeInputPointsToTranslateableGeos", NULL, "V", 0x2, NULL, NULL },
    { "isMoveSliderExpectedWithInt:", "isMoveSliderExpected", "Z", 0x4, NULL, NULL },
    { "setStartPointLocationWithDouble:withDouble:", "setStartPointLocation", "V", 0x4, NULL, NULL },
    { "isCheckboxFixedWithGeogebraCommonKernelGeosGeoBoolean:", "isCheckboxFixed", "Z", 0x2, NULL, NULL },
    { "updateSelectionRectangleWithBoolean:", "updateSelectionRectangle", "V", 0x4, NULL, NULL },
    { "isDraggingBeyondThreshold", NULL, "Z", 0x4, NULL, NULL },
    { "freehandModePrepared", NULL, "Z", 0x4, NULL, NULL },
    { "handleMouseDraggedWithBoolean:withGeogebraCommonEuclidianEventAbstractEvent:", "handleMouseDragged", "V", 0x4, NULL, NULL },
    { "viewHasHitsForMouseDragged", NULL, "Z", 0x4, NULL, NULL },
    { "processRotate3DView", NULL, "Z", 0x4, NULL, NULL },
    { "allowSelectionRectangle", NULL, "Z", 0x4, NULL, NULL },
    { "handleMousePressedForMoveModeWithGeogebraCommonEuclidianEventAbstractEvent:withBoolean:", "handleMousePressedForMoveMode", "V", 0x14, NULL, NULL },
    { "shouldCancelDrag", NULL, "Z", 0x4, NULL, NULL },
    { "wrapMouseDraggedWithGeogebraCommonEuclidianEventAbstractEvent:withBoolean:", "wrapMouseDragged", "V", 0x1, NULL, NULL },
    { "translateHitsByVectorWithGeogebraCommonEuclidianEventPointerEventTypeEnum:", "translateHitsByVector", "V", 0x2, NULL, NULL },
    { "createVectorForTranslation", NULL, "Lgeogebra.common.kernel.kernelND.GeoVectorND;", 0x4, NULL, NULL },
    { "createVectorForTranslationWithNSString:", "createVectorForTranslation", "Lgeogebra.common.kernel.kernelND.GeoVectorND;", 0x4, NULL, NULL },
    { "setTranslateStartWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelKernelNDGeoVectorND:", "setTranslateStart", "V", 0x4, NULL, NULL },
    { "penModeWithInt:", "penMode", "Z", 0xc, NULL, NULL },
    { "handleMousePressedForViewButtons", NULL, "Z", 0x4, NULL, NULL },
    { "processRightPressFor3D", NULL, "Z", 0x4, NULL, NULL },
    { "createNewPointForModePointWithGeogebraCommonEuclidianHits:withBoolean:", "createNewPointForModePoint", "V", 0x4, NULL, NULL },
    { "createNewPointForModeOtherWithGeogebraCommonEuclidianHits:", "createNewPointForModeOther", "V", 0x4, NULL, NULL },
    { "handleMousePressedForRotateModeWithGeogebraCommonEuclidianEventPointerEventTypeEnum:", "handleMousePressedForRotateMode", "V", 0x4, NULL, NULL },
    { "mousePressedTranslatedViewWithGeogebraCommonEuclidianEventPointerEventTypeEnum:", "mousePressedTranslatedView", "V", 0x14, NULL, NULL },
    { "moveAxesPossible", NULL, "Z", 0x4, NULL, NULL },
    { "setDragCursorIfMoveView", NULL, "V", 0x4, NULL, NULL },
    { "switchModeForMousePressedWithGeogebraCommonEuclidianEventAbstractEvent:", "switchModeForMousePressed", "V", 0x4, NULL, NULL },
    { "wrapMousePressedWithGeogebraCommonEuclidianEventAbstractEvent:", "wrapMousePressed", "V", 0x1, NULL, NULL },
    { "shallMoveViewWithGeogebraCommonEuclidianEventAbstractEvent:", "shallMoveView", "Z", 0x2, NULL, NULL },
    { "runScriptsIfNeededWithGeogebraCommonKernelGeosGeoElement:", "runScriptsIfNeeded", "V", 0x4, NULL, NULL },
    { "processZoomRectangle", NULL, "Z", 0x4, NULL, NULL },
    { "processSelectionRectangleForTransformationsWithGeogebraCommonEuclidianHits:withGeogebraCommonKernelGeosTestEnum:", "processSelectionRectangleForTransformations", "V", 0x4, NULL, NULL },
    { "processSelectionRectangleWithBoolean:withBoolean:", "processSelectionRectangle", "V", 0x4, NULL, NULL },
    { "processSelection", NULL, "V", 0x4, NULL, NULL },
    { "showDrawingPadPopupWithGeogebraCommonAwtGPoint:", "showDrawingPadPopup", "V", 0x1, NULL, NULL },
    { "wrapMouseReleasedWithGeogebraCommonEuclidianEventAbstractEvent:", "wrapMouseReleased", "V", 0x1, NULL, NULL },
    { "modeCreatesHelperPointsWithInt:", "modeCreatesHelperPoints", "Z", 0x2, NULL, NULL },
    { "endOfWrapMouseReleasedWithGeogebraCommonEuclidianHits:withGeogebraCommonEuclidianEventAbstractEvent:", "endOfWrapMouseReleased", "V", 0x1, NULL, NULL },
    { "endOfWrapMouseReleasedWithGeogebraCommonEuclidianHits:withBoolean:withBoolean:withGeogebraCommonEuclidianEventPointerEventTypeEnum:", "endOfWrapMouseReleased", "V", 0x1, NULL, NULL },
    { "altClickedWithGeogebraCommonEuclidianEventPointerEventTypeEnum:", "altClicked", "V", 0x2, NULL, NULL },
    { "processRightReleasedWithBoolean:withBoolean:withGeogebraCommonEuclidianEventPointerEventTypeEnum:", "processRightReleased", "V", 0x2, NULL, NULL },
    { "setJustCreatedGeosSelected", NULL, "Z", 0x1, NULL, NULL },
    { "wrapMouseWheelMovedWithInt:withInt:withDouble:withBoolean:withBoolean:", "wrapMouseWheelMoved", "V", 0x1, NULL, NULL },
    { "setLineEndPointWithGeogebraCommonAwtGPoint2D:", "setLineEndPoint", "V", 0x1, NULL, NULL },
    { "getHighlightedgeos", NULL, "Lgeogebra.common.euclidian.Hits;", 0x1, NULL, NULL },
    { "setAlphaWithFloat:", "setAlpha", "V", 0x1, NULL, NULL },
    { "setSizeWithInt:", "setSize", "V", 0x1, NULL, NULL },
    { "setLineEndPointWithGeogebraCommonAwtGPoint2D_Double:", "setLineEndPoint", "V", 0x1, NULL, NULL },
    { "switchPreviewableForInitNewModeWithInt:", "switchPreviewableForInitNewMode", "Lgeogebra.common.euclidian.Previewable;", 0x4, NULL, NULL },
    { "initNewModeWithInt:", "initNewMode", "V", 0x4, NULL, NULL },
    { "setModeWithInt:", "setMode", "V", 0x1, NULL, NULL },
    { "zoomInOutWithBoolean:withBoolean:", "zoomInOut", "V", 0x1, NULL, NULL },
    { "zoomInOutWithDouble:withInt:", "zoomInOut", "V", 0x1, NULL, NULL },
    { "getApplication", NULL, "Lgeogebra.common.main.App;", 0x1, NULL, NULL },
    { "showPopupMenuChooseGeoWithJavaUtilArrayList:withGeogebraCommonEuclidianHits:", "showPopupMenuChooseGeo", "V", 0x4, NULL, NULL },
    { "getPen", NULL, "Lgeogebra.common.euclidian.EuclidianPen;", 0x11, NULL, NULL },
    { "resetPen", NULL, "V", 0x1, NULL, NULL },
    { "checkZooming", NULL, "V", 0x1, NULL, NULL },
    { "checkZoomingWithBoolean:", "checkZooming", "V", 0x1, NULL, NULL },
    { "getDeleteToolSize", NULL, "I", 0x1, NULL, NULL },
    { "isCollectingRepaints", NULL, "Z", 0x1, NULL, NULL },
    { "setCollectedRepaintsWithBoolean:", "setCollectedRepaints", "V", 0x1, NULL, NULL },
    { "getDialogManager", NULL, "Lgeogebra.common.main.DialogManager;", 0x4, NULL, NULL },
    { "getAppSelectedGeos", NULL, "Ljava.util.ArrayList;", 0x4, NULL, NULL },
    { "setAppSelectedGeosWithJavaUtilArrayList:", "setAppSelectedGeos", "V", 0x4, NULL, NULL },
    { "setAppSelectedGeosWithJavaUtilArrayList:withBoolean:", "setAppSelectedGeos", "V", 0x4, NULL, NULL },
    { "isTextfieldHasFocus", NULL, "Z", 0x1, NULL, NULL },
    { "calculateEnvironment", NULL, "V", 0x1, NULL, NULL },
    { "setExternalHandlingWithBoolean:", "setExternalHandling", "V", 0x1, NULL, NULL },
    { "getEnvironmentStyle", NULL, "Lgeogebra.common.euclidian.EnvironmentStyle;", 0x1, NULL, NULL },
    { "onPinchWithInt:withInt:withDouble:", "onPinch", "V", 0x1, NULL, NULL },
    { "twoTouchStartWithDouble:withDouble:withDouble:withDouble:", "twoTouchStart", "V", 0x1, NULL, NULL },
    { "twoTouchStartCommonWithDouble:withDouble:withDouble:withDouble:", "twoTouchStartCommon", "V", 0x11, NULL, NULL },
    { "twoTouchMoveWithDouble:withDouble:withDouble:withDouble:", "twoTouchMove", "V", 0x1, NULL, NULL },
    { "twoTouchMoveCommonWithDouble:withDouble:withDouble:withDouble:", "twoTouchMoveCommon", "V", 0x11, NULL, NULL },
    { "isExternalHandling", NULL, "Z", 0x1, NULL, NULL },
    { "getEvNo", NULL, "I", 0x1, NULL, NULL },
    { "setDefaultEventTypeWithGeogebraCommonEuclidianEventPointerEventTypeEnum:", "setDefaultEventType", "V", 0x11, NULL, NULL },
    { "getDefaultEventType", NULL, "Lgeogebra.common.euclidian.event.PointerEventType;", 0x11, NULL, NULL },
    { "moveAttachDetachWithBoolean:withGeogebraCommonEuclidianEventAbstractEvent:", "moveAttachDetach", "V", 0x2, NULL, NULL },
    { "setViewWithGeogebraCommonEuclidianEuclidianView:", "setView", "V", 0x401, NULL, NULL },
    { "setDialogOccurred", NULL, "V", 0x1, NULL, NULL },
    { "moveIfWaiting", NULL, "V", 0x1, NULL, NULL },
    { "setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:", "setViewHits", "V", 0x4, NULL, NULL },
    { "isTemporaryMode", NULL, "Z", 0x1, NULL, NULL },
    { "resetModeAfterFreehand", NULL, "V", 0x1, NULL, NULL },
    { "prepareModeForFreehand", NULL, "V", 0x1, NULL, NULL },
    { "onPointerEventStartWithGeogebraCommonEuclidianEventAbstractEvent:", "onPointerEventStart", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_TRANSPARENT_ALPHA_VALUE_", NULL, 0x19, "F", NULL, NULL, .constantValue.asFloat = GeogebraCommonEuclidianEuclidianController_MAX_TRANSPARENT_ALPHA_VALUE },
    { "MIN_VISIBLE_ALPHA_VALUE_", NULL, 0x19, "F", NULL, NULL, .constantValue.asFloat = GeogebraCommonEuclidianEuclidianController_MIN_VISIBLE_ALPHA_VALUE },
    { "POLYGON_NORMAL_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_POLYGON_NORMAL },
    { "POLYGON_RIGID_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_POLYGON_RIGID },
    { "POLYGON_VECTOR_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_POLYGON_VECTOR },
    { "MOUSE_DRAG_MAX_DIST_SQUARE_", NULL, 0x1c, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonEuclidianEuclidianController_MOUSE_DRAG_MAX_DIST_SQUARE },
    { "MAX_CONTINUITY_STEPS_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_MAX_CONTINUITY_STEPS },
    { "deleteMode_", NULL, 0x2, "Lgeogebra.common.euclidian.modes.ModeDelete;", NULL, NULL,  },
    { "xTemp_", NULL, 0x4, "D", NULL, NULL,  },
    { "yTemp_", NULL, 0x4, "D", NULL, NULL,  },
    { "xRW_", NULL, 0x1, "D", NULL, NULL,  },
    { "yRW_", NULL, 0x1, "D", NULL, NULL,  },
    { "xRWold_", NULL, 0x0, "D", NULL, NULL,  },
    { "yRWold_", NULL, 0x0, "D", NULL, NULL,  },
    { "temp_", NULL, 0x0, "D", NULL, NULL,  },
    { "useLineEndPoint_", NULL, 0x4, "Z", NULL, NULL,  },
    { "tempConic_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoConic;", NULL, NULL,  },
    { "tempImplicitPoly_", NULL, 0x4, "Lgeogebra.common.kernel.implicit.GeoImplicitPoly;", NULL, NULL,  },
    { "moveDependentPoints_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoPoint;>;",  },
    { "tempFunction_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "movedGeoPoint_", NULL, 0x1, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "movedGeoPointDragged_", NULL, 0x1, "Z", NULL, NULL,  },
    { "movedGeoLine_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoLineND;", NULL, NULL,  },
    { "movedGeoConic_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoConic;", NULL, NULL,  },
    { "movedGeoImplicitPoly_", NULL, 0x4, "Lgeogebra.common.kernel.implicit.GeoImplicitPoly;", NULL, NULL,  },
    { "movedGeoVector_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoVectorND;", NULL, NULL,  },
    { "movedGeoText_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "oldImage_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoImage;", NULL, NULL,  },
    { "movedGeoImage_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoImage;", NULL, NULL,  },
    { "movedGeoFunction_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "movedGeoNumeric_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "movedGeoNumericDragged_", NULL, 0x4, "Z", NULL, NULL,  },
    { "movedGeoBoolean_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
    { "movedGeoButton_", NULL, 0x4, "Lgeogebra.common.kernel.geos.Furniture;", NULL, NULL,  },
    { "movedLabelGeoElement_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "movedGeoElement_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "tempNum_", NULL, 0x4, "Lgeogebra.common.kernel.arithmetic.MyDouble;", NULL, NULL,  },
    { "rotationLastAngle_", NULL, 0x4, "D", NULL, NULL,  },
    { "translateableGeos_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "translationVec_", NULL, 0x4, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "tempArrayList_", NULL, 0x4, "Lgeogebra.common.euclidian.Hits;", NULL, NULL,  },
    { "tempArrayList2_", NULL, 0x4, "Lgeogebra.common.euclidian.Hits;", NULL, NULL,  },
    { "tempArrayList3_", NULL, 0x4, "Lgeogebra.common.euclidian.Hits;", NULL, NULL,  },
    { "selectedPoints_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/kernelND/GeoPointND;>;",  },
    { "selectedNumbers_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoNumeric;>;",  },
    { "selectedNumberValues_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoNumberValue;>;",  },
    { "selectedLines_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/kernelND/GeoLineND;>;",  },
    { "selectedDirections_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/kernelND/GeoDirectionND;>;",  },
    { "selectedSegments_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/kernelND/GeoSegmentND;>;",  },
    { "selectedRegions_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/Region;>;",  },
    { "selectedPaths_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/Path;>;",  },
    { "selectedConicsND_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/kernelND/GeoConicND;>;",  },
    { "selectedImplicitpoly_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/implicit/GeoImplicitPoly;>;",  },
    { "selectedFunctions_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoFunction;>;",  },
    { "selectedCurves_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoCurveCartesian;>;",  },
    { "selectedVectors_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/kernelND/GeoVectorND;>;",  },
    { "selectedPolygons_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoPolygon;>;",  },
    { "selectedPolyLines_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoPolyLine;>;",  },
    { "selectedGeos_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "selectedLists_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoList;>;",  },
    { "highlightedGeos_", NULL, 0x4, "Lgeogebra.common.euclidian.Hits;", NULL, NULL,  },
    { "justCreatedGeos_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "selectionPreview_", NULL, 0x4, "Z", NULL, NULL,  },
    { "hideIntersection_", NULL, 0x1, "Z", NULL, NULL,  },
    { "resultedGeo_", NULL, 0x1, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "temporaryMode_", NULL, 0x4, "Z", NULL, NULL,  },
    { "dontClearSelection_", NULL, 0x4, "Z", NULL, NULL,  },
    { "draggingOccured_", NULL, 0x4, "Z", NULL, NULL,  },
    { "draggingOccuredBeforeRelease_", NULL, 0x4, "Z", NULL, NULL,  },
    { "draggingBeyondThreshold_", NULL, 0x1, "Z", NULL, NULL,  },
    { "pointCreated_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "moveModeSelectionHandled_", NULL, 0x4, "Z", NULL, NULL,  },
    { "highlightJustCreatedGeos_", NULL, 0x4, "Z", NULL, NULL,  },
    { "pastePreviewSelected_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "pastePreviewSelectedAndDependent_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "mode_", NULL, 0x4, "I", NULL, NULL,  },
    { "oldMode_", NULL, 0x4, "I", NULL, NULL,  },
    { "moveMode__", "moveMode", 0x4, "I", NULL, NULL,  },
    { "macro__", "macro", 0x4, "Lgeogebra.common.kernel.Macro;", NULL, NULL,  },
    { "macroInput_", NULL, 0x4, "[Lgeogebra.common.kernel.geos.Test;", NULL, NULL,  },
    { "defaultInitialDelay_", NULL, 0x4, "I", NULL, NULL,  },
    { "toggleModeChangedKernel_", NULL, 0x4, "Z", NULL, NULL,  },
    { "altDown_", NULL, 0x4, "Z", NULL, NULL,  },
    { "rotGeoElement_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "rotationCenter_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "polygonMode_", NULL, 0x4, "I", NULL, NULL,  },
    { "transformCoordsOffset_", NULL, 0x4, "[D", NULL, NULL,  },
    { "allowSelectionRectangleForTranslateByVector_", NULL, 0x4, "Z", NULL, NULL,  },
    { "previousPointCapturing_", NULL, 0x4, "I", NULL, NULL,  },
    { "persistentStickyPointList_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/kernelND/GeoPointND;>;",  },
    { "app_", NULL, 0x14, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "selection_", NULL, 0x14, "Lgeogebra.common.main.SelectionManager;", NULL, NULL,  },
    { "l10n_", NULL, 0x14, "Lgeogebra.common.main.Localization;", NULL, NULL,  },
    { "kernel_", NULL, 0x1, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "startLoc_", NULL, 0x4, "Lgeogebra.common.awt.GPoint;", NULL, NULL,  },
    { "mouseLoc_", NULL, 0x1, "Lgeogebra.common.awt.GPoint;", NULL, NULL,  },
    { "lastMouseLoc_", NULL, 0x4, "Lgeogebra.common.awt.GPoint;", NULL, NULL,  },
    { "oldLoc_", NULL, 0x4, "Lgeogebra.common.awt.GPoint;", NULL, NULL,  },
    { "startPoint_", NULL, 0x2, "Lgeogebra.common.awt.GPoint2D$Double;", NULL, NULL,  },
    { "lineEndPoint_", NULL, 0x4, "Lgeogebra.common.awt.GPoint2D$Double;", NULL, NULL,  },
    { "selectionStartPoint_", NULL, 0x4, "Lgeogebra.common.awt.GPoint;", NULL, NULL,  },
    { "tempDependentPointX_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Ljava/lang/Double;>;",  },
    { "tempDependentPointY_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Ljava/lang/Double;>;",  },
    { "mouseIsOverLabel__", "mouseIsOverLabel", 0x4, "Z", NULL, NULL,  },
    { "view_", NULL, 0x1, "Lgeogebra.common.euclidian.EuclidianView;", NULL, NULL,  },
    { "collectingRepaints_", NULL, 0x4, "I", NULL, NULL,  },
    { "collectedRepaints_", NULL, 0x4, "Z", NULL, NULL,  },
    { "externalHandling_", NULL, 0x2, "Z", NULL, NULL,  },
    { "lastMouseRelease_", NULL, 0x2, "J", NULL, NULL,  },
    { "index_", NULL, 0x0, "I", NULL, NULL,  },
    { "companion_", NULL, 0x4, "Lgeogebra.common.euclidian.EuclidianControllerCompanion;", NULL, NULL,  },
    { "pen_", NULL, 0x1, "Lgeogebra.common.euclidian.EuclidianPen;", NULL, NULL,  },
    { "handleAddSelectedArrayList_", NULL, 0x4, "Lgeogebra.common.euclidian.Hits;", NULL, NULL,  },
    { "textfieldHasFocus__", "textfieldHasFocus", 0x2, "Z", NULL, NULL,  },
    { "pressedButton_", NULL, 0x2, "Lgeogebra.common.euclidian.MyButton;", NULL, NULL,  },
    { "MOVE_NONE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_MOVE_NONE },
    { "MOVE_POINT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_MOVE_POINT },
    { "MOVE_LINE_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_MOVE_LINE },
    { "MOVE_CONIC_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_MOVE_CONIC },
    { "MOVE_VECTOR_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_MOVE_VECTOR },
    { "MOVE_VECTOR_STARTPOINT_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_MOVE_VECTOR_STARTPOINT },
    { "MOVE_VIEW_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_MOVE_VIEW },
    { "MOVE_FUNCTION_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_MOVE_FUNCTION },
    { "MOVE_LABEL_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_MOVE_LABEL },
    { "MOVE_TEXT_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_MOVE_TEXT },
    { "MOVE_NUMERIC_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_MOVE_NUMERIC },
    { "MOVE_SLIDER_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_MOVE_SLIDER },
    { "MOVE_IMAGE_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_MOVE_IMAGE },
    { "MOVE_ROTATE_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_MOVE_ROTATE },
    { "MOVE_DEPENDENT_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_MOVE_DEPENDENT },
    { "MOVE_MULTIPLE_OBJECTS_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_MOVE_MULTIPLE_OBJECTS },
    { "MOVE_X_AXIS_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_MOVE_X_AXIS },
    { "MOVE_Y_AXIS_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_MOVE_Y_AXIS },
    { "MOVE_BOOLEAN_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_MOVE_BOOLEAN },
    { "MOVE_BUTTON_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_MOVE_BUTTON },
    { "MOVE_ROTATE_VIEW_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_MOVE_ROTATE_VIEW },
    { "MOVE_IMPLICITPOLY_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_MOVE_IMPLICITPOLY },
    { "MOVE_VECTOR_NO_GRID_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_MOVE_VECTOR_NO_GRID },
    { "MOVE_POINT_WITH_OFFSET_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_MOVE_POINT_WITH_OFFSET },
    { "MOVE_FREEHAND_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_MOVE_FREEHAND },
    { "MOVE_ATTACH_DETACH_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_MOVE_ATTACH_DETACH },
    { "MOVE_PLANE_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_MOVE_PLANE },
    { "ZOOM_RECT_THRESHOLD_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_ZOOM_RECT_THRESHOLD },
    { "DRAG_THRESHOLD_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_DRAG_THRESHOLD },
    { "tmpCoordsL3_", NULL, 0x4, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "tmpCoordsL4_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "mouseLocRW_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "textDispatcher_", NULL, 0x2, "Lgeogebra.common.euclidian.TextDispatcher;", NULL, NULL,  },
    { "vertexX_", NULL, 0x0, "D", NULL, NULL,  },
    { "vertexY_", NULL, 0x0, "D", NULL, NULL,  },
    { "initxRW_", NULL, 0x2, "D", NULL, NULL,  },
    { "initFactor_", NULL, 0x2, "D", NULL, NULL,  },
    { "checkBoxOrButtonJustHitted_", NULL, 0x2, "Z", NULL, NULL,  },
    { "penDragged_", NULL, 0x4, "Z", NULL, NULL,  },
    { "scriptsHaveRun_", NULL, 0x2, "Z", NULL, NULL,  },
    { "doubleClickStarted_", NULL, 0x2, "Z", NULL, NULL,  },
    { "lastMouseUpLoc_", NULL, 0x2, "Lgeogebra.common.awt.GPoint;", NULL, NULL,  },
    { "checkboxChangeOccured_", NULL, 0x2, "Z", NULL, NULL,  },
    { "lastMousePressedTime_", NULL, 0x2, "J", NULL, NULL,  },
    { "wheelZoomingOccurred_", NULL, 0x2, "Z", NULL, NULL,  },
    { "oldDistance_", NULL, 0x1, "D", NULL, NULL,  },
    { "defaultEventType_", NULL, 0x2, "Lgeogebra.common.euclidian.event.PointerEventType;", NULL, NULL,  },
    { "MINIMAL_PIXEL_DIFFERENCE_FOR_ZOOM_", NULL, 0x1c, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonEuclidianEuclidianController_MINIMAL_PIXEL_DIFFERENCE_FOR_ZOOM },
    { "INCREASED_THRESHOLD_FACTOR_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianController_INCREASED_THRESHOLD_FACTOR },
    { "detachFrom_", NULL, 0x4, "Ljava.lang.Object;", NULL, NULL,  },
    { "detachFromPath_", NULL, 0x2, "Z", NULL, NULL,  },
    { "detachFromRegion_", NULL, 0x2, "Z", NULL, NULL,  },
    { "needsAttach_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianEuclidianController = { 2, "EuclidianController", "geogebra.common.euclidian", NULL, 0x401, 359, methods, 168, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianEuclidianController;
}

@end

void GeogebraCommonEuclidianEuclidianController_removeAxesWithJavaUtilArrayList_(JavaUtilArrayList *geos) {
  GeogebraCommonEuclidianEuclidianController_initialize();
  for (jint i = [((JavaUtilArrayList *) nil_chk(geos)) size] - 1; i >= 0; i--) {
    GeogebraCommonKernelGeosGeoElement *geo = [geos getWithInt:i];
    if ([geo isKindOfClass:[GeogebraCommonKernelGeosGeoAxis class]]) {
      [geos removeWithInt:i];
    }
  }
}

void GeogebraCommonEuclidianEuclidianController_initWithGeogebraCommonMainApp_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonMainApp *app) {
  NSObject_init(self);
  self->xRWold_ = JavaLangDouble_NEGATIVE_INFINITY;
  self->yRWold_ = self->xRWold_;
  self->useLineEndPoint_ = NO;
  self->movedGeoPointDragged_ = NO;
  self->movedGeoNumericDragged_ = NO;
  GeogebraCommonEuclidianEuclidianController_setAndConsume_tempArrayList_(self, new_GeogebraCommonEuclidianHits_init());
  GeogebraCommonEuclidianEuclidianController_setAndConsume_tempArrayList2_(self, new_GeogebraCommonEuclidianHits_init());
  GeogebraCommonEuclidianEuclidianController_setAndConsume_tempArrayList3_(self, new_GeogebraCommonEuclidianHits_init());
  GeogebraCommonEuclidianEuclidianController_setAndConsume_selectedPoints_(self, new_JavaUtilArrayList_init());
  GeogebraCommonEuclidianEuclidianController_setAndConsume_selectedNumbers_(self, new_JavaUtilArrayList_init());
  GeogebraCommonEuclidianEuclidianController_setAndConsume_selectedNumberValues_(self, new_JavaUtilArrayList_init());
  GeogebraCommonEuclidianEuclidianController_setAndConsume_selectedLines_(self, new_JavaUtilArrayList_init());
  GeogebraCommonEuclidianEuclidianController_setAndConsume_selectedDirections_(self, new_JavaUtilArrayList_init());
  GeogebraCommonEuclidianEuclidianController_setAndConsume_selectedSegments_(self, new_JavaUtilArrayList_init());
  GeogebraCommonEuclidianEuclidianController_setAndConsume_selectedRegions_(self, new_JavaUtilArrayList_init());
  GeogebraCommonEuclidianEuclidianController_setAndConsume_selectedPaths_(self, new_JavaUtilArrayList_init());
  GeogebraCommonEuclidianEuclidianController_setAndConsume_selectedConicsND_(self, new_JavaUtilArrayList_init());
  GeogebraCommonEuclidianEuclidianController_setAndConsume_selectedImplicitpoly_(self, new_JavaUtilArrayList_init());
  GeogebraCommonEuclidianEuclidianController_setAndConsume_selectedFunctions_(self, new_JavaUtilArrayList_init());
  GeogebraCommonEuclidianEuclidianController_setAndConsume_selectedCurves_(self, new_JavaUtilArrayList_init());
  GeogebraCommonEuclidianEuclidianController_setAndConsume_selectedVectors_(self, new_JavaUtilArrayList_init());
  GeogebraCommonEuclidianEuclidianController_setAndConsume_selectedPolygons_(self, new_JavaUtilArrayList_init());
  GeogebraCommonEuclidianEuclidianController_setAndConsume_selectedPolyLines_(self, new_JavaUtilArrayList_init());
  GeogebraCommonEuclidianEuclidianController_setAndConsume_selectedGeos_(self, new_JavaUtilArrayList_init());
  GeogebraCommonEuclidianEuclidianController_setAndConsume_selectedLists_(self, new_JavaUtilArrayList_init());
  GeogebraCommonEuclidianEuclidianController_setAndConsume_highlightedGeos_(self, new_GeogebraCommonEuclidianHits_init());
  GeogebraCommonEuclidianEuclidianController_setAndConsume_justCreatedGeos_(self, new_JavaUtilArrayList_init());
  self->selectionPreview_ = NO;
  self->hideIntersection_ = NO;
  self->temporaryMode_ = NO;
  self->dontClearSelection_ = NO;
  self->draggingOccured_ = NO;
  self->draggingOccuredBeforeRelease_ = NO;
  self->draggingBeyondThreshold_ = NO;
  GeogebraCommonEuclidianEuclidianController_set_pointCreated_(self, nil);
  self->highlightJustCreatedGeos_ = YES;
  GeogebraCommonEuclidianEuclidianController_set_pastePreviewSelected_(self, nil);
  self->moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_NONE;
  self->toggleModeChangedKernel_ = NO;
  self->altDown_ = NO;
  self->polygonMode_ = GeogebraCommonEuclidianEuclidianController_POLYGON_NORMAL;
  GeogebraCommonEuclidianEuclidianController_setAndConsume_transformCoordsOffset_(self, [IOSDoubleArray newArrayWithLength:2]);
  self->allowSelectionRectangleForTranslateByVector_ = YES;
  GeogebraCommonEuclidianEuclidianController_setAndConsume_persistentStickyPointList_(self, new_JavaUtilArrayList_init());
  GeogebraCommonEuclidianEuclidianController_setAndConsume_oldLoc_(self, new_GeogebraCommonAwtGPoint_init());
  GeogebraCommonEuclidianEuclidianController_setAndConsume_startPoint_(self, new_GeogebraCommonAwtGPoint2D_Double_init());
  GeogebraCommonEuclidianEuclidianController_set_lineEndPoint_(self, nil);
  GeogebraCommonEuclidianEuclidianController_setAndConsume_selectionStartPoint_(self, new_GeogebraCommonAwtGPoint_init());
  self->mouseIsOverLabel__ = NO;
  self->collectingRepaints_ = 0;
  self->collectedRepaints_ = NO;
  GeogebraCommonEuclidianEuclidianController_setAndConsume_handleAddSelectedArrayList_(self, new_GeogebraCommonEuclidianHits_init());
  self->textfieldHasFocus__ = NO;
  self->vertexX_ = JavaLangDouble_NaN;
  self->vertexY_ = JavaLangDouble_NaN;
  self->initxRW_ = JavaLangDouble_NaN;
  self->initFactor_ = JavaLangDouble_NaN;
  self->checkBoxOrButtonJustHitted_ = NO;
  self->scriptsHaveRun_ = NO;
  self->checkboxChangeOccured_ = NO;
  self->wheelZoomingOccurred_ = NO;
  GeogebraCommonEuclidianEuclidianController_set_defaultEventType_(self, GeogebraCommonEuclidianEventPointerEventTypeEnum_get_MOUSE());
  self->needsAttach_ = NO;
  GeogebraCommonEuclidianEuclidianController_set_app_(self, app);
  GeogebraCommonEuclidianEuclidianController_set_selection_(self, [((GeogebraCommonMainApp *) nil_chk(app)) getSelectionManager]);
  GeogebraCommonEuclidianEuclidianController_set_l10n_(self, [app getLocalization]);
  [self createCompanions];
}

void GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, JavaUtilArrayList *selectionList, jboolean doUpdateSelection) {
  [((JavaUtilArrayList *) nil_chk(selectionList)) clear];
  [((JavaUtilArrayList *) nil_chk(self->selectedGeos_)) clear];
  if (doUpdateSelection) {
    [((GeogebraCommonMainSelectionManager *) nil_chk(self->selection_)) clearSelectedGeos];
  }
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) repaintView];
}

void GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(GeogebraCommonEuclidianEuclidianController *self, JavaUtilArrayList *selectionList) {
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(self, selectionList, YES);
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedGeos(GeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedGeos_)) size] type:GeogebraCommonKernelGeosGeoElement_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [self->selectedGeos_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSObjectArray_Set(ret, i, [it next]);
    i++;
  }
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedGeos_);
  return ret;
}

void GeogebraCommonEuclidianEuclidianController_getSelectedPointsNDWithGeogebraCommonKernelKernelNDGeoPointNDArray_(GeogebraCommonEuclidianEuclidianController *self, IOSObjectArray *result) {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(self->selectedPoints_)) size]; i++) {
    IOSObjectArray_Set(nil_chk(result), i, [self->selectedPoints_ getWithInt:i]);
  }
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedPoints_);
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(GeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedPoints_)) size] type:GeogebraCommonKernelKernelNDGeoPointND_class_()];
  GeogebraCommonEuclidianEuclidianController_getSelectedPointsNDWithGeogebraCommonKernelKernelNDGeoPointNDArray_(self, ret);
  return ret;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedPoints(GeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedPoints_)) size] type:GeogebraCommonKernelGeosGeoPoint_class_()];
  GeogebraCommonEuclidianEuclidianController_getSelectedPointsNDWithGeogebraCommonKernelKernelNDGeoPointNDArray_(self, ret);
  return ret;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedNumbers(GeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedNumbers_)) size] type:GeogebraCommonKernelGeosGeoNumeric_class_()];
  for (jint i = 0; i < [self->selectedNumbers_ size]; i++) {
    IOSObjectArray_Set(ret, i, [self->selectedNumbers_ getWithInt:i]);
  }
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedNumbers_);
  return ret;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedLists(GeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedLists_)) size] type:GeogebraCommonKernelGeosGeoList_class_()];
  for (jint i = 0; i < [self->selectedLists_ size]; i++) {
    IOSObjectArray_Set(ret, i, [self->selectedLists_ getWithInt:i]);
  }
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedLists_);
  return ret;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedPolygons(GeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedPolygons_)) size] type:GeogebraCommonKernelGeosGeoPolygon_class_()];
  for (jint i = 0; i < [self->selectedPolygons_ size]; i++) {
    IOSObjectArray_Set(ret, i, [self->selectedPolygons_ getWithInt:i]);
  }
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedPolygons_);
  return ret;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedPolyLines(GeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedPolyLines_)) size] type:GeogebraCommonKernelGeosGeoPolyLine_class_()];
  for (jint i = 0; i < [self->selectedPolyLines_ size]; i++) {
    IOSObjectArray_Set(ret, i, [self->selectedPolyLines_ getWithInt:i]);
  }
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedPolyLines_);
  return ret;
}

void GeogebraCommonEuclidianEuclidianController_getSelectedLinesNDWithGeogebraCommonKernelKernelNDGeoLineNDArray_(GeogebraCommonEuclidianEuclidianController *self, IOSObjectArray *lines) {
  jint i = 0;
  id<JavaUtilIterator> it = [((JavaUtilArrayList *) nil_chk(self->selectedLines_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSObjectArray_Set(nil_chk(lines), i, [it next]);
    i++;
  }
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedLines_);
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedLinesND(GeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *lines = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedLines_)) size] type:GeogebraCommonKernelKernelNDGeoLineND_class_()];
  GeogebraCommonEuclidianEuclidianController_getSelectedLinesNDWithGeogebraCommonKernelKernelNDGeoLineNDArray_(self, lines);
  return lines;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedLines(GeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *lines = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedLines_)) size] type:GeogebraCommonKernelGeosGeoLine_class_()];
  GeogebraCommonEuclidianEuclidianController_getSelectedLinesNDWithGeogebraCommonKernelKernelNDGeoLineNDArray_(self, lines);
  return lines;
}

void GeogebraCommonEuclidianEuclidianController_getSelectedSegmentsNDWithGeogebraCommonKernelKernelNDGeoSegmentNDArray_(GeogebraCommonEuclidianEuclidianController *self, IOSObjectArray *segments) {
  jint i = 0;
  id<JavaUtilIterator> it = [((JavaUtilArrayList *) nil_chk(self->selectedSegments_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSObjectArray_Set(nil_chk(segments), i, [it next]);
    i++;
  }
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedSegments_);
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedSegmentsND(GeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *segments = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedSegments_)) size] type:GeogebraCommonKernelKernelNDGeoSegmentND_class_()];
  GeogebraCommonEuclidianEuclidianController_getSelectedSegmentsNDWithGeogebraCommonKernelKernelNDGeoSegmentNDArray_(self, segments);
  return segments;
}

void GeogebraCommonEuclidianEuclidianController_getSelectedVectorsNDWithGeogebraCommonKernelKernelNDGeoVectorNDArray_(GeogebraCommonEuclidianEuclidianController *self, IOSObjectArray *vectors) {
  jint i = 0;
  id<JavaUtilIterator> it = [((JavaUtilArrayList *) nil_chk(self->selectedVectors_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSObjectArray_Set(nil_chk(vectors), i, [it next]);
    i++;
  }
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedVectors_);
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedVectorsND(GeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *vectors = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedVectors_)) size] type:GeogebraCommonKernelKernelNDGeoVectorND_class_()];
  GeogebraCommonEuclidianEuclidianController_getSelectedVectorsNDWithGeogebraCommonKernelKernelNDGeoVectorNDArray_(self, vectors);
  return vectors;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedConics(GeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *conics = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedConicsND_)) size] type:GeogebraCommonKernelGeosGeoConic_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [self->selectedConicsND_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSObjectArray_Set(conics, i, (GeogebraCommonKernelGeosGeoConic *) check_class_cast([it next], [GeogebraCommonKernelGeosGeoConic class]));
    i++;
  }
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedConicsND_);
  return conics;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedCircles(GeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *circles = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedConicsND_)) size] type:GeogebraCommonKernelGeosGeoConic_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [self->selectedConicsND_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelKernelNDGeoConicND *c = [it next];
    if ([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c)) isCircle]) {
      IOSObjectArray_Set(circles, i, (GeogebraCommonKernelGeosGeoConic *) check_class_cast(c, [GeogebraCommonKernelGeosGeoConic class]));
      i++;
    }
  }
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedConicsND_);
  return circles;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedConicsND(GeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *conics = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedConicsND_)) size] type:GeogebraCommonKernelKernelNDGeoConicND_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [self->selectedConicsND_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSObjectArray_Set(conics, i, [it next]);
    i++;
  }
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedConicsND_);
  return conics;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedRegions(GeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *regions = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedRegions_)) size] type:GeogebraCommonKernelRegion_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [self->selectedRegions_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSObjectArray_Set(regions, i, [it next]);
    i++;
  }
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedRegions_);
  return regions;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedPaths(GeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *paths = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedPaths_)) size] type:GeogebraCommonKernelPath_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [self->selectedPaths_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSObjectArray_Set(paths, i, [it next]);
    i++;
  }
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedPaths_);
  return paths;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedImplicitpoly(GeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *implicitPoly = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedImplicitpoly_)) size] type:GeogebraCommonKernelImplicitGeoImplicitPoly_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [self->selectedImplicitpoly_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSObjectArray_Set(implicitPoly, i, [it next]);
    i++;
  }
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedImplicitpoly_);
  return implicitPoly;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedFunctions(GeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *functions = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedFunctions_)) size] type:GeogebraCommonKernelGeosGeoFunction_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [self->selectedFunctions_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSObjectArray_Set(functions, i, [it next]);
    i++;
  }
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedFunctions_);
  return functions;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_getSelectedCurves(GeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *curves = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedCurves_)) size] type:GeogebraCommonKernelGeosGeoCurveCartesian_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [self->selectedCurves_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSObjectArray_Set(curves, i, [it next]);
    i++;
  }
  GeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedCurves_);
  return curves;
}

id<GeogebraCommonKernelKernelNDGeoPointND> GeogebraCommonEuclidianEuclidianController_createNewPoint2DWithNSString_withBoolean_withGeogebraCommonKernelRegion_withDouble_withDouble_withBoolean_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, NSString *label, jboolean forPreviewable, id<GeogebraCommonKernelRegion> region, jdouble x, jdouble y, jboolean complex, jboolean coords2D) {
  [self checkZoomingWithBoolean:forPreviewable];
  id<GeogebraCommonKernelKernelNDGeoPointND> ret = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) PointInWithNSString:label withGeogebraCommonKernelRegion:region withDouble:x withDouble:y withBoolean:!forPreviewable withBoolean:complex withBoolean:coords2D];
  return ret;
}

void GeogebraCommonEuclidianEuclidianController_setHighlightedGeosWithBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean highlight) {
  GeogebraCommonKernelGeosGeoElement *geo;
  id<JavaUtilIterator> it = [((GeogebraCommonEuclidianHits *) nil_chk(self->highlightedGeos_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    geo = [it next];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isFixed]) {
      [geo setHighlightedWithBoolean:highlight];
    }
  }
}

jint GeogebraCommonEuclidianEuclidianController_addToSelectionListWithJavaUtilArrayList_withId_withInt_(GeogebraCommonEuclidianEuclidianController *self, JavaUtilArrayList *selectionList, id geo, jint max) {
  if (geo == nil) {
    return 0;
  }
  jint ret = 0;
  if ([((JavaUtilArrayList *) nil_chk(selectionList)) containsWithId:geo]) {
    [selectionList removeWithId:geo];
    if (![selectionList isEqual:self->selectedGeos_]) {
      [((JavaUtilArrayList *) nil_chk(self->selectedGeos_)) removeWithId:geo];
    }
    ret = -1;
  }
  else {
    if ([selectionList size] < max) {
      [selectionList addWithId:geo];
      if (![selectionList isEqual:self->selectedGeos_]) {
        [((JavaUtilArrayList *) nil_chk(self->selectedGeos_)) addWithId:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoElement class])];
      }
      ret = 1;
    }
  }
  if (ret != 0) {
    [((GeogebraCommonMainSelectionManager *) nil_chk(self->selection_)) toggleSelectedGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoElement class])];
  }
  return ret;
}

jint GeogebraCommonEuclidianEuclidianController_addToHighlightedListWithJavaUtilArrayList_withJavaUtilArrayList_withInt_(GeogebraCommonEuclidianEuclidianController *self, JavaUtilArrayList *selectionList, JavaUtilArrayList *geos, jint max) {
  if (geos == nil) {
    return 0;
  }
  GeogebraCommonKernelGeosGeoElement *geo;
  jint ret = 0;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geos)) size]; i++) {
    geo = [geos getWithInt:i];
    if ([((JavaUtilArrayList *) nil_chk(selectionList)) containsWithId:geo]) {
      ret = (ret == 1) ? 1 : -1;
    }
    else {
      if ([selectionList size] < max) {
        [((GeogebraCommonEuclidianHits *) nil_chk(self->highlightedGeos_)) addWithId:geo];
        ret = 1;
      }
    }
  }
  return ret;
}

jint GeogebraCommonEuclidianEuclidianController_addToSelectionListWithJavaUtilArrayList_withJavaUtilArrayList_withInt_withBoolean_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, JavaUtilArrayList *selectionList, JavaUtilArrayList *geos, jint max, jboolean addMoreThanOneAllowed, jboolean tryDeselect) {
  if (geos == nil) {
    return 0;
  }
  if (tryDeselect && ([((JavaUtilArrayList *) nil_chk(geos)) size] == 1)) {
    return GeogebraCommonEuclidianEuclidianController_addToSelectionListWithJavaUtilArrayList_withId_withInt_(self, selectionList, (id<GeogebraCommonKernelKernelNDGeoElementND>) check_protocol_cast([geos getWithInt:0], @protocol(GeogebraCommonKernelKernelNDGeoElementND)), max);
  }
  [((JavaUtilArrayList *) nil_chk(geos)) removeAllWithJavaUtilCollection:selectionList];
  if (!addMoreThanOneAllowed || (([geos size] + [((JavaUtilArrayList *) nil_chk(selectionList)) size]) > max)) {
    return GeogebraCommonEuclidianEuclidianController_addToSelectionListWithJavaUtilArrayList_withId_withInt_(self, selectionList, (id<GeogebraCommonKernelKernelNDGeoElementND>) check_protocol_cast([self chooseGeoWithJavaUtilArrayList:geos withBoolean:YES withBoolean:YES], @protocol(GeogebraCommonKernelKernelNDGeoElementND)), max);
  }
  jboolean contained = NO;
  for (jint i = 0; i < [geos size]; i++) {
    if ([((JavaUtilArrayList *) nil_chk(selectionList)) containsWithId:[geos getWithInt:i]]) {
      contained = YES;
    }
  }
  if (contained) {
    return GeogebraCommonEuclidianEuclidianController_addToSelectionListWithJavaUtilArrayList_withId_withInt_(self, selectionList, (id<GeogebraCommonKernelKernelNDGeoElementND>) check_protocol_cast([self chooseGeoWithJavaUtilArrayList:geos withBoolean:YES withBoolean:YES], @protocol(GeogebraCommonKernelKernelNDGeoElementND)), max);
  }
  jint count = 0;
  for (jint i = 0; i < [geos size]; i++) {
    count += GeogebraCommonEuclidianEuclidianController_addToSelectionListWithJavaUtilArrayList_withId_withInt_(self, selectionList, (id<GeogebraCommonKernelKernelNDGeoElementND>) check_protocol_cast([geos getWithInt:i], @protocol(GeogebraCommonKernelKernelNDGeoElementND)), max);
  }
  return count;
}

jint GeogebraCommonEuclidianEuclidianController_selGeos(GeogebraCommonEuclidianEuclidianController *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedGeos_)) size];
}

jint GeogebraCommonEuclidianEuclidianController_selPoints(GeogebraCommonEuclidianEuclidianController *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedPoints_)) size];
}

jint GeogebraCommonEuclidianEuclidianController_selNumbers(GeogebraCommonEuclidianEuclidianController *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedNumbers_)) size];
}

jint GeogebraCommonEuclidianEuclidianController_selLists(GeogebraCommonEuclidianEuclidianController *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedLists_)) size];
}

jint GeogebraCommonEuclidianEuclidianController_selPolyLines(GeogebraCommonEuclidianEuclidianController *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedPolyLines_)) size];
}

jint GeogebraCommonEuclidianEuclidianController_selPolygons(GeogebraCommonEuclidianEuclidianController *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedPolygons_)) size];
}

jint GeogebraCommonEuclidianEuclidianController_selLines(GeogebraCommonEuclidianEuclidianController *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedLines_)) size];
}

jint GeogebraCommonEuclidianEuclidianController_selSegments(GeogebraCommonEuclidianEuclidianController *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedSegments_)) size];
}

jint GeogebraCommonEuclidianEuclidianController_selVectors(GeogebraCommonEuclidianEuclidianController *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedVectors_)) size];
}

jint GeogebraCommonEuclidianEuclidianController_selConics(GeogebraCommonEuclidianEuclidianController *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedConicsND_)) size];
}

jint GeogebraCommonEuclidianEuclidianController_selPaths(GeogebraCommonEuclidianEuclidianController *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedPaths_)) size];
}

jint GeogebraCommonEuclidianEuclidianController_selRegions(GeogebraCommonEuclidianEuclidianController *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedRegions_)) size];
}

jint GeogebraCommonEuclidianEuclidianController_selImplicitpoly(GeogebraCommonEuclidianEuclidianController *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedImplicitpoly_)) size];
}

jint GeogebraCommonEuclidianEuclidianController_selFunctions(GeogebraCommonEuclidianEuclidianController *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedFunctions_)) size];
}

jint GeogebraCommonEuclidianEuclidianController_selCurves(GeogebraCommonEuclidianEuclidianController *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedCurves_)) size];
}

jint GeogebraCommonEuclidianEuclidianController_addSelectedGeoWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedGeos_ withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOELEMENT()];
}

jint GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedPoints_ withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOPOINTND()];
}

jint GeogebraCommonEuclidianEuclidianController_addSelectedNumericWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedNumbers_ withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEONUMERIC()];
}

jint GeogebraCommonEuclidianEuclidianController_addSelectedLineWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedLines_ withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOLINEND()];
}

jint GeogebraCommonEuclidianEuclidianController_addSelectedSegmentWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedSegments_ withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOSEGMENTND()];
}

jint GeogebraCommonEuclidianEuclidianController_addSelectedVectorWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return GeogebraCommonEuclidianEuclidianController_addSelectedVectorWithGeogebraCommonEuclidianHits_withInt_withBoolean_withGeogebraCommonKernelGeosTestEnum_(self, hits, max, addMoreThanOneAllowed, GeogebraCommonKernelGeosTestEnum_get_GEOVECTORND());
}

jint GeogebraCommonEuclidianEuclidianController_addSelectedVectorWithGeogebraCommonEuclidianHits_withInt_withBoolean_withGeogebraCommonKernelGeosTestEnum_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed, GeogebraCommonKernelGeosTestEnum *geoClass) {
  return [self handleAddSelectedWithGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedVectors_ withGeogebraCommonKernelGeosTestEnum:geoClass];
}

jint GeogebraCommonEuclidianEuclidianController_addSelectedPathWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedPaths_ withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_PATH()];
}

jint GeogebraCommonEuclidianEuclidianController_addSelectedRegionWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedRegionsWithGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedRegions_];
}

jint GeogebraCommonEuclidianEuclidianController_addSelectedImplicitpolyWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedImplicitpoly_ withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOIMPLICITPOLY()];
}

jint GeogebraCommonEuclidianEuclidianController_addSelectedPolygonWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedPolygons_ withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOPOLYGON()];
}

jint GeogebraCommonEuclidianEuclidianController_addSelectedPolyLineWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedPolyLines_ withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOPOLYLINE()];
}

jint GeogebraCommonEuclidianEuclidianController_addSelectedListWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedLists_ withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOLIST()];
}

jint GeogebraCommonEuclidianEuclidianController_addSelectedConicWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedConicsND_ withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOCONICND()];
}

jint GeogebraCommonEuclidianEuclidianController_addSelectedFunctionWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedFunctions_ withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOFUNCTION()];
}

jint GeogebraCommonEuclidianEuclidianController_addSelectedCurveWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedCurves_ withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOCURVECARTESIAN()];
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_joinWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
  if (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 2) {
    return [self join];
  }
  return nil;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_segmentWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
  if (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 2) {
    return GeogebraCommonEuclidianEuclidianController_segment(self);
  }
  return nil;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_segment(GeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
  IOSObjectArray *ret = [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) segmentAlgoWithGeogebraCommonKernelConstruction:[((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction] withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1)])) getOutput];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(ret), 0))) setLabelWithNSString:nil];
  return ret;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_vectorWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
  if (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 2) {
    IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
    return [IOSObjectArray arrayWithObjects:(id[]){ [self vectorWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1)] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  }
  return nil;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_rayWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
  if (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 2) {
    return [self ray];
  }
  return nil;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_polygonWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  if (self->polygonMode_ == GeogebraCommonEuclidianEuclidianController_POLYGON_VECTOR) {
    GeogebraCommonEuclidianEuclidianController_addSelectedPolygonWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    if (GeogebraCommonEuclidianEuclidianController_selPolygons(self) == 1) {
      IOSObjectArray *poly = GeogebraCommonEuclidianEuclidianController_getSelectedPolygons(self);
      IOSObjectArray *points = (IOSObjectArray *) check_class_cast([((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(IOSObjectArray_Get(nil_chk(poly), 0))) getPoints], [IOSObjectArray class]);
      IOSObjectArray *pointsCopy = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(points))->size_ type:GeogebraCommonKernelGeosGeoPoint_class_()];
      for (jint i = 0; i < points->size_; i++) {
        IOSObjectArray_Set(pointsCopy, i, [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(points, i))) copy__]);
        [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(pointsCopy, i))) setLabelWithNSString:nil];
      }
      [self checkZooming];
      IOSObjectArray *ret = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) VectorPolygonWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoPointNDArray:pointsCopy];
      jdouble offset = [self->view_ toRealWorldCoordXWithDouble:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getWidth]] / 15;
      [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(((GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(IOSObjectArray_Get(nil_chk(ret), 0), [GeogebraCommonKernelGeosGeoPolygon class])))) getPoints]), 0))) setCoordsWithDouble:((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(pointsCopy, 0)))->inhomX_ + offset withDouble:((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(pointsCopy, 0)))->inhomY_ - offset withDouble:1.0];
      [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(((GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(IOSObjectArray_Get(ret, 0), [GeogebraCommonKernelGeosGeoPolygon class])))) getPoints]), 0))) updateRepaint];
      return ret;
    }
  }
  else if (self->polygonMode_ == GeogebraCommonEuclidianEuclidianController_POLYGON_RIGID) {
    GeogebraCommonEuclidianEuclidianController_addSelectedPolygonWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    if (GeogebraCommonEuclidianEuclidianController_selPolygons(self) == 1) {
      IOSObjectArray *poly = GeogebraCommonEuclidianEuclidianController_getSelectedPolygons(self);
      [self checkZooming];
      jdouble offset = [self->view_ toRealWorldCoordXWithDouble:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getWidth]] / 15;
      IOSObjectArray *ret = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) RigidPolygonWithGeogebraCommonKernelGeosGeoPolygon:IOSObjectArray_Get(nil_chk(poly), 0) withDouble:offset withDouble:-offset];
      return ret;
    }
  }
  if (GeogebraCommonEuclidianEuclidianController_selPoints(self) > 2) {
    jboolean finished = !self->selectionPreview_ && [hits containsWithId:[((JavaUtilArrayList *) nil_chk(self->selectedPoints_)) getWithInt:0]];
    if (finished) {
      [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) addingPolygon];
      IOSObjectArray *elms = [self polygon];
      [self->kernel_ notifyPolygonAdded];
      return elms;
    }
  }
  if (((self->polygonMode_ == GeogebraCommonEuclidianEuclidianController_POLYGON_RIGID) || (self->polygonMode_ == GeogebraCommonEuclidianEuclidianController_POLYGON_VECTOR)) && (GeogebraCommonEuclidianEuclidianController_selPoints(self) > 0)) {
    GeogebraCommonKernelGeosGeoElement *geo = [self chooseGeoWithJavaUtilArrayList:hits withBoolean:NO];
    if ((geo == nil) || ![geo isGeoPoint] || ![geo isIndependent] || [geo hasChildren]) {
      return nil;
    }
  }
  GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, GeogebraCommonKernelGeosGeoPolygon_POLYGON_MAX_POINTS, NO);
  return nil;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_polylineWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  if (GeogebraCommonEuclidianEuclidianController_selPoints(self) > 2) {
    jboolean finished = !self->selectionPreview_ && [hits containsWithId:[((JavaUtilArrayList *) nil_chk(self->selectedPoints_)) getWithInt:0]];
    if (finished) {
      [self checkZooming];
      return [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) PolyLineWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoPointNDArray:GeogebraCommonEuclidianEuclidianController_getSelectedPoints(self) withBoolean:NO];
    }
  }
  GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, GeogebraCommonKernelGeosGeoPolyLine_POLYLINE_MAX_POINTS, NO);
  return nil;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_parallelWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jboolean hitPoint = (GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO) != 0);
  if (!hitPoint) {
    if (GeogebraCommonEuclidianEuclidianController_selLines(self) == 0) {
      GeogebraCommonEuclidianEuclidianController_addSelectedVectorWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    }
    if (GeogebraCommonEuclidianEuclidianController_selVectors(self) == 0) {
      GeogebraCommonEuclidianEuclidianController_addSelectedLineWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    }
  }
  if (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 1) {
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    if (GeogebraCommonEuclidianEuclidianController_selVectors(self) == 1) {
      IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
      IOSObjectArray *vectors = GeogebraCommonEuclidianEuclidianController_getSelectedVectorsND(self);
      [self checkZooming];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(points), 0), [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(vectors), 0), [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) {
        IOSObjectArray_Set(ret, 0, (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) Line3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 0) withGeogebraCommonKernelKernelNDGeoVectorND:IOSObjectArray_Get(nil_chk(vectors), 0)], [GeogebraCommonKernelGeosGeoElement class]));
      }
      else {
        IOSObjectArray_Set(ret, 0, [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) LineWithNSString:nil withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, 0), [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoVector:(GeogebraCommonKernelGeosGeoVector *) check_class_cast(IOSObjectArray_Get(vectors, 0), [GeogebraCommonKernelGeosGeoVector class])]);
      }
      return ret;
    }
    else if (GeogebraCommonEuclidianEuclidianController_selLines(self) == 1) {
      IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
      IOSObjectArray *lines = GeogebraCommonEuclidianEuclidianController_getSelectedLinesND(self);
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(points), 0), [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(lines), 0), [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) {
        IOSObjectArray_Set(ret, 0, (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) Line3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 0) withGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(lines), 0)], [GeogebraCommonKernelGeosGeoElement class]));
      }
      else {
        IOSObjectArray_Set(ret, 0, [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) LineWithNSString:nil withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, 0), [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(lines, 0), [GeogebraCommonKernelGeosGeoLine class])]);
      }
      return ret;
    }
  }
  return nil;
}

void GeogebraCommonEuclidianEuclidianController_checkCoordCartesianWithGeogebraCommonKernelKernelNDGeoPointND_(id<GeogebraCommonKernelKernelNDGeoPointND> point) {
  GeogebraCommonEuclidianEuclidianController_initialize();
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getMode] != GeogebraCommonKernelKernel_COORD_CARTESIAN) {
    [point setCartesian];
    [point updateRepaint];
  }
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_parabolaWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jboolean hitPoint = (GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO) != 0);
  if (!hitPoint) {
    GeogebraCommonEuclidianEuclidianController_addSelectedLineWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 1) {
    if (GeogebraCommonEuclidianEuclidianController_selLines(self) == 1) {
      IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
      IOSObjectArray *lines = GeogebraCommonEuclidianEuclidianController_getSelectedLinesND(self);
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      [self checkZooming];
      IOSObjectArray_Set(ret, 0, [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) parabolaWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(lines), 0)]);
      return ret;
    }
  }
  return nil;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_midpointWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jboolean hitPoint = (GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO) != 0);
  if (!hitPoint && (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 0)) {
    GeogebraCommonEuclidianEuclidianController_addSelectedSegmentWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    if (GeogebraCommonEuclidianEuclidianController_selSegments(self) == 0) {
      GeogebraCommonEuclidianEuclidianController_addSelectedConicWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    }
  }
  IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  if (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 2) {
    IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
    [self checkZooming];
    IOSObjectArray_Set(ret, 0, [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) midpointWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1)]);
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ret, 0))) setLabelWithNSString:nil];
    return ret;
  }
  else if (GeogebraCommonEuclidianEuclidianController_selSegments(self) == 1) {
    IOSObjectArray *segments = GeogebraCommonEuclidianEuclidianController_getSelectedSegmentsND(self);
    [self checkZooming];
    IOSObjectArray_Set(ret, 0, [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) midpointWithGeogebraCommonKernelKernelNDGeoSegmentND:IOSObjectArray_Get(nil_chk(segments), 0)]);
    return ret;
  }
  else if (GeogebraCommonEuclidianEuclidianController_selConics(self) == 1) {
    IOSObjectArray *conics = GeogebraCommonEuclidianEuclidianController_getSelectedConicsND(self);
    [self checkZooming];
    IOSObjectArray_Set(ret, 0, [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) midpointWithGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(nil_chk(conics), 0)]);
    return ret;
  }
  return nil;
}

jboolean GeogebraCommonEuclidianEuclidianController_functionInspectorWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return NO;
  }
  if (GeogebraCommonEuclidianEuclidianController_selFunctions(self) == 0) GeogebraCommonEuclidianEuclidianController_addSelectedFunctionWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  if (GeogebraCommonEuclidianEuclidianController_selFunctions(self) == 1) {
    IOSObjectArray *functions = GeogebraCommonEuclidianEuclidianController_getSelectedFunctions(self);
    [((GeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showFunctionInspectorWithGeogebraCommonKernelGeosGeoFunction:IOSObjectArray_Get(nil_chk(functions), 0)];
    [((GeogebraCommonMainApp *) nil_chk(self->app_)) setMoveMode];
  }
  return NO;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_lineBisectorWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jboolean hitPoint = NO;
  if (GeogebraCommonEuclidianEuclidianController_selSegments(self) == 0) {
    hitPoint = (GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO) != 0);
  }
  if (!hitPoint && (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 0)) {
    GeogebraCommonEuclidianEuclidianController_addSelectedSegmentWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  if (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 2) {
    IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
    [self checkZooming];
    [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) lineBisectorWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1)];
    return ret;
  }
  else if (GeogebraCommonEuclidianEuclidianController_selSegments(self) == 1) {
    IOSObjectArray *segments = GeogebraCommonEuclidianEuclidianController_getSelectedSegmentsND(self);
    [self checkZooming];
    [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) lineBisectorWithGeogebraCommonKernelKernelNDGeoSegmentND:IOSObjectArray_Get(nil_chk(segments), 0)];
    return ret;
  }
  return nil;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_angularBisectorWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jboolean hitPoint = NO;
  if (GeogebraCommonEuclidianEuclidianController_selLines(self) == 0) {
    hitPoint = (GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 3, NO) != 0);
  }
  if (!hitPoint && (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 0)) {
    GeogebraCommonEuclidianEuclidianController_addSelectedLineWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
  }
  if (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 3) {
    IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    [self checkZooming];
    IOSObjectArray_Set(ret, 0, [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) angularBisectorWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 2)]);
    return ret;
  }
  else if (GeogebraCommonEuclidianEuclidianController_selLines(self) == 2) {
    IOSObjectArray *lines = GeogebraCommonEuclidianEuclidianController_getSelectedLinesND(self);
    [self checkZooming];
    return [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) angularBisectorWithGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(lines), 0) withGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(lines, 1)];
  }
  return nil;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_threePointsWithGeogebraCommonEuclidianHits_withInt_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint threePointsMode) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 3, NO);
  if (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 3) {
    return [self switchModeForThreePointsWithInt:threePointsMode];
  }
  return nil;
}

jboolean GeogebraCommonEuclidianEuclidianController_relationWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return NO;
  }
  GeogebraCommonEuclidianEuclidianController_addSelectedGeoWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
  if (GeogebraCommonEuclidianEuclidianController_selGeos(self) == 2) {
    IOSObjectArray *geos = GeogebraCommonEuclidianEuclidianController_getSelectedGeos(self);
    [((GeogebraCommonMainApp *) nil_chk(self->app_)) showRelationWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(nil_chk(geos), 0) withGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(geos, 1)];
    return YES;
  }
  return NO;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_locusWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
  GeogebraCommonEuclidianEuclidianController_addSelectedNumericWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  if (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 2) {
    IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
    GeogebraCommonKernelGeosGeoElement *locus;
    [self checkZooming];
    if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk(points), 0))) getPath] == nil) {
      locus = [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) locusWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1)];
    }
    else {
      locus = [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) locusWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 0)];
    }
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    IOSObjectArray_Set(ret, 0, locus);
    return ret;
  }
  else if ((GeogebraCommonEuclidianEuclidianController_selPoints(self) == 1) && (GeogebraCommonEuclidianEuclidianController_selNumbers(self) == 1)) {
    IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPoints(self);
    IOSObjectArray *numbers = GeogebraCommonEuclidianEuclidianController_getSelectedNumbers(self);
    [self checkZooming];
    GeogebraCommonKernelGeosGeoLocus *locus = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) LocusWithNSString:nil withGeogebraCommonKernelGeosGeoPoint:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelGeosGeoNumeric:IOSObjectArray_Get(nil_chk(numbers), 0)];
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ locus } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  return nil;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_conic5WithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 5, NO);
  if (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 5) {
    IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    [self checkZooming];
    IOSObjectArray_Set(ret, 0, [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) conic5WithGeogebraCommonKernelKernelNDGeoPointNDArray:points]);
    return ret;
  }
  return nil;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_tangentsWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jboolean found = NO;
  found = (GeogebraCommonEuclidianEuclidianController_addSelectedConicWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO) != 0);
  if (!found) {
    found = (GeogebraCommonEuclidianEuclidianController_addSelectedFunctionWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO) != 0);
  }
  if (!found) {
    found = (GeogebraCommonEuclidianEuclidianController_addSelectedCurveWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO) != 0);
  }
  if (!found) {
    found = (GeogebraCommonEuclidianEuclidianController_addSelectedImplicitpolyWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO) != 0);
  }
  if (!found) {
    found = (GeogebraCommonEuclidianEuclidianController_addSelectedListWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO) != 0);
  }
  if (!found) {
    if (GeogebraCommonEuclidianEuclidianController_selLines(self) == 0) {
      GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    }
    if (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 0) {
      GeogebraCommonEuclidianEuclidianController_addSelectedLineWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    }
  }
  if (GeogebraCommonEuclidianEuclidianController_selConics(self) == 1) {
    if (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 1) {
      IOSObjectArray *conics = GeogebraCommonEuclidianEuclidianController_getSelectedConicsND(self);
      IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
      [self checkZooming];
      return [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) tangentWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(nil_chk(conics), 0)];
    }
    else if (GeogebraCommonEuclidianEuclidianController_selLines(self) == 1) {
      IOSObjectArray *conics = GeogebraCommonEuclidianEuclidianController_getSelectedConicsND(self);
      IOSObjectArray *lines = GeogebraCommonEuclidianEuclidianController_getSelectedLinesND(self);
      [self checkZooming];
      return [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) tangentWithGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(lines), 0) withGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(nil_chk(conics), 0)];
    }
  }
  else if (GeogebraCommonEuclidianEuclidianController_selConics(self) == 2) {
    IOSObjectArray *conics = GeogebraCommonEuclidianEuclidianController_getSelectedConicsND(self);
    [self checkZooming];
    return [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) tangentWithGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(nil_chk(conics), 0) withGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(conics, 1)];
  }
  else if (GeogebraCommonEuclidianEuclidianController_selFunctions(self) == 1) {
    if (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 1) {
      IOSObjectArray *functions = GeogebraCommonEuclidianEuclidianController_getSelectedFunctions(self);
      IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      [self checkZooming];
      IOSObjectArray_Set(ret, 0, [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) TangentWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelGeosGeoFunction:IOSObjectArray_Get(nil_chk(functions), 0)]);
      return ret;
    }
  }
  else if (GeogebraCommonEuclidianEuclidianController_selCurves(self) == 1) {
    if (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 1) {
      IOSObjectArray *curves = GeogebraCommonEuclidianEuclidianController_getSelectedCurves(self);
      IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      [self checkZooming];
      IOSObjectArray_Set(ret, 0, [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) TangentWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelGeosGeoCurveCartesian:IOSObjectArray_Get(nil_chk(curves), 0)]);
      return ret;
    }
  }
  else if (GeogebraCommonEuclidianEuclidianController_selImplicitpoly(self) == 1) {
    if (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 1) {
      GeogebraCommonKernelImplicitGeoImplicitPoly *implicitPoly = IOSObjectArray_Get(nil_chk(GeogebraCommonEuclidianEuclidianController_getSelectedImplicitpoly(self)), 0);
      IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
      [self checkZooming];
      return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) TangentWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelImplicitGeoImplicitPoly:implicitPoly];
    }
  }
  return nil;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_polarLineWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jboolean hitConic = NO;
  hitConic = (GeogebraCommonEuclidianEuclidianController_addSelectedConicWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO) != 0);
  if (!hitConic) {
    if (GeogebraCommonEuclidianEuclidianController_selVectors(self) == 0) {
      GeogebraCommonEuclidianEuclidianController_addSelectedVectorWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    }
    if (GeogebraCommonEuclidianEuclidianController_selLines(self) == 0) {
      GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    }
    if (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 0) {
      GeogebraCommonEuclidianEuclidianController_addSelectedLineWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    }
  }
  if (GeogebraCommonEuclidianEuclidianController_selConics(self) == 1) {
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    if (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 1) {
      IOSObjectArray *conics = GeogebraCommonEuclidianEuclidianController_getSelectedConicsND(self);
      IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
      [self checkZooming];
      IOSObjectArray_Set(ret, 0, [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) polarLineWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(nil_chk(conics), 0)]);
      return ret;
    }
    else if (GeogebraCommonEuclidianEuclidianController_selLines(self) == 1) {
      IOSObjectArray *conics = GeogebraCommonEuclidianEuclidianController_getSelectedConicsND(self);
      IOSObjectArray *lines = GeogebraCommonEuclidianEuclidianController_getSelectedLinesND(self);
      [self checkZooming];
      IOSObjectArray_Set(ret, 0, [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) diameterLineWithGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(lines), 0) withGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(nil_chk(conics), 0)]);
      return ret;
    }
    else if (GeogebraCommonEuclidianEuclidianController_selVectors(self) == 1) {
      IOSObjectArray *conics = GeogebraCommonEuclidianEuclidianController_getSelectedConicsND(self);
      IOSObjectArray *vecs = GeogebraCommonEuclidianEuclidianController_getSelectedVectorsND(self);
      [self checkZooming];
      IOSObjectArray_Set(ret, 0, [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) diameterLineWithGeogebraCommonKernelKernelNDGeoVectorND:IOSObjectArray_Get(nil_chk(vecs), 0) withGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(nil_chk(conics), 0)]);
      return ret;
    }
  }
  return nil;
}

jboolean GeogebraCommonEuclidianEuclidianController_showHideLabelWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return NO;
  }
  if (self->selectionPreview_) {
    GeogebraCommonEuclidianEuclidianController_addSelectedGeoWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1000, NO);
    return NO;
  }
  GeogebraCommonKernelGeosGeoElement *geo = [self chooseGeoWithJavaUtilArrayList:[hits getOtherHitsWithGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOAXIS() withGeogebraCommonEuclidianHits:self->tempArrayList_] withBoolean:YES];
  if (geo != nil) {
    [geo setLabelVisibleWithBoolean:![geo isLabelVisible]];
    [geo updateRepaint];
    return YES;
  }
  return NO;
}

jboolean GeogebraCommonEuclidianEuclidianController_copyVisualStyleWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return NO;
  }
  if (self->selectionPreview_) {
    GeogebraCommonEuclidianEuclidianController_addSelectedGeoWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1000, NO);
    return NO;
  }
  GeogebraCommonKernelGeosGeoElement *geo = [self chooseGeoWithJavaUtilArrayList:[hits getOtherHitsWithGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOAXIS() withGeogebraCommonEuclidianHits:self->tempArrayList_] withBoolean:YES];
  if (geo == nil) {
    return NO;
  }
  if ([((GeogebraCommonMainApp *) nil_chk(self->app_)) getGeoForCopyStyle] == nil) {
    [self->app_ setGeoForCopyStyleWithGeogebraCommonKernelGeosGeoElement:geo];
    GeogebraCommonEuclidianHits *oldhits = [new_GeogebraCommonEuclidianHits_init() autorelease];
    [oldhits addAllWithJavaUtilCollection:[self getAppSelectedGeos]];
    for (jint i = [oldhits size] - 1; i >= 0; i--) {
      GeogebraCommonKernelGeosGeoElement *oldgeo = [oldhits getWithInt:i];
      if (!([((GeogebraCommonKernelGeosTestEnum *) nil_chk(GeogebraCommonKernelGeosTestEnum_getSpecificTestWithId_([self->app_ getGeoForCopyStyle]))) checkWithId:oldgeo])) {
        [oldhits removeWithInt:i];
      }
    }
    if ([oldhits size] > 0) {
      for (jint i = 0; i < [oldhits size]; i++) {
        GeogebraCommonKernelGeosGeoElement *oldgeo = [oldhits getWithInt:i];
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(oldgeo)) setAdvancedVisualStyleWithGeogebraCommonKernelGeosGeoElement:[self->app_ getGeoForCopyStyle]];
        [oldgeo updateRepaint];
      }
      [self clearSelections];
      return YES;
    }
    [((GeogebraCommonMainSelectionManager *) nil_chk(self->selection_)) addSelectedGeoWithGeogebraCommonKernelGeosGeoElement:geo];
  }
  else {
    if (geo == [self->app_ getGeoForCopyStyle]) {
      [((GeogebraCommonMainSelectionManager *) nil_chk(self->selection_)) removeSelectedGeoWithGeogebraCommonKernelGeosGeoElement:geo];
      [self->app_ setGeoForCopyStyleWithGeogebraCommonKernelGeosGeoElement:nil];
      if (self->toggleModeChangedKernel_) {
        [self->app_ storeUndoInfo];
      }
      self->toggleModeChangedKernel_ = NO;
    }
    else {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setAdvancedVisualStyleWithGeogebraCommonKernelGeosGeoElement:[self->app_ getGeoForCopyStyle]];
      [geo updateRepaint];
      return YES;
    }
  }
  return NO;
}

jboolean GeogebraCommonEuclidianEuclidianController_moveRotateWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  GeogebraCommonEuclidianEuclidianController_addSelectedGeoWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getPointRotateableHitsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:self->view_ withGeogebraCommonKernelKernelNDGeoPointND:self->rotationCenter_], 1, NO);
  return NO;
}

jboolean GeogebraCommonEuclidianEuclidianController_pointWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  GeogebraCommonEuclidianEuclidianController_addSelectedGeoWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getHitsWithGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_PATH() withGeogebraCommonEuclidianHits:self->tempArrayList_], 1, NO);
  return NO;
}

jboolean GeogebraCommonEuclidianEuclidianController_geoElementSelectedWithGeogebraCommonEuclidianHits_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jboolean addToSelection) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return NO;
  }
  GeogebraCommonEuclidianEuclidianController_addSelectedGeoWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  if (GeogebraCommonEuclidianEuclidianController_selGeos(self) == 1) {
    IOSObjectArray *geos = GeogebraCommonEuclidianEuclidianController_getSelectedGeos(self);
    [((GeogebraCommonMainApp *) nil_chk(self->app_)) geoElementSelectedWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(nil_chk(geos), 0) withBoolean:addToSelection];
  }
  return NO;
}

jboolean GeogebraCommonEuclidianEuclidianController_segmentFixedWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return NO;
  }
  GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  if (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 1) {
    [((GeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showNumberInputDialogSegmentFixedWithNSString:[((GeogebraCommonMainLocalization *) nil_chk(self->l10n_)) getMenuWithNSString:[((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getModeTextWithInt:self->mode_]] withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self)), 0)];
    return YES;
  }
  return NO;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_angleFixedWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jint count = GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
  if (count == 0) {
    GeogebraCommonEuclidianEuclidianController_addSelectedSegmentWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if ((GeogebraCommonEuclidianEuclidianController_selPoints(self) == 2) || (GeogebraCommonEuclidianEuclidianController_selSegments(self) == 1)) {
    IOSObjectArray *selGeos = GeogebraCommonEuclidianEuclidianController_getSelectedGeos(self);
    [((GeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showNumberInputDialogAngleFixedWithNSString:[((GeogebraCommonMainLocalization *) nil_chk(self->l10n_)) getMenuWithNSString:[((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getModeTextWithInt:self->mode_]] withGeogebraCommonKernelKernelNDGeoSegmentNDArray:GeogebraCommonEuclidianEuclidianController_getSelectedSegmentsND(self) withGeogebraCommonKernelKernelNDGeoPointNDArray:GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self) withGeogebraCommonKernelGeosGeoElementArray:selGeos withGeogebraCommonEuclidianEuclidianController:self];
    return nil;
  }
  return nil;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_circleOrSphere2WithGeogebraCommonEuclidianHits_withInt_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jint sphereMode) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
  if (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 2) {
    return [self switchModeForCircleOrSphere2WithInt:sphereMode];
  }
  return nil;
}

jboolean GeogebraCommonEuclidianEuclidianController_showHideObjectWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return NO;
  }
  if (self->selectionPreview_) {
    GeogebraCommonEuclidianEuclidianController_addSelectedGeoWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1000, NO);
    return NO;
  }
  GeogebraCommonKernelGeosGeoElement *geo = [self chooseGeoWithJavaUtilArrayList:hits withBoolean:YES];
  if (geo != nil) {
    if ([geo isKindOfClass:[GeogebraCommonKernelGeosGeoAxis class]]) {
      switch ([((GeogebraCommonKernelGeosGeoAxis *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoAxis class])) getType]) {
        case GeogebraCommonKernelKernelNDGeoAxisND_X_AXIS:
        [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) setShowAxisWithInt:GeogebraCommonEuclidianEuclidianViewInterfaceCommon_AXIS_X withBoolean:NO withBoolean:YES];
        break;
        case GeogebraCommonKernelKernelNDGeoAxisND_Y_AXIS:
        [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) setShowAxisWithInt:GeogebraCommonEuclidianEuclidianViewInterfaceCommon_AXIS_Y withBoolean:NO withBoolean:YES];
        break;
      }
      [((GeogebraCommonMainApp *) nil_chk(self->app_)) updateMenubar];
    }
    else {
      [((GeogebraCommonMainSelectionManager *) nil_chk(self->selection_)) toggleSelectedGeoWithGeogebraCommonKernelGeosGeoElement:geo];
    }
    return YES;
  }
  return NO;
}

jboolean GeogebraCommonEuclidianEuclidianController_textWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  id<GeogebraCommonKernelKernelNDGeoPointND> loc = nil;
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    if (self->selectionPreview_) {
      return NO;
    }
    [self checkZooming];
    loc = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction]) autorelease];
    [loc setCoordsWithDouble:self->xRW_ withDouble:self->yRW_ withDouble:1.0];
  }
  else {
    GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    if (GeogebraCommonEuclidianEuclidianController_selPoints(self) >= 1) {
      IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
      loc = IOSObjectArray_Get(nil_chk(points), 0);
    }
    else if (!self->selectionPreview_) {
      [self checkZooming];
      loc = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction]) autorelease];
      [loc setCoordsWithDouble:self->xRW_ withDouble:self->yRW_ withDouble:1.0];
    }
  }
  if (loc != nil) {
    [((GeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showTextCreationDialogWithGeogebraCommonKernelKernelNDGeoPointND:loc];
    return YES;
  }
  return NO;
}

jboolean GeogebraCommonEuclidianEuclidianController_slider(GeogebraCommonEuclidianEuclidianController *self) {
  if (!self->selectionPreview_ && (self->mouseLoc_ != nil)) {
    [((GeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showSliderCreationDialogWithInt:self->mouseLoc_->x_ withInt:self->mouseLoc_->y_];
  }
  return NO;
}

jboolean GeogebraCommonEuclidianEuclidianController_imageWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  GeogebraCommonKernelGeosGeoPoint *loc = nil;
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    if (self->selectionPreview_) {
      return NO;
    }
    [self checkZooming];
    loc = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction]) autorelease];
    [loc setCoordsWithDouble:self->xRW_ withDouble:self->yRW_ withDouble:1.0];
  }
  else {
    GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    if (GeogebraCommonEuclidianEuclidianController_selPoints(self) >= 1) {
      IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPoints(self);
      loc = IOSObjectArray_Get(nil_chk(points), 0);
    }
    else if (!self->selectionPreview_) {
      [self checkZooming];
      loc = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction]) autorelease];
      [loc setCoordsWithDouble:self->xRW_ withDouble:self->yRW_ withDouble:1.0];
    }
  }
  if (loc != nil) {
    if ([((GeogebraCommonMainApp *) nil_chk(self->app_)) getGuiManager] != nil) {
      [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([self->app_ getGuiManager])) loadImageWithGeogebraCommonKernelGeosGeoPoint:loc withId:nil withBoolean:self->altDown_];
    }
    return YES;
  }
  return NO;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_mirrorAtPointWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jint count = 0;
  if (GeogebraCommonEuclidianEuclidianController_selGeos(self) == 0) {
    GeogebraCommonEuclidianHits *mirAbles = [hits getHitsWithGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_TRANSFORMABLE() withGeogebraCommonEuclidianHits:self->tempArrayList_];
    count = GeogebraCommonEuclidianEuclidianController_addSelectedGeoWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, mirAbles, 1, NO);
  }
  if (count == 0) {
    count = GeogebraCommonEuclidianEuclidianController_addSelectedPolygonWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if (count == 0) {
    count = GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 1) {
    if (GeogebraCommonEuclidianEuclidianController_selPolygons(self) == 1) {
      IOSObjectArray *polys = GeogebraCommonEuclidianEuclidianController_getSelectedPolygons(self);
      IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
      [self checkZooming];
      return [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) mirrorAtPointWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(nil_chk(polys), 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0)];
    }
    else if (GeogebraCommonEuclidianEuclidianController_selGeos(self) > 0) {
      IOSObjectArray *geos = GeogebraCommonEuclidianEuclidianController_getSelectedGeos(self);
      id<GeogebraCommonKernelKernelNDGeoPointND> point = IOSObjectArray_Get(nil_chk(GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self)), 0);
      JavaUtilArrayList *ret = [new_JavaUtilArrayList_init() autorelease];
      [self checkZooming];
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(geos))->size_; i++) {
        if (IOSObjectArray_Get(geos, i) != point) {
          if ([GeogebraCommonKernelGeosTransformable_class_() isInstance:IOSObjectArray_Get(geos, i)]) {
            [ret addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) mirrorAtPointWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(geos, i) withGeogebraCommonKernelKernelNDGeoPointND:point])];
          }
          else if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, i))) isGeoPolygon]) {
            [ret addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) mirrorAtPointWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(geos, i) withGeogebraCommonKernelKernelNDGeoPointND:point])];
          }
        }
      }
      IOSObjectArray *retex = [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return [ret toArrayWithNSObjectArray:retex];
    }
  }
  return nil;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_mirrorAtLineWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jint max = GeogebraCommonEuclidianEuclidianController_selLines(self) == 0 ? 1 : 2;
  GeogebraCommonEuclidianHits *mirAbles = [hits getHitsWithGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_TRANSFORMABLE() withGeogebraCommonEuclidianHits:self->tempArrayList_];
  jint count = GeogebraCommonEuclidianEuclidianController_addSelectedGeoWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, mirAbles, max, NO);
  if (count == 1 && GeogebraCommonEuclidianEuclidianController_selGeos(self) >= 1) {
    GeogebraCommonKernelGeosGeoElement *geo = [self->selectedGeos_ getWithInt:[((JavaUtilArrayList *) nil_chk(self->selectedGeos_)) size] - 1];
    if ([GeogebraCommonKernelKernelNDGeoLineND_class_() isInstance:geo]) {
      [((JavaUtilArrayList *) nil_chk(self->selectedLines_)) clear];
      [self->selectedLines_ addWithId:(id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoLineND))];
    }
  }
  if (count <= 0) {
    count = GeogebraCommonEuclidianEuclidianController_addSelectedPolygonWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, NO);
  }
  if (count <= 0) {
    GeogebraCommonEuclidianEuclidianController_addSelectedLineWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, NO);
  }
  if (GeogebraCommonEuclidianEuclidianController_selLines(self) >= 1) {
    if (GeogebraCommonEuclidianEuclidianController_selPolygons(self) == 1) {
      IOSObjectArray *polys = GeogebraCommonEuclidianEuclidianController_getSelectedPolygons(self);
      IOSObjectArray *lines = GeogebraCommonEuclidianEuclidianController_getSelectedLines(self);
      [self checkZooming];
      return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) MirrorWithNSString:nil withGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(nil_chk(polys), 0) withGeogebraCommonKernelGeosGeoLine:IOSObjectArray_Get(nil_chk(lines), 0)];
    }
    else if (GeogebraCommonEuclidianEuclidianController_selGeos(self) > 1) {
      IOSObjectArray *geos = GeogebraCommonEuclidianEuclidianController_getSelectedGeos(self);
      id<GeogebraCommonKernelKernelNDGeoLineND> line = IOSObjectArray_Get(nil_chk(GeogebraCommonEuclidianEuclidianController_getSelectedLinesND(self)), 0);
      JavaUtilArrayList *ret = [new_JavaUtilArrayList_init() autorelease];
      [self checkZooming];
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(geos))->size_; i++) {
        if (IOSObjectArray_Get(geos, i) != line) {
          if ([GeogebraCommonKernelGeosTransformable_class_() isInstance:IOSObjectArray_Get(geos, i)]) {
            [ret addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) mirrorAtLineWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(geos, i) withGeogebraCommonKernelKernelNDGeoLineND:line])];
          }
          else if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, i))) isGeoPolygon]) {
            [ret addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) mirrorAtLineWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(geos, i) withGeogebraCommonKernelKernelNDGeoLineND:line])];
          }
        }
      }
      IOSObjectArray *retex = [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return [ret toArrayWithNSObjectArray:retex];
    }
  }
  return nil;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_mirrorAtCircleWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jint count = 0;
  if (GeogebraCommonEuclidianEuclidianController_selGeos(self) == 0) {
    GeogebraCommonEuclidianHits *mirAbles = [hits getHitsWithGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_TRANSFORMABLE() withGeogebraCommonEuclidianHits:self->tempArrayList_];
    [((GeogebraCommonEuclidianHits *) nil_chk(mirAbles)) removeImages];
    count = GeogebraCommonEuclidianEuclidianController_addSelectedGeoWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, mirAbles, 1, NO);
  }
  if (count == 0) {
    count = GeogebraCommonEuclidianEuclidianController_addSelectedPolygonWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if (count == 0) {
    GeogebraCommonEuclidianEuclidianController_addSelectedConicWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if (GeogebraCommonEuclidianEuclidianController_selConics(self) == 1) {
    if (GeogebraCommonEuclidianEuclidianController_selPolygons(self) == 1) {
      IOSObjectArray *polys = GeogebraCommonEuclidianEuclidianController_getSelectedPolygons(self);
      IOSObjectArray *lines = GeogebraCommonEuclidianEuclidianController_getSelectedCircles(self);
      [self checkZooming];
      return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) MirrorWithNSString:nil withGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(nil_chk(polys), 0) withGeogebraCommonKernelGeosGeoConic:IOSObjectArray_Get(nil_chk(lines), 0)];
    }
    else if (GeogebraCommonEuclidianEuclidianController_selGeos(self) > 0) {
      IOSObjectArray *geos = GeogebraCommonEuclidianEuclidianController_getSelectedGeos(self);
      GeogebraCommonKernelGeosGeoConic *line = IOSObjectArray_Get(nil_chk(GeogebraCommonEuclidianEuclidianController_getSelectedCircles(self)), 0);
      JavaUtilArrayList *ret = [new_JavaUtilArrayList_init() autorelease];
      [self checkZooming];
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(geos))->size_; i++) {
        if (IOSObjectArray_Get(geos, i) != line) {
          if ([GeogebraCommonKernelGeosTransformable_class_() isInstance:IOSObjectArray_Get(geos, i)]) {
            [ret addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) MirrorWithNSString:nil withGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(geos, i) withGeogebraCommonKernelGeosGeoConic:line])];
          }
          else if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, i))) isGeoPolygon]) {
            [ret addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) MirrorWithNSString:nil withGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(geos, i) withGeogebraCommonKernelGeosGeoConic:line])];
          }
        }
      }
      IOSObjectArray *retex = [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return [ret toArrayWithNSObjectArray:retex];
    }
  }
  return nil;
}

jboolean GeogebraCommonEuclidianEuclidianController_clearHighlightedGeos(GeogebraCommonEuclidianEuclidianController *self) {
  jboolean repaintNeeded = NO;
  if ([((GeogebraCommonEuclidianHits *) nil_chk(self->highlightedGeos_)) size] > 0) {
    GeogebraCommonEuclidianEuclidianController_setHighlightedGeosWithBoolean_(self, NO);
    repaintNeeded = YES;
  }
  [self->highlightedGeos_ clear];
  return repaintNeeded;
}

jboolean GeogebraCommonEuclidianEuclidianController_attachDetachWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if (self->detachFrom_ != nil || self->needsAttach_) {
    [((GeogebraCommonEuclidianHits *) nil_chk(hits)) removeWithId:self->movedGeoPoint_];
    if ([hits containsGeoPoint] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->movedGeoPoint_, [GeogebraCommonKernelGeosGeoElement class])))) hasChildren]) {
      @try {
        [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction])) replaceWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->movedGeoPoint_, [GeogebraCommonKernelGeosGeoElement class]) withGeogebraCommonKernelGeosGeoElement:[hits getFirstHitWithGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOPOINTND()]];
      }
      @catch (JavaLangException *e) {
        [((JavaLangException *) nil_chk(e)) printStackTrace];
      }
    }
    else {
      NSString *attachTo = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->movedGeoPoint_)) isPointOnPath] ? [((id<GeogebraCommonKernelPath>) nil_chk([self->movedGeoPoint_ getPath])) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()] : @"";
      if (self->movedGeoPoint_ != nil && self->detachFrom_ != nil && ![hits containsWithId:self->detachFrom_]) {
        NSString *name = [self->movedGeoPoint_ getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
        [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getKernel])) getAlgoDispatcher])) detachWithGeogebraCommonKernelKernelNDGeoPointND:self->movedGeoPoint_ withDouble:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toRealWorldCoordXWithDouble:((GeogebraCommonAwtGPoint *) nil_chk(self->mouseLoc_))->x_] withDouble:[self->view_ toRealWorldCoordYWithDouble:self->mouseLoc_->y_] withBoolean:self->detachFromPath_ withBoolean:self->detachFromRegion_];
        GeogebraCommonEuclidianEuclidianController_set_movedGeoPoint_(self, (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction])) geoTableVarLookupWithNSString:name], @protocol(GeogebraCommonKernelKernelNDGeoPointND)));
      }
      if (self->movedGeoPoint_ != nil && self->needsAttach_) {
        if (![attachTo isEqual:@""]) {
          id<GeogebraCommonKernelPath> path = (id<GeogebraCommonKernelPath>) check_protocol_cast([((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction])) geoTableVarLookupWithNSString:attachTo], @protocol(GeogebraCommonKernelPath));
          [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self->kernel_ getAlgoDispatcher])) attachWithGeogebraCommonKernelKernelNDGeoPointND:self->movedGeoPoint_ withGeogebraCommonKernelPath:path withGeogebraCommonEuclidianEuclidianViewInterfaceCommon:self->view_ withGeogebraCommonKernelMatrixCoords:[self getMouseLocRW]];
        }
      }
    }
    self->needsAttach_ = NO;
    GeogebraCommonEuclidianEuclidianController_set_detachFrom_(self, nil);
    if (GeogebraCommonEuclidianEuclidianController_selGeos(self) > 0) {
      [self clearSelections];
    }
    return YES;
  }
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return NO;
  }
  GeogebraCommonEuclidianEuclidianController_addSelectedRegionWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  GeogebraCommonEuclidianEuclidianController_addSelectedPathWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  if ([((JavaUtilArrayList *) nil_chk(self->selectedPoints_)) size] == 1) {
    id<GeogebraCommonKernelKernelNDGeoPointND> p = [self->selectedPoints_ getWithInt:0];
    if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p)) isPointOnPath] || [p isPointInRegion]) {
      GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
      GeogebraCommonEuclidianEuclidianController_getSelectedRegions(self);
      GeogebraCommonEuclidianEuclidianController_getSelectedPaths(self);
      [self checkZooming];
      id<GeogebraCommonKernelKernelNDGeoPointND> ret = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) detachWithGeogebraCommonKernelKernelNDGeoPointND:p withGeogebraCommonEuclidianEuclidianViewInterfaceCommon:self->view_];
      if (ret != nil) {
        [self clearSelections];
        [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) updateCursorWithGeogebraCommonKernelKernelNDGeoPointND:ret];
        return YES;
      }
      return NO;
    }
  }
  if (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 1) {
    if ((GeogebraCommonEuclidianEuclidianController_selPaths(self) == 1) && ![self isAltDown]) {
      IOSObjectArray *paths = GeogebraCommonEuclidianEuclidianController_getSelectedPaths(self);
      IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(paths), 0), [GeogebraCommonKernelGeosGeoElement class])))) isChildOfWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(points), 0), [GeogebraCommonKernelGeosGeoElement class])]) {
        return NO;
      }
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(paths, 0), [GeogebraCommonKernelGeosGeoElement class])))) isGeoPolygon] || ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(paths, 0), [GeogebraCommonKernelGeosGeoElement class])))) isGeoConic] && ([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(((GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(IOSObjectArray_Get(paths, 0), [GeogebraCommonKernelKernelNDGeoConicND class])))) getLastHitType] == GeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_FILLING()))) {
        [self checkZooming];
        id<GeogebraCommonKernelKernelNDGeoPointND> ret = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) attachWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 0) withGeogebraCommonKernelRegion:(id<GeogebraCommonKernelRegion>) check_protocol_cast(IOSObjectArray_Get(paths, 0), @protocol(GeogebraCommonKernelRegion)) withGeogebraCommonEuclidianEuclidianViewInterfaceCommon:self->view_ withGeogebraCommonKernelMatrixCoords:[self getMouseLocRW]];
        if (ret != nil) {
          [self clearSelections];
          [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) updateCursorWithGeogebraCommonKernelKernelNDGeoPointND:ret];
          return YES;
        }
        return NO;
      }
      [self checkZooming];
      id<GeogebraCommonKernelKernelNDGeoPointND> ret = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) attachWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 0) withGeogebraCommonKernelPath:IOSObjectArray_Get(paths, 0) withGeogebraCommonEuclidianEuclidianViewInterfaceCommon:self->view_ withGeogebraCommonKernelMatrixCoords:[self getMouseLocRW]];
      if (ret != nil) {
        [self clearSelections];
        [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) updateCursorWithGeogebraCommonKernelKernelNDGeoPointND:ret];
        return YES;
      }
      return NO;
    }
    else if (GeogebraCommonEuclidianEuclidianController_selRegions(self) == 1) {
      IOSObjectArray *regions = GeogebraCommonEuclidianEuclidianController_getSelectedRegions(self);
      IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
      if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(regions), 0), [GeogebraCommonKernelGeosGeoElement class])))) isChildOfWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(points), 0), [GeogebraCommonKernelGeosGeoElement class])]) {
        [self checkZooming];
        id<GeogebraCommonKernelKernelNDGeoPointND> ret = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) attachWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 0) withGeogebraCommonKernelRegion:IOSObjectArray_Get(regions, 0) withGeogebraCommonEuclidianEuclidianViewInterfaceCommon:self->view_ withGeogebraCommonKernelMatrixCoords:[self getMouseLocRW]];
        if (ret != nil) {
          [self clearSelections];
          [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) updateCursorWithGeogebraCommonKernelKernelNDGeoPointND:ret];
          return YES;
        }
        return NO;
      }
    }
  }
  return NO;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_translateByVectorWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jint count = 0;
  if (GeogebraCommonEuclidianEuclidianController_selGeos(self) == 0) {
    GeogebraCommonEuclidianHits *transAbles = [hits getHitsWithGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_TRANSLATEABLE() withGeogebraCommonEuclidianHits:self->tempArrayList_];
    count = GeogebraCommonEuclidianEuclidianController_addSelectedGeoWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, transAbles, 1, NO);
  }
  if (count == 0) {
    count = GeogebraCommonEuclidianEuclidianController_addSelectedPolygonWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if (count == 0) {
    count = GeogebraCommonEuclidianEuclidianController_addSelectedListWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if (count == 0) {
    count = GeogebraCommonEuclidianEuclidianController_addSelectedVectorWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if (count == 0) {
    count = GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
    [((JavaUtilArrayList *) nil_chk(self->selectedGeos_)) removeAllWithJavaUtilCollection:self->selectedPoints_];
    self->allowSelectionRectangleForTranslateByVector_ = NO;
  }
  if ((GeogebraCommonEuclidianEuclidianController_selVectors(self) == 1) || (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 2)) {
    if (GeogebraCommonEuclidianEuclidianController_selPolygons(self) == 1) {
      IOSObjectArray *polys = GeogebraCommonEuclidianEuclidianController_getSelectedPolygons(self);
      id<GeogebraCommonKernelKernelNDGeoVectorND> vec = nil;
      if (GeogebraCommonEuclidianEuclidianController_selVectors(self) == 1) {
        vec = IOSObjectArray_Get(nil_chk(GeogebraCommonEuclidianEuclidianController_getSelectedVectorsND(self)), 0);
      }
      else {
        IOSObjectArray *ab = GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
        vec = (id<GeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast([self vectorWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(ab), 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(ab, 1)], @protocol(GeogebraCommonKernelKernelNDGeoVectorND));
      }
      self->allowSelectionRectangleForTranslateByVector_ = YES;
      return [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) translateWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(nil_chk(polys), 0) withGeogebraCommonKernelKernelNDGeoVectorND:vec];
    }
    else if (GeogebraCommonEuclidianEuclidianController_selGeos(self) > 0) {
      IOSObjectArray *geos = GeogebraCommonEuclidianEuclidianController_getSelectedGeos(self);
      id<GeogebraCommonKernelKernelNDGeoVectorND> vec = nil;
      if (GeogebraCommonEuclidianEuclidianController_selVectors(self) == 1) {
        vec = IOSObjectArray_Get(nil_chk(GeogebraCommonEuclidianEuclidianController_getSelectedVectorsND(self)), 0);
      }
      else {
        IOSObjectArray *ab = GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
        vec = (id<GeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast([self vectorWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(ab), 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(ab, 1)], @protocol(GeogebraCommonKernelKernelNDGeoVectorND));
      }
      JavaUtilArrayList *ret = [new_JavaUtilArrayList_init() autorelease];
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(geos))->size_; i++) {
        if (IOSObjectArray_Get(geos, i) != vec) {
          if (([GeogebraCommonKernelGeosTranslateable_class_() isInstance:IOSObjectArray_Get(geos, i)]) || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, i))) isGeoPolygon] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, i))) isGeoList]) {
            [ret addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) translateWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(geos, i) withGeogebraCommonKernelKernelNDGeoVectorND:vec])];
          }
        }
      }
      IOSObjectArray *retex = [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:GeogebraCommonKernelGeosGeoElement_class_()];
      self->allowSelectionRectangleForTranslateByVector_ = YES;
      return [ret toArrayWithNSObjectArray:retex];
    }
  }
  return nil;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_rotateByAngleWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jint count = 0;
  if (GeogebraCommonEuclidianEuclidianController_selGeos(self) == 0 || ((GeogebraCommonEuclidianEuclidianController_selGeos(self) == 1 && [GeogebraCommonKernelKernelNDGeoPointND_class_() isInstance:[((JavaUtilArrayList *) nil_chk(self->selectedGeos_)) getWithInt:0]]) && ![hits containsGeoPoint])) {
    GeogebraCommonEuclidianHits *rotAbles = [hits getHitsWithGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_TRANSFORMABLE() withGeogebraCommonEuclidianHits:self->tempArrayList_];
    count = GeogebraCommonEuclidianEuclidianController_addSelectedGeoWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, rotAbles, 2, NO);
  }
  if (count == 0) {
    count = GeogebraCommonEuclidianEuclidianController_addSelectedPolygonWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if (count == 0) {
    GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if (GeogebraCommonEuclidianEuclidianController_selGeos(self) > 1 && GeogebraCommonEuclidianEuclidianController_selPoints(self) == 0 && [GeogebraCommonKernelKernelNDGeoPointND_class_() isInstance:[((JavaUtilArrayList *) nil_chk(self->selectedGeos_)) getWithInt:0]]) {
    [((JavaUtilArrayList *) nil_chk(self->selectedPoints_)) addWithId:(id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([self->selectedGeos_ getWithInt:0], @protocol(GeogebraCommonKernelKernelNDGeoPointND))];
  }
  if (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 1 && GeogebraCommonEuclidianEuclidianController_selGeos(self) > 1) {
    IOSObjectArray *selGeos = GeogebraCommonEuclidianEuclidianController_getSelectedGeos(self);
    [((GeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showNumberInputDialogRotateWithNSString:[((GeogebraCommonMainLocalization *) nil_chk(self->l10n_)) getMenuWithNSString:[((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getModeTextWithInt:self->mode_]] withGeogebraCommonKernelGeosGeoPolygonArray:GeogebraCommonEuclidianEuclidianController_getSelectedPolygons(self) withGeogebraCommonKernelKernelNDGeoPointNDArray:GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self) withGeogebraCommonKernelGeosGeoElementArray:selGeos withGeogebraCommonEuclidianEuclidianController:self];
    return nil;
  }
  return nil;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_dilateFromPointWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jint count = 0;
  if (GeogebraCommonEuclidianEuclidianController_selGeos(self) == 0) {
    GeogebraCommonEuclidianHits *dilAbles = [hits getHitsWithGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_DILATEABLE() withGeogebraCommonEuclidianHits:self->tempArrayList_];
    count = GeogebraCommonEuclidianEuclidianController_addSelectedGeoWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, dilAbles, 1, NO);
  }
  if (count == 0) {
    count = GeogebraCommonEuclidianEuclidianController_addSelectedPolygonWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if (count == 0) {
    GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 1) {
    IOSObjectArray *selGeos = GeogebraCommonEuclidianEuclidianController_getSelectedGeos(self);
    [((GeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showNumberInputDialogDilateWithNSString:[((GeogebraCommonMainLocalization *) nil_chk(self->l10n_)) getMenuWithNSString:[((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getModeTextWithInt:self->mode_]] withGeogebraCommonKernelGeosGeoPolygonArray:GeogebraCommonEuclidianEuclidianController_getSelectedPolygons(self) withGeogebraCommonKernelKernelNDGeoPointNDArray:GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self) withGeogebraCommonKernelGeosGeoElementArray:selGeos withGeogebraCommonEuclidianEuclidianController:self];
    return nil;
  }
  return nil;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_fitLineWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  GeogebraCommonKernelGeosGeoList *list;
  GeogebraCommonEuclidianEuclidianController_addSelectedListWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  [self checkZooming];
  if (GeogebraCommonEuclidianEuclidianController_selLists(self) > 0) {
    list = IOSObjectArray_Get(nil_chk(GeogebraCommonEuclidianEuclidianController_getSelectedLists(self)), 0);
    if (list != nil) {
      IOSObjectArray_Set(ret, 0, GeogebraCommonEuclidianEuclidianController_FitLineYWithNSString_withGeogebraCommonKernelGeosGeoList_(self, nil, list));
      return ret;
    }
  }
  else {
    GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 999, YES);
    if (GeogebraCommonEuclidianEuclidianController_selPoints(self) > 1) {
      IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPoints(self);
      list = GeogebraCommonKernelCommandsCommandProcessor_wrapInListWithGeogebraCommonKernelKernel_withGeogebraCommonKernelGeosGeoElementArray_withInt_withGeogebraCommonPluginGeoClassEnum_(self->kernel_, points, ((IOSObjectArray *) nil_chk(points))->size_, GeogebraCommonPluginGeoClassEnum_get_POINT());
      if (list != nil) {
        IOSObjectArray_Set(ret, 0, GeogebraCommonEuclidianEuclidianController_FitLineYWithNSString_withGeogebraCommonKernelGeosGeoList_(self, nil, list));
        return ret;
      }
    }
  }
  return nil;
}

GeogebraCommonKernelGeosGeoLine *GeogebraCommonEuclidianEuclidianController_FitLineYWithNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonEuclidianEuclidianController *self, NSString *label, GeogebraCommonKernelGeosGeoList *list) {
  GeogebraCommonKernelStatisticsAlgoFitLineY *algo = [new_GeogebraCommonKernelStatisticsAlgoFitLineY_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction], label, list) autorelease];
  GeogebraCommonKernelGeosGeoLine *line = [algo getFitLineY];
  return line;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_createListWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  GeogebraCommonKernelGeosGeoList *list;
  IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  if (!self->selectionPreview_ && ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) size] > 1)) {
    [self checkZooming];
    list = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) ListWithNSString:nil withJavaUtilArrayList:hits withBoolean:NO];
    if (list != nil) {
      IOSObjectArray_Set(ret, 0, list);
      return ret;
    }
  }
  return nil;
}

jdouble GeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(GeogebraCommonEuclidianEuclidianController *self, jint i) {
  if ([self isAltDown]) {
    return 0;
  }
  return IOSDoubleArray_Get(nil_chk(self->transformCoordsOffset_), i);
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_areaWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jint count = GeogebraCommonEuclidianEuclidianController_addSelectedPolygonWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  if (count == 0) {
    GeogebraCommonEuclidianEuclidianController_addSelectedConicWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
  }
  if (GeogebraCommonEuclidianEuclidianController_selConics(self) == 1) {
    GeogebraCommonKernelKernelNDGeoConicND *conic = IOSObjectArray_Get(nil_chk(GeogebraCommonEuclidianEuclidianController_getSelectedConicsND(self)), 0);
    if ([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic)) isGeoConicPart]) {
      GeogebraCommonKernelGeosGeoConicPart *conicPart = (GeogebraCommonKernelGeosGeoConicPart *) check_class_cast(conic, [GeogebraCommonKernelGeosGeoConicPart class]);
      if ([conicPart getConicPartType] == GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_ARC) {
        [self clearSelections];
        return nil;
      }
    }
    [self checkZooming];
    GeogebraCommonKernelGeosGeoNumeric *area = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) AreaWithNSString:nil withGeogebraCommonKernelKernelNDGeoConicND:conic];
    return [((GeogebraCommonEuclidianTextDispatcher *) nil_chk([self getTextDispatcher])) getAreaTextWithGeogebraCommonKernelGeosGeoElement:conic withGeogebraCommonKernelGeosGeoNumberValue:area withGeogebraCommonAwtGPoint:self->mouseLoc_];
  }
  else if (GeogebraCommonEuclidianEuclidianController_selPolygons(self) == 1) {
    IOSObjectArray *poly = GeogebraCommonEuclidianEuclidianController_getSelectedPolygons(self);
    return [((GeogebraCommonEuclidianTextDispatcher *) nil_chk([self getTextDispatcher])) getAreaTextWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(nil_chk(poly), 0) withGeogebraCommonKernelGeosGeoNumberValue:IOSObjectArray_Get(poly, 0) withGeogebraCommonAwtGPoint:self->mouseLoc_];
  }
  return nil;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_angleWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jint count = 0;
  if (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 0) {
    if (GeogebraCommonEuclidianEuclidianController_selVectors(self) == 0) {
      count = GeogebraCommonEuclidianEuclidianController_addSelectedLineWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
    }
    if (GeogebraCommonEuclidianEuclidianController_selLines(self) == 0) {
      count = GeogebraCommonEuclidianEuclidianController_addSelectedVectorWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
    }
  }
  if (count == 0) {
    count = GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 3, NO);
  }
  jboolean polyFound = NO;
  if (count == 0) {
    polyFound = (1 == GeogebraCommonEuclidianEuclidianController_addSelectedGeoWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, [hits getHitsWithGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOPOLYGON() withGeogebraCommonEuclidianHits:self->tempArrayList_], 1, NO));
  }
  if (!polyFound) {
    count = [self addSelectedPlanesForAngleWithGeogebraCommonEuclidianHits:hits withInt:count];
  }
  GeogebraCommonKernelGeosGeoAngle *angle = nil;
  IOSObjectArray *angles = nil;
  if (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 3) {
    IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
    angle = [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) createAngleWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 2)];
  }
  else if (GeogebraCommonEuclidianEuclidianController_selVectors(self) == 2) {
    IOSObjectArray *vecs = GeogebraCommonEuclidianEuclidianController_getSelectedVectorsND(self);
    [self checkZooming];
    angle = [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) createAngleWithGeogebraCommonKernelKernelNDGeoVectorND:IOSObjectArray_Get(nil_chk(vecs), 0) withGeogebraCommonKernelKernelNDGeoVectorND:IOSObjectArray_Get(vecs, 1)];
  }
  else if (GeogebraCommonEuclidianEuclidianController_selLines(self) == 2) {
    IOSObjectArray *lines = GeogebraCommonEuclidianEuclidianController_getSelectedLinesND(self);
    [self checkZooming];
    angle = [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) createLineAngleWithGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(lines), 0) withGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(lines, 1)];
  }
  else if (polyFound && (GeogebraCommonEuclidianEuclidianController_selGeos(self) == 1)) {
    [self checkZooming];
    angles = [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) createAnglesWithGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(IOSObjectArray_Get(nil_chk(GeogebraCommonEuclidianEuclidianController_getSelectedGeos(self)), 0), [GeogebraCommonKernelGeosGeoPolygon class])];
  }
  else {
    angle = [self createAngle3D];
  }
  if (angle != nil) {
    if ([angle isLabelVisible]) {
      [angle setLabelModeWithInt:GeogebraCommonKernelGeosGeoElement_LABEL_NAME_VALUE];
    }
    else {
      [angle setLabelModeWithInt:GeogebraCommonKernelGeosGeoElement_LABEL_VALUE];
    }
    [angle setLabelVisibleWithBoolean:YES];
    [angle updateRepaint];
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ angle } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  else if (angles != nil) {
    for (jint i = 0; i < angles->size_; i++) {
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(angles, i))) isLabelVisible]) {
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(angles, i))) setLabelModeWithInt:GeogebraCommonKernelGeosGeoElement_LABEL_NAME_VALUE];
      }
      else {
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(angles, i))) setLabelModeWithInt:GeogebraCommonKernelGeosGeoElement_LABEL_VALUE];
      }
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(angles, i))) setLabelVisibleWithBoolean:YES];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(angles, i))) updateRepaint];
    }
    return angles;
  }
  else {
    return nil;
  }
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_distanceWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jint count = GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
  if (count == 0) {
    GeogebraCommonEuclidianEuclidianController_addSelectedLineWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
  }
  if (count == 0) {
    GeogebraCommonEuclidianEuclidianController_addSelectedConicWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
  }
  if (count == 0) {
    GeogebraCommonEuclidianEuclidianController_addSelectedPolygonWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
  }
  if (count == 0) {
    GeogebraCommonEuclidianEuclidianController_addSelectedSegmentWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
  }
  if (self->selectionPreview_) {
    return nil;
  }
  if (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 2) {
    IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
    [self checkZooming];
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    IOSObjectArray_Set(ret, 0, [((GeogebraCommonEuclidianTextDispatcher *) nil_chk([self getTextDispatcher])) createDistanceTextWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1)]);
    return ret;
  }
  else if ((GeogebraCommonEuclidianEuclidianController_selPoints(self) == 1) && (GeogebraCommonEuclidianEuclidianController_selLines(self) == 1)) {
    IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
    IOSObjectArray *lines = GeogebraCommonEuclidianEuclidianController_getSelectedLinesND(self);
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    IOSObjectArray_Set(ret, 0, [((GeogebraCommonEuclidianTextDispatcher *) nil_chk([self getTextDispatcher])) createDistanceTextWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(lines), 0)]);
    [self clearSelections];
    return ret;
  }
  else if (GeogebraCommonEuclidianEuclidianController_selSegments(self) == 1) {
    IOSObjectArray *segments = GeogebraCommonEuclidianEuclidianController_getSelectedSegmentsND(self);
    GeogebraCommonKernelGeosGeoElement *seg = (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(segments), 0), [GeogebraCommonKernelGeosGeoElement class]);
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(seg)) isLabelVisible]) {
      [seg setLabelModeWithInt:GeogebraCommonKernelGeosGeoElement_LABEL_NAME_VALUE];
    }
    else {
      [seg setLabelModeWithInt:GeogebraCommonKernelGeosGeoElement_LABEL_VALUE];
    }
    [((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(IOSObjectArray_Get(segments, 0))) setLabelVisibleWithBoolean:YES];
    [((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(IOSObjectArray_Get(segments, 0))) updateRepaint];
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ seg } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  else if (GeogebraCommonEuclidianEuclidianController_selLines(self) == 2) {
    IOSObjectArray *lines = GeogebraCommonEuclidianEuclidianController_getSelectedLinesND(self);
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    [self checkZooming];
    IOSObjectArray_Set(ret, 0, [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) DistanceWithNSString:nil withGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(lines), 0) withGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(lines, 1)]);
    return ret;
  }
  else if (GeogebraCommonEuclidianEuclidianController_selConics(self) == 1) {
    GeogebraCommonKernelKernelNDGeoConicND *conic = IOSObjectArray_Get(nil_chk(GeogebraCommonEuclidianEuclidianController_getSelectedConicsND(self)), 0);
    return [((GeogebraCommonEuclidianTextDispatcher *) nil_chk([self getTextDispatcher])) createCircumferenceTextWithGeogebraCommonKernelKernelNDGeoConicND:conic withGeogebraCommonAwtGPoint:self->mouseLoc_];
  }
  else if (GeogebraCommonEuclidianEuclidianController_selPolygons(self) == 1) {
    IOSObjectArray *poly = GeogebraCommonEuclidianEuclidianController_getSelectedPolygons(self);
    return [((GeogebraCommonEuclidianTextDispatcher *) nil_chk([self getTextDispatcher])) createPerimeterTextWithGeogebraCommonKernelGeosGeoPolygon:IOSObjectArray_Get(nil_chk(poly), 0) withGeogebraCommonAwtGPoint:self->mouseLoc_];
  }
  return nil;
}

jboolean GeogebraCommonEuclidianEuclidianController_showCheckBox(GeogebraCommonEuclidianEuclidianController *self) {
  if (self->selectionPreview_) {
    return NO;
  }
  [((GeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showBooleanCheckboxCreationDialogWithGeogebraCommonAwtGPoint:self->mouseLoc_ withGeogebraCommonKernelGeosGeoBoolean:nil];
  return NO;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_compassesWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  if (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 2) {
    IOSObjectArray *points = [IOSObjectArray arrayWithLength:2 type:GeogebraCommonKernelKernelNDGeoPointND_class_()];
    IOSObjectArray_Set(points, 0, [((JavaUtilArrayList *) nil_chk(self->selectedPoints_)) getWithInt:0]);
    IOSObjectArray_Set(points, 1, [self->selectedPoints_ getWithInt:1]);
    id<GeogebraCommonKernelKernelNDGeoPointND> centerPoint = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([self chooseGeoWithGeogebraCommonEuclidianHits:hits withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOPOINTND()], @protocol(GeogebraCommonKernelKernelNDGeoPointND));
    if (centerPoint != nil) {
      if (self->selectionPreview_) {
        [((GeogebraCommonEuclidianHits *) nil_chk(self->tempArrayList_)) clear];
        [self->tempArrayList_ addWithId:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(centerPoint, [GeogebraCommonKernelGeosGeoElement class])];
        GeogebraCommonEuclidianEuclidianController_addToHighlightedListWithJavaUtilArrayList_withJavaUtilArrayList_withInt_(self, self->selectedPoints_, self->tempArrayList_, 3);
        return nil;
      }
      [self checkZooming];
      GeogebraCommonKernelGeosGeoElement *circle = GeogebraCommonEuclidianEuclidianController_CircleCompassesWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, centerPoint, IOSObjectArray_Get(points, 0), IOSObjectArray_Get(points, 1));
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ circle } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      [self clearSelections];
      return ret;
    }
  }
  else if (GeogebraCommonEuclidianEuclidianController_selConics(self) == 1) {
    GeogebraCommonKernelKernelNDGeoConicND *circle = [((JavaUtilArrayList *) nil_chk(self->selectedConicsND_)) getWithInt:0];
    id<GeogebraCommonKernelKernelNDGeoPointND> centerPoint = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([self chooseGeoWithGeogebraCommonEuclidianHits:hits withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOPOINTND()], @protocol(GeogebraCommonKernelKernelNDGeoPointND));
    if (centerPoint != nil) {
      if (self->selectionPreview_) {
        [((GeogebraCommonEuclidianHits *) nil_chk(self->tempArrayList_)) clear];
        [self->tempArrayList_ addWithId:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(centerPoint, [GeogebraCommonKernelGeosGeoElement class])];
        GeogebraCommonEuclidianEuclidianController_addToHighlightedListWithJavaUtilArrayList_withJavaUtilArrayList_withInt_(self, self->selectedPoints_, self->tempArrayList_, 3);
        return nil;
      }
      [self checkZooming];
      GeogebraCommonKernelGeosGeoElement *circlel = GeogebraCommonEuclidianEuclidianController_CircleWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoQuadricND_(self, centerPoint, circle);
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ circlel } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      [self clearSelections];
      return ret;
    }
  }
  else if (GeogebraCommonEuclidianEuclidianController_selSegments(self) == 1) {
    id<GeogebraCommonKernelKernelNDGeoSegmentND> segment = [((JavaUtilArrayList *) nil_chk(self->selectedSegments_)) getWithInt:0];
    id<GeogebraCommonKernelKernelNDGeoPointND> centerPoint = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([self chooseGeoWithGeogebraCommonEuclidianHits:hits withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOPOINTND()], @protocol(GeogebraCommonKernelKernelNDGeoPointND));
    if (centerPoint != nil) {
      if (self->selectionPreview_) {
        [((GeogebraCommonEuclidianHits *) nil_chk(self->tempArrayList_)) clear];
        [self->tempArrayList_ addWithId:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(centerPoint, [GeogebraCommonKernelGeosGeoElement class])];
        GeogebraCommonEuclidianEuclidianController_addToHighlightedListWithJavaUtilArrayList_withJavaUtilArrayList_withInt_(self, self->selectedPoints_, self->tempArrayList_, 3);
        return nil;
      }
      [self checkZooming];
      GeogebraCommonKernelGeosGeoElement *circlel = [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) circleWithGeogebraCommonKernelConstruction:[((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction] withGeogebraCommonKernelKernelNDGeoPointND:centerPoint withGeogebraCommonKernelArithmeticNumberValue:segment];
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ circlel } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      [self clearSelections];
      return ret;
    }
  }
  jboolean hitPoint = (GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO) != 0);
  if (!hitPoint && (GeogebraCommonEuclidianEuclidianController_selPoints(self) != 2)) {
    GeogebraCommonEuclidianEuclidianController_addSelectedSegmentWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    GeogebraCommonEuclidianEuclidianController_addSelectedConicWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    if ([((JavaUtilArrayList *) nil_chk(self->selectedConicsND_)) size] > 0) {
      GeogebraCommonKernelKernelNDGeoConicND *c = [self->selectedConicsND_ getWithInt:0];
      if (![((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c)) isCircle]) {
        [self->selectedConicsND_ removeWithInt:0];
        [self clearSelections];
      }
    }
  }
  return nil;
}

GeogebraCommonKernelKernelNDGeoConicND *GeogebraCommonEuclidianEuclidianController_CircleWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoQuadricND_(GeogebraCommonEuclidianEuclidianController *self, id<GeogebraCommonKernelKernelNDGeoPointND> A, GeogebraCommonKernelKernelNDGeoQuadricND *c) {
  GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction];
  GeogebraCommonKernelAlgosAlgoRadius *radius = [new_GeogebraCommonKernelAlgosAlgoRadius_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoQuadricND_(cons, c) autorelease];
  [((GeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:radius];
  GeogebraCommonKernelKernelNDGeoConicND *circle = [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) circleWithGeogebraCommonKernelConstruction:cons withGeogebraCommonKernelKernelNDGeoPointND:A withGeogebraCommonKernelArithmeticNumberValue:[radius getRadius]];
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(circle)) setToSpecific];
  [circle update];
  return circle;
}

GeogebraCommonKernelKernelNDGeoConicND *GeogebraCommonEuclidianEuclidianController_CircleCompassesWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonEuclidianEuclidianController *self, id<GeogebraCommonKernelKernelNDGeoPointND> A, id<GeogebraCommonKernelKernelNDGeoPointND> B, id<GeogebraCommonKernelKernelNDGeoPointND> C) {
  GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction];
  GeogebraCommonKernelAlgosAlgoElement *algoSegment = [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) segmentAlgoWithGeogebraCommonKernelConstruction:cons withGeogebraCommonKernelKernelNDGeoPointND:B withGeogebraCommonKernelKernelNDGeoPointND:C];
  [((GeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algoSegment];
  GeogebraCommonKernelKernelNDGeoConicND *circle = [self->companion_ circleWithGeogebraCommonKernelConstruction:cons withGeogebraCommonKernelKernelNDGeoPointND:A withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algoSegment)) getOutputWithInt:0], @protocol(GeogebraCommonKernelArithmeticNumberValue))];
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(circle)) setToSpecific];
  [circle update];
  return circle;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianController_vectorFromPointWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jint count = GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  if (count == 0) {
    GeogebraCommonEuclidianEuclidianController_addSelectedVectorWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if ((GeogebraCommonEuclidianEuclidianController_selPoints(self) == 1) && (GeogebraCommonEuclidianEuclidianController_selVectors(self) == 1)) {
    IOSObjectArray *vecs = GeogebraCommonEuclidianEuclidianController_getSelectedVectorsND(self);
    IOSObjectArray *points = GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
    [self checkZooming];
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    IOSObjectArray_Set(ret, 0, [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) vectorPointWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoVectorND:IOSObjectArray_Get(nil_chk(vecs), 0)]);
    return ret;
  }
  return nil;
}

jboolean GeogebraCommonEuclidianEuclidianController_circlePointRadiusWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return NO;
  }
  GeogebraCommonEuclidianEuclidianController_addSelectedPointWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  if (GeogebraCommonEuclidianEuclidianController_selPoints(self) == 1) {
    [((GeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showNumberInputDialogCirclePointRadiusWithNSString:[((GeogebraCommonMainLocalization *) nil_chk(self->l10n_)) getMenuWithNSString:[((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getModeTextWithInt:self->mode_]] withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(GeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self)), 0) withGeogebraCommonEuclidianEuclidianView:self->view_];
    return YES;
  }
  return NO;
}

id<GeogebraCommonKernelKernelNDGeoPointND> GeogebraCommonEuclidianEuclidianController_updateNewPointWithBoolean_withGeogebraCommonEuclidianHits_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean forPreviewable, GeogebraCommonEuclidianHits *hits, jboolean onPathPossible, jboolean inRegionPossible, jboolean intersectPossible, jboolean chooseGeo, jboolean complex) {
  GeogebraCommonEuclidianHits *regionHits = [self getRegionHitsWithGeogebraCommonEuclidianHits:hits];
  if ((self->mode_ != GeogebraCommonEuclidianEuclidianConstants_MODE_POINT) && (self->mode_ != GeogebraCommonEuclidianEuclidianConstants_MODE_POINT_ON_OBJECT) && (self->mode_ != GeogebraCommonEuclidianEuclidianConstants_MODE_COMPLEX_NUMBER) && ![((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    [hits keepOnlyHitsForNewPointMode];
  }
  id<GeogebraCommonKernelPath> path = nil;
  id<GeogebraCommonKernelRegion> region = nil;
  jboolean createPoint = YES;
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) containsGeoPoint]) {
    createPoint = NO;
    if (forPreviewable) {
      [self createNewPointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([((GeogebraCommonEuclidianHits *) nil_chk([hits getHitsWithGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOPOINTND() withGeogebraCommonEuclidianHits:self->tempArrayList_])) getWithInt:0], @protocol(GeogebraCommonKernelKernelNDGeoPointND))];
    }
  }
  id<GeogebraCommonKernelKernelNDGeoPointND> point = nil;
  if (createPoint && intersectPossible) {
    id<GeogebraCommonKernelKernelNDGeoPointND> intersectPoint = [self getSingleIntersectionPointWithGeogebraCommonEuclidianHits:hits];
    if (intersectPoint != nil) {
      if (!forPreviewable) {
        point = intersectPoint;
        if (![point showInEuclidianView]) {
          [point remove];
        }
        else {
          createPoint = NO;
        }
      }
      else {
        [self createNewPointIntersectionWithGeogebraCommonKernelKernelNDGeoPointND:intersectPoint];
        createPoint = NO;
      }
    }
  }
  if (createPoint) {
    jboolean createPointOnBoundary = NO;
    if (![((GeogebraCommonEuclidianHits *) nil_chk(regionHits)) isEmpty]) {
      if (inRegionPossible) {
        if (chooseGeo) {
          region = (id<GeogebraCommonKernelRegion>) check_protocol_cast([self chooseGeoWithJavaUtilArrayList:regionHits withBoolean:YES], @protocol(GeogebraCommonKernelRegion));
        }
        else {
          region = (id<GeogebraCommonKernelRegion>) check_protocol_cast([regionHits getWithInt:0], @protocol(GeogebraCommonKernelRegion));
        }
        if (region != nil) {
          if ([((GeogebraCommonKernelGeosGeoElement *) check_class_cast(region, [GeogebraCommonKernelGeosGeoElement class])) getAlphaValue] > GeogebraCommonEuclidianEuclidianController_MAX_TRANSPARENT_ALPHA_VALUE) {
            [hits removeGeosAfterWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(region, [GeogebraCommonKernelGeosGeoElement class])];
          }
          jboolean sideInHits = NO;
          if ([((GeogebraCommonKernelGeosGeoElement *) check_class_cast(region, [GeogebraCommonKernelGeosGeoElement class])) isGeoPolygon]) {
            IOSObjectArray *sides = [((GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(region, [GeogebraCommonKernelGeosGeoPolygon class])) getSegments];
            if (sides != nil) {
              for (jint k = 0; k < sides->size_; k++) {
                if ([hits containsWithId:IOSObjectArray_Get(sides, k)]) {
                  sideInHits = YES;
                  break;
                }
              }
            }
            if (sideInHits) {
              if (self->mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_POINT_ON_OBJECT) {
                createPoint = NO;
                createPointOnBoundary = YES;
              }
              else {
                createPoint = NO;
                [hits removeWithId:region];
                region = nil;
              }
            }
          }
          else if ([((GeogebraCommonKernelGeosGeoElement *) check_class_cast(region, [GeogebraCommonKernelGeosGeoElement class])) isGeoConic]) {
            if ([self createNewPointInRegionPossibleWithGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(region, [GeogebraCommonKernelKernelNDGeoConicND class])]) {
              createPoint = YES;
              [hits removeWithId:region];
            }
            else {
              createPoint = YES;
            }
          }
          else if ([region isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]]) {
            if ([((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(region, [GeogebraCommonKernelGeosGeoFunction class])) isInequality]) {
              createPoint = YES;
              [hits removeWithId:region];
            }
            else {
              createPoint = YES;
            }
          }
          if (!sideInHits) {
            createPoint = YES;
            [hits removePolygonsIfSideNotPresent];
            if (self->mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_POINT_ON_OBJECT) {
              [hits removeSegmentsFromPolygons];
            }
          }
        }
        else {
          createPoint = YES;
        }
      }
      else {
        createPoint = YES;
      }
    }
    if (createPointOnBoundary) {
      path = (id<GeogebraCommonKernelPath>) check_protocol_cast(region, @protocol(GeogebraCommonKernelPath));
      region = nil;
      createPoint = YES;
    }
    else {
      GeogebraCommonEuclidianHits *pathHits = [hits getHitsWithGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_PATH_NO_FILL_HIT() withGeogebraCommonEuclidianHits:self->tempArrayList_];
      if (![((GeogebraCommonEuclidianHits *) nil_chk(pathHits)) isEmpty]) {
        if (onPathPossible) {
          if (chooseGeo) {
            path = (id<GeogebraCommonKernelPath>) check_protocol_cast([self chooseGeoWithJavaUtilArrayList:pathHits withBoolean:YES], @protocol(GeogebraCommonKernelPath));
          }
          else {
            path = (id<GeogebraCommonKernelPath>) check_protocol_cast([pathHits getWithInt:0], @protocol(GeogebraCommonKernelPath));
          }
          if (path != nil) {
            createPoint = YES;
          }
        }
        else {
          createPoint = YES;
        }
      }
    }
  }
  if (createPoint) {
    [self transformCoords];
    if ((path != nil) && onPathPossible) {
      point = [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) createNewPointWithBoolean:forPreviewable withGeogebraCommonKernelPath:path withBoolean:complex];
    }
    else if ((region != nil) && inRegionPossible) {
      point = [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) createNewPointWithBoolean:forPreviewable withGeogebraCommonKernelRegion:region withBoolean:complex];
    }
    else {
      point = [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) createNewPointWithBoolean:forPreviewable withBoolean:complex];
      [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) setShowMouseCoordsWithBoolean:YES];
    }
  }
  return point;
}

jboolean GeogebraCommonEuclidianEuclidianController_createNewPointWithGeogebraCommonEuclidianHits_withBoolean_withBoolean_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, jboolean onPathPossible, jboolean intersectPossible, jboolean doSingleHighlighting) {
  return [self createNewPointWithGeogebraCommonEuclidianHits:hits withBoolean:onPathPossible withBoolean:NO withBoolean:intersectPossible withBoolean:doSingleHighlighting withBoolean:NO];
}

void GeogebraCommonEuclidianEuclidianController_macroWithGeogebraCommonEuclidianHits_withGeogebraCommonUtilAsyncOperation_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *hits, GeogebraCommonUtilAsyncOperation *callback2) {
  self->index_ = GeogebraCommonEuclidianEuclidianController_selGeos(self);
  jboolean objectFound = 1 == [self handleAddSelectedWithGeogebraCommonEuclidianHits:hits withInt:((IOSObjectArray *) nil_chk(self->macroInput_))->size_ withBoolean:NO withJavaUtilArrayList:self->selectedGeos_ withGeogebraCommonKernelGeosTestEnum:IOSObjectArray_Get(self->macroInput_, self->index_)];
  if (self->selectionPreview_) {
    if (callback2 != nil) [callback2 callbackWithId:JavaLangBoolean_valueOfWithBoolean_(NO)];
    return;
  }
  if (!objectFound && ([((GeogebraCommonKernelGeosTestEnum *) nil_chk(IOSObjectArray_Get(self->macroInput_, self->index_))) isEqual:GeogebraCommonKernelGeosTestEnum_get_GEOPOINT()] || [((GeogebraCommonKernelGeosTestEnum *) nil_chk(IOSObjectArray_Get(self->macroInput_, self->index_))) isEqual:GeogebraCommonKernelGeosTestEnum_get_GEOPOINTND()])) {
    if (GeogebraCommonEuclidianEuclidianController_createNewPointWithGeogebraCommonEuclidianHits_withBoolean_withBoolean_withBoolean_(self, hits, YES, YES, NO)) {
      [((JavaUtilArrayList *) nil_chk(self->selectedGeos_)) addWithId:[self getMovedGeoPoint]];
      [((GeogebraCommonMainSelectionManager *) nil_chk(self->selection_)) addSelectedGeoWithGeogebraCommonKernelGeosGeoElement:[self getMovedGeoPoint]];
      objectFound = YES;
      GeogebraCommonEuclidianEuclidianController_set_pointCreated_(self, nil);
    }
  }
  if (objectFound || [((GeogebraCommonKernelGeosTestEnum *) nil_chk(IOSObjectArray_Get(self->macroInput_, self->index_))) isEqual:GeogebraCommonKernelGeosTestEnum_get_GEONUMERIC()] || [((GeogebraCommonKernelGeosTestEnum *) nil_chk(IOSObjectArray_Get(self->macroInput_, self->index_))) isEqual:GeogebraCommonKernelGeosTestEnum_get_GEOANGLE()]) {
    if (!objectFound) {
      self->index_--;
    }
    GeogebraCommonUtilAsyncOperation *callback3 = [new_GeogebraCommonEuclidianEuclidianController_$1_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonUtilAsyncOperation_(self, callback2) autorelease];
    [self readNumberOrAngleIfNeededWithGeogebraCommonUtilAsyncOperation:callback3];
  }
  [self macroProcessWithGeogebraCommonUtilAsyncOperation:callback2];
}

jboolean GeogebraCommonEuclidianEuclidianController_buttonWithBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean textfield) {
  if (!self->selectionPreview_ && (self->mouseLoc_ != nil)) {
    [((GeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showButtonCreationDialogWithInt:self->mouseLoc_->x_ withInt:self->mouseLoc_->y_ withBoolean:textfield];
  }
  return NO;
}

jboolean GeogebraCommonEuclidianEuclidianController_endOfSwitchModeForProcessModeWithGeogebraCommonKernelGeosGeoElementArray_withBoolean_withGeogebraCommonUtilAsyncOperation_(GeogebraCommonEuclidianEuclidianController *self, IOSObjectArray *ret, jboolean changedKernel, GeogebraCommonUtilAsyncOperation *callback) {
  [self memorizeJustCreatedGeosAfterProcessModeWithGeogebraCommonKernelGeosGeoElementArray:ret];
  if (callback != nil) [callback callbackWithId:JavaLangBoolean_valueOfWithBoolean_(changedKernel || (ret != nil))];
  if (!changedKernel) {
    return ret != nil;
  }
  return changedKernel;
}

jboolean GeogebraCommonEuclidianEuclidianController_processModeWithGeogebraCommonEuclidianHits_withBoolean_withGeogebraCommonUtilAsyncOperation_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianHits *processHits, jboolean isControlDown, GeogebraCommonUtilAsyncOperation *callback) {
  GeogebraCommonEuclidianHits *hits = processHits;
  jboolean changedKernel = NO;
  if (hits == nil) {
    hits = [new_GeogebraCommonEuclidianHits_init() autorelease];
  }
  GeogebraCommonUtilAsyncOperation *callback2;
  if (callback == nil) {
    callback2 = nil;
  }
  else {
    callback2 = [new_GeogebraCommonEuclidianEuclidianController_$4_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonUtilAsyncOperation_(self, callback) autorelease];
  }
  changedKernel = [self switchModeForProcessModeWithGeogebraCommonEuclidianHits:hits withBoolean:isControlDown withGeogebraCommonUtilAsyncOperation:callback2];
  if (changedKernel) {
    [self toolCompleted];
  }
  if (callback == nil) [self updatePreview];
  return changedKernel;
}

void GeogebraCommonEuclidianEuclidianController_rotateObjectWithBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean repaint) {
  jdouble newAngle = JavaLangMath_atan2WithDouble_withDouble_(self->yRW_ - ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->rotationCenter_))->inhomY_, self->xRW_ - self->rotationCenter_->inhomX_);
  jdouble angle = newAngle - self->rotationLastAngle_;
  [((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(self->tempNum_)) setWithDouble:angle];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->rotGeoElement_)) isChangeable]) {
    [((id<GeogebraCommonKernelGeosPointRotateable>) check_protocol_cast(self->rotGeoElement_, @protocol(GeogebraCommonKernelGeosPointRotateable))) rotateWithGeogebraCommonKernelArithmeticNumberValue:self->tempNum_ withGeogebraCommonKernelKernelNDGeoPointND:self->rotationCenter_];
    if (repaint) {
      [self->rotGeoElement_ updateRepaint];
    }
    else {
      [self->rotGeoElement_ updateCascade];
    }
  }
  else {
    JavaUtilArrayList *pts = [self->rotGeoElement_ getFreeInputPointsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:self->view_];
    for (id<GeogebraCommonKernelKernelNDGeoPointND> __strong pt in nil_chk(pts)) {
      [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(pt)) rotateWithGeogebraCommonKernelArithmeticNumberValue:self->tempNum_ withGeogebraCommonKernelKernelNDGeoPointND:self->rotationCenter_];
    }
    GeogebraCommonKernelGeosGeoElement_updateCascadeWithJavaUtilArrayList_withJavaUtilTreeSet_withBoolean_(pts, [new_JavaUtilTreeSet_init() autorelease], NO);
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) repaint];
  }
  self->rotationLastAngle_ = newAngle;
}

void GeogebraCommonEuclidianEuclidianController_moveLabel(GeogebraCommonEuclidianEuclidianController *self) {
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->movedLabelGeoElement_)) setLabelOffsetWithInt:(((GeogebraCommonAwtGPoint *) nil_chk(self->oldLoc_))->x_ + ((GeogebraCommonAwtGPoint *) nil_chk(self->mouseLoc_))->x_) - ((GeogebraCommonAwtGPoint *) nil_chk(self->startLoc_))->x_ withInt:(self->oldLoc_->y_ + self->mouseLoc_->y_) - self->startLoc_->y_];
  [self->movedLabelGeoElement_ update];
  [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) notifyRepaint];
}

void GeogebraCommonEuclidianEuclidianController_updateAfterMoveWithGeogebraCommonKernelGeosGeoElement_withBoolean_(GeogebraCommonKernelGeosGeoElement *geo, jboolean repaint) {
  GeogebraCommonEuclidianEuclidianController_initialize();
  if (repaint) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) updateRepaint];
  }
  else {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) updateCascade];
  }
}

void GeogebraCommonEuclidianEuclidianController_moveVectorWithBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean repaint) {
  [self moveVector];
  GeogebraCommonEuclidianEuclidianController_updateAfterMoveWithGeogebraCommonKernelGeosGeoElement_withBoolean_((GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->movedGeoVector_, [GeogebraCommonKernelGeosGeoElement class]), repaint);
}

void GeogebraCommonEuclidianEuclidianController_moveVectorWithDouble_withDouble_(GeogebraCommonEuclidianEuclidianController *self, jdouble x, jdouble y) {
  [((id<GeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(self->movedGeoVector_)) setCoordsWithDouble:x withDouble:y withDouble:0.0];
}

void GeogebraCommonEuclidianEuclidianController_moveVectorStartPointWithBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean repaint) {
  id<GeogebraCommonKernelKernelNDGeoPointND> P = [((id<GeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(self->movedGeoVector_)) getStartPoint];
  [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) setCoordsWithDouble:self->xRW_ withDouble:self->yRW_ withDouble:1.0];
  if (repaint) {
    [self->movedGeoVector_ updateRepaint];
  }
  else {
    [self->movedGeoVector_ updateCascade];
  }
}

void GeogebraCommonEuclidianEuclidianController_moveTextWithBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean repaint) {
  if ([((GeogebraCommonKernelGeosGeoText *) nil_chk(self->movedGeoText_)) isAbsoluteScreenLocActive]) {
    [self->movedGeoText_ setAbsoluteScreenLocWithInt:(((GeogebraCommonAwtGPoint *) nil_chk(self->oldLoc_))->x_ + ((GeogebraCommonAwtGPoint *) nil_chk(self->mouseLoc_))->x_) - ((GeogebraCommonAwtGPoint *) nil_chk(self->startLoc_))->x_ withInt:(self->oldLoc_->y_ + self->mouseLoc_->y_) - self->startLoc_->y_];
  }
  else {
    if ([self->movedGeoText_ hasAbsoluteLocation]) {
      [self moveTextAbsoluteLocation];
    }
    else {
      [self->movedGeoText_ setLabelOffsetWithInt:(((GeogebraCommonAwtGPoint *) nil_chk(self->oldLoc_))->x_ + ((GeogebraCommonAwtGPoint *) nil_chk(self->mouseLoc_))->x_) - ((GeogebraCommonAwtGPoint *) nil_chk(self->startLoc_))->x_ withInt:(self->oldLoc_->y_ + self->mouseLoc_->y_) - self->startLoc_->y_];
    }
  }
  if (repaint) {
    [self->movedGeoText_ updateRepaint];
  }
  else {
    [self->movedGeoText_ updateCascade];
  }
}

void GeogebraCommonEuclidianEuclidianController_moveImageWithBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean repaint) {
  if ([((GeogebraCommonKernelGeosGeoImage *) nil_chk(self->movedGeoImage_)) isAbsoluteScreenLocActive]) {
    [self->movedGeoImage_ setAbsoluteScreenLocWithInt:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toScreenCoordXWithDouble:self->xRW_ - [self getStartPointX]] withInt:[self->view_ toScreenCoordYWithDouble:self->yRW_ - [self getStartPointY]]];
    if (repaint) {
      [self->movedGeoImage_ updateRepaint];
    }
    else {
      [self->movedGeoImage_ updateCascade];
    }
  }
  else {
    if ([self->movedGeoImage_ hasAbsoluteLocation]) {
      jdouble vx = self->xRW_ - [self getStartPointX];
      jdouble vy = self->yRW_ - [self getStartPointY];
      [self->movedGeoImage_ setWithGeogebraCommonKernelGeosGeoElement:self->oldImage_];
      for (jint i = 0; i < 3; i++) {
        GeogebraCommonKernelGeosGeoPoint *corner = [self->movedGeoImage_ getCornerWithInt:i];
        if (corner != nil) {
          [corner setCoordsWithDouble:corner->inhomX_ + vx withDouble:corner->inhomY_ + vy withDouble:1.0];
        }
      }
      if (repaint) {
        [self->movedGeoImage_ updateRepaint];
      }
      else {
        [self->movedGeoImage_ updateCascade];
      }
    }
  }
}

void GeogebraCommonEuclidianEuclidianController_moveConicWithBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean repaint) {
  if ([self isAltDown] && ([((GeogebraCommonKernelGeosGeoConic *) nil_chk(self->movedGeoConic_)) getType] == GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA || [self->movedGeoConic_ getType] == GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE)) {
    jdouble vX = [((GeogebraCommonKernelGeosGeoVec2D *) nil_chk(((GeogebraCommonKernelGeosGeoConic *) nil_chk(self->movedGeoConic_))->b_)) getX];
    jdouble vY = [self->movedGeoConic_->b_ getY];
    jint index = [self->movedGeoConic_ getType] == GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA ? 0 : 1;
    jdouble c = [((GeogebraCommonKernelMatrixCoords *) nil_chk([self->movedGeoConic_ getEigenvecWithInt:index])) getX];
    jdouble s = [((GeogebraCommonKernelMatrixCoords *) nil_chk([self->movedGeoConic_ getEigenvecWithInt:index])) getY];
    jdouble coeff;
    jdouble dx = self->xRW_ - vX;
    jdouble dy = self->yRW_ - vY;
    coeff = (c * dx + s * dy) / ((s * dx - c * dy) * (s * dx - c * dy));
    if (coeff > 1E8) {
      coeff = 1E6;
    }
    else if (coeff < -1E8) {
      coeff = -1E6;
    }
    [self->movedGeoConic_ translateWithDouble:-vX withDouble:-vY];
    [self->movedGeoConic_ setCoeffsWithDouble:coeff * s * s withDouble:-2 * coeff * s * c withDouble:coeff * c * c withDouble:-c withDouble:-s withDouble:0];
    [self->movedGeoConic_ translateWithDouble:vX withDouble:vY];
  }
  else {
    [((GeogebraCommonKernelGeosGeoConic *) nil_chk(self->movedGeoConic_)) setWithGeogebraCommonKernelGeosGeoElement:self->tempConic_];
    [self->movedGeoConic_ translateWithDouble:self->xRW_ - [self getStartPointX] withDouble:self->yRW_ - [self getStartPointY]];
  }
  if (repaint) {
    [((GeogebraCommonKernelGeosGeoConic *) nil_chk(self->movedGeoConic_)) updateRepaint];
  }
  else {
    [((GeogebraCommonKernelGeosGeoConic *) nil_chk(self->movedGeoConic_)) updateCascade];
  }
}

void GeogebraCommonEuclidianEuclidianController_moveImplicitPolyWithBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean repaint) {
  [((GeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(self->movedGeoImplicitPoly_)) setWithGeogebraCommonKernelGeosGeoElement:self->tempImplicitPoly_];
  [self->movedGeoImplicitPoly_ translateWithDouble:self->xRW_ - [self getStartPointX] withDouble:self->yRW_ - [self getStartPointY]];
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(self->moveDependentPoints_)) size]; i++) {
    GeogebraCommonKernelGeosGeoPoint *g = [self->moveDependentPoints_ getWithInt:i];
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(g)) setCoords2DWithDouble:[((JavaLangDouble *) nil_chk([((JavaUtilArrayList *) nil_chk(self->tempDependentPointX_)) getWithInt:i])) doubleValue] withDouble:[((JavaLangDouble *) nil_chk([((JavaUtilArrayList *) nil_chk(self->tempDependentPointY_)) getWithInt:i])) doubleValue] withDouble:1];
    if (self->tmpCoordsL3_ == nil) {
      GeogebraCommonEuclidianEuclidianController_setAndConsume_tmpCoordsL3_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
    }
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->tmpCoordsL3_)) setXWithDouble:self->xRW_ - [self getStartPointX]];
    [self->tmpCoordsL3_ setYWithDouble:self->yRW_ - [self getStartPointY]];
    [self->tmpCoordsL3_ setZWithDouble:1];
    [g translateWithGeogebraCommonKernelMatrixCoords:self->tmpCoordsL3_];
  }
  if (repaint) {
    [self->movedGeoImplicitPoly_ updateRepaint];
  }
  else {
    [self->movedGeoImplicitPoly_ updateCascade];
  }
}

void GeogebraCommonEuclidianEuclidianController_moveFreehandWithBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean repaint) {
  [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->movedGeoFunction_)) setWithGeogebraCommonKernelGeosGeoElement:self->tempFunction_];
  [self->movedGeoFunction_ translateWithDouble:self->xRW_ - [self getStartPointX] withDouble:self->yRW_ - [self getStartPointY]];
  [self setStartPointLocationWithDouble:self->xRW_ withDouble:self->yRW_];
  if (repaint) {
    [self->movedGeoFunction_ updateRepaint];
  }
  else {
    [self->movedGeoFunction_ updateCascade];
  }
}

void GeogebraCommonEuclidianEuclidianController_moveFunctionWithBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean repaint) {
  jboolean quadratic = NO;
  if ([self isAltDown]) {
    if (!JavaLangDouble_isNaNWithDouble_(self->vertexX_) && [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->movedGeoFunction_)) isIndependent]) {
      quadratic = YES;
    }
    else {
      GeogebraCommonKernelArithmeticExpressionNode *en = [((GeogebraCommonKernelArithmeticFunction *) nil_chk([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->movedGeoFunction_)) getFunction])) getExpression];
      if (GeogebraCommonPluginOperationEnum_isSimpleFunctionWithGeogebraCommonPluginOperationEnum_([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) getOperation])) {
        id<GeogebraCommonKernelArithmeticExpressionValue> arg = [en getLeft];
        if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(arg)) isExpressionNode]) {
          GeogebraCommonKernelArithmeticExpressionNode *enArg = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(arg, [GeogebraCommonKernelArithmeticExpressionNode class]);
          GeogebraCommonPluginOperationEnum *op2 = [enArg getOperation];
          if ([((GeogebraCommonPluginOperationEnum *) nil_chk(op2)) isEqual:GeogebraCommonPluginOperationEnum_get_PLUS()] || [op2 isEqual:GeogebraCommonPluginOperationEnum_get_MINUS()]) {
            id<GeogebraCommonKernelArithmeticExpressionValue> left = [enArg getLeft];
            id<GeogebraCommonKernelArithmeticExpressionValue> right = [enArg getRight];
            if (!([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) isExpressionNode]) && !([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isExpressionNode])) {
              return;
            }
            if ([left isKindOfClass:[GeogebraCommonKernelArithmeticMyDouble class]]) {
              enArg = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [GeogebraCommonKernelArithmeticExpressionNode class]);
              op2 = [enArg getOperation];
            }
            else if ([right isKindOfClass:[GeogebraCommonKernelArithmeticMyDouble class]]) {
              enArg = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [GeogebraCommonKernelArithmeticExpressionNode class]);
              op2 = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(enArg)) getOperation];
            }
            else {
              return;
            }
          }
          if ([((GeogebraCommonPluginOperationEnum *) nil_chk(op2)) isEqual:GeogebraCommonPluginOperationEnum_get_MULTIPLY()]) {
            id<GeogebraCommonKernelArithmeticExpressionValue> left = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(enArg)) getLeft];
            id<GeogebraCommonKernelArithmeticExpressionValue> right = [enArg getRight];
            if ([left isKindOfClass:[GeogebraCommonKernelArithmeticFunctionVariable class]] && [right isKindOfClass:[GeogebraCommonKernelArithmeticMyDouble class]]) {
              id<GeogebraCommonKernelArithmeticExpressionValue> tmp = right;
              right = left;
              left = tmp;
            }
            if ([right isKindOfClass:[GeogebraCommonKernelArithmeticFunctionVariable class]] && [left isKindOfClass:[GeogebraCommonKernelArithmeticMyDouble class]]) {
              if (JavaLangDouble_isNaNWithDouble_(self->initxRW_)) {
                self->initxRW_ = self->xRW_;
                self->initFactor_ = [((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(((GeogebraCommonKernelArithmeticMyDouble *) check_class_cast(left, [GeogebraCommonKernelArithmeticMyDouble class])))) getDouble];
                return;
              }
              [((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(((GeogebraCommonKernelArithmeticMyDouble *) check_class_cast(left, [GeogebraCommonKernelArithmeticMyDouble class])))) setWithDouble:self->initxRW_ / self->xRW_ * self->initFactor_];
              [self->movedGeoFunction_ updateRepaint];
            }
          }
        }
      }
      return;
    }
  }
  if (quadratic) {
    jdouble p = (self->yRW_ - self->vertexY_) / ((self->xRW_ - self->vertexX_) * (self->xRW_ - self->vertexX_));
    GeogebraCommonKernelArithmeticMyDouble *a = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, p) autorelease];
    GeogebraCommonKernelArithmeticMyDouble *h = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, self->vertexX_) autorelease];
    GeogebraCommonKernelArithmeticMyDouble *k = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, self->vertexY_) autorelease];
    GeogebraCommonKernelArithmeticFunctionVariable *fv = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_(self->kernel_) autorelease];
    GeogebraCommonKernelArithmeticExpressionNode *squareE = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, fv, GeogebraCommonPluginOperationEnum_get_MINUS(), h) autorelease]) powerWithGeogebraCommonKernelArithmeticExpressionValue:[new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 2) autorelease]])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:a])) plusWithGeogebraCommonKernelArithmeticExpressionValue:k];
    GeogebraCommonKernelArithmeticFunction *squareF = [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(squareE, fv) autorelease];
    [squareF initFunction];
    GeogebraCommonKernelGeosGeoFunction *square = [new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction]) autorelease];
    [square setFunctionWithGeogebraCommonKernelArithmeticFunction:squareF];
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->movedGeoFunction_)) setWithGeogebraCommonKernelGeosGeoElement:square];
  }
  else {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->movedGeoFunction_)) setWithGeogebraCommonKernelGeosGeoElement:self->tempFunction_];
    [self->movedGeoFunction_ translateWithDouble:self->xRW_ - [self getStartPointX] withDouble:self->yRW_ - [self getStartPointY]];
  }
  if (repaint) {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->movedGeoFunction_)) updateRepaint];
  }
  else {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->movedGeoFunction_)) updateCascade];
  }
}

void GeogebraCommonEuclidianEuclidianController_moveBooleanWithBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean repaint) {
  [((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(self->movedGeoBoolean_)) setAbsoluteScreenLocWithInt:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toScreenCoordXWithDouble:self->xRW_ - [self getStartPointX]] withInt:[self->view_ toScreenCoordYWithDouble:self->yRW_ - [self getStartPointY]]];
  if (repaint) {
    [self->movedGeoBoolean_ updateRepaint];
  }
  else {
    [self->movedGeoBoolean_ updateCascade];
  }
}

void GeogebraCommonEuclidianEuclidianController_moveButtonWithBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean repaint) {
  [((id<GeogebraCommonKernelGeosFurniture>) nil_chk(self->movedGeoButton_)) setAbsoluteScreenLocWithInt:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toScreenCoordXWithDouble:self->xRW_ - [self getStartPointX]] withInt:[self->view_ toScreenCoordYWithDouble:self->yRW_ - [self getStartPointY]]];
  if (repaint) {
    [self->movedGeoButton_ updateRepaint];
  }
  else {
    [self->movedGeoButton_ updateCascade];
  }
}

jdouble GeogebraCommonEuclidianEuclidianController_getSliderValueWithGeogebraCommonKernelGeosGeoNumeric_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonKernelGeosGeoNumeric *movedSlider, jboolean click) {
  jdouble min = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(movedSlider)) getIntervalMin];
  jdouble max = [movedSlider getIntervalMax];
  jdouble param;
  if ([movedSlider isSliderHorizontal]) {
    if ([movedSlider isAbsoluteScreenLocActive]) {
      param = ((GeogebraCommonAwtGPoint *) nil_chk(self->mouseLoc_))->x_ - [self getStartPointX];
    }
    else {
      param = self->xRW_ - [self getStartPointX];
    }
  }
  else {
    if ([movedSlider isAbsoluteScreenLocActive]) {
      param = [self getStartPointY] - ((GeogebraCommonAwtGPoint *) nil_chk(self->mouseLoc_))->y_;
    }
    else {
      param = self->yRW_ - [self getStartPointY];
    }
  }
  param = JavaLangMath_maxWithDouble_withDouble_(0, JavaLangMath_minWithDouble_withDouble_([movedSlider getSliderWidth], param));
  param = (param * (max - min)) / [movedSlider getSliderWidth];
  param = GeogebraCommonKernelKernel_roundToScaleWithDouble_withDouble_(param, [movedSlider getAnimationStep]);
  jdouble val = min + param;
  if ([movedSlider getAnimationStep] > GeogebraCommonKernelKernel_MIN_PRECISION) {
    val = GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(val);
  }
  if ([movedSlider isGeoAngle]) {
    val = GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(val * GeogebraCommonKernelKernel_CONST_180_PI) / GeogebraCommonKernelKernel_CONST_180_PI;
  }
  if (!click) {
    return val;
  }
  if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(val, [movedSlider getValue])) {
    return val;
  }
  if (val > [movedSlider getValue]) {
    return JavaLangMath_minWithDouble_withDouble_([movedSlider getValue] + [movedSlider getAnimationStep], [movedSlider getIntervalMax]);
  }
  return JavaLangMath_maxWithDouble_withDouble_([movedSlider getValue] - [movedSlider getAnimationStep], [movedSlider getIntervalMin]);
}

void GeogebraCommonEuclidianEuclidianController_moveNumericWithBoolean_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean repaint, jboolean click) {
  jdouble newVal = GeogebraCommonEuclidianEuclidianController_getSliderValueWithGeogebraCommonKernelGeosGeoNumeric_withBoolean_(self, self->movedGeoNumeric_, click);
  jdouble oldVal = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->movedGeoNumeric_)) getValue];
  jdouble min = [self->movedGeoNumeric_ getIntervalMin];
  if ((min == oldVal) && (newVal < min)) {
    return;
  }
  jdouble max = [self->movedGeoNumeric_ getIntervalMax];
  if ((max == oldVal) && (newVal > max)) {
    return;
  }
  if (oldVal == newVal) {
    return;
  }
  [self->movedGeoNumeric_ setValueWithDouble:newVal];
  self->movedGeoNumericDragged_ = YES;
  [self->movedGeoNumeric_ updateRepaint];
}

void GeogebraCommonEuclidianEuclidianController_moveSliderWithBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean repaint) {
  if ([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->movedGeoNumeric_)) isAbsoluteScreenLocActive]) {
    [self->movedGeoNumeric_ setAbsoluteScreenLocWithInt:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toScreenCoordXWithDouble:self->xRW_ - [self getStartPointX]] withInt:[self->view_ toScreenCoordYWithDouble:self->yRW_ - [self getStartPointY]] withBoolean:self->temporaryMode_];
  }
  else {
    [self->movedGeoNumeric_ setSliderLocationWithDouble:self->xRW_ - [self getStartPointX] withDouble:self->yRW_ - [self getStartPointY] withBoolean:self->temporaryMode_];
  }
  [self->movedGeoNumeric_ update];
  if (repaint) {
    [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) notifyRepaint];
  }
}

void GeogebraCommonEuclidianEuclidianController_moveAttachedWithBoolean_(GeogebraCommonEuclidianEuclidianController *self, jboolean repaint) {
  GeogebraCommonKernelAlgosAlgoElement *algo = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->movedGeoElement_)) getParentAlgorithm];
  GeogebraCommonKernelGeosGeoPoint *pt1 = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getInput]), 4), [GeogebraCommonKernelGeosGeoPoint class]);
  GeogebraCommonKernelGeosGeoPoint *pt2 = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([algo getInput]), 5), [GeogebraCommonKernelGeosGeoPoint class]);
  jdouble dx = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getXscale] * (self->xRW_ - [self getStartPointX]);
  jdouble dy = [self->view_ getYscale] * (self->yRW_ - [self getStartPointY]);
  [self setStartPointLocationWithDouble:self->xRW_ withDouble:self->yRW_];
  [pt1 setCoordsWithDouble:[((GeogebraCommonKernelGeosGeoPoint *) nil_chk(pt1)) getX] + dx withDouble:[pt1 getY] - dy withDouble:1];
  [pt2 setCoordsWithDouble:[((GeogebraCommonKernelGeosGeoPoint *) nil_chk(pt2)) getX] + dx withDouble:[pt2 getY] - dy withDouble:1];
  [algo update];
  if (repaint) {
    [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) notifyRepaint];
  }
}

jboolean GeogebraCommonEuclidianEuclidianController_handleMovedElementFreePoint(GeogebraCommonEuclidianEuclidianController *self) {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->movedGeoElement_)) isGeoPoint]) {
    self->moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_POINT;
    [self setMovedGeoPointWithGeogebraCommonKernelGeosGeoElement:self->movedGeoElement_];
    *IOSDoubleArray_GetRef(nil_chk(self->transformCoordsOffset_), 0) = 0;
    *IOSDoubleArray_GetRef(self->transformCoordsOffset_, 1) = 0;
    return YES;
  }
  return NO;
}

jboolean GeogebraCommonEuclidianEuclidianController_handleMovedElementFreeText(GeogebraCommonEuclidianEuclidianController *self) {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->movedGeoElement_)) isGeoText]) {
    self->moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_TEXT;
    GeogebraCommonEuclidianEuclidianController_set_movedGeoText_(self, (GeogebraCommonKernelGeosGeoText *) check_class_cast(self->movedGeoElement_, [GeogebraCommonKernelGeosGeoText class]));
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) setShowMouseCoordsWithBoolean:NO];
    [self->view_ setDragCursor];
    if ([self->movedGeoText_ isAbsoluteScreenLocActive]) {
      [((GeogebraCommonAwtGPoint *) nil_chk(self->oldLoc_)) setLocationWithInt:[self->movedGeoText_ getAbsoluteScreenLocX] withInt:[self->movedGeoText_ getAbsoluteScreenLocY]];
      GeogebraCommonEuclidianEuclidianController_set_startLoc_(self, self->mouseLoc_);
    }
    else if ([self->movedGeoText_ hasAbsoluteLocation]) {
      GeogebraCommonKernelGeosGeoPoint *loc = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([self->movedGeoText_ getStartPoint], [GeogebraCommonKernelGeosGeoPoint class]);
      if (loc == nil) {
        loc = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction]) autorelease];
        [loc setCoordsWithDouble:0 withDouble:0 withDouble:1.0];
        @try {
          [self->movedGeoText_ setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:loc];
        }
        @catch (JavaLangException *ex) {
          [((JavaLangException *) nil_chk(ex)) printStackTrace];
        }
        [self setStartPointLocation];
      }
      else {
        [self setStartPointLocationWithOriginWithDouble:loc->inhomX_ withDouble:loc->inhomY_];
        GeogebraCommonKernelGeosGeoPoint *loc2 = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelGeosGeoPoint_(loc) autorelease];
        [self->movedGeoText_ setNeedsUpdatedBoundingBoxWithBoolean:YES];
        [self->movedGeoText_ update];
        [loc2 setCoordsWithDouble:[((id<GeogebraCommonAwtGRectangle2D>) nil_chk([self->movedGeoText_ getBoundingBox])) getX] withDouble:[((id<GeogebraCommonAwtGRectangle2D>) nil_chk([self->movedGeoText_ getBoundingBox])) getY] withDouble:1.0];
        *IOSDoubleArray_GetRef(nil_chk(self->transformCoordsOffset_), 0) = loc2->inhomX_ - self->xRW_;
        *IOSDoubleArray_GetRef(self->transformCoordsOffset_, 1) = loc2->inhomY_ - self->yRW_;
      }
    }
    else {
      [((GeogebraCommonAwtGPoint *) nil_chk(self->oldLoc_)) setLocationWithInt:self->movedGeoText_->labelOffsetX_ withInt:self->movedGeoText_->labelOffsetY_];
      GeogebraCommonEuclidianEuclidianController_set_startLoc_(self, self->mouseLoc_);
    }
    return YES;
  }
  return NO;
}

void GeogebraCommonEuclidianEuclidianController_addMovedGeoElementFreeInputPointsToTranslateableGeos(GeogebraCommonEuclidianEuclidianController *self) {
  JavaUtilArrayList *freeInputPoints = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->movedGeoElement_)) getFreeInputPointsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:self->view_];
  for (id<GeogebraCommonKernelKernelNDGeoPointND> __strong p in nil_chk(freeInputPoints)) {
    [((JavaUtilArrayList *) nil_chk(self->translateableGeos_)) addWithId:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(p, [GeogebraCommonKernelGeosGeoElement class])];
  }
}

jboolean GeogebraCommonEuclidianEuclidianController_isCheckboxFixedWithGeogebraCommonKernelGeosGeoBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonKernelGeosGeoBoolean *geoBool) {
  return [((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(geoBool)) isCheckboxFixed] || ([((GeogebraCommonMainApp *) nil_chk(self->app_)) isHTML5Applet] && !GeogebraCommonMainApp_isFullAppGui());
}

void GeogebraCommonEuclidianEuclidianController_handleMousePressedForMoveModeWithGeogebraCommonEuclidianEventAbstractEvent_withBoolean_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianEventAbstractEvent *e, jboolean drag) {
  if ([((GeogebraCommonMainApp *) nil_chk(self->app_)) isControlDownWithGeogebraCommonEuclidianEventAbstractEvent:e]) {
    return;
  }
  GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getLabelHitWithGeogebraCommonAwtGPoint:self->mouseLoc_ withGeogebraCommonEuclidianEventPointerEventTypeEnum:[((GeogebraCommonEuclidianEventAbstractEvent *) nil_chk(e)) getType]];
  if (geo != nil) {
    self->moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_LABEL;
    GeogebraCommonEuclidianEuclidianController_set_movedLabelGeoElement_(self, geo);
    [((GeogebraCommonAwtGPoint *) nil_chk(self->oldLoc_)) setLocationWithInt:geo->labelOffsetX_ withInt:geo->labelOffsetY_];
    GeogebraCommonEuclidianEuclidianController_set_startLoc_(self, self->mouseLoc_);
    [self->view_ setDragCursor];
    return;
  }
  [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:[e getType]];
  GeogebraCommonEuclidianHits *viewHits = [self->view_ getHits];
  [((GeogebraCommonEuclidianHits *) nil_chk(viewHits)) removePolygons];
  GeogebraCommonEuclidianHits *moveableList;
  if (drag) {
    moveableList = [viewHits getMoveableHitsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:self->view_];
  }
  else {
    moveableList = viewHits;
  }
  GeogebraCommonEuclidianHits *hits = [((GeogebraCommonEuclidianHits *) nil_chk(moveableList)) getTopHits];
  JavaUtilArrayList *selGeos = [self getAppSelectedGeos];
  if (([((JavaUtilArrayList *) nil_chk(selGeos)) size] == 1) && ![((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty] && [hits containsWithId:[selGeos getWithInt:0]]) {
    geo = [selGeos getWithInt:0];
  }
  else {
    geo = [self chooseGeoWithJavaUtilArrayList:hits withBoolean:NO];
    if (![selGeos containsWithId:geo]) {
      [((GeogebraCommonMainSelectionManager *) nil_chk(self->selection_)) clearSelectedGeosWithBoolean:geo == nil withBoolean:NO];
      [self->selection_ updateSelectionWithBoolean:NO];
      [self->selection_ addSelectedGeoWithGeogebraCommonKernelGeosGeoElement:geo withBoolean:YES withBoolean:YES];
    }
  }
  GeogebraCommonEuclidianHits *th = [viewHits getTopHits];
  if (geo == nil && [((GeogebraCommonEuclidianHits *) nil_chk(th)) size] > 0) {
    geo = [th getWithInt:0];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isFixed]) {
      [self runScriptsIfNeededWithGeogebraCommonKernelGeosGeoElement:geo];
      self->moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_NONE;
      [self resetMovedGeoPoint];
      return;
    }
  }
  if ((geo != nil) && ![geo isFixed]) {
    self->moveModeSelectionHandled_ = YES;
  }
  else {
    self->moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_NONE;
    [self resetMovedGeoPoint];
    return;
  }
  [self handleMovedElementWithGeogebraCommonKernelGeosGeoElement:geo withBoolean:[selGeos size] > 1 withGeogebraCommonEuclidianEventPointerEventTypeEnum:[e getType]];
  [self->view_ repaintView];
}

void GeogebraCommonEuclidianEuclidianController_translateHitsByVectorWithGeogebraCommonEuclidianEventPointerEventTypeEnum_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianEventPointerEventTypeEnum *type) {
  [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
  GeogebraCommonEuclidianHits *hits = [((GeogebraCommonEuclidianHits *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getHits])) getTopHits];
  GeogebraCommonKernelGeosGeoElement *topHit = [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getWithInt:0];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(topHit)) isGeoVector]) {
    if (([[topHit getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoVector class]])) {
      GeogebraCommonKernelAlgosAlgoVector *algo = (GeogebraCommonKernelAlgosAlgoVector *) check_class_cast([topHit getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoVector class]);
      id<GeogebraCommonKernelKernelNDGeoPointND> p = [((JavaUtilArrayList *) nil_chk([((GeogebraCommonKernelAlgosAlgoVector *) nil_chk(algo)) getInputPoints])) getWithInt:0];
      id<GeogebraCommonKernelKernelNDGeoPointND> q = [((JavaUtilArrayList *) nil_chk([algo getInputPoints])) getWithInt:1];
      [self checkZooming];
      GeogebraCommonKernelGeosGeoVector *vec = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) VectorWithNSString:nil withDouble:0 withDouble:0];
      [((GeogebraCommonKernelGeosGeoVector *) nil_chk(vec)) setEuclidianVisibleWithBoolean:NO];
      [vec setAuxiliaryObjectWithBoolean:YES];
      IOSObjectArray *pp = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) TranslateWithNSString:nil withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(p, [GeogebraCommonKernelGeosGeoElement class]) withGeogebraCommonKernelGeosGeoVec3D:vec];
      IOSObjectArray *qq = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) TranslateWithNSString:nil withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(q, [GeogebraCommonKernelGeosGeoElement class]) withGeogebraCommonKernelGeosGeoVec3D:vec];
      GeogebraCommonKernelAlgosAlgoVector *newVecAlgo = [new_GeogebraCommonKernelAlgosAlgoVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction], nil, (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(nil_chk(pp), 0), @protocol(GeogebraCommonKernelKernelNDGeoPointND)), (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(nil_chk(qq), 0), @protocol(GeogebraCommonKernelKernelNDGeoPointND))) autorelease];
      [self setTranslateStartWithGeogebraCommonKernelGeosGeoElement:topHit withGeogebraCommonKernelKernelNDGeoVectorND:vec];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(pp, 0))) setEuclidianVisibleWithBoolean:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p)) isEuclidianVisible]];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(qq, 0))) update];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(qq, 0))) setEuclidianVisibleWithBoolean:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(q)) isEuclidianVisible]];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(qq, 0))) update];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk([newVecAlgo getGeoElements]), 0))) setVisualStyleForTransformationsWithGeogebraCommonKernelGeosGeoElement:topHit];
      [((GeogebraCommonMainApp *) nil_chk(self->app_)) setModeWithInt:GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE];
      GeogebraCommonEuclidianEuclidianController_set_movedGeoVector_(self, vec);
      self->moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_VECTOR_NO_GRID;
      return;
    }
    GeogebraCommonEuclidianEuclidianController_setAndConsume_movedGeoPoint_(self, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction], nil, 0, 0, 0));
    GeogebraCommonKernelAlgosAlgoTranslate *algoTP = [new_GeogebraCommonKernelAlgosAlgoTranslate_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoVec3D_([self->kernel_ getConstruction], nil, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->movedGeoPoint_, [GeogebraCommonKernelGeosGeoElement class]), (GeogebraCommonKernelGeosGeoVec3D *) check_class_cast(topHit, [GeogebraCommonKernelGeosGeoVec3D class])) autorelease];
    GeogebraCommonKernelGeosGeoPoint *p = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([algoTP getGeoElements]), 0), [GeogebraCommonKernelGeosGeoPoint class]);
    GeogebraCommonKernelAlgosAlgoVector *newVecAlgo = [new_GeogebraCommonKernelAlgosAlgoVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_([self->kernel_ getConstruction], nil, self->movedGeoPoint_, p) autorelease];
    [((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(self->movedGeoPoint_, [GeogebraCommonKernelGeosGeoPoint class])) setEuclidianVisibleWithBoolean:NO];
    [((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(self->movedGeoPoint_, [GeogebraCommonKernelGeosGeoPoint class])) update];
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) setEuclidianVisibleWithBoolean:NO];
    [p update];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk([newVecAlgo getGeoElements]), 0))) setVisualStyleForTransformationsWithGeogebraCommonKernelGeosGeoElement:topHit];
    self->moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_POINT;
  }
  if ([topHit isTranslateable] || [GeogebraCommonKernelGeosGeoPoly_class_() isInstance:topHit]) {
    id<GeogebraCommonKernelKernelNDGeoVectorND> vec;
    if ([GeogebraCommonKernelGeosGeoPoly_class_() isInstance:topHit]) {
      vec = [self createVectorForTranslationWithNSString:nil];
      [((id<GeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(vec)) setEuclidianVisibleWithBoolean:NO];
      [((GeogebraCommonKernelGeosGeoElement *) check_class_cast(vec, [GeogebraCommonKernelGeosGeoElement class])) setAuxiliaryObjectWithBoolean:YES];
    }
    else {
      vec = [self createVectorForTranslation];
    }
    [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) TranslateNDWithNSString:nil withGeogebraCommonKernelGeosGeoElement:topHit withGeogebraCommonKernelKernelNDGeoVectorND:vec];
    [self setTranslateStartWithGeogebraCommonKernelGeosGeoElement:topHit withGeogebraCommonKernelKernelNDGeoVectorND:vec];
    [((GeogebraCommonMainApp *) nil_chk(self->app_)) setModeWithInt:GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE withGeogebraCommonKernelModeSetterEnum:GeogebraCommonKernelModeSetterEnum_get_TOOLBAR()];
    GeogebraCommonEuclidianEuclidianController_set_movedGeoVector_(self, vec);
    self->moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_VECTOR_NO_GRID;
    return;
  }
}

jboolean GeogebraCommonEuclidianEuclidianController_penModeWithInt_(jint mode2) {
  GeogebraCommonEuclidianEuclidianController_initialize();
  switch (mode2) {
    case GeogebraCommonEuclidianEuclidianConstants_MODE_PEN:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_FREEHAND_SHAPE:
    return YES;
  }
  return NO;
}

void GeogebraCommonEuclidianEuclidianController_mousePressedTranslatedViewWithGeogebraCommonEuclidianEventPointerEventTypeEnum_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianEventPointerEventTypeEnum *type) {
  GeogebraCommonEuclidianHits *hits;
  [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
  hits = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getHits];
  [((GeogebraCommonEuclidianHits *) nil_chk(hits)) removePolygons];
  self->moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_VIEW;
  if (![hits isEmpty] && [self moveAxesPossible]) {
    for (id __strong hit in hits) {
      if (hit == [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getXAxis]) {
        self->moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_X_AXIS;
      }
      if (hit == [self->kernel_ getYAxis]) {
        self->moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_Y_AXIS;
      }
    }
  }
  GeogebraCommonEuclidianEuclidianController_set_startLoc_(self, self->mouseLoc_);
  [self setDragCursorIfMoveView];
  [self->view_ rememberOrigins];
  self->xTemp_ = self->xRW_;
  self->yTemp_ = self->yRW_;
  [self->view_ setShowAxesRatioWithBoolean:(self->moveMode__ == GeogebraCommonEuclidianEuclidianController_MOVE_X_AXIS) || (self->moveMode__ == GeogebraCommonEuclidianEuclidianController_MOVE_Y_AXIS)];
}

jboolean GeogebraCommonEuclidianEuclidianController_shallMoveViewWithGeogebraCommonEuclidianEventAbstractEvent_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianEventAbstractEvent *event) {
  if (![((GeogebraCommonMainApp *) nil_chk(self->app_)) isPrerelease]) {
    return [self->app_ isShiftDragZoomEnabled] && (([((GeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) isShiftDown] && ![self->app_ isControlDownWithGeogebraCommonEuclidianEventAbstractEvent:event]) || ([event isControlDown] && [self->app_ isWindows]) || [self->app_ isMiddleClickWithGeogebraCommonEuclidianEventAbstractEvent:event]);
  }
  return !self->doubleClickStarted_ && self->mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE;
}

jboolean GeogebraCommonEuclidianEuclidianController_modeCreatesHelperPointsWithInt_(GeogebraCommonEuclidianEuclidianController *self, jint mode2) {
  switch (mode2) {
    case GeogebraCommonEuclidianEuclidianConstants_MODE_SEGMENT:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_SEGMENT_FIXED:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_JOIN:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_RAY:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_VECTOR:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_TWO_POINTS:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_POINT_RADIUS:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_THREE_POINTS:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_ELLIPSE_THREE_POINTS:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_HYPERBOLA_THREE_POINTS:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_ARC_THREE_POINTS:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_SECTOR_THREE_POINTS:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCUMCIRCLE_ARC_THREE_POINTS:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCUMCIRCLE_SECTOR_THREE_POINTS:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_SEMICIRCLE:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CONIC_FIVE_POINTS:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_POLYGON:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_POLYLINE:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_REGULAR_POLYGON:
    return YES;
  }
  return NO;
}

void GeogebraCommonEuclidianEuclidianController_altClickedWithGeogebraCommonEuclidianEventPointerEventTypeEnum_(GeogebraCommonEuclidianEuclidianController *self, GeogebraCommonEuclidianEventPointerEventTypeEnum *type) {
  [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
  GeogebraCommonEuclidianHits *hits = [((GeogebraCommonEuclidianHits *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getHits])) getTopHits];
  if ((hits != nil) && ([hits size] > 0)) {
    [hits removePolygons];
    GeogebraCommonKernelGeosGeoElement *geo = [hits getWithInt:0];
    if (self->mode_ != GeogebraCommonEuclidianEuclidianConstants_MODE_ATTACH_DETACH) {
      [((GeogebraCommonMainGlobalKeyDispatcher *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getGlobalKeyDispatcher])) handleFunctionKeyForAlgebraInputWithInt:3 withGeogebraCommonKernelGeosGeoElement:geo];
    }
    self->moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_NONE;
    return;
  }
}

void GeogebraCommonEuclidianEuclidianController_processRightReleasedWithBoolean_withBoolean_withGeogebraCommonEuclidianEventPointerEventTypeEnum_(GeogebraCommonEuclidianEuclidianController *self, jboolean right, jboolean control, GeogebraCommonEuclidianEventPointerEventTypeEnum *type) {
  if (![((GeogebraCommonMainApp *) nil_chk(self->app_)) isRightClickEnabled]) {
    return;
  }
  if (![self->app_ isPrerelease] && type != GeogebraCommonEuclidianEventPointerEventTypeEnum_get_TOUCH() && [self processZoomRectangle]) {
    return;
  }
  if (([self->app_ isMacOS] && control) || !right) {
    return;
  }
  if (self->draggingOccured_ && [self->app_ isPrerelease]) {
    if ([self allowSelectionRectangle]) {
      [self processSelectionRectangleWithBoolean:NO withBoolean:control];
      return;
    }
  }
  [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
  GeogebraCommonEuclidianHits *hits = [((GeogebraCommonEuclidianHits *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getHits])) getTopHits];
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    if ([self->app_ isUsingFullGui] && [self->app_ getGuiManager] != nil) {
      if ([self->view_ getSelectionRectangle] != nil) {
        [self processSelectionRectangleWithBoolean:NO withBoolean:control];
        return;
      }
      else if ([((GeogebraCommonMainSelectionManager *) nil_chk(self->selection_)) selectedGeosSize] > 0) {
        [self showPopupMenuChooseGeoWithJavaUtilArrayList:[self getAppSelectedGeos] withGeogebraCommonEuclidianHits:hits];
      }
      else {
        [self showDrawingPadPopupWithGeogebraCommonAwtGPoint:self->mouseLoc_];
      }
    }
  }
  else {
    if ([((GeogebraCommonMainSelectionManager *) nil_chk(self->selection_)) selectedGeosSize] > 0) {
      if (self->mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE) {
        if (![hits intersectWithJavaUtilArrayList:[self getAppSelectedGeos]]) {
          [self->selection_ clearSelectedGeosWithBoolean:NO];
          [self->selection_ addSelectedGeosWithJavaUtilArrayList:hits withBoolean:YES];
        }
        else {
        }
        if ([self->app_ isUsingFullGui] && [self->app_ getGuiManager] != nil) {
          [self showPopupMenuChooseGeoWithJavaUtilArrayList:[self getAppSelectedGeos] withGeogebraCommonEuclidianHits:hits];
        }
      }
      else {
        if ([self->app_ isUsingFullGui] && [self->app_ getGuiManager] != nil) {
          GeogebraCommonKernelGeosGeoElement *geo = [self chooseGeoWithJavaUtilArrayList:hits withBoolean:YES withBoolean:NO];
          if (geo == nil) [self showDrawingPadPopupWithGeogebraCommonAwtGPoint:self->mouseLoc_];
          else {
            JavaUtilArrayList *geos = [new_JavaUtilArrayList_init() autorelease];
            [geos addWithId:geo];
            [self showPopupMenuChooseGeoWithJavaUtilArrayList:geos withGeogebraCommonEuclidianHits:hits];
          }
        }
      }
    }
    else {
      if ([self->app_ isUsingFullGui] && [self->app_ getGuiManager] != nil) {
        GeogebraCommonKernelGeosGeoElement *geo = [self chooseGeoWithJavaUtilArrayList:hits withBoolean:YES withBoolean:NO];
        if (geo == nil) [self showDrawingPadPopupWithGeogebraCommonAwtGPoint:self->mouseLoc_];
        else {
          JavaUtilArrayList *geos = [new_JavaUtilArrayList_init() autorelease];
          [geos addWithId:geo];
          [self showPopupMenuChooseGeoWithJavaUtilArrayList:geos withGeogebraCommonEuclidianHits:hits];
        }
      }
    }
  }
}

GeogebraCommonEuclidianEuclidianPen *GeogebraCommonEuclidianEuclidianController_getPen(GeogebraCommonEuclidianEuclidianController *self) {
  if (self->pen_ == nil) {
    GeogebraCommonEuclidianEuclidianController_setAndConsume_pen_(self, new_GeogebraCommonEuclidianEuclidianPen_initWithGeogebraCommonMainApp_withGeogebraCommonEuclidianEuclidianView_(self->app_, self->view_));
  }
  return self->pen_;
}

void GeogebraCommonEuclidianEuclidianController_twoTouchStartCommonWithDouble_withDouble_withDouble_withDouble_(GeogebraCommonEuclidianEuclidianController *self, jdouble x1, jdouble y1, jdouble x2, jdouble y2) {
  self->oldDistance_ = GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(x1 - x2, y1 - y2);
}

void GeogebraCommonEuclidianEuclidianController_twoTouchMoveCommonWithDouble_withDouble_withDouble_withDouble_(GeogebraCommonEuclidianEuclidianController *self, jdouble x1, jdouble y1, jdouble x2, jdouble y2) {
  jint centerX, centerY;
  jdouble newDistance;
  centerX = J2ObjCFpToInt((x1 + x2)) / 2;
  centerY = J2ObjCFpToInt((y1 + y2)) / 2;
  if (self->oldDistance_ > 0) {
    newDistance = GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(x1 - x2, y1 - y2);
    if (JavaLangMath_absWithDouble_(newDistance - self->oldDistance_) > GeogebraCommonEuclidianEuclidianController_MINIMAL_PIXEL_DIFFERENCE_FOR_ZOOM) {
      [self onPinchWithInt:centerX withInt:centerY withDouble:newDistance / self->oldDistance_];
      self->oldDistance_ = newDistance;
    }
  }
}

void GeogebraCommonEuclidianEuclidianController_moveAttachDetachWithBoolean_withGeogebraCommonEuclidianEventAbstractEvent_(GeogebraCommonEuclidianEuclidianController *self, jboolean repaint, GeogebraCommonEuclidianEventAbstractEvent *event) {
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->movedGeoPoint_)) isPointOnPath] || [self->movedGeoPoint_ isPointInRegion]) {
    jint th = [((GeogebraCommonMainApp *) nil_chk(self->app_)) getCapturingThresholdWithGeogebraCommonEuclidianEventPointerEventTypeEnum:GeogebraCommonEuclidianEventPointerEventTypeEnum_get_MOUSE()];
    [self->app_ setCapturingThresholdWithInt:GeogebraCommonEuclidianEuclidianController_INCREASED_THRESHOLD_FACTOR * th];
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) setHitsWithGeogebraCommonAwtGPoint:[new_GeogebraCommonAwtGPoint_initWithInt_withInt_([((GeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) getX], [event getY]) autorelease] withGeogebraCommonEuclidianEventPointerEventTypeEnum:[event getType]];
    [self->app_ setCapturingThresholdWithInt:th];
  }
  else {
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) setHitsWithGeogebraCommonAwtGPoint:[new_GeogebraCommonAwtGPoint_initWithInt_withInt_([((GeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) getX], [event getY]) autorelease] withGeogebraCommonEuclidianEventPointerEventTypeEnum:[event getType]];
  }
  GeogebraCommonEuclidianHits *hits = [((GeogebraCommonEuclidianHits *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getHits])) clone];
  [((GeogebraCommonEuclidianHits *) nil_chk(hits)) removePolygons];
  if ([self->movedGeoPoint_ isPointOnPath] && ![hits containsWithId:[self->movedGeoPoint_ getPath]]) {
    self->needsAttach_ = NO;
    self->detachFromPath_ = YES;
    self->detachFromRegion_ = NO;
    if (self->detachFrom_ == nil) {
      GeogebraCommonEuclidianEuclidianController_set_detachFrom_(self, [self->movedGeoPoint_ getPath]);
    }
    GeogebraCommonEuclidianEuclidianController_addToSelectionListWithJavaUtilArrayList_withId_withInt_(self, self->selectedPaths_, [self->movedGeoPoint_ getPath], 1);
    [((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(self->movedGeoPoint_, [GeogebraCommonKernelGeosGeoPoint class])) removePath];
    [self->movedGeoPoint_ setCoordsWithDouble:[self->view_ toRealWorldCoordXWithDouble:[((GeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) getX]] withDouble:[self->view_ toRealWorldCoordYWithDouble:[event getY]] withDouble:1];
  }
  else if ([self->movedGeoPoint_ isPointInRegion] && ![((GeogebraCommonEuclidianHits *) nil_chk([self->view_ getHits])) containsWithId:[self->movedGeoPoint_ getRegion]]) {
    self->needsAttach_ = NO;
    self->detachFromPath_ = NO;
    self->detachFromRegion_ = YES;
    if (self->detachFrom_ == nil) {
      GeogebraCommonEuclidianEuclidianController_set_detachFrom_(self, [self->movedGeoPoint_ getRegion]);
    }
    GeogebraCommonEuclidianEuclidianController_addToSelectionListWithJavaUtilArrayList_withId_withInt_(self, self->selectedRegions_, [self->movedGeoPoint_ getRegion], 1);
    [((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(self->movedGeoPoint_, [GeogebraCommonKernelGeosGeoPoint class])) setRegionWithGeogebraCommonKernelRegion:nil];
    [self->movedGeoPoint_ setCoordsWithDouble:[self->view_ toRealWorldCoordXWithDouble:[((GeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) getX]] withDouble:[self->view_ toRealWorldCoordYWithDouble:[event getY]] withDouble:1];
  }
  else {
    for (jint i = [hits size] - 1; i >= 0; i--) {
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([hits getWithInt:i])) isChildOfWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->movedGeoPoint_, [GeogebraCommonKernelGeosGeoElement class])]) {
        [hits removeWithInt:i];
      }
    }
    GeogebraCommonEuclidianEuclidianController_addSelectedPathWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    if ([((JavaUtilArrayList *) nil_chk(self->selectedPaths_)) size] > 0) {
      self->needsAttach_ = YES;
      [self->movedGeoPoint_ setPathWithGeogebraCommonKernelPath:[self->selectedPaths_ getWithInt:0]];
      [self->movedGeoPoint_ setCoordsWithDouble:[self->view_ toRealWorldCoordXWithDouble:[((GeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) getX]] withDouble:[self->view_ toRealWorldCoordYWithDouble:[event getY]] withDouble:1];
    }
    else {
      [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) movePointWithBoolean:repaint withGeogebraCommonEuclidianEventAbstractEvent:event];
      return;
    }
  }
  [((GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->movedGeoPoint_, [GeogebraCommonKernelGeosGeoElement class])) updateCascade];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianEuclidianController)

@implementation GeogebraCommonEuclidianEuclidianController_$1

- (void)callbackWithId:(id)num {
  if (num == nil) {
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(this$0_->view_)) resetMode];
    if (val$callback2_ != nil) [val$callback2_ callbackWithId:JavaLangBoolean_valueOfWithBoolean_(NO)];
    return;
  }
  if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:num] && [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(num, @protocol(GeogebraCommonKernelArithmeticNumberValue))))) isGeoElement]) {
    [((JavaUtilArrayList *) nil_chk(this$0_->selectedGeos_)) addWithId:[((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(num, @protocol(GeogebraCommonKernelArithmeticNumberValue))))) toGeoElement]];
  }
  [this$0_ readNumberOrAngleIfNeededWithGeogebraCommonUtilAsyncOperation:self];
  if (GeogebraCommonEuclidianEuclidianController_selGeos(this$0_) == ((IOSObjectArray *) nil_chk(this$0_->macroInput_))->size_) {
    [this$0_ macroProcessWithGeogebraCommonUtilAsyncOperation:val$callback2_];
  }
}

- (instancetype)initWithGeogebraCommonEuclidianEuclidianController:(GeogebraCommonEuclidianEuclidianController *)outer$
                              withGeogebraCommonUtilAsyncOperation:(GeogebraCommonUtilAsyncOperation *)capture$0 {
  GeogebraCommonEuclidianEuclidianController_$1_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonUtilAsyncOperation_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$callback2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "callbackWithId:", "callback", "V", 0x1, NULL, NULL },
    { "initWithGeogebraCommonEuclidianEuclidianController:withGeogebraCommonUtilAsyncOperation:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.euclidian.EuclidianController;", NULL, NULL,  },
    { "val$callback2_", NULL, 0x1012, "Lgeogebra.common.util.AsyncOperation;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonEuclidianEuclidianController", "macroWithGeogebraCommonEuclidianHits:withGeogebraCommonUtilAsyncOperation:" };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianEuclidianController_$1 = { 2, "", "geogebra.common.euclidian", "EuclidianController", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_GeogebraCommonEuclidianEuclidianController_$1;
}

@end

void GeogebraCommonEuclidianEuclidianController_$1_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonUtilAsyncOperation_(GeogebraCommonEuclidianEuclidianController_$1 *self, GeogebraCommonEuclidianEuclidianController *outer$, GeogebraCommonUtilAsyncOperation *capture$0) {
  GeogebraCommonEuclidianEuclidianController_$1_set_this$0_(self, outer$);
  GeogebraCommonEuclidianEuclidianController_$1_set_val$callback2_(self, capture$0);
  GeogebraCommonUtilAsyncOperation_init(self);
}

GeogebraCommonEuclidianEuclidianController_$1 *new_GeogebraCommonEuclidianEuclidianController_$1_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonUtilAsyncOperation_(GeogebraCommonEuclidianEuclidianController *outer$, GeogebraCommonUtilAsyncOperation *capture$0) {
  GeogebraCommonEuclidianEuclidianController_$1 *self = [GeogebraCommonEuclidianEuclidianController_$1 alloc];
  GeogebraCommonEuclidianEuclidianController_$1_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonUtilAsyncOperation_(self, outer$, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianEuclidianController_$1)

@implementation GeogebraCommonEuclidianEuclidianController_$2

- (void)callbackWithId:(id)ret {
  [this$0_ memorizeJustCreatedGeosAfterProcessModeWithGeogebraCommonKernelGeosGeoElementArray:nil];
  if (val$callback_ != nil) [val$callback_ callbackWithId:ret];
}

- (instancetype)initWithGeogebraCommonEuclidianEuclidianController:(GeogebraCommonEuclidianEuclidianController *)outer$
                              withGeogebraCommonUtilAsyncOperation:(GeogebraCommonUtilAsyncOperation *)capture$0 {
  GeogebraCommonEuclidianEuclidianController_$2_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonUtilAsyncOperation_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$callback_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "callbackWithId:", "callback", "V", 0x1, NULL, NULL },
    { "initWithGeogebraCommonEuclidianEuclidianController:withGeogebraCommonUtilAsyncOperation:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.euclidian.EuclidianController;", NULL, NULL,  },
    { "val$callback_", NULL, 0x1012, "Lgeogebra.common.util.AsyncOperation;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonEuclidianEuclidianController", "switchModeForProcessModeWithGeogebraCommonEuclidianHits:withBoolean:withGeogebraCommonUtilAsyncOperation:" };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianEuclidianController_$2 = { 2, "", "geogebra.common.euclidian", "EuclidianController", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_GeogebraCommonEuclidianEuclidianController_$2;
}

@end

void GeogebraCommonEuclidianEuclidianController_$2_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonUtilAsyncOperation_(GeogebraCommonEuclidianEuclidianController_$2 *self, GeogebraCommonEuclidianEuclidianController *outer$, GeogebraCommonUtilAsyncOperation *capture$0) {
  GeogebraCommonEuclidianEuclidianController_$2_set_this$0_(self, outer$);
  GeogebraCommonEuclidianEuclidianController_$2_set_val$callback_(self, capture$0);
  GeogebraCommonUtilAsyncOperation_init(self);
}

GeogebraCommonEuclidianEuclidianController_$2 *new_GeogebraCommonEuclidianEuclidianController_$2_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonUtilAsyncOperation_(GeogebraCommonEuclidianEuclidianController *outer$, GeogebraCommonUtilAsyncOperation *capture$0) {
  GeogebraCommonEuclidianEuclidianController_$2 *self = [GeogebraCommonEuclidianEuclidianController_$2 alloc];
  GeogebraCommonEuclidianEuclidianController_$2_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonUtilAsyncOperation_(self, outer$, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianEuclidianController_$2)

@implementation GeogebraCommonEuclidianEuclidianController_$3

- (void)callbackWithId:(id)changedKernel {
  if ([nil_chk(changedKernel) isEqual:JavaLangBoolean_valueOfWithBoolean_(YES)]) {
    [((GeogebraCommonMainApp *) nil_chk(this$0_->app_)) storeUndoInfo];
  }
  [this$0_ endOfWrapMouseReleasedWithGeogebraCommonEuclidianHits:val$hits2_ withBoolean:NO withBoolean:NO withGeogebraCommonEuclidianEventPointerEventTypeEnum:nil];
}

- (instancetype)initWithGeogebraCommonEuclidianEuclidianController:(GeogebraCommonEuclidianEuclidianController *)outer$
                                   withGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)capture$0 {
  GeogebraCommonEuclidianEuclidianController_$3_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonEuclidianHits_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$hits2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "callbackWithId:", "callback", "V", 0x1, NULL, NULL },
    { "initWithGeogebraCommonEuclidianEuclidianController:withGeogebraCommonEuclidianHits:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.euclidian.EuclidianController;", NULL, NULL,  },
    { "val$hits2_", NULL, 0x1012, "Lgeogebra.common.euclidian.Hits;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonEuclidianEuclidianController", "processModeWithGeogebraCommonEuclidianHits:withBoolean:" };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianEuclidianController_$3 = { 2, "", "geogebra.common.euclidian", "EuclidianController", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_GeogebraCommonEuclidianEuclidianController_$3;
}

@end

void GeogebraCommonEuclidianEuclidianController_$3_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController_$3 *self, GeogebraCommonEuclidianEuclidianController *outer$, GeogebraCommonEuclidianHits *capture$0) {
  GeogebraCommonEuclidianEuclidianController_$3_set_this$0_(self, outer$);
  GeogebraCommonEuclidianEuclidianController_$3_set_val$hits2_(self, capture$0);
  GeogebraCommonUtilAsyncOperation_init(self);
}

GeogebraCommonEuclidianEuclidianController_$3 *new_GeogebraCommonEuclidianEuclidianController_$3_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianEuclidianController *outer$, GeogebraCommonEuclidianHits *capture$0) {
  GeogebraCommonEuclidianEuclidianController_$3 *self = [GeogebraCommonEuclidianEuclidianController_$3 alloc];
  GeogebraCommonEuclidianEuclidianController_$3_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonEuclidianHits_(self, outer$, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianEuclidianController_$3)

@implementation GeogebraCommonEuclidianEuclidianController_$4

- (void)callbackWithId:(id)ret {
  [((GeogebraCommonUtilAsyncOperation *) nil_chk(val$callback_)) callbackWithId:ret];
  [this$0_ updatePreview];
}

- (instancetype)initWithGeogebraCommonEuclidianEuclidianController:(GeogebraCommonEuclidianEuclidianController *)outer$
                              withGeogebraCommonUtilAsyncOperation:(GeogebraCommonUtilAsyncOperation *)capture$0 {
  GeogebraCommonEuclidianEuclidianController_$4_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonUtilAsyncOperation_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$callback_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "callbackWithId:", "callback", "V", 0x1, NULL, NULL },
    { "initWithGeogebraCommonEuclidianEuclidianController:withGeogebraCommonUtilAsyncOperation:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.euclidian.EuclidianController;", NULL, NULL,  },
    { "val$callback_", NULL, 0x1012, "Lgeogebra.common.util.AsyncOperation;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonEuclidianEuclidianController", "processModeWithGeogebraCommonEuclidianHits:withBoolean:withGeogebraCommonUtilAsyncOperation:" };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianEuclidianController_$4 = { 2, "", "geogebra.common.euclidian", "EuclidianController", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_GeogebraCommonEuclidianEuclidianController_$4;
}

@end

void GeogebraCommonEuclidianEuclidianController_$4_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonUtilAsyncOperation_(GeogebraCommonEuclidianEuclidianController_$4 *self, GeogebraCommonEuclidianEuclidianController *outer$, GeogebraCommonUtilAsyncOperation *capture$0) {
  GeogebraCommonEuclidianEuclidianController_$4_set_this$0_(self, outer$);
  GeogebraCommonEuclidianEuclidianController_$4_set_val$callback_(self, capture$0);
  GeogebraCommonUtilAsyncOperation_init(self);
}

GeogebraCommonEuclidianEuclidianController_$4 *new_GeogebraCommonEuclidianEuclidianController_$4_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonUtilAsyncOperation_(GeogebraCommonEuclidianEuclidianController *outer$, GeogebraCommonUtilAsyncOperation *capture$0) {
  GeogebraCommonEuclidianEuclidianController_$4 *self = [GeogebraCommonEuclidianEuclidianController_$4 alloc];
  GeogebraCommonEuclidianEuclidianController_$4_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonUtilAsyncOperation_(self, outer$, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianEuclidianController_$4)

@implementation GeogebraCommonEuclidianEuclidianController_$5

- (void)callbackWithId:(id)changedKernel {
  if ([nil_chk(changedKernel) isEqual:JavaLangBoolean_valueOfWithBoolean_(YES)]) {
    [((GeogebraCommonMainApp *) nil_chk(this$0_->app_)) storeUndoInfo];
  }
  [this$0_ endOfWrapMouseReleasedWithGeogebraCommonEuclidianHits:val$hits2_ withGeogebraCommonEuclidianEventAbstractEvent:val$event_];
}

- (instancetype)initWithGeogebraCommonEuclidianEuclidianController:(GeogebraCommonEuclidianEuclidianController *)outer$
                                   withGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)capture$0
                     withGeogebraCommonEuclidianEventAbstractEvent:(GeogebraCommonEuclidianEventAbstractEvent *)capture$1 {
  GeogebraCommonEuclidianEuclidianController_$5_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonEuclidianHits_withGeogebraCommonEuclidianEventAbstractEvent_(self, outer$, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$hits2_);
  RELEASE_(val$event_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "callbackWithId:", "callback", "V", 0x1, NULL, NULL },
    { "initWithGeogebraCommonEuclidianEuclidianController:withGeogebraCommonEuclidianHits:withGeogebraCommonEuclidianEventAbstractEvent:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.euclidian.EuclidianController;", NULL, NULL,  },
    { "val$hits2_", NULL, 0x1012, "Lgeogebra.common.euclidian.Hits;", NULL, NULL,  },
    { "val$event_", NULL, 0x1012, "Lgeogebra.common.euclidian.event.AbstractEvent;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonEuclidianEuclidianController", "wrapMouseReleasedWithGeogebraCommonEuclidianEventAbstractEvent:" };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianEuclidianController_$5 = { 2, "", "geogebra.common.euclidian", "EuclidianController", 0x8008, 2, methods, 3, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_GeogebraCommonEuclidianEuclidianController_$5;
}

@end

void GeogebraCommonEuclidianEuclidianController_$5_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonEuclidianHits_withGeogebraCommonEuclidianEventAbstractEvent_(GeogebraCommonEuclidianEuclidianController_$5 *self, GeogebraCommonEuclidianEuclidianController *outer$, GeogebraCommonEuclidianHits *capture$0, GeogebraCommonEuclidianEventAbstractEvent *capture$1) {
  GeogebraCommonEuclidianEuclidianController_$5_set_this$0_(self, outer$);
  GeogebraCommonEuclidianEuclidianController_$5_set_val$hits2_(self, capture$0);
  GeogebraCommonEuclidianEuclidianController_$5_set_val$event_(self, capture$1);
  GeogebraCommonUtilAsyncOperation_init(self);
}

GeogebraCommonEuclidianEuclidianController_$5 *new_GeogebraCommonEuclidianEuclidianController_$5_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonEuclidianHits_withGeogebraCommonEuclidianEventAbstractEvent_(GeogebraCommonEuclidianEuclidianController *outer$, GeogebraCommonEuclidianHits *capture$0, GeogebraCommonEuclidianEventAbstractEvent *capture$1) {
  GeogebraCommonEuclidianEuclidianController_$5 *self = [GeogebraCommonEuclidianEuclidianController_$5 alloc];
  GeogebraCommonEuclidianEuclidianController_$5_initWithGeogebraCommonEuclidianEuclidianController_withGeogebraCommonEuclidianHits_withGeogebraCommonEuclidianEventAbstractEvent_(self, outer$, capture$0, capture$1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianEuclidianController_$5)
