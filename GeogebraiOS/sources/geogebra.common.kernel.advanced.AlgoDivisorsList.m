//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/AlgoDivisorsList.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/advanced/AlgoDivisorsList.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/cas/AlgoPrimeFactorization.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"

@interface GeogebraCommonKernelAdvancedAlgoDivisorsList () {
 @public
  id<GeogebraCommonKernelArithmeticNumberValue> number_;
  GeogebraCommonKernelCasAlgoPrimeFactorization *factors_;
  GeogebraCommonKernelGeosGeoList *factorList_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoDivisorsList, number_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoDivisorsList, factors_, GeogebraCommonKernelCasAlgoPrimeFactorization *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoDivisorsList, factorList_, GeogebraCommonKernelGeosGeoList *)

@implementation GeogebraCommonKernelAdvancedAlgoDivisorsList

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)number {
  GeogebraCommonKernelAdvancedAlgoDivisorsList_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, number);
  return self;
}

- (void)setInputOutput {
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:result_];
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithObjects:(id[]){ [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(number_)) toGeoElement] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  [self setDependencies];
}

- (void)compute {
  if (![((GeogebraCommonKernelGeosGeoList *) nil_chk(factorList_)) isDefined] || !GeogebraCommonKernelKernel_isIntegerWithDouble_([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(number_)) getDouble])) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(result_)) setUndefined];
    return;
  }
  jint oldLength = 1;
  [((id<JavaUtilList>) nil_chk(factList_)) clear];
  [factList_ addWithId:JavaLangLong_valueOfWithLong_(1LL)];
  for (jint i = 0; i < [factorList_ size]; i++) {
    GeogebraCommonKernelGeosGeoList *pair = (GeogebraCommonKernelGeosGeoList *) check_class_cast([factorList_ getWithInt:i], [GeogebraCommonKernelGeosGeoList class]);
    jdouble exp = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([((GeogebraCommonKernelGeosGeoList *) nil_chk(pair)) getWithInt:1], @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
    jdouble prime = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([pair getWithInt:0], @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
    jlong power = JavaLangMath_roundWithDouble_(prime);
    for (jint k = 1; k <= exp; k++) {
      for (jint j = 0; j < oldLength; j++) {
        [factList_ addWithId:JavaLangLong_valueOfWithLong_([((JavaLangLong *) nil_chk([factList_ getWithInt:j])) longLongValue] * power)];
      }
      power *= JavaLangMath_roundWithDouble_(prime);
    }
    oldLength = [factList_ size];
  }
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(result_)) setDefinedWithBoolean:YES];
  [result_ clear];
  id<JavaUtilSet> sortedSet = [new_JavaUtilTreeSet_init() autorelease];
  [sortedSet addAllWithJavaUtilCollection:factList_];
  id<JavaUtilIterator> iterator = [sortedSet iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    [result_ addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, [((JavaLangLong *) nil_chk([iterator next])) longLongValue]) autorelease]];
  }
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_DivisorsList();
}

- (GeogebraCommonKernelGeosGeoList *)getResult {
  return result_;
}

- (void)dealloc {
  RELEASE_(result_);
  RELEASE_(number_);
  RELEASE_(factors_);
  RELEASE_(factorList_);
  RELEASE_(factList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoDivisorsList", NULL, 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "result_", NULL, 0x0, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "number_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "factors_", NULL, 0x2, "Lgeogebra.common.kernel.cas.AlgoPrimeFactorization;", NULL, NULL,  },
    { "factorList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "factList_", NULL, 0x0, "Ljava.util.List;", NULL, "Ljava/util/List<Ljava/lang/Long;>;",  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedAlgoDivisorsList = { 2, "AlgoDivisorsList", "geogebra.common.kernel.advanced", NULL, 0x1, 5, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedAlgoDivisorsList;
}

@end

void GeogebraCommonKernelAdvancedAlgoDivisorsList_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelAdvancedAlgoDivisorsList *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelArithmeticNumberValue> number) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAdvancedAlgoDivisorsList_setAndConsume_factList_(self, new_JavaUtilArrayList_init());
  GeogebraCommonKernelAdvancedAlgoDivisorsList_set_number_(self, number);
  GeogebraCommonKernelAdvancedAlgoDivisorsList_setAndConsume_factors_(self, new_GeogebraCommonKernelCasAlgoPrimeFactorization_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_(cons, number));
  GeogebraCommonKernelAdvancedAlgoDivisorsList_set_factorList_(self, [self->factors_ getResult]);
  GeogebraCommonKernelAdvancedAlgoDivisorsList_setAndConsume_result_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  [self compute];
  [self->result_ setLabelWithNSString:label];
}

GeogebraCommonKernelAdvancedAlgoDivisorsList *new_GeogebraCommonKernelAdvancedAlgoDivisorsList_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelArithmeticNumberValue> number) {
  GeogebraCommonKernelAdvancedAlgoDivisorsList *self = [GeogebraCommonKernelAdvancedAlgoDivisorsList alloc];
  GeogebraCommonKernelAdvancedAlgoDivisorsList_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, number);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedAlgoDivisorsList)
