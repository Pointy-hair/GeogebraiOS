//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/AlgoSelectedElement.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/advanced/AlgoSelectedElement.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/plugin/GeoClass.h"

@interface GeogebraCommonKernelAdvancedAlgoSelectedElement () {
 @public
  GeogebraCommonKernelGeosGeoList *geoList_;
  GeogebraCommonKernelGeosGeoElement *element_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoSelectedElement, geoList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoSelectedElement, element_, GeogebraCommonKernelGeosGeoElement *)

__attribute__((unused)) static void GeogebraCommonKernelAdvancedAlgoSelectedElement_compute(GeogebraCommonKernelAdvancedAlgoSelectedElement *self);

@implementation GeogebraCommonKernelAdvancedAlgoSelectedElement

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList {
  GeogebraCommonKernelAdvancedAlgoSelectedElement_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, geoList);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_SelectedElement();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, geoList_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:element_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoElement *)getElement {
  return element_;
}

- (void)compute {
  GeogebraCommonKernelAdvancedAlgoSelectedElement_compute(self);
}

- (void)dealloc {
  RELEASE_(geoList_);
  RELEASE_(element_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:", "AlgoSelectedElement", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getElement", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geoList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "element_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedAlgoSelectedElement = { 2, "AlgoSelectedElement", "geogebra.common.kernel.advanced", NULL, 0x1, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedAlgoSelectedElement;
}

@end

void GeogebraCommonKernelAdvancedAlgoSelectedElement_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAdvancedAlgoSelectedElement *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAdvancedAlgoSelectedElement_set_geoList_(self, geoList);
  if ([((GeogebraCommonKernelGeosGeoList *) nil_chk(geoList)) size] > 0) {
    GeogebraCommonKernelAdvancedAlgoSelectedElement_set_element_(self, [((GeogebraCommonKernelGeosGeoElement *) nil_chk([geoList getWithInt:0])) copyInternalWithGeogebraCommonKernelConstruction:cons]);
  }
  else {
    GeogebraCommonKernelAdvancedAlgoSelectedElement_setAndConsume_element_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons));
  }
  [self setInputOutput];
  GeogebraCommonKernelAdvancedAlgoSelectedElement_compute(self);
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->element_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAdvancedAlgoSelectedElement *new_GeogebraCommonKernelAdvancedAlgoSelectedElement_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelAdvancedAlgoSelectedElement *self = [GeogebraCommonKernelAdvancedAlgoSelectedElement alloc];
  GeogebraCommonKernelAdvancedAlgoSelectedElement_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, geoList);
  return self;
}

void GeogebraCommonKernelAdvancedAlgoSelectedElement_compute(GeogebraCommonKernelAdvancedAlgoSelectedElement *self) {
  if (![((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList_)) isDefined]) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->element_)) setUndefined];
    return;
  }
  GeogebraCommonKernelGeosGeoElement *geo = [self->geoList_ getSelectedElement];
  if (geo != nil && [geo getGeoClassType] == [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->element_)) getGeoClassType]) {
    [self->element_ setWithGeogebraCommonKernelGeosGeoElement:geo];
  }
  else {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->element_)) setUndefined];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedAlgoSelectedElement)
