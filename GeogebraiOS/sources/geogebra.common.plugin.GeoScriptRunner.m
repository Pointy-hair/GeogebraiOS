//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/plugin/GeoScriptRunner.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/plugin/Event.h"
#include "geogebra/common/plugin/EventType.h"
#include "geogebra/common/plugin/GeoScriptRunner.h"
#include "geogebra/common/plugin/ScriptError.h"
#include "geogebra/common/plugin/script/Script.h"

@interface GeogebraCommonPluginGeoScriptRunner () {
 @public
  GeogebraCommonMainApp *app_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonPluginGeoScriptRunner, app_, GeogebraCommonMainApp *)

@implementation GeogebraCommonPluginGeoScriptRunner

- (instancetype)initWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app {
  GeogebraCommonPluginGeoScriptRunner_initWithGeogebraCommonMainApp_(self, app);
  return self;
}

- (void)sendEventWithGeogebraCommonPluginEvent:(GeogebraCommonPluginEvent *)evt {
  if ([((GeogebraCommonMainApp *) nil_chk(app_)) isScriptingDisabled] || ((GeogebraCommonPluginEvent *) nil_chk(evt))->target_ == nil) {
    return;
  }
  GeogebraCommonPluginScriptScript *script = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonPluginEvent *) nil_chk(evt))->target_)) getScriptWithGeogebraCommonPluginEventTypeEnum:evt->type_];
  if (script == nil) {
    return;
  }
  if (evt->type_ == GeogebraCommonPluginEventTypeEnum_get_UPDATE()) {
    if ([app_ isBlockUpdateScripts] && ![evt isAlwaysDispatched]) {
      return;
    }
  }
  @try {
    if (evt->type_ != GeogebraCommonPluginEventTypeEnum_get_UPDATE()) {
      [((GeogebraCommonPluginScriptScript *) nil_chk(script)) runWithGeogebraCommonPluginEvent:evt];
      [app_ storeUndoInfo];
    }
    else {
      [app_ setBlockUpdateScriptsWithBoolean:YES];
      [((GeogebraCommonPluginScriptScript *) nil_chk(script)) runWithGeogebraCommonPluginEvent:evt];
    }
  }
  @catch (GeogebraCommonPluginScriptError *e) {
    [app_ showErrorWithNSString:[((GeogebraCommonPluginScriptError *) nil_chk(e)) getScriptError]];
  }
  @finally {
    [app_ setBlockUpdateScriptsWithBoolean:NO];
  }
}

- (void)reset {
}

- (void)dealloc {
  RELEASE_(app_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonMainApp:", "GeoScriptRunner", NULL, 0x1, NULL, NULL },
    { "sendEventWithGeogebraCommonPluginEvent:", "sendEvent", "V", 0x1, NULL, NULL },
    { "reset", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "app_", NULL, 0x2, "Lgeogebra.common.main.App;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonPluginGeoScriptRunner = { 2, "GeoScriptRunner", "geogebra.common.plugin", NULL, 0x1, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonPluginGeoScriptRunner;
}

@end

void GeogebraCommonPluginGeoScriptRunner_initWithGeogebraCommonMainApp_(GeogebraCommonPluginGeoScriptRunner *self, GeogebraCommonMainApp *app) {
  NSObject_init(self);
  GeogebraCommonPluginGeoScriptRunner_set_app_(self, app);
}

GeogebraCommonPluginGeoScriptRunner *new_GeogebraCommonPluginGeoScriptRunner_initWithGeogebraCommonMainApp_(GeogebraCommonMainApp *app) {
  GeogebraCommonPluginGeoScriptRunner *self = [GeogebraCommonPluginGeoScriptRunner alloc];
  GeogebraCommonPluginGeoScriptRunner_initWithGeogebraCommonMainApp_(self, app);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonPluginGeoScriptRunner)
