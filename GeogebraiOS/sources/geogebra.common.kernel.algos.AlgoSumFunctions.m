//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoSumFunctions.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoSumFunctions.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoFunctionable.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"

@interface GeogebraCommonKernelAlgosAlgoSumFunctions () {
 @public
  GeogebraCommonKernelGeosGeoList *geoList_;
  GeogebraCommonKernelGeosGeoNumeric *truncate_;
  GeogebraCommonKernelGeosGeoFunction *resultFun_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoSumFunctions, geoList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoSumFunctions, truncate_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoSumFunctions, resultFun_, GeogebraCommonKernelGeosGeoFunction *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoSumFunctions_compute(GeogebraCommonKernelAlgosAlgoSumFunctions *self);

@implementation GeogebraCommonKernelAlgosAlgoSumFunctions

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Sum();
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList {
  GeogebraCommonKernelAlgosAlgoSumFunctions_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, geoList);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)truncate {
  GeogebraCommonKernelAlgosAlgoSumFunctions_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, geoList, truncate);
  return self;
}

- (void)setInputOutput {
  if (truncate_ == nil) {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, geoList_);
  }
  else {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, geoList_);
    IOSObjectArray_Set(input_, 1, truncate_);
  }
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:resultFun_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoElement *)getResult {
  return resultFun_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoSumFunctions_compute(self);
}

- (void)dealloc {
  RELEASE_(geoList_);
  RELEASE_(truncate_);
  RELEASE_(resultFun_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:", "AlgoSumFunctions", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoSumFunctions", NULL, 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geoList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "truncate_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "resultFun_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoSumFunctions = { 2, "AlgoSumFunctions", "geogebra.common.kernel.algos", NULL, 0x1, 6, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoSumFunctions;
}

@end

void GeogebraCommonKernelAlgosAlgoSumFunctions_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoSumFunctions *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelAlgosAlgoSumFunctions_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, geoList, nil);
}

GeogebraCommonKernelAlgosAlgoSumFunctions *new_GeogebraCommonKernelAlgosAlgoSumFunctions_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelAlgosAlgoSumFunctions *self = [GeogebraCommonKernelAlgosAlgoSumFunctions alloc];
  GeogebraCommonKernelAlgosAlgoSumFunctions_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, geoList);
  return self;
}

void GeogebraCommonKernelAlgosAlgoSumFunctions_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelAlgosAlgoSumFunctions *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geoList, GeogebraCommonKernelGeosGeoNumeric *truncate) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoSumFunctions_set_geoList_(self, geoList);
  GeogebraCommonKernelAlgosAlgoSumFunctions_set_truncate_(self, truncate);
  GeogebraCommonKernelAlgosAlgoSumFunctions_setAndConsume_resultFun_(self, new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoSumFunctions_compute(self);
  [self->resultFun_ setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoSumFunctions *new_GeogebraCommonKernelAlgosAlgoSumFunctions_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geoList, GeogebraCommonKernelGeosGeoNumeric *truncate) {
  GeogebraCommonKernelAlgosAlgoSumFunctions *self = [GeogebraCommonKernelAlgosAlgoSumFunctions alloc];
  GeogebraCommonKernelAlgosAlgoSumFunctions_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, geoList, truncate);
  return self;
}

void GeogebraCommonKernelAlgosAlgoSumFunctions_compute(GeogebraCommonKernelAlgosAlgoSumFunctions *self) {
  jint n = self->truncate_ == nil ? [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList_)) size] : J2ObjCFpToInt([self->truncate_ getDouble]);
  if (n == 0 || n > [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList_)) size]) {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->resultFun_)) setUndefined];
    return;
  }
  else if (n == 1) {
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk([self->geoList_ getWithInt:0])) isGeoFunctionable]) {
      [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->resultFun_)) setUndefined];
      return;
    }
    GeogebraCommonKernelGeosGeoFunction *fun1 = [((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast([self->geoList_ getWithInt:0], @protocol(GeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction];
    GeogebraCommonKernelArithmeticFunctionVariable *x1 = [((GeogebraCommonKernelArithmeticFunction *) nil_chk([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(fun1)) getFunction])) getFunctionVariable];
    GeogebraCommonKernelArithmeticFunctionVariable *x = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_(self->kernel_) autorelease];
    GeogebraCommonKernelArithmeticExpressionNode *left = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([fun1 getFunctionExpression])) getCopyWithGeogebraCommonKernelKernel:[fun1 getKernel]];
    GeogebraCommonKernelArithmeticFunction *f = [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(left)) replaceWithGeogebraCommonKernelArithmeticExpressionValue:x1 withGeogebraCommonKernelArithmeticExpressionValue:x])) wrap], x) autorelease];
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->resultFun_)) setFunctionWithGeogebraCommonKernelArithmeticFunction:f];
    [self->resultFun_ setDefinedWithBoolean:YES];
    return;
  }
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList_)) getWithInt:0])) isGeoFunctionable] || ![((GeogebraCommonKernelGeosGeoElement *) nil_chk([self->geoList_ getWithInt:1])) isGeoFunctionable]) {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->resultFun_)) setUndefined];
    return;
  }
  GeogebraCommonKernelAlgosAlgoSumFunctions_set_resultFun_(self, GeogebraCommonKernelGeosGeoFunction_addWithGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_(self->resultFun_, [((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast([self->geoList_ getWithInt:0], @protocol(GeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction], [((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast([self->geoList_ getWithInt:1], @protocol(GeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction]));
  if (n == 2) return;
  for (jint i = 2; i < n; i++) {
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk([self->geoList_ getWithInt:i])) isGeoFunctionable]) {
      [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->resultFun_)) setUndefined];
      return;
    }
    GeogebraCommonKernelAlgosAlgoSumFunctions_set_resultFun_(self, GeogebraCommonKernelGeosGeoFunction_addWithGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_(self->resultFun_, self->resultFun_, [((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast([self->geoList_ getWithInt:i], @protocol(GeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction]));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoSumFunctions)
