//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoFirstLocus.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/MyPoint.h"
#include "geogebra/common/kernel/algos/AlgoFirst.h"
#include "geogebra/common/kernel/algos/AlgoFirstLocus.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoLocus.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "java/util/ArrayList.h"

@implementation GeogebraCommonKernelAlgosAlgoFirstLocus

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                    withGeogebraCommonKernelGeosGeoLocus:(GeogebraCommonKernelGeosGeoLocus *)inputLocus
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)n {
  GeogebraCommonKernelAlgosAlgoFirstLocus_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoLocus_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, inputLocus, n);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_First();
}

- (void)compute {
  JavaUtilArrayList *points = [((GeogebraCommonKernelGeosGeoLocus *) nil_chk(((GeogebraCommonKernelGeosGeoLocus *) check_class_cast(inputList_, [GeogebraCommonKernelGeosGeoLocus class])))) getPoints];
  size_ = [((JavaUtilArrayList *) nil_chk(points)) size];
  jint outsize = n_ == nil ? 1 : J2ObjCFpToInt([n_ getDouble]);
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(inputList_)) isDefined] || size_ == 0 || outsize < 0 || outsize > size_) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(outputList_)) setUndefined];
    return;
  }
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(outputList_)) setDefinedWithBoolean:YES];
  if (outsize == 0) {
    [outputList_ clear];
    return;
  }
  jint outputListSize = [outputList_ size];
  if ([outputList_ size] > outsize) {
    for (jint i = outputListSize - 1; i >= outsize; i--) {
      [outputList_ removeWithInt:i];
    }
  }
  jboolean oldSuppressLabels = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  [cons_ setSuppressLabelCreationWithBoolean:YES];
  for (jint i = 0; i < outsize; i++) {
    GeogebraCommonKernelMyPoint *mp = [points getWithInt:i];
    if (i < [outputList_ size]) {
      GeogebraCommonKernelGeosGeoPoint *p = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([outputList_ getWithInt:i], [GeogebraCommonKernelGeosGeoPoint class]);
      [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) setCoordsWithDouble:((GeogebraCommonKernelMyPoint *) nil_chk(mp))->x_ withDouble:mp->y_ withDouble:1.0];
      [p updateRepaint];
    }
    else {
      GeogebraCommonKernelGeosGeoPoint *p = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(cons_, nil, ((GeogebraCommonKernelMyPoint *) nil_chk(mp))->x_, mp->y_, 1.0) autorelease];
      [outputList_ addWithGeogebraCommonKernelGeosGeoElement:p];
    }
  }
  [cons_ setSuppressLabelCreationWithBoolean:oldSuppressLabels];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoLocus:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoFirstLocus", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoFirstLocus = { 2, "AlgoFirstLocus", "geogebra.common.kernel.algos", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoFirstLocus;
}

@end

void GeogebraCommonKernelAlgosAlgoFirstLocus_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoLocus_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelAlgosAlgoFirstLocus *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoLocus *inputLocus, GeogebraCommonKernelGeosGeoNumeric *n) {
  GeogebraCommonKernelAlgosAlgoFirst_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, inputLocus, n);
}

GeogebraCommonKernelAlgosAlgoFirstLocus *new_GeogebraCommonKernelAlgosAlgoFirstLocus_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoLocus_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoLocus *inputLocus, GeogebraCommonKernelGeosGeoNumeric *n) {
  GeogebraCommonKernelAlgosAlgoFirstLocus *self = [GeogebraCommonKernelAlgosAlgoFirstLocus alloc];
  GeogebraCommonKernelAlgosAlgoFirstLocus_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoLocus_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, inputLocus, n);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoFirstLocus)
