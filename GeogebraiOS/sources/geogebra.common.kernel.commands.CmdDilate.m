//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/commands/CmdDilate.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Transform.h"
#include "geogebra/common/kernel/TransformDilate.h"
#include "geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/CmdDilate.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/Dilateable.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/main/MyError.h"

@interface GeogebraCommonKernelCommandsCmdDilate ()

- (IOSObjectArray *)DilateWithNSString:(NSString *)label
withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geoDil
withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r;

@end

__attribute__((unused)) static IOSObjectArray *GeogebraCommonKernelCommandsCmdDilate_DilateWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelCommandsCmdDilate *self, NSString *label, GeogebraCommonKernelGeosGeoElement *geoDil, id<GeogebraCommonKernelArithmeticNumberValue> r);

@implementation GeogebraCommonKernelCommandsCmdDilate

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelCommandsCmdDilate_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  NSString *label = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel];
  jint n = [c getArgumentNumber];
  IOSBooleanArray *ok = [IOSBooleanArray arrayWithLength:n];
  IOSObjectArray *arg;
  switch (n) {
    case 2:
    arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
    if ((*IOSBooleanArray_GetRef(ok, 0) = ([GeogebraCommonKernelGeosDilateable_class_() isInstance:IOSObjectArray_Get(nil_chk(arg), 0)] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoPolygon] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoList])) && (*IOSBooleanArray_GetRef(ok, 1) = ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 1)]))) {
      id<GeogebraCommonKernelArithmeticNumberValue> phi = (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelGeosGeoNumberValue));
      return GeogebraCommonKernelCommandsCmdDilate_DilateWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelArithmeticNumberValue_(self, label, IOSObjectArray_Get(arg, 0), phi);
    }
    if (!IOSBooleanArray_Get(ok, 0)) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
    @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 1)];
    case 3:
    arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
    if ((*IOSBooleanArray_GetRef(ok, 0) = ([GeogebraCommonKernelGeosDilateable_class_() isInstance:IOSObjectArray_Get(nil_chk(arg), 0)] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoList])) && (*IOSBooleanArray_GetRef(ok, 1) = ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 1)])) && (*IOSBooleanArray_GetRef(ok, 2) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoPoint]))) {
      id<GeogebraCommonKernelArithmeticNumberValue> phi = (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelGeosGeoNumberValue));
      return [self DilateWithNSString:label withGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(arg, 0) withGeogebraCommonKernelArithmeticNumberValue:phi withGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(arg, 2)];
    }
    if (!IOSBooleanArray_Get(ok, 0)) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
    @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 1)];
    default:
    @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  }
}

- (IOSObjectArray *)DilateWithNSString:(NSString *)label
withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geoDil
withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r {
  return GeogebraCommonKernelCommandsCmdDilate_DilateWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelArithmeticNumberValue_(self, label, geoDil, r);
}

- (IOSObjectArray *)DilateWithNSString:(NSString *)label
withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geoDil
withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r
withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)point {
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) DilateWithNSString:label withGeogebraCommonKernelGeosGeoElement:geoDil withGeogebraCommonKernelArithmeticNumberValue:r withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(point, [GeogebraCommonKernelGeosGeoPoint class])];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdDilate", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, "Lgeogebra.common.main.MyError;", NULL },
    { "DilateWithNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelArithmeticNumberValue:", "Dilate", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x12, NULL, NULL },
    { "DilateWithNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelGeosGeoElement:", "Dilate", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCommandsCmdDilate = { 2, "CmdDilate", "geogebra.common.kernel.commands", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCommandsCmdDilate;
}

@end

void GeogebraCommonKernelCommandsCmdDilate_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelCommandsCmdDilate *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelCommandsCmdDilate *new_GeogebraCommonKernelCommandsCmdDilate_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdDilate *self = [GeogebraCommonKernelCommandsCmdDilate alloc];
  GeogebraCommonKernelCommandsCmdDilate_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

IOSObjectArray *GeogebraCommonKernelCommandsCmdDilate_DilateWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelCommandsCmdDilate *self, NSString *label, GeogebraCommonKernelGeosGeoElement *geoDil, id<GeogebraCommonKernelArithmeticNumberValue> r) {
  GeogebraCommonKernelTransform *t = [new_GeogebraCommonKernelTransformDilate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_(self->cons_, r) autorelease];
  return [t transformWithGeogebraCommonKernelGeosGeoElement:geoDil withNSString:label];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCommandsCmdDilate)
