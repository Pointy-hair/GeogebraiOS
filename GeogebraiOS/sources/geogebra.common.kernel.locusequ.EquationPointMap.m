//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/locusequ/EquationPointMap.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/kernel/advanced/AlgoDynamicCoordinates.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoIntersectLines.h"
#include "geogebra/common/kernel/algos/AlgoPointOnPath.h"
#include "geogebra/common/kernel/algos/AlgoPolygonRegularND.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/locusequ/EquationDependentPoint.h"
#include "geogebra/common/kernel/locusequ/EquationFreePoint.h"
#include "geogebra/common/kernel/locusequ/EquationPoint.h"
#include "geogebra/common/kernel/locusequ/EquationPointMap.h"
#include "geogebra/common/kernel/locusequ/EquationScope.h"
#include "geogebra/common/kernel/locusequ/EquationSpecialSymbolicPoint.h"
#include "geogebra/common/util/debug/Log.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/TreeSet.h"

#define GeogebraCommonKernelLocusequEquationPointMap_GEOGEBRA_DIMENSION 2

@interface GeogebraCommonKernelLocusequEquationPointMap () {
 @public
  GeogebraCommonKernelGeosGeoPoint *locusPoint_, *movingPoint_;
  jint curInd_;
  id<JavaUtilMap> container_;
  id<JavaUtilMap> identifications_;
}

- (GeogebraCommonKernelLocusequEquationPoint *)constructEquationPointWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)geoPoint;

+ (jboolean)isAuxiliarPointOnAPolygonWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)p;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelLocusequEquationPointMap, locusPoint_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelLocusequEquationPointMap, movingPoint_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelLocusequEquationPointMap, container_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelLocusequEquationPointMap, identifications_, id<JavaUtilMap>)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelLocusequEquationPointMap, GEOGEBRA_DIMENSION, jint)

__attribute__((unused)) static GeogebraCommonKernelLocusequEquationPoint *GeogebraCommonKernelLocusequEquationPointMap_constructEquationPointWithGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelLocusequEquationPointMap *self, GeogebraCommonKernelGeosGeoPoint *geoPoint);

__attribute__((unused)) static jboolean GeogebraCommonKernelLocusequEquationPointMap_isAuxiliarPointOnAPolygonWithGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelGeosGeoPoint *p);

@implementation GeogebraCommonKernelLocusequEquationPointMap

- (instancetype)initWithGeogebraCommonKernelLocusequEquationScope:(GeogebraCommonKernelLocusequEquationScope *)scope {
  GeogebraCommonKernelLocusequEquationPointMap_initWithGeogebraCommonKernelLocusequEquationScope_(self, scope);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)locusPoint
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)movingPoint
           withGeogebraCommonKernelLocusequEquationScope:(GeogebraCommonKernelLocusequEquationScope *)scope {
  GeogebraCommonKernelLocusequEquationPointMap_initWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelLocusequEquationScope_(self, locusPoint, movingPoint, scope);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)path
                      withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)movingPoint
             withGeogebraCommonKernelLocusequEquationScope:(GeogebraCommonKernelLocusequEquationScope *)scope {
  GeogebraCommonKernelLocusequEquationPointMap_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelLocusequEquationScope_(self, path, movingPoint, scope);
  return self;
}

- (GeogebraCommonKernelLocusequEquationPoint *)getWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)p {
  return [((id<JavaUtilMap>) nil_chk(self->container_)) getWithId:p];
}

- (GeogebraCommonKernelLocusequEquationPoint *)getOrCreateWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)p {
  GeogebraCommonKernelLocusequEquationPoint *res = [self getWithGeogebraCommonKernelGeosGeoPoint:p];
  if (res != nil) {
    return res;
  }
  res = GeogebraCommonKernelLocusequEquationPointMap_constructEquationPointWithGeogebraCommonKernelGeosGeoPoint_(self, p);
  [((id<JavaUtilMap>) nil_chk(self->container_)) putWithId:p withId:res];
  return res;
}

- (GeogebraCommonKernelLocusequEquationPoint *)constructEquationPointWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)geoPoint {
  return GeogebraCommonKernelLocusequEquationPointMap_constructEquationPointWithGeogebraCommonKernelGeosGeoPoint_(self, geoPoint);
}

- (void)identifyWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)orig
                withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)target {
  [((id<JavaUtilMap>) nil_chk(self->identifications_)) putWithId:orig withId:target];
  GeogebraCommonKernelLocusequEquationPoint *formerPoint = [((id<JavaUtilMap>) nil_chk(self->container_)) getWithId:orig];
  GeogebraCommonKernelLocusequEquationPoint *newPoint = [self getOrCreateWithGeogebraCommonKernelGeosGeoPoint:target];
  [self->container_ putWithId:orig withId:newPoint];
  if (formerPoint != nil) {
    [formerPoint getIndexesFromWithGeogebraCommonKernelLocusequEquationPoint:newPoint];
  }
}

- (jboolean)mustTakeNumericCoordinatesWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)p {
  return [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) isIndependent] || ([self isPointOnPathWithGeogebraCommonKernelGeosGeoPoint:p] && p != self->movingPoint_ && ![self hasMovingPointAsPredecessorWithGeogebraCommonKernelGeosGeoPoint:p]) || [self isIntersectionOfAxisWithGeogebraCommonKernelGeosGeoPoint:p] || GeogebraCommonKernelLocusequEquationPointMap_isAuxiliarPointOnAPolygonWithGeogebraCommonKernelGeosGeoPoint_(p) || ([[p getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAdvancedAlgoDynamicCoordinates class]]);
}

+ (jboolean)isAuxiliarPointOnAPolygonWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)p {
  return GeogebraCommonKernelLocusequEquationPointMap_isAuxiliarPointOnAPolygonWithGeogebraCommonKernelGeosGeoPoint_(p);
}

- (jboolean)isIntersectionOfAxisWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)p {
  if (!([[((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoIntersectLines class]])) {
    return NO;
  }
  return NO;
}

- (jboolean)isPointOnPathWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)p {
  return [[((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoPointOnPath class]];
}

- (jboolean)hasMovingPointAsPredecessorWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)p {
  return self->movingPoint_ != nil && [((JavaUtilTreeSet *) nil_chk([((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) getAllPredecessors])) containsWithId:self->movingPoint_];
}

- (id<JavaUtilCollection>)getAllPoints {
  return [((id<JavaUtilMap>) nil_chk(self->container_)) values];
}

- (void)putWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)midpoint
  withGeogebraCommonKernelLocusequEquationPoint:(GeogebraCommonKernelLocusequEquationPoint *)m {
  if (midpoint != nil) {
    [((id<JavaUtilMap>) nil_chk(self->container_)) putWithId:midpoint withId:m];
  }
}

- (jboolean)isMovingPointWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)p {
  return self->movingPoint_ == p;
}

- (jboolean)isLocusPointWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)p {
  return self->locusPoint_ == p;
}

- (void)dealloc {
  RELEASE_(locusPoint_);
  RELEASE_(movingPoint_);
  RELEASE_(container_);
  RELEASE_(identifications_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelLocusequEquationScope:", "EquationPointMap", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelLocusequEquationScope:", "EquationPointMap", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelLocusequEquationScope:", "EquationPointMap", NULL, 0x1, NULL, NULL },
    { "getWithGeogebraCommonKernelGeosGeoPoint:", "get", "Lgeogebra.common.kernel.locusequ.EquationPoint;", 0x1, NULL, NULL },
    { "getOrCreateWithGeogebraCommonKernelGeosGeoPoint:", "getOrCreate", "Lgeogebra.common.kernel.locusequ.EquationPoint;", 0x1, NULL, NULL },
    { "constructEquationPointWithGeogebraCommonKernelGeosGeoPoint:", "constructEquationPoint", "Lgeogebra.common.kernel.locusequ.EquationPoint;", 0x2, NULL, NULL },
    { "identifyWithGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "identify", "V", 0x1, NULL, NULL },
    { "mustTakeNumericCoordinatesWithGeogebraCommonKernelGeosGeoPoint:", "mustTakeNumericCoordinates", "Z", 0x4, NULL, NULL },
    { "isAuxiliarPointOnAPolygonWithGeogebraCommonKernelGeosGeoPoint:", "isAuxiliarPointOnAPolygon", "Z", 0xa, NULL, NULL },
    { "isIntersectionOfAxisWithGeogebraCommonKernelGeosGeoPoint:", "isIntersectionOfAxis", "Z", 0x4, NULL, NULL },
    { "isPointOnPathWithGeogebraCommonKernelGeosGeoPoint:", "isPointOnPath", "Z", 0x4, NULL, NULL },
    { "hasMovingPointAsPredecessorWithGeogebraCommonKernelGeosGeoPoint:", "hasMovingPointAsPredecessor", "Z", 0x4, NULL, NULL },
    { "getAllPoints", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "putWithGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelLocusequEquationPoint:", "put", "V", 0x1, NULL, NULL },
    { "isMovingPointWithGeogebraCommonKernelGeosGeoPoint:", "isMovingPoint", "Z", 0x1, NULL, NULL },
    { "isLocusPointWithGeogebraCommonKernelGeosGeoPoint:", "isLocusPoint", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "GEOGEBRA_DIMENSION_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelLocusequEquationPointMap_GEOGEBRA_DIMENSION },
    { "locusPoint_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "movingPoint_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "curInd_", NULL, 0x2, "I", NULL, NULL,  },
    { "container_", NULL, 0x2, "Ljava.util.Map;", NULL, "Ljava/util/Map<Lgeogebra/common/kernel/geos/GeoPoint;Lgeogebra/common/kernel/locusequ/EquationPoint;>;",  },
    { "identifications_", NULL, 0x2, "Ljava.util.Map;", NULL, "Ljava/util/Map<Lgeogebra/common/kernel/geos/GeoPoint;Lgeogebra/common/kernel/geos/GeoPoint;>;",  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelLocusequEquationPointMap = { 2, "EquationPointMap", "geogebra.common.kernel.locusequ", NULL, 0x1, 16, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelLocusequEquationPointMap;
}

@end

void GeogebraCommonKernelLocusequEquationPointMap_initWithGeogebraCommonKernelLocusequEquationScope_(GeogebraCommonKernelLocusequEquationPointMap *self, GeogebraCommonKernelLocusequEquationScope *scope) {
  NSObject_init(self);
  self->curInd_ = 1;
  GeogebraCommonKernelLocusequEquationPointMap_setAndConsume_container_(self, new_JavaUtilHashMap_init());
  GeogebraCommonKernelLocusequEquationPointMap_setAndConsume_identifications_(self, new_JavaUtilHashMap_init());
}

GeogebraCommonKernelLocusequEquationPointMap *new_GeogebraCommonKernelLocusequEquationPointMap_initWithGeogebraCommonKernelLocusequEquationScope_(GeogebraCommonKernelLocusequEquationScope *scope) {
  GeogebraCommonKernelLocusequEquationPointMap *self = [GeogebraCommonKernelLocusequEquationPointMap alloc];
  GeogebraCommonKernelLocusequEquationPointMap_initWithGeogebraCommonKernelLocusequEquationScope_(self, scope);
  return self;
}

void GeogebraCommonKernelLocusequEquationPointMap_initWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelLocusequEquationScope_(GeogebraCommonKernelLocusequEquationPointMap *self, GeogebraCommonKernelGeosGeoPoint *locusPoint, GeogebraCommonKernelGeosGeoPoint *movingPoint, GeogebraCommonKernelLocusequEquationScope *scope) {
  GeogebraCommonKernelLocusequEquationPointMap_initWithGeogebraCommonKernelLocusequEquationScope_(self, scope);
  GeogebraCommonKernelLocusequEquationPointMap_set_locusPoint_(self, locusPoint);
  GeogebraCommonKernelLocusequEquationPointMap_set_movingPoint_(self, movingPoint);
}

GeogebraCommonKernelLocusequEquationPointMap *new_GeogebraCommonKernelLocusequEquationPointMap_initWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelLocusequEquationScope_(GeogebraCommonKernelGeosGeoPoint *locusPoint, GeogebraCommonKernelGeosGeoPoint *movingPoint, GeogebraCommonKernelLocusequEquationScope *scope) {
  GeogebraCommonKernelLocusequEquationPointMap *self = [GeogebraCommonKernelLocusequEquationPointMap alloc];
  GeogebraCommonKernelLocusequEquationPointMap_initWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelLocusequEquationScope_(self, locusPoint, movingPoint, scope);
  return self;
}

void GeogebraCommonKernelLocusequEquationPointMap_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelLocusequEquationScope_(GeogebraCommonKernelLocusequEquationPointMap *self, GeogebraCommonKernelGeosGeoElement *path, GeogebraCommonKernelGeosGeoPoint *movingPoint, GeogebraCommonKernelLocusequEquationScope *scope) {
  GeogebraCommonKernelLocusequEquationPointMap_initWithGeogebraCommonKernelLocusequEquationScope_(self, scope);
  GeogebraCommonKernelLocusequEquationPointMap_set_movingPoint_(self, movingPoint);
}

GeogebraCommonKernelLocusequEquationPointMap *new_GeogebraCommonKernelLocusequEquationPointMap_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelLocusequEquationScope_(GeogebraCommonKernelGeosGeoElement *path, GeogebraCommonKernelGeosGeoPoint *movingPoint, GeogebraCommonKernelLocusequEquationScope *scope) {
  GeogebraCommonKernelLocusequEquationPointMap *self = [GeogebraCommonKernelLocusequEquationPointMap alloc];
  GeogebraCommonKernelLocusequEquationPointMap_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelLocusequEquationScope_(self, path, movingPoint, scope);
  return self;
}

GeogebraCommonKernelLocusequEquationPoint *GeogebraCommonKernelLocusequEquationPointMap_constructEquationPointWithGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelLocusequEquationPointMap *self, GeogebraCommonKernelGeosGeoPoint *geoPoint) {
  GeogebraCommonKernelLocusequEquationPoint *point;
  if ([self mustTakeNumericCoordinatesWithGeogebraCommonKernelGeosGeoPoint:geoPoint]) {
    GeogebraCommonUtilDebugLog_debugWithNSString_(JreStrcat("$@", @"creating free point for ", geoPoint));
    point = [new_GeogebraCommonKernelLocusequEquationFreePoint_initWithGeogebraCommonKernelGeosGeoPoint_(geoPoint) autorelease];
  }
  else if (geoPoint == self->locusPoint_) {
    point = [new_GeogebraCommonKernelLocusequEquationSpecialSymbolicPoint_initWithInt_withGeogebraCommonKernelGeosGeoPoint_(1, geoPoint) autorelease];
  }
  else {
    point = [new_GeogebraCommonKernelLocusequEquationDependentPoint_initWithInt_withGeogebraCommonKernelGeosGeoPoint_(self->curInd_, geoPoint) autorelease];
    GeogebraCommonUtilDebugLog_infoWithNSString_(JreStrcat("$$$I", @"[LocusEquation] Point ", [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(geoPoint)) getLabelSimple], @" index ", self->curInd_));
    self->curInd_ += GeogebraCommonKernelLocusequEquationPointMap_GEOGEBRA_DIMENSION;
  }
  return point;
}

jboolean GeogebraCommonKernelLocusequEquationPointMap_isAuxiliarPointOnAPolygonWithGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelGeosGeoPoint *p) {
  GeogebraCommonKernelLocusequEquationPointMap_initialize();
  return [[((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoPolygonRegularND class]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelLocusequEquationPointMap)
