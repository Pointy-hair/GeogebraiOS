//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoProductMatrices.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoProductMatrices.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"

@interface GeogebraCommonKernelAlgosAlgoProductMatrices () {
 @public
  GeogebraCommonKernelGeosGeoList *geoList_;
  GeogebraCommonKernelGeosGeoList *result_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoProductMatrices, geoList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoProductMatrices, result_, GeogebraCommonKernelGeosGeoList *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoProductMatrices_compute(GeogebraCommonKernelAlgosAlgoProductMatrices *self);

@implementation GeogebraCommonKernelAlgosAlgoProductMatrices

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList {
  GeogebraCommonKernelAlgosAlgoProductMatrices_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, geoList);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Product();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, geoList_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:result_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoElement *)getResult {
  return result_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoProductMatrices_compute(self);
}

- (void)dealloc {
  RELEASE_(geoList_);
  RELEASE_(result_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:", "AlgoProductMatrices", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geoList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoProductMatrices = { 2, "AlgoProductMatrices", "geogebra.common.kernel.algos", NULL, 0x1, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoProductMatrices;
}

@end

void GeogebraCommonKernelAlgosAlgoProductMatrices_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoProductMatrices *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoProductMatrices_set_geoList_(self, geoList);
  GeogebraCommonKernelAlgosAlgoProductMatrices_setAndConsume_result_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoProductMatrices_compute(self);
  [self->result_ setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoProductMatrices *new_GeogebraCommonKernelAlgosAlgoProductMatrices_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelAlgosAlgoProductMatrices *self = [GeogebraCommonKernelAlgosAlgoProductMatrices alloc];
  GeogebraCommonKernelAlgosAlgoProductMatrices_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, geoList);
  return self;
}

void GeogebraCommonKernelAlgosAlgoProductMatrices_compute(GeogebraCommonKernelAlgosAlgoProductMatrices *self) {
  jint size = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList_)) size];
  if (![self->geoList_ isDefined] || size == 0 || ![((GeogebraCommonKernelGeosGeoElement *) nil_chk([self->geoList_ getWithInt:0])) isMatrix]) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
    return;
  }
  GeogebraCommonKernelGeosGeoList *matrix = (GeogebraCommonKernelGeosGeoList *) check_class_cast([self->geoList_ getWithInt:0], [GeogebraCommonKernelGeosGeoList class]);
  if (size == 1) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setWithGeogebraCommonKernelGeosGeoElement:matrix];
    return;
  }
  IOSObjectArray *working = [IOSDoubleArray arrayWithDimensions:2 lengths:(jint[]){ [((GeogebraCommonKernelGeosGeoList *) nil_chk(matrix)) size], [matrix size] }];
  IOSObjectArray *working2 = [IOSDoubleArray arrayWithDimensions:2 lengths:(jint[]){ [matrix size], [matrix size] }];
  for (jint r = 0; r < [matrix size]; r++) {
    for (jint c = 0; c < [matrix size]; c++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(working2, r)), c) = [((GeogebraCommonKernelGeosGeoElement *) nil_chk([matrix getWithInt:r withInt:c])) evaluateDouble];
    }
  }
  for (jint i = 1; i < size; i++) {
    GeogebraCommonKernelGeosGeoElement *p = [self->geoList_ getWithInt:i];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(p)) isMatrix]) {
      [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
      return;
    }
    matrix = (GeogebraCommonKernelGeosGeoList *) check_class_cast(p, [GeogebraCommonKernelGeosGeoList class]);
    if ([((GeogebraCommonKernelGeosGeoList *) nil_chk(((GeogebraCommonKernelGeosGeoList *) check_class_cast([matrix getWithInt:0], [GeogebraCommonKernelGeosGeoList class])))) size] != [matrix size]) {
      [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
      return;
    }
    for (jint r = 0; r < [matrix size]; r++) {
      for (jint c = 0; c < [matrix size]; c++) {
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(working, r)), c) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(working2, r)), c);
      }
    }
    for (jint r = 0; r < [matrix size]; r++) {
      for (jint c = 0; c < [matrix size]; c++) {
        jdouble count = 0;
        for (jint n = 0; n < [matrix size]; n++) {
          count += IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(working, r)), n) * [((GeogebraCommonKernelGeosGeoElement *) nil_chk([matrix getWithInt:n withInt:c])) evaluateDouble];
        }
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(working2, r)), c) = count;
      }
    }
  }
  GeogebraCommonKernelGeosGeoList *ret = [new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(self->cons_) autorelease];
  for (jint r = 0; r < [matrix size]; r++) {
    GeogebraCommonKernelGeosGeoList *row = [new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(self->cons_) autorelease];
    for (jint c = 0; c < [matrix size]; c++) {
      [row addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(working2, r)), c)) autorelease]];
    }
    [ret addWithGeogebraCommonKernelGeosGeoElement:row];
  }
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setWithGeogebraCommonKernelGeosGeoElement:ret];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoProductMatrices)
