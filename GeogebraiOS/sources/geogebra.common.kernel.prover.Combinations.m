//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/prover/Combinations.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/prover/Combinations.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"

@interface GeogebraCommonKernelProverCombinations () {
 @public
  id<JavaUtilSet> set_;
  jint r_, n_;
  IOSIntArray *num_;
  jboolean done_;
  IOSObjectArray *list_;
}

- (jboolean)nextNum;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelProverCombinations, set_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelProverCombinations, num_, IOSIntArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelProverCombinations, list_, IOSObjectArray *)

__attribute__((unused)) static jboolean GeogebraCommonKernelProverCombinations_nextNum(GeogebraCommonKernelProverCombinations *self);

@implementation GeogebraCommonKernelProverCombinations

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)inputSet
                            withInt:(jint)order {
  GeogebraCommonKernelProverCombinations_initWithJavaUtilSet_withInt_(self, inputSet, order);
  return self;
}

- (jboolean)hasNext {
  return !done_;
}

- (id<JavaUtilSet>)next {
  id<JavaUtilSet> ret = [new_JavaUtilHashSet_init() autorelease];
  for (jint i = 0; i < r_; ++i) {
    [ret addWithId:IOSObjectArray_Get(nil_chk(list_), IOSIntArray_Get(nil_chk(num_), i) - 1)];
  }
  done_ = GeogebraCommonKernelProverCombinations_nextNum(self);
  return ret;
}

- (jboolean)nextNum {
  return GeogebraCommonKernelProverCombinations_nextNum(self);
}

- (void)remove {
}

- (void)dealloc {
  RELEASE_(set_);
  RELEASE_(num_);
  RELEASE_(list_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilSet:withInt:", "Combinations", NULL, 0x1, NULL, NULL },
    { "hasNext", NULL, "Z", 0x1, NULL, NULL },
    { "next", NULL, "Ljava.util.Set;", 0x1, NULL, NULL },
    { "nextNum", NULL, "Z", 0x2, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "set_", NULL, 0x2, "Ljava.util.Set;", NULL, "Ljava/util/Set<*>;",  },
    { "r_", NULL, 0x2, "I", NULL, NULL,  },
    { "n_", NULL, 0x2, "I", NULL, NULL,  },
    { "num_", NULL, 0x2, "[I", NULL, NULL,  },
    { "done_", NULL, 0x2, "Z", NULL, NULL,  },
    { "list_", NULL, 0x2, "[Ljava.lang.Object;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelProverCombinations = { 2, "Combinations", "geogebra.common.kernel.prover", NULL, 0x1, 5, methods, 6, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/util/Iterator<Ljava/lang/Object;>;" };
  return &_GeogebraCommonKernelProverCombinations;
}

@end

void GeogebraCommonKernelProverCombinations_initWithJavaUtilSet_withInt_(GeogebraCommonKernelProverCombinations *self, id<JavaUtilSet> inputSet, jint order) {
  NSObject_init(self);
  self->done_ = NO;
  GeogebraCommonKernelProverCombinations_set_set_(self, inputSet);
  self->n_ = [((id<JavaUtilSet>) nil_chk(inputSet)) size];
  self->r_ = order;
  if (self->n_ < self->r_) {
    self->done_ = YES;
    return;
  }
  GeogebraCommonKernelProverCombinations_setAndConsume_num_(self, [IOSIntArray newArrayWithLength:self->r_]);
  for (jint i = 0; i < self->r_; i++) {
    *IOSIntArray_GetRef(self->num_, i) = i + 1;
  }
  GeogebraCommonKernelProverCombinations_setAndConsume_list_(self, [IOSObjectArray newArrayWithLength:self->n_ type:NSObject_class_()]);
  GeogebraCommonKernelProverCombinations_set_list_(self, [((id<JavaUtilSet>) nil_chk(self->set_)) toArray]);
}

GeogebraCommonKernelProverCombinations *new_GeogebraCommonKernelProverCombinations_initWithJavaUtilSet_withInt_(id<JavaUtilSet> inputSet, jint order) {
  GeogebraCommonKernelProverCombinations *self = [GeogebraCommonKernelProverCombinations alloc];
  GeogebraCommonKernelProverCombinations_initWithJavaUtilSet_withInt_(self, inputSet, order);
  return self;
}

jboolean GeogebraCommonKernelProverCombinations_nextNum(GeogebraCommonKernelProverCombinations *self) {
  jint target = self->r_ - 1;
  (*IOSIntArray_GetRef(nil_chk(self->num_), target))++;
  if (IOSIntArray_Get(self->num_, target) > ((self->n_ - (self->r_ - target)) + 1)) {
    while (IOSIntArray_Get(self->num_, target) > ((self->n_ - (self->r_ - target)))) {
      target--;
      if (target < 0) {
        break;
      }
    }
    if (target < 0) {
      return YES;
    }
    (*IOSIntArray_GetRef(self->num_, target))++;
    for (jint i = target + 1; i < self->num_->size_; i++) {
      *IOSIntArray_GetRef(self->num_, i) = IOSIntArray_Get(self->num_, i - 1) + 1;
    }
  }
  return NO;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelProverCombinations)
