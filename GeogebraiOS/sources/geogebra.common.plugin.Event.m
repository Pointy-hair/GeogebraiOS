//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/plugin/Event.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/plugin/Event.h"
#include "geogebra/common/plugin/EventType.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonPluginEvent () {
 @public
  jboolean alwaysDispatched_;
}

@end

@implementation GeogebraCommonPluginEvent

- (instancetype)initWithGeogebraCommonPluginEventTypeEnum:(GeogebraCommonPluginEventTypeEnum *)type
                   withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)target {
  GeogebraCommonPluginEvent_initWithGeogebraCommonPluginEventTypeEnum_withGeogebraCommonKernelGeosGeoElement_(self, type, target);
  return self;
}

- (instancetype)initWithGeogebraCommonPluginEventTypeEnum:(GeogebraCommonPluginEventTypeEnum *)type
                   withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)target
                                             withNSString:(NSString *)argument {
  GeogebraCommonPluginEvent_initWithGeogebraCommonPluginEventTypeEnum_withGeogebraCommonKernelGeosGeoElement_withNSString_(self, type, target, argument);
  return self;
}

- (instancetype)initWithGeogebraCommonPluginEventTypeEnum:(GeogebraCommonPluginEventTypeEnum *)type
                   withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)target
                                             withNSString:(NSString *)argument
                                    withJavaUtilArrayList:(JavaUtilArrayList *)targets {
  GeogebraCommonPluginEvent_initWithGeogebraCommonPluginEventTypeEnum_withGeogebraCommonKernelGeosGeoElement_withNSString_withJavaUtilArrayList_(self, type, target, argument, targets);
  return self;
}

- (instancetype)initWithGeogebraCommonPluginEventTypeEnum:(GeogebraCommonPluginEventTypeEnum *)type
                   withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geoElement
                                              withBoolean:(jboolean)alwaysDispatch {
  GeogebraCommonPluginEvent_initWithGeogebraCommonPluginEventTypeEnum_withGeogebraCommonKernelGeosGeoElement_withBoolean_(self, type, geoElement, alwaysDispatch);
  return self;
}

- (jboolean)isAlwaysDispatched {
  return self->alwaysDispatched_;
}

- (void)dealloc {
  RELEASE_(type_);
  RELEASE_(target_);
  RELEASE_(argument_);
  RELEASE_(targets_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonPluginEventTypeEnum:withGeogebraCommonKernelGeosGeoElement:", "Event", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonPluginEventTypeEnum:withGeogebraCommonKernelGeosGeoElement:withNSString:", "Event", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonPluginEventTypeEnum:withGeogebraCommonKernelGeosGeoElement:withNSString:withJavaUtilArrayList:", "Event", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonPluginEventTypeEnum:withGeogebraCommonKernelGeosGeoElement:withBoolean:", "Event", NULL, 0x1, NULL, NULL },
    { "isAlwaysDispatched", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "type_", NULL, 0x11, "Lgeogebra.common.plugin.EventType;", NULL, NULL,  },
    { "target_", NULL, 0x11, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "argument_", NULL, 0x11, "Ljava.lang.String;", NULL, NULL,  },
    { "targets_", NULL, 0x11, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "alwaysDispatched_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonPluginEvent = { 2, "Event", "geogebra.common.plugin", NULL, 0x1, 5, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonPluginEvent;
}

@end

void GeogebraCommonPluginEvent_initWithGeogebraCommonPluginEventTypeEnum_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonPluginEvent *self, GeogebraCommonPluginEventTypeEnum *type, GeogebraCommonKernelGeosGeoElement *target) {
  GeogebraCommonPluginEvent_initWithGeogebraCommonPluginEventTypeEnum_withGeogebraCommonKernelGeosGeoElement_withNSString_(self, type, target, nil);
}

GeogebraCommonPluginEvent *new_GeogebraCommonPluginEvent_initWithGeogebraCommonPluginEventTypeEnum_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonPluginEventTypeEnum *type, GeogebraCommonKernelGeosGeoElement *target) {
  GeogebraCommonPluginEvent *self = [GeogebraCommonPluginEvent alloc];
  GeogebraCommonPluginEvent_initWithGeogebraCommonPluginEventTypeEnum_withGeogebraCommonKernelGeosGeoElement_(self, type, target);
  return self;
}

void GeogebraCommonPluginEvent_initWithGeogebraCommonPluginEventTypeEnum_withGeogebraCommonKernelGeosGeoElement_withNSString_(GeogebraCommonPluginEvent *self, GeogebraCommonPluginEventTypeEnum *type, GeogebraCommonKernelGeosGeoElement *target, NSString *argument) {
  NSObject_init(self);
  GeogebraCommonPluginEvent_set_type_(self, type);
  GeogebraCommonPluginEvent_set_target_(self, target);
  GeogebraCommonPluginEvent_set_argument_(self, argument);
  GeogebraCommonPluginEvent_set_targets_(self, nil);
}

GeogebraCommonPluginEvent *new_GeogebraCommonPluginEvent_initWithGeogebraCommonPluginEventTypeEnum_withGeogebraCommonKernelGeosGeoElement_withNSString_(GeogebraCommonPluginEventTypeEnum *type, GeogebraCommonKernelGeosGeoElement *target, NSString *argument) {
  GeogebraCommonPluginEvent *self = [GeogebraCommonPluginEvent alloc];
  GeogebraCommonPluginEvent_initWithGeogebraCommonPluginEventTypeEnum_withGeogebraCommonKernelGeosGeoElement_withNSString_(self, type, target, argument);
  return self;
}

void GeogebraCommonPluginEvent_initWithGeogebraCommonPluginEventTypeEnum_withGeogebraCommonKernelGeosGeoElement_withNSString_withJavaUtilArrayList_(GeogebraCommonPluginEvent *self, GeogebraCommonPluginEventTypeEnum *type, GeogebraCommonKernelGeosGeoElement *target, NSString *argument, JavaUtilArrayList *targets) {
  NSObject_init(self);
  GeogebraCommonPluginEvent_set_type_(self, type);
  GeogebraCommonPluginEvent_set_target_(self, target);
  GeogebraCommonPluginEvent_set_argument_(self, argument);
  GeogebraCommonPluginEvent_set_targets_(self, targets);
}

GeogebraCommonPluginEvent *new_GeogebraCommonPluginEvent_initWithGeogebraCommonPluginEventTypeEnum_withGeogebraCommonKernelGeosGeoElement_withNSString_withJavaUtilArrayList_(GeogebraCommonPluginEventTypeEnum *type, GeogebraCommonKernelGeosGeoElement *target, NSString *argument, JavaUtilArrayList *targets) {
  GeogebraCommonPluginEvent *self = [GeogebraCommonPluginEvent alloc];
  GeogebraCommonPluginEvent_initWithGeogebraCommonPluginEventTypeEnum_withGeogebraCommonKernelGeosGeoElement_withNSString_withJavaUtilArrayList_(self, type, target, argument, targets);
  return self;
}

void GeogebraCommonPluginEvent_initWithGeogebraCommonPluginEventTypeEnum_withGeogebraCommonKernelGeosGeoElement_withBoolean_(GeogebraCommonPluginEvent *self, GeogebraCommonPluginEventTypeEnum *type, GeogebraCommonKernelGeosGeoElement *geoElement, jboolean alwaysDispatch) {
  GeogebraCommonPluginEvent_initWithGeogebraCommonPluginEventTypeEnum_withGeogebraCommonKernelGeosGeoElement_(self, type, geoElement);
  self->alwaysDispatched_ = alwaysDispatch;
}

GeogebraCommonPluginEvent *new_GeogebraCommonPluginEvent_initWithGeogebraCommonPluginEventTypeEnum_withGeogebraCommonKernelGeosGeoElement_withBoolean_(GeogebraCommonPluginEventTypeEnum *type, GeogebraCommonKernelGeosGeoElement *geoElement, jboolean alwaysDispatch) {
  GeogebraCommonPluginEvent *self = [GeogebraCommonPluginEvent alloc];
  GeogebraCommonPluginEvent_initWithGeogebraCommonPluginEventTypeEnum_withGeogebraCommonKernelGeosGeoElement_withBoolean_(self, type, geoElement, alwaysDispatch);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonPluginEvent)
