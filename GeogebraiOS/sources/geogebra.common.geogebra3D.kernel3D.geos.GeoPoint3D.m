//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/Geo3DVec.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoElement3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoVec.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoVec4D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/LocateableList.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/MyPoint.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/PathMover.h"
#include "geogebra/common/kernel/PathNormalizer.h"
#include "geogebra/common/kernel/PathOrPoint.h"
#include "geogebra/common/kernel/PathParameter.h"
#include "geogebra/common/kernel/Region.h"
#include "geogebra/common/kernel/RegionParameters.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/MyStringBuffer.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/geos/GeoVec3D.h"
#include "geogebra/common/kernel/geos/PointProperties.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/Region3D.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "geogebra/common/plugin/Operation.h"
#include "geogebra/common/util/StringUtil.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/TreeSet.h"

@interface GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D () {
 @public
  jboolean isInfinite__, isDefined__;
  jint pointSize_;
  GeogebraCommonKernelMatrixCoords *willingCoords_;
  GeogebraCommonKernelMatrixCoords *willingDirection_;
  id<GeogebraCommonKernelPath> path_;
  GeogebraCommonKernelPathParameter *pp_;
  id<GeogebraCommonKernelRegion> region_;
  GeogebraCommonKernelRegionParameters *regionParameters_;
  jdouble x2D_;
  jdouble y2D_;
  jdouble z2D_;
  GeogebraCommonKernelLocateableList *locateableList_;
  GeogebraCommonKernelMatrixCoords *inhom2D_;
  GeogebraCommonKernelMatrixCoordMatrix4x4 *tmpMatrix4x4_;
  GeogebraCommonKernelMatrixCoords *tmpCoordsLength3_;
  GeogebraCommonKernelMatrixCoords *moveNormalDirection_;
  jboolean showUndefinedInAlgebraView__;
  jboolean setEuclidianVisibleBySetParentAlgorithm_;
  GeogebraCommonKernelMatrixCoords *tmpCoords1_, *tmpCoords2_, *tmpCoords3_;
  GeogebraCommonKernelMatrixCoords *tmpWillingCoords_, *tmpWillingDirection_;
  GeogebraCommonKernelMatrixCoordMatrix4x4 *m_drawingMatrix_;
  jboolean trace_;
  JavaUtilArrayList *incidenceList_;
  JavaUtilArrayList *nonIncidenceList_;
  jdouble animationValue_;
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiValue
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)o1
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)vn;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D, willingCoords_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D, willingDirection_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D, path_, id<GeogebraCommonKernelPath>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D, pp_, GeogebraCommonKernelPathParameter *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D, region_, id<GeogebraCommonKernelRegion>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D, regionParameters_, GeogebraCommonKernelRegionParameters *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D, locateableList_, GeogebraCommonKernelLocateableList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D, inhom2D_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D, tmpMatrix4x4_, GeogebraCommonKernelMatrixCoordMatrix4x4 *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D, tmpCoordsLength3_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D, moveNormalDirection_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D, tmpCoords1_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D, tmpCoords2_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D, tmpCoords3_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D, tmpWillingCoords_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D, tmpWillingDirection_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D, m_drawingMatrix_, GeogebraCommonKernelMatrixCoordMatrix4x4 *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D, incidenceList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D, nonIncidenceList_, JavaUtilArrayList *)

static JavaUtilTreeSet *GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_tempSet_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D, tempSet_, JavaUtilTreeSet *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D, tempSet_, JavaUtilTreeSet *)

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setCoordsWithGeogebraCommonKernelMatrixCoords_(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self, GeogebraCommonKernelMatrixCoords *v);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setCoordsWithDouble_withDouble_withDouble_withDouble_(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self, jdouble x, jdouble y, jdouble z, jdouble w);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_updateCoords(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self);

__attribute__((unused)) static GeogebraCommonKernelMatrixCoords *GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_getInhomCoords(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self);

__attribute__((unused)) static jboolean GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_isPointOnPath(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self);

__attribute__((unused)) static GeogebraCommonKernelPathParameter *GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_getPathParameter(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self);

__attribute__((unused)) static jboolean GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_hasRegion(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self);

__attribute__((unused)) static GeogebraCommonKernelRegionParameters *GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_getRegionParameters(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self);

__attribute__((unused)) static jboolean GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_isAbsoluteStartPoint(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_rotateWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self, id<GeogebraCommonKernelArithmeticNumberValue> phiValue, GeogebraCommonKernelMatrixCoords *point);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_rotateWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self, id<GeogebraCommonKernelArithmeticNumberValue> phiValue, GeogebraCommonKernelMatrixCoords *o1, GeogebraCommonKernelMatrixCoords *vn);

@implementation GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                            withNSString:(NSString *)label
                                              withDouble:(jdouble)x
                                              withDouble:(jdouble)y
                                              withDouble:(jdouble)z
                                              withDouble:(jdouble)w {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_withDouble_(self, c, label, x, y, z, w);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                            withNSString:(NSString *)label
                    withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelMatrixCoords_(self, c, label, v);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                            withGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>)path {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelPath_(self, c, path);
  return self;
}

- (void)setVisualStyleWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  [super setVisualStyleWithGeogebraCommonKernelGeosGeoElement:geo];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint]) {
    [self setPointSizeWithInt:[((id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoPointND))) getPointSize]];
    [self setPointStyleWithInt:[((id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoPointND))) getPointStyle]];
  }
  else if ([GeogebraCommonKernelGeosPointProperties_class_() isInstance:geo]) {
    [self setPointSizeWithInt:[((id<GeogebraCommonKernelGeosPointProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosPointProperties))) getPointSize]];
    [self setPointStyleWithInt:[((id<GeogebraCommonKernelGeosPointProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosPointProperties))) getPointStyle]];
  }
}

- (void)setPathWithGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>)path {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_path_(self, path);
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                          withGeogebraCommonKernelRegion:(id<GeogebraCommonKernelRegion>)region {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelRegion_(self, c, region);
  return self;
}

- (void)setRegionWithGeogebraCommonKernelRegion:(id<GeogebraCommonKernelRegion>)region {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_region_(self, region);
}

- (jdouble)distanceWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getInhomCoordsInD3])) distanceWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getInhomCoordsInD3]];
}

- (jdouble)getX {
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getCoords])) getWithInt:1];
}

- (jdouble)getY {
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getCoords])) getWithInt:2];
}

- (jdouble)getZ {
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getCoords])) getWithInt:3];
}

- (void)setCoordsWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v
                                          withBoolean:(jboolean)doPathOrRegion {
  [super setCoordsWithGeogebraCommonKernelMatrixCoords:v];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_updateCoords(self);
  if (doPathOrRegion) {
    if (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_hasRegion(self)) {
      [((id<GeogebraCommonKernelRegion>) nil_chk(region_)) pointChangedForRegionWithGeogebraCommonKernelKernelNDGeoPointND:self];
    }
    if ([self hasPath]) {
      [((id<GeogebraCommonKernelPath>) nil_chk(path_)) pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:self];
      animationValue_ = GeogebraCommonKernelPathNormalizer_toNormalizedPathParameterWithDouble_withDouble_withDouble_(((GeogebraCommonKernelPathParameter *) nil_chk(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_getPathParameter(self)))->t_, [path_ getMinParameter], [path_ getMaxParameter]);
    }
    GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_updateCoords(self);
  }
}

- (void)setCoordsWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setCoordsWithGeogebraCommonKernelMatrixCoords_(self, v);
}

- (void)setCoordsFromPointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setCoordsWithGeogebraCommonKernelMatrixCoords_(self, [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getInhomCoordsInD3]);
}

- (void)setCoordsWithDouble:(jdouble)x
                 withDouble:(jdouble)y
                 withDouble:(jdouble)z
                 withDouble:(jdouble)w {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setCoordsWithDouble_withDouble_withDouble_withDouble_(self, x, y, z, w);
}

- (void)setCoordsWithDouble:(jdouble)x
                 withDouble:(jdouble)y
                 withDouble:(jdouble)z {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setCoordsWithDouble_withDouble_withDouble_withDouble_(self, x, y, 0, z);
}

- (void)updateCoords {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_updateCoords(self);
}

- (void)setCoordsWithGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoVec3D *)v {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setCoordsWithDouble_withDouble_withDouble_withDouble_(self, ((GeogebraCommonKernelGeosGeoVec3D *) nil_chk(v))->x_, v->y_, v->z_, 1.0);
}

- (GeogebraCommonKernelMatrixCoords *)getInhomCoords {
  return GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_getInhomCoords(self);
}

- (GeogebraCommonKernelMatrixCoords *)getInhomCoordsInDWithInt:(jint)dimension {
  GeogebraCommonKernelMatrixCoords *v;
  switch (dimension) {
    case 3:
    return [self getInhomCoordsInD3];
    case 2:
    return [self getInhomCoordsInD2];
    default:
    return nil;
  }
}

- (GeogebraCommonKernelMatrixCoords *)getInhomCoordsInD2 {
  if (inhom2D_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setAndConsume_inhom2D_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(2));
  }
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(inhom2D_)) setXWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(inhom_)) getX]];
  [inhom2D_ setYWithDouble:[inhom_ getY]];
  return inhom2D_;
}

- (GeogebraCommonKernelMatrixCoords *)getInhomCoordsInD3 {
  return inhom_;
}

- (jdouble)getInhomX {
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk(inhom_)) getX];
}

- (jdouble)getInhomY {
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk(inhom_)) getY];
}

- (jdouble)getInhomZ {
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk(inhom_)) getZ];
}

- (GeogebraCommonKernelMatrixCoords *)getCoordsInD2WithGeogebraCommonKernelMatrixCoordSys:(GeogebraCommonKernelMatrixCoordSys *)coordSys {
  GeogebraCommonKernelMatrixCoords *coords;
  if (tmpCoords1_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_tmpCoords1_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
  }
  if ([self hasWillingCoords]) coords = [self getWillingCoords];
  else coords = [self getCoords];
  if (tmpMatrix4x4_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setAndConsume_tmpMatrix4x4_(self, new_GeogebraCommonKernelMatrixCoordMatrix4x4_init());
  }
  if (coordSys == nil) {
    GeogebraCommonKernelMatrixCoordMatrix4x4_IdentityWithGeogebraCommonKernelMatrixCoordMatrix4x4_(tmpMatrix4x4_);
  }
  else {
    [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(tmpMatrix4x4_)) setWithGeogebraCommonKernelMatrixCoordMatrix:[coordSys getMatrixOrthonormal]];
  }
  if (![self hasWillingDirection]) [((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) projectPlaneInPlaneCoordsWithGeogebraCommonKernelMatrixCoordMatrix:tmpMatrix4x4_ withGeogebraCommonKernelMatrixCoords:tmpCoords1_];
  else [((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) projectPlaneThruVIfPossibleInPlaneCoordsWithGeogebraCommonKernelMatrixCoordMatrix:tmpMatrix4x4_ withGeogebraCommonKernelMatrixCoords:[self getWillingDirection] withGeogebraCommonKernelMatrixCoords:tmpCoords1_];
  if (tmpCoordsLength3_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setAndConsume_tmpCoordsLength3_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
  }
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoordsLength3_)) setXWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords1_)) getX]];
  [tmpCoordsLength3_ setYWithDouble:[tmpCoords1_ getY]];
  [tmpCoordsLength3_ setZWithDouble:[tmpCoords1_ getW]];
  return tmpCoordsLength3_;
}

- (GeogebraCommonKernelMatrixCoords *)getCoordsInDWithInt:(jint)dimension {
  switch (dimension) {
    case 3:
    return [self getCoords];
    case 2:
    return [self getCoordsInD2];
    default:
    return nil;
  }
}

- (GeogebraCommonKernelMatrixCoords *)getCoordsInD2 {
  return [self getCoordsInD2WithGeogebraCommonKernelMatrixCoordSys:GeogebraCommonKernelMatrixCoordSys_get_Identity3D_()];
}

- (GeogebraCommonKernelMatrixCoords *)getCoordsInD3 {
  return [self getCoords];
}

- (void)getInhomCoordsWithDoubleArray:(IOSDoubleArray *)d {
  IOSDoubleArray *coords = [((GeogebraCommonKernelMatrixCoords *) nil_chk(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_getInhomCoords(self))) get];
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(d))->size_; i++) *IOSDoubleArray_GetRef(d, i) = IOSDoubleArray_Get(nil_chk(coords), i);
}

- (IOSDoubleArray *)vectorToWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)QI {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *Q = (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(QI, [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(Q)) getCoords])) subWithGeogebraCommonKernelMatrixCoords:[self getCoords]])) get];
}

- (jboolean)movePointWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)rwTransVec
                     withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)endPosition {
  jboolean movedGeo = NO;
  if (endPosition != nil) {
  }
  else {
    GeogebraCommonKernelMatrixCoords *coords;
    GeogebraCommonKernelMatrixCoords *current = GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_getInhomCoords(self);
    if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(current)) getLength] < [((GeogebraCommonKernelMatrixCoords *) nil_chk(rwTransVec)) getLength]) {
      coords = [current addWithGeogebraCommonKernelMatrixCoords:rwTransVec];
    }
    else {
      coords = [current addSmallerWithGeogebraCommonKernelMatrixCoords:rwTransVec];
    }
    GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setCoordsWithGeogebraCommonKernelMatrixCoords_(self, coords);
    movedGeo = YES;
  }
  return movedGeo;
}

- (jboolean)hasPath {
  return path_ != nil;
}

- (jboolean)isPointOnPath {
  return GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_isPointOnPath(self);
}

- (id<GeogebraCommonKernelPath>)getPath {
  return path_;
}

- (GeogebraCommonKernelPathParameter *)getPathParameter {
  return GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_getPathParameter(self);
}

- (void)doPath {
  [((id<GeogebraCommonKernelPath>) nil_chk(path_)) pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:self];
  if (!([((GeogebraCommonKernelGeosGeoElement *) nil_chk([path_ toGeoElement])) isGeoElement3D] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk([path_ toGeoElement])) isGeoList])) [self updateCoordsFrom2DWithBoolean:NO withGeogebraCommonKernelMatrixCoordSys:nil];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_updateCoords(self);
}

- (jboolean)isChangeable {
  return GeogebraCommonKernelGeosGeoPoint_isPointChangeableWithGeogebraCommonKernelGeosGeoElement_(self);
}

- (jboolean)hasRegion {
  return GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_hasRegion(self);
}

- (jboolean)isPointInRegion {
  return region_ != nil;
}

- (void)doRegion {
  [((id<GeogebraCommonKernelRegion>) nil_chk(region_)) pointChangedForRegionWithGeogebraCommonKernelKernelNDGeoPointND:self];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_updateCoords(self);
}

- (GeogebraCommonKernelRegionParameters *)getRegionParameters {
  return GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_getRegionParameters(self);
}

- (id<GeogebraCommonKernelRegion>)getRegion {
  return region_;
}

- (void)updateCoords2D {
  if (region_ != nil) {
    [self updateCoords2DWithGeogebraCommonKernelRegion:region_ withBoolean:YES];
  }
  else {
    x2D_ = [self getX];
    y2D_ = [self getY];
    z2D_ = [self getZ];
  }
}

- (void)updateCoords2DWithGeogebraCommonKernelRegion:(id<GeogebraCommonKernelRegion>)region
                                         withBoolean:(jboolean)updateParameters {
  GeogebraCommonKernelMatrixCoords *coords;
  IOSObjectArray *project;
  if ([self hasWillingCoords]) coords = [self getWillingCoords];
  else coords = [self getCoords];
  if (![self hasWillingDirection]) {
    project = [((id<GeogebraCommonKernelKernelNDRegion3D>) nil_chk(((id<GeogebraCommonKernelKernelNDRegion3D>) check_protocol_cast(region, @protocol(GeogebraCommonKernelKernelNDRegion3D))))) getNormalProjectionWithGeogebraCommonKernelMatrixCoords:coords];
  }
  else {
    project = [((id<GeogebraCommonKernelKernelNDRegion3D>) nil_chk(((id<GeogebraCommonKernelKernelNDRegion3D>) check_protocol_cast(region, @protocol(GeogebraCommonKernelKernelNDRegion3D))))) getProjectionWithGeogebraCommonKernelMatrixCoords:[self getCoords] withGeogebraCommonKernelMatrixCoords:coords withGeogebraCommonKernelMatrixCoords:[self getWillingDirection]];
  }
  x2D_ = [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(nil_chk(project), 1))) getWithInt:1];
  y2D_ = [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(project, 1))) getWithInt:2];
  z2D_ = [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(project, 1))) getWithInt:3];
  if (updateParameters) {
    GeogebraCommonKernelRegionParameters *rp = GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_getRegionParameters(self);
    [((GeogebraCommonKernelRegionParameters *) nil_chk(rp)) setT1WithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(project, 1))) getWithInt:1]];
    [rp setT2WithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(project, 1))) getWithInt:2]];
    [rp setNormalWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(region, [GeogebraCommonKernelGeosGeoElement class])))) getMainDirection]];
  }
}

- (void)setCoords2DWithDouble:(jdouble)x
                   withDouble:(jdouble)y
                   withDouble:(jdouble)z {
  x2D_ = x / z;
  y2D_ = y / z;
}

- (jdouble)getX2D {
  return x2D_;
}

- (jdouble)getY2D {
  return y2D_;
}

- (jdouble)getZ2D {
  return z2D_;
}

- (void)updateCoordsFrom2DWithBoolean:(jboolean)doPathOrRegion
withGeogebraCommonKernelMatrixCoordSys:(GeogebraCommonKernelMatrixCoordSys *)coordsys {
  if (coordsys != nil) [self setCoordsWithGeogebraCommonKernelMatrixCoords:[coordsys getPointWithDouble:[self getX2D] withDouble:[self getY2D]] withBoolean:doPathOrRegion];
  else if (region_ != nil) {
    [self setCoordsWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDRegion3D>) check_protocol_cast(region_, @protocol(GeogebraCommonKernelKernelNDRegion3D))) getPointWithDouble:[self getX2D] withDouble:[self getY2D]] withBoolean:doPathOrRegion];
  }
  else [self setCoordsWithGeogebraCommonKernelMatrixCoords:[new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_([self getX2D], [self getY2D], 0, 1) autorelease] withBoolean:doPathOrRegion];
}

- (void)updateCoordsFrom2DWithBoolean:(jboolean)doPathOrRegion {
  [self updateCoordsFrom2DWithBoolean:doPathOrRegion withGeogebraCommonKernelMatrixCoordSys:GeogebraCommonKernelMatrixCoordSys_get_Identity3D_()];
}

- (void)setWillingCoordsWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)willingCoords {
  if (self->willingCoords_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_willingCoords_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
  }
  if (willingCoords == nil) {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->willingCoords_)) setUndefined];
  }
  else {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->willingCoords_)) setWithGeogebraCommonKernelMatrixCoords:willingCoords];
  }
}

- (void)setWillingCoordsUndefined {
  if (self->willingCoords_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_willingCoords_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
  }
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->willingCoords_)) setUndefined];
}

- (void)setWillingCoordsWithDouble:(jdouble)x
                        withDouble:(jdouble)y
                        withDouble:(jdouble)z
                        withDouble:(jdouble)w {
  if (self->willingCoords_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_willingCoords_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
  }
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(willingCoords_)) setXWithDouble:x];
  [willingCoords_ setYWithDouble:y];
  [willingCoords_ setZWithDouble:z];
  [willingCoords_ setWWithDouble:w];
}

- (void)setWillingDirectionWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)willingDirection {
  if (self->willingDirection_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setAndConsume_willingDirection_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
  }
  if (willingDirection == nil) {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->willingDirection_)) setUndefined];
  }
  else {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->willingDirection_)) setWithGeogebraCommonKernelMatrixCoords:willingDirection];
  }
}

- (void)setWillingDirectionUndefined {
  if (self->willingDirection_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setAndConsume_willingDirection_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
  }
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->willingDirection_)) setUndefined];
}

- (GeogebraCommonKernelMatrixCoords *)getWillingCoords {
  return willingCoords_;
}

- (jboolean)hasWillingCoords {
  return willingCoords_ != nil && [willingCoords_ isDefined];
}

- (GeogebraCommonKernelMatrixCoords *)getWillingDirection {
  return willingDirection_;
}

- (jboolean)hasWillingDirection {
  return willingDirection_ != nil && [willingDirection_ isDefined];
}

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return GeogebraCommonPluginGeoClassEnum_get_POINT3D();
}

- (instancetype)initWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelKernelNDGeoPointND_(self, point);
  return self;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)copy__ {
  return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelKernelNDGeoPointND_(self) autorelease];
}

- (jboolean)isGeoPoint {
  return YES;
}

- (jboolean)isDefined {
  return isDefined__;
}

- (void)setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint]) {
    id<GeogebraCommonKernelKernelNDGeoPointND> p = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoPointND));
    if ([p getPathParameter] != nil) {
      GeogebraCommonKernelPathParameter *pathParameter = GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_getPathParameter(self);
      [((GeogebraCommonKernelPathParameter *) nil_chk(pathParameter)) setWithGeogebraCommonKernelPathParameter:[p getPathParameter]];
    }
    animationValue_ = [p getAnimationValue];
    [self setCoordsWithGeogebraCommonKernelKernelNDGeoPointND:p];
    GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_updateCoords(self);
    [self setModeWithInt:[p getMode]];
  }
}

- (void)setUndefined {
  [self setCoordsWithGeogebraCommonKernelMatrixCoords:[new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(JavaLangDouble_NaN, JavaLangDouble_NaN, JavaLangDouble_NaN, JavaLangDouble_NaN) autorelease] withBoolean:NO];
  [self setWillingCoordsUndefined];
  isDefined__ = NO;
}

- (jboolean)showInEuclidianView {
  return isDefined__ && !isInfinite__;
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuilder *sbToString = [self getSbToString];
  [((JavaLangStringBuilder *) nil_chk(sbToString)) setLengthWithInt:0];
  [sbToString appendWithNSString:label_];
  GeogebraCommonKernelGeosGeoPoint_addEqualSignToStringWithJavaLangStringBuilder_withInt_withInt_(sbToString, toStringMode_, [((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getCoordStyleWithInt:[((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getCoordStyle]]);
  [sbToString appendWithNSString:[self toValueStringWithGeogebraCommonKernelStringTemplate:tpl]];
  return [sbToString description];
}

- (jboolean)hasValueStringChangeableRegardingView {
  return YES;
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if ([self isInfinite]) return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"];
  JavaLangStringBuilder *sbToString = [self getSbBuildValueString];
  GeogebraCommonKernelMatrixCoords *p = [self getInhomCoordsInD3];
  [((JavaLangStringBuilder *) nil_chk(sbToString)) setLengthWithInt:0];
  if ([self getMode] == GeogebraCommonKernelKernel_COORD_CARTESIAN_3D) {
    GeogebraCommonKernelGeosGeoPoint_buildValueStringCoordCartesian3DWithGeogebraCommonKernelKernel_withGeogebraCommonKernelStringTemplate_withDouble_withDouble_withDouble_withJavaLangStringBuilder_(kernel_, tpl, [((GeogebraCommonKernelMatrixCoords *) nil_chk(p)) getX], [p getY], [p getZ], sbToString);
  }
  else if ([self getMode] == GeogebraCommonKernelKernel_COORD_SPHERICAL) {
    GeogebraCommonKernelGeosGeoPoint_buildValueStringCoordSphericalWithGeogebraCommonKernelKernel_withGeogebraCommonKernelStringTemplate_withDouble_withDouble_withDouble_withJavaLangStringBuilder_(kernel_, tpl, [((GeogebraCommonKernelMatrixCoords *) nil_chk(p)) getX], [p getY], [p getZ], sbToString);
  }
  else if (!GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(p)) getZ])) {
    if ([self getMode] == GeogebraCommonKernelKernel_COORD_POLAR) {
      GeogebraCommonKernelGeosGeoPoint_buildValueStringCoordSphericalWithGeogebraCommonKernelKernel_withGeogebraCommonKernelStringTemplate_withDouble_withDouble_withDouble_withJavaLangStringBuilder_(kernel_, tpl, [p getX], [p getY], [p getZ], sbToString);
    }
    else {
      GeogebraCommonKernelGeosGeoPoint_buildValueStringCoordCartesian3DWithGeogebraCommonKernelKernel_withGeogebraCommonKernelStringTemplate_withDouble_withDouble_withDouble_withJavaLangStringBuilder_(kernel_, tpl, [p getX], [p getY], [p getZ], sbToString);
    }
  }
  else {
    GeogebraCommonKernelGeosGeoPoint_buildValueStringWithGeogebraCommonKernelKernel_withGeogebraCommonKernelStringTemplate_withInt_withDouble_withDouble_withJavaLangStringBuilder_(kernel_, tpl, [self getMode], [p getX], [p getY], sbToString);
  }
  return [sbToString description];
}

- (jboolean)isEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint]) return NO;
  return [self isEqualPointNDWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoPointND))];
}

- (jboolean)isEqualPointNDWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  if (!([self isDefined] && [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) isDefined])) return NO;
  if ([self isFinite] && [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) isFinite]) {
    GeogebraCommonKernelMatrixCoords *c1 = GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_getInhomCoords(self);
    GeogebraCommonKernelMatrixCoords *c2 = [P getInhomCoordsInD3];
    return GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(c1)) getX], [((GeogebraCommonKernelMatrixCoords *) nil_chk(c2)) getX]) && GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([c1 getY], [c2 getY]) && GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([c1 getZ], [c2 getZ]);
  }
  else if ([self isInfinite] && [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) isInfinite]) {
    GeogebraCommonKernelMatrixCoords *c1 = [self getCoords];
    GeogebraCommonKernelMatrixCoords *c2 = [P getCoordsInD3];
    return [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(c1)) crossProductWithGeogebraCommonKernelMatrixCoords:c2])) equalsForKernelWithDouble:0 withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION];
  }
  else return NO;
}

- (jboolean)hasChangeableCoordParentNumbers {
  return NO;
}

- (jint)getPointSize {
  return pointSize_;
}

- (jint)getPointStyle {
  return 0;
}

- (void)setPointSizeWithInt:(jint)size {
  pointSize_ = size;
}

- (void)setPointStyleWithInt:(jint)type {
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [super getXMLtagsWithJavaLangStringBuilder:sb];
  switch (toStringMode_) {
    case GeogebraCommonKernelKernel_COORD_POLAR:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<coordStyle style=\"polar\"/>\n"];
    break;
    case GeogebraCommonKernelKernel_COORD_COMPLEX:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<coordStyle style=\"complex\"/>\n"];
    break;
    case GeogebraCommonKernelKernel_COORD_CARTESIAN:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<coordStyle style=\"cartesian\"/>\n"];
    break;
    case GeogebraCommonKernelKernel_COORD_SPHERICAL:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<coordStyle style=\"spherical\"/>\n"];
    break;
    default:
    ;
  }
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<pointSize val=\""];
  [sb appendWithInt:pointSize_];
  [sb appendWithNSString:@"\"/>\n"];
}

- (NSString *)getStartPointXML {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [sb appendWithNSString:@"\t<startPoint "];
  if (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_isAbsoluteStartPoint(self)) {
    [sb appendWithNSString:JreStrcat("$DC", @" x=\"", [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getCoords])) getWithInt:1], '"')];
    [sb appendWithNSString:JreStrcat("$DC", @" y=\"", [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getCoords])) getWithInt:2], '"')];
    [sb appendWithNSString:JreStrcat("$DC", @" z=\"", [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getCoords])) getWithInt:3], '"')];
    [sb appendWithNSString:JreStrcat("$DC", @" w=\"", [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getCoords])) getWithInt:4], '"')];
  }
  else {
    [sb appendWithNSString:@"exp=\""];
    GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [self getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_xmlTemplate_()]);
    [sb appendWithNSString:@"\""];
  }
  [sb appendWithNSString:@"/>\n"];
  return [sb description];
}

- (jboolean)isAbsoluteStartPoint {
  return GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_isAbsoluteStartPoint(self);
}

- (GeogebraCommonKernelLocateableList *)getLocateableList {
  if (locateableList_ == nil) GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setAndConsume_locateableList_(self, new_GeogebraCommonKernelLocateableList_initWithGeogebraCommonKernelKernelNDGeoPointND_(self));
  return locateableList_;
}

- (jboolean)hasLocateableList {
  return locateableList_ != nil;
}

- (void)setLocateableListWithGeogebraCommonKernelLocateableList:(GeogebraCommonKernelLocateableList *)locateableList {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_locateableList_(self, locateableList);
}

- (void)doRemove {
  if (locateableList_ != nil) {
    [locateableList_ doRemove];
  }
  [super doRemove];
}

- (void)update {
  [super update];
  if (locateableList_ != nil) {
    GeogebraCommonKernelGeosGeoElement_updateCascadeLocationWithJavaUtilArrayList_withGeogebraCommonKernelConstruction_(locateableList_, cons_);
  }
}

+ (JavaUtilTreeSet *)getTempSet {
  return GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_getTempSet();
}

- (jboolean)isFinite {
  return isDefined__ && !isInfinite__;
}

- (jboolean)isInfinite {
  return isInfinite__;
}

- (IOSDoubleArray *)getPointAsDouble {
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_getInhomCoords(self))) get];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec *)getVector {
  return [new_GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_initWithGeogebraCommonKernelKernel_withDouble_withDouble_withDouble_(kernel_, [self getX], [self getY], [self getZ]) autorelease];
}

- (GeogebraCommonKernelMatrixCoords *)getLabelPosition {
  return [self getInhomCoordsInD3];
}

- (void)switchMoveModeWithInt:(jint)mode {
  switch (moveMode_) {
    case GeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_XY:
    moveMode_ = GeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_Z;
    break;
    case GeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_Z:
    moveMode_ = GeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_XY;
    break;
    case GeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_TOOL_DEFAULT:
    if (mode == GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE) {
      moveMode_ = GeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_Z;
    }
    else {
      moveMode_ = GeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_XY;
    }
    break;
  }
}

- (void)setMoveModeWithInt:(jint)flag {
  moveMode_ = flag;
}

- (jint)getMoveMode {
  if (![self isIndependent] || [self isFixed]) return GeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_NONE;
  else if ([self hasPath]) return GeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_NONE;
  else if (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_hasRegion(self)) return GeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_XY;
  else return moveMode_;
}

- (jint)getRealMoveMode {
  return moveMode_;
}

- (void)setMoveNormalDirectionWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)d {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_moveNormalDirection_(self, [((GeogebraCommonKernelMatrixCoords *) nil_chk(d)) copyVector]);
}

- (GeogebraCommonKernelMatrixCoords *)getMoveNormalDirection {
  return moveNormalDirection_;
}

- (void)showUndefinedInAlgebraViewWithBoolean:(jboolean)flag {
  showUndefinedInAlgebraView__ = flag;
}

- (jboolean)showInAlgebraView {
  return (isDefined__ || showUndefinedInAlgebraView__);
}

- (void)setWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p {
  [self setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(p, [GeogebraCommonKernelGeosGeoElement class])];
}

- (void)setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)algorithm {
  [super setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:algorithm];
  if (algorithm != nil) [self setConstructionDefaultsWithBoolean:setEuclidianVisibleBySetParentAlgorithm_];
}

- (void)dontSetEuclidianVisibleBySetParentAlgorithm {
  setEuclidianVisibleBySetParentAlgorithm_ = NO;
}

- (void)updateColumnHeadingsForTraceValues {
  [self resetSpreadsheetColumnHeadings];
  [((JavaUtilArrayList *) nil_chk(spreadsheetColumnHeadings_)) addWithId:[self getColumnHeadingTextWithGeogebraCommonKernelArithmeticExpressionNode:[new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [self getXBracket], GeogebraCommonPluginOperationEnum_get_PLUS(), [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [self getNameGeo], GeogebraCommonPluginOperationEnum_get_PLUS(), [self getCloseBracket]) autorelease]) autorelease]]];
  [spreadsheetColumnHeadings_ addWithId:[self getColumnHeadingTextWithGeogebraCommonKernelArithmeticExpressionNode:[new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [self getYBracket], GeogebraCommonPluginOperationEnum_get_PLUS(), [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [self getNameGeo], GeogebraCommonPluginOperationEnum_get_PLUS(), [self getCloseBracket]) autorelease]) autorelease]]];
  [spreadsheetColumnHeadings_ addWithId:[self getColumnHeadingTextWithGeogebraCommonKernelArithmeticExpressionNode:[new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [self getZBracket], GeogebraCommonPluginOperationEnum_get_PLUS(), [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [self getNameGeo], GeogebraCommonPluginOperationEnum_get_PLUS(), [self getCloseBracket]) autorelease]) autorelease]]];
}

- (GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *)getTraceModes {
  return GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_get_SEVERAL_VALUES_OR_COPY();
}

- (NSString *)getTraceDialogAsValues {
  NSString *name = [self getLabelTextOrHTMLWithBoolean:NO];
  JavaLangStringBuilder *sb1 = [new_JavaLangStringBuilder_init() autorelease];
  [sb1 appendWithNSString:@"x("];
  [sb1 appendWithNSString:name];
  [sb1 appendWithNSString:@"), y("];
  [sb1 appendWithNSString:name];
  [sb1 appendWithNSString:@"), z("];
  [sb1 appendWithNSString:name];
  [sb1 appendWithNSString:@")"];
  return [sb1 description];
}

- (void)addToSpreadsheetTraceListWithJavaUtilArrayList:(JavaUtilArrayList *)spreadsheetTraceList {
  GeogebraCommonKernelGeosGeoNumeric *xx = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, [((GeogebraCommonKernelMatrixCoords *) nil_chk(inhom_)) getX]) autorelease];
  [((JavaUtilArrayList *) nil_chk(spreadsheetTraceList)) addWithId:xx];
  GeogebraCommonKernelGeosGeoNumeric *yy = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, [inhom_ getY]) autorelease];
  [spreadsheetTraceList addWithId:yy];
  GeogebraCommonKernelGeosGeoNumeric *zz = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, [inhom_ getZ]) autorelease];
  [spreadsheetTraceList addWithId:zz];
}

- (void)matrixTransformWithDouble:(jdouble)a
                       withDouble:(jdouble)b
                       withDouble:(jdouble)c
                       withDouble:(jdouble)d {
  jdouble x = [self getX];
  jdouble y = [self getY];
  JavaLangDouble *x1 = JavaLangDouble_valueOfWithDouble_(a * x + b * y);
  JavaLangDouble *y1 = JavaLangDouble_valueOfWithDouble_(c * x + d * y);
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setCoordsWithDouble_withDouble_withDouble_withDouble_(self, [x1 doubleValue], [y1 doubleValue], [self getZ], [self getW]);
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a02
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11
                       withDouble:(jdouble)a12
                       withDouble:(jdouble)a20
                       withDouble:(jdouble)a21
                       withDouble:(jdouble)a22 {
  jdouble x = [self getX];
  jdouble y = [self getY];
  jdouble z = [self getZ];
  jdouble x1 = a00 * x + a01 * y + a02 * z;
  jdouble y1 = a10 * x + a11 * y + a12 * z;
  jdouble z1 = a20 * x + a21 * y + a22 * z;
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setCoordsWithDouble_withDouble_withDouble_withDouble_(self, x1, y1, z1, [self getW]);
}

- (jboolean)isMatrixTransformable {
  return YES;
}

- (jint)getDimension {
  return 3;
}

- (jboolean)isCasEvaluableObject {
  return YES;
}

- (void)setCartesian {
  [self setModeWithInt:GeogebraCommonKernelKernel_COORD_CARTESIAN];
}

- (void)setCartesian3D {
  [self setModeWithInt:GeogebraCommonKernelKernel_COORD_CARTESIAN_3D];
}

- (void)setSpherical {
  [self setModeWithInt:GeogebraCommonKernelKernel_COORD_SPHERICAL];
}

- (void)setPolar {
  [self setModeWithInt:GeogebraCommonKernelKernel_COORD_POLAR];
}

- (void)setComplex {
  [self setModeWithInt:GeogebraCommonKernelKernel_COORD_COMPLEX];
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiValue {
  jdouble phi = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(phiValue)) getDouble];
  jdouble cos = JavaLangMath_cosWithDouble_(phi);
  jdouble sin = JavaLangMath_sinWithDouble_(phi);
  jdouble x = [self getX];
  jdouble y = [self getY];
  jdouble z = [self getZ];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setCoordsWithDouble_withDouble_withDouble_withDouble_(self, x * cos - y * sin, x * sin + y * cos, z, [self getW]);
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiValue
                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_rotateWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelMatrixCoords_(self, phiValue, [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getInhomCoords]);
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiValue
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)point {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_rotateWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelMatrixCoords_(self, phiValue, point);
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiValue
                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)S
             withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  GeogebraCommonKernelMatrixCoords *o1 = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(S)) getInhomCoordsInD3];
  GeogebraCommonKernelMatrixCoords *vn = [((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(orientation)) getDirectionInD3];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_rotateWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(self, phiValue, o1, vn);
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiValue
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)o1
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)vn {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_rotateWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(self, phiValue, o1, vn);
}

- (void)rotateWithDouble:(jdouble)phi
withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)o1
withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)vn {
  if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(vn)) isZero] || JavaLangDouble_isNaNWithDouble_(phi)) {
    [self setUndefined];
    return;
  }
  GeogebraCommonKernelMatrixCoords *point = [self getInhomCoordsInD3];
  if (tmpCoords1_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_tmpCoords1_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
  }
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(point)) projectLineWithGeogebraCommonKernelMatrixCoords:o1 withGeogebraCommonKernelMatrixCoords:vn withGeogebraCommonKernelMatrixCoords:tmpCoords1_ withDoubleArray:nil];
  if (tmpCoords2_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setAndConsume_tmpCoords2_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
  }
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords2_)) setSubWithGeogebraCommonKernelMatrixCoords:point withGeogebraCommonKernelMatrixCoords:tmpCoords1_];
  jdouble cos = JavaLangMath_cosWithDouble_(phi);
  jdouble sin = JavaLangMath_sinWithDouble_(phi);
  jdouble l = [vn calcNorm];
  if (tmpCoords3_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setAndConsume_tmpCoords3_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
  }
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords3_)) setCrossProductWithGeogebraCommonKernelMatrixCoords:vn withGeogebraCommonKernelMatrixCoords:tmpCoords2_];
  [tmpCoords3_ setWWithDouble:0];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setCoordsWithGeogebraCommonKernelMatrixCoords_(self, [((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords1_)) setAddWithGeogebraCommonKernelMatrixCoords:tmpCoords1_ withGeogebraCommonKernelMatrixCoords:[tmpCoords2_ setAddWithGeogebraCommonKernelMatrixCoords:[tmpCoords2_ mulInsideWithDouble:cos] withGeogebraCommonKernelMatrixCoords:[tmpCoords3_ mulInsideWithDouble:sin / l]]]);
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiValue
                  withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  [self rotateWithDouble:[((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(phiValue)) getDouble] withGeogebraCommonKernelKernelNDGeoLineND:line];
}

- (void)rotateWithDouble:(jdouble)phi
withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  GeogebraCommonKernelMatrixCoords *o1 = [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) getStartInhomCoords];
  GeogebraCommonKernelMatrixCoords *vn = [line getDirectionInD3];
  [self rotateWithDouble:phi withGeogebraCommonKernelMatrixCoords:o1 withGeogebraCommonKernelMatrixCoords:vn];
}

- (void)pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p {
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p)) isGeoElement3D]) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(p, [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])) setCoordsWithGeogebraCommonKernelMatrixCoords:[self getCoords] withBoolean:NO];
  }
  else {
    GeogebraCommonKernelMatrixCoords *coords = [self getCoords];
    if (!GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getZ])) {
      [p setUndefined];
    }
    else {
      GeogebraCommonKernelGeosGeoPoint_pointChangedWithGeogebraCommonKernelKernelNDGeoPointND_withDouble_withDouble_withDouble_(p, [coords getX], [coords getY], [coords getW]);
    }
  }
  [((GeogebraCommonKernelPathParameter *) nil_chk([p getPathParameter])) setTWithDouble:0];
}

- (void)pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)PI {
  [self pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:PI];
}

- (jboolean)isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)PI
                                                    withDouble:(jdouble)eps {
  return [self isEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(PI, [GeogebraCommonKernelGeosGeoElement class])];
}

- (jdouble)getMinParameter {
  return 0;
}

- (jdouble)getMaxParameter {
  return 0;
}

- (jboolean)isClosedPath {
  return NO;
}

- (id<GeogebraCommonKernelPathMover>)createPathMover {
  return nil;
}

- (jdouble)distanceToPathWithGeogebraCommonKernelPathOrPoint:(id<GeogebraCommonKernelPathOrPoint>)path {
  GeogebraCommonKernelMatrixCoords *coordsOld = [((GeogebraCommonKernelMatrixCoords *) nil_chk(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_getInhomCoords(self))) copyVector];
  if (tmpWillingCoords_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_tmpWillingCoords_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
  }
  if (tmpWillingDirection_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setAndConsume_tmpWillingDirection_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
  }
  if ([self hasWillingCoords]) {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpWillingCoords_)) setWithGeogebraCommonKernelMatrixCoords:[self getWillingCoords]];
  }
  else {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpWillingCoords_)) setWithGeogebraCommonKernelMatrixCoords:coordsOld];
  }
  if ([self hasWillingDirection]) {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpWillingDirection_)) setWithGeogebraCommonKernelMatrixCoords:[self getWillingDirection]];
  }
  else {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpWillingDirection_)) setUndefined];
  }
  [((id<GeogebraCommonKernelPathOrPoint>) nil_chk(path)) pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:self];
  jdouble d;
  if (![((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpWillingDirection_)) isDefined]) {
    d = [((GeogebraCommonKernelMatrixCoords *) nil_chk(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_getInhomCoords(self))) distanceWithGeogebraCommonKernelMatrixCoords:tmpWillingCoords_];
  }
  else {
    d = [((GeogebraCommonKernelMatrixCoords *) nil_chk(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_getInhomCoords(self))) distLineWithGeogebraCommonKernelMatrixCoords:tmpWillingCoords_ withGeogebraCommonKernelMatrixCoords:tmpWillingDirection_];
    [self setWillingDirectionWithGeogebraCommonKernelMatrixCoords:tmpWillingDirection_];
  }
  [self setWillingCoordsWithGeogebraCommonKernelMatrixCoords:tmpWillingCoords_];
  [self setCoordsWithGeogebraCommonKernelMatrixCoords:coordsOld withBoolean:NO];
  return d;
}

- (GeogebraCommonKernelMatrixCoordMatrix4x4 *)getDrawingMatrix {
  return m_drawingMatrix_;
}

- (void)setDrawingMatrixWithGeogebraCommonKernelMatrixCoordMatrix4x4:(GeogebraCommonKernelMatrixCoordMatrix4x4 *)a_drawingMatrix {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_m_drawingMatrix_(self, a_drawingMatrix);
}

- (jboolean)isTraceable {
  return YES;
}

- (void)setTraceWithBoolean:(jboolean)trace {
  self->trace_ = trace;
}

- (jboolean)getTrace {
  return trace_;
}

- (void)mirrorWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)Q {
  jdouble w = [self getW];
  jdouble qx = w * [((GeogebraCommonKernelMatrixCoords *) nil_chk(Q)) getX];
  jdouble qy = w * [Q getY];
  jdouble qz = w * [Q getZ];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setCoordsWithDouble_withDouble_withDouble_withDouble_(self, 2.0 * qx - [self getX], 2.0 * qy - [self getY], 2.0 * qz - [self getZ], w);
}

- (void)mirrorWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  GeogebraCommonKernelMatrixCoords *o1 = [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) getStartInhomCoords];
  GeogebraCommonKernelMatrixCoords *vn = [line getDirectionInD3];
  GeogebraCommonKernelMatrixCoords *point = [self getInhomCoordsInD3];
  if (tmpCoords1_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_tmpCoords1_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
  }
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(point)) projectLineWithGeogebraCommonKernelMatrixCoords:o1 withGeogebraCommonKernelMatrixCoords:vn withGeogebraCommonKernelMatrixCoords:tmpCoords1_ withDoubleArray:nil];
  [self mirrorWithGeogebraCommonKernelMatrixCoords:tmpCoords1_];
}

- (void)mirrorWithGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)plane {
  if (tmpCoords1_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_tmpCoords1_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
  }
  [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getInhomCoordsInD3])) projectPlaneWithGeogebraCommonKernelMatrixCoordMatrix:[((GeogebraCommonKernelMatrixCoordSys *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(plane)) getCoordSys])) getMatrixOrthonormal] withGeogebraCommonKernelMatrixCoords:tmpCoords1_];
  [self mirrorWithGeogebraCommonKernelMatrixCoords:tmpCoords1_];
}

- (void)dilateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)rval
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)S {
  jdouble r = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(rval)) getDouble];
  jdouble temp = (1 - r);
  jdouble w = [self getW];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setCoordsWithDouble_withDouble_withDouble_withDouble_(self, r * [self getX] + temp * [((GeogebraCommonKernelMatrixCoords *) nil_chk(S)) getX] * w, r * [self getY] + temp * [S getY] * w, r * [self getZ] + temp * [S getZ] * w, w);
}

- (JavaUtilArrayList *)getIncidenceList {
  return incidenceList_;
}

- (JavaUtilArrayList *)getNonIncidenceList {
  return nonIncidenceList_;
}

- (void)setIncidenceListWithJavaUtilArrayList:(JavaUtilArrayList *)list {
  if (list == nil) GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setAndConsume_incidenceList_(self, new_JavaUtilArrayList_init());
  else GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setAndConsume_incidenceList_(self, new_JavaUtilArrayList_initWithJavaUtilCollection_(list));
}

- (void)createIncidenceList {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setAndConsume_incidenceList_(self, new_JavaUtilArrayList_init());
  [incidenceList_ addWithId:self];
}

- (void)createNonIncidenceList {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setAndConsume_nonIncidenceList_(self, new_JavaUtilArrayList_init());
}

- (void)addIncidenceWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                               withBoolean:(jboolean)isStartPoint {
  if (incidenceList_ == nil) [self createIncidenceList];
  if (![((JavaUtilArrayList *) nil_chk(incidenceList_)) containsWithId:geo]) [incidenceList_ addWithId:geo];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoConic]) [((GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(geo, [GeogebraCommonKernelKernelNDGeoConicND class])) addPointOnConicWithGeogebraCommonKernelKernelNDGeoPointND:self];
  else if ([geo isGeoLine] && !isStartPoint) [((id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoLineND))) addPointOnLineWithGeogebraCommonKernelKernelNDGeoPointND:self];
}

- (void)addNonIncidenceWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (nonIncidenceList_ == nil) [self createNonIncidenceList];
  if (![((JavaUtilArrayList *) nil_chk(nonIncidenceList_)) containsWithId:geo]) [nonIncidenceList_ addWithId:geo];
}

- (void)removeIncidenceWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (incidenceList_ != nil) [incidenceList_ removeWithId:geo];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoConic]) [((GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(geo, [GeogebraCommonKernelKernelNDGeoConicND class])) removePointOnConicWithGeogebraCommonKernelKernelNDGeoPointND:self];
  else if ([geo isGeoLine]) [((id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoLineND))) removePointOnLineWithGeogebraCommonKernelKernelNDGeoPointND:self];
}

- (jboolean)addIncidenceWithProbabilisticCheckingWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  jboolean incident = NO;
  if (([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint] && [self isEqualWithGeogebraCommonKernelGeosGeoElement:geo]) || ([geo isPath] && [((id<GeogebraCommonKernelPath>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelPath))) isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:self withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION])) {
    incident = YES;
    JavaUtilTreeSet *pred = [self getAllRandomizablePredecessors];
    JavaUtilArrayList *predList = [new_JavaUtilArrayList_init() autorelease];
    JavaUtilTreeSet *tmpSet = GeogebraCommonKernelGeosGeoElement_getTempSet();
    [predList addAllWithJavaUtilCollection:pred];
    [((JavaUtilTreeSet *) nil_chk(pred)) addAllWithJavaUtilCollection:[geo getAllRandomizablePredecessors]];
    id<JavaUtilIterator> it = [pred iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      GeogebraCommonKernelGeosGeoElement *predGeo = [it next];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(predGeo)) storeClone];
    }
    for (jint i = 0; i < 5; ++i) {
      it = [pred iterator];
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        GeogebraCommonKernelGeosGeoElement *predGeo = [it next];
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(predGeo)) randomizeForProbabilisticChecking];
      }
      GeogebraCommonKernelGeosGeoElement_updateCascadeUntilWithJavaUtilArrayList_withJavaUtilTreeSet_withGeogebraCommonKernelAlgosAlgoElement_(predList, [new_JavaUtilTreeSet_init() autorelease], self->algoParent_);
      GeogebraCommonKernelGeosGeoElement_updateCascadeUntilWithJavaUtilArrayList_withJavaUtilTreeSet_withGeogebraCommonKernelAlgosAlgoElement_(predList, [new_JavaUtilTreeSet_init() autorelease], [geo getParentAlgorithm]);
      if ([geo isGeoPoint]) {
        if (![self isEqualWithGeogebraCommonKernelGeosGeoElement:geo]) incident = NO;
      }
      else if ([geo isPath]) {
        if (![((id<GeogebraCommonKernelPath>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelPath))) isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:self withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION]) incident = NO;
      }
      else {
        incident = NO;
      }
      if (!incident) break;
    }
    it = [pred iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      GeogebraCommonKernelGeosGeoElement *predGeo = [it next];
      if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(predGeo)) isIndependent]) {
        GeogebraCommonKernelGeosGeoElement_updateCascadeUntilWithJavaUtilArrayList_withJavaUtilTreeSet_withGeogebraCommonKernelAlgosAlgoElement_(predList, tmpSet, [predGeo getParentAlgorithm]);
      }
      [predGeo recoverFromClone];
    }
    GeogebraCommonKernelGeosGeoElement_updateCascadeWithJavaUtilArrayList_withJavaUtilTreeSet_withBoolean_(predList, tmpSet, NO);
    if (incident) [self addIncidenceWithGeogebraCommonKernelGeosGeoElement:geo withBoolean:NO];
    else [self addNonIncidenceWithGeogebraCommonKernelGeosGeoElement:geo];
  }
  return incident;
}

- (jboolean)evaluatesTo3DVector {
  return YES;
}

- (void)setWithDouble:(jdouble)param1
           withDouble:(jdouble)param2
withGeogebraCommonKernelMyPoint:(GeogebraCommonKernelMyPoint *)leftPoint
withGeogebraCommonKernelMyPoint:(GeogebraCommonKernelMyPoint *)rightPoint {
  [self setCoordsWithGeogebraCommonKernelMatrixCoords:[new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(param2 * ((GeogebraCommonKernelMyPoint *) nil_chk(leftPoint))->x_ + param1 * ((GeogebraCommonKernelMyPoint *) nil_chk(rightPoint))->x_, param2 * leftPoint->y_ + param1 * rightPoint->y_, param2 * [leftPoint getZ] + param1 * [rightPoint getZ], 1.0) autorelease] withBoolean:NO];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_updateCoords(self);
}

- (GeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return GeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY();
}

- (void)translateWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v0 {
  if (tmpCoords2_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setAndConsume_tmpCoords2_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
  }
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords2_)) setMulWithGeogebraCommonKernelMatrixCoords:v0 withDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(v_)) getW]];
  [v_ addInsideWithGeogebraCommonKernelMatrixCoords:tmpCoords2_];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setCoordsWithGeogebraCommonKernelMatrixCoords_(self, v_);
}

- (jboolean)doAnimationStepWithDouble:(jdouble)frameRate {
  return GeogebraCommonKernelGeosGeoPoint_doAnimationStepWithDouble_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelPath_(frameRate, self, path_);
}

- (jboolean)isAnimatable {
  return GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_isPointOnPath(self) && [self isChangeable];
}

- (jdouble)getAnimationValue {
  return animationValue_;
}

- (void)setAnimationValueWithDouble:(jdouble)val {
  animationValue_ = val;
}

- (void)dealloc {
  RELEASE_(willingCoords_);
  RELEASE_(willingDirection_);
  RELEASE_(path_);
  RELEASE_(pp_);
  RELEASE_(region_);
  RELEASE_(regionParameters_);
  RELEASE_(inhom_);
  RELEASE_(locateableList_);
  RELEASE_(inhom2D_);
  RELEASE_(tmpMatrix4x4_);
  RELEASE_(tmpCoordsLength3_);
  RELEASE_(moveNormalDirection_);
  RELEASE_(tmpCoords1_);
  RELEASE_(tmpCoords2_);
  RELEASE_(tmpCoords3_);
  RELEASE_(tmpWillingCoords_);
  RELEASE_(tmpWillingDirection_);
  RELEASE_(m_drawingMatrix_);
  RELEASE_(incidenceList_);
  RELEASE_(nonIncidenceList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:", "GeoPoint3D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withDouble:withDouble:withDouble:withDouble:", "GeoPoint3D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelMatrixCoords:", "GeoPoint3D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelPath:", "GeoPoint3D", NULL, 0x1, NULL, NULL },
    { "setVisualStyleWithGeogebraCommonKernelGeosGeoElement:", "setVisualStyle", "V", 0x1, NULL, NULL },
    { "setPathWithGeogebraCommonKernelPath:", "setPath", "V", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelRegion:", "GeoPoint3D", NULL, 0x1, NULL, NULL },
    { "setRegionWithGeogebraCommonKernelRegion:", "setRegion", "V", 0x1, NULL, NULL },
    { "distanceWithGeogebraCommonKernelKernelNDGeoPointND:", "distance", "D", 0x1, NULL, NULL },
    { "getX", NULL, "D", 0x1, NULL, NULL },
    { "getY", NULL, "D", 0x1, NULL, NULL },
    { "getZ", NULL, "D", 0x1, NULL, NULL },
    { "setCoordsWithGeogebraCommonKernelMatrixCoords:withBoolean:", "setCoords", "V", 0x11, NULL, NULL },
    { "setCoordsWithGeogebraCommonKernelMatrixCoords:", "setCoords", "V", 0x11, NULL, NULL },
    { "setCoordsFromPointWithGeogebraCommonKernelKernelNDGeoPointND:", "setCoordsFromPoint", "V", 0x1, NULL, NULL },
    { "setCoordsWithDouble:withDouble:withDouble:withDouble:", "setCoords", "V", 0x11, NULL, NULL },
    { "setCoordsWithDouble:withDouble:withDouble:", "setCoords", "V", 0x11, NULL, NULL },
    { "updateCoords", NULL, "V", 0x11, NULL, NULL },
    { "setCoordsWithGeogebraCommonKernelGeosGeoVec3D:", "setCoords", "V", 0x11, NULL, NULL },
    { "getInhomCoords", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x11, NULL, NULL },
    { "getInhomCoordsInDWithInt:", "getInhomCoordsInD", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getInhomCoordsInD2", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getInhomCoordsInD3", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getInhomX", NULL, "D", 0x11, NULL, NULL },
    { "getInhomY", NULL, "D", 0x11, NULL, NULL },
    { "getInhomZ", NULL, "D", 0x11, NULL, NULL },
    { "getCoordsInD2WithGeogebraCommonKernelMatrixCoordSys:", "getCoordsInD2", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getCoordsInDWithInt:", "getCoordsInD", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getCoordsInD2", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getCoordsInD3", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getInhomCoordsWithDoubleArray:", "getInhomCoords", "V", 0x11, NULL, NULL },
    { "vectorToWithGeogebraCommonKernelKernelNDGeoPointND:", "vectorTo", "[D", 0x11, NULL, NULL },
    { "movePointWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "movePoint", "Z", 0x4, NULL, NULL },
    { "hasPath", NULL, "Z", 0x1, NULL, NULL },
    { "isPointOnPath", NULL, "Z", 0x11, NULL, NULL },
    { "getPath", NULL, "Lgeogebra.common.kernel.Path;", 0x1, NULL, NULL },
    { "getPathParameter", NULL, "Lgeogebra.common.kernel.PathParameter;", 0x11, NULL, NULL },
    { "doPath", NULL, "V", 0x11, NULL, NULL },
    { "isChangeable", NULL, "Z", 0x1, NULL, NULL },
    { "hasRegion", NULL, "Z", 0x11, NULL, NULL },
    { "isPointInRegion", NULL, "Z", 0x11, NULL, NULL },
    { "doRegion", NULL, "V", 0x11, NULL, NULL },
    { "getRegionParameters", NULL, "Lgeogebra.common.kernel.RegionParameters;", 0x11, NULL, NULL },
    { "getRegion", NULL, "Lgeogebra.common.kernel.Region;", 0x11, NULL, NULL },
    { "updateCoords2D", NULL, "V", 0x1, NULL, NULL },
    { "updateCoords2DWithGeogebraCommonKernelRegion:withBoolean:", "updateCoords2D", "V", 0x1, NULL, NULL },
    { "setCoords2DWithDouble:withDouble:withDouble:", "setCoords2D", "V", 0x1, NULL, NULL },
    { "getX2D", NULL, "D", 0x1, NULL, NULL },
    { "getY2D", NULL, "D", 0x1, NULL, NULL },
    { "getZ2D", NULL, "D", 0x1, NULL, NULL },
    { "updateCoordsFrom2DWithBoolean:withGeogebraCommonKernelMatrixCoordSys:", "updateCoordsFrom2D", "V", 0x1, NULL, NULL },
    { "updateCoordsFrom2DWithBoolean:", "updateCoordsFrom2D", "V", 0x1, NULL, NULL },
    { "setWillingCoordsWithGeogebraCommonKernelMatrixCoords:", "setWillingCoords", "V", 0x1, NULL, NULL },
    { "setWillingCoordsUndefined", NULL, "V", 0x1, NULL, NULL },
    { "setWillingCoordsWithDouble:withDouble:withDouble:withDouble:", "setWillingCoords", "V", 0x1, NULL, NULL },
    { "setWillingDirectionWithGeogebraCommonKernelMatrixCoords:", "setWillingDirection", "V", 0x1, NULL, NULL },
    { "setWillingDirectionUndefined", NULL, "V", 0x1, NULL, NULL },
    { "getWillingCoords", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "hasWillingCoords", NULL, "Z", 0x1, NULL, NULL },
    { "getWillingDirection", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "hasWillingDirection", NULL, "Z", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelKernelNDGeoPointND:", "GeoPoint3D", NULL, 0x1, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x1, NULL, NULL },
    { "isGeoPoint", NULL, "Z", 0x11, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "hasValueStringChangeableRegardingView", NULL, "Z", 0x1, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isEqualWithGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x1, NULL, NULL },
    { "isEqualPointNDWithGeogebraCommonKernelKernelNDGeoPointND:", "isEqualPointND", "Z", 0x1, NULL, NULL },
    { "hasChangeableCoordParentNumbers", NULL, "Z", 0x1, NULL, NULL },
    { "getPointSize", NULL, "I", 0x1, NULL, NULL },
    { "getPointStyle", NULL, "I", 0x1, NULL, NULL },
    { "setPointSizeWithInt:", "setPointSize", "V", 0x1, NULL, NULL },
    { "setPointStyleWithInt:", "setPointStyle", "V", 0x1, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "getStartPointXML", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isAbsoluteStartPoint", NULL, "Z", 0x11, NULL, NULL },
    { "getLocateableList", NULL, "Lgeogebra.common.kernel.LocateableList;", 0x1, NULL, NULL },
    { "hasLocateableList", NULL, "Z", 0x1, NULL, NULL },
    { "setLocateableListWithGeogebraCommonKernelLocateableList:", "setLocateableList", "V", 0x1, NULL, NULL },
    { "doRemove", NULL, "V", 0x1, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "getTempSet", NULL, "Ljava.util.TreeSet;", 0xc, NULL, NULL },
    { "isFinite", NULL, "Z", 0x1, NULL, NULL },
    { "isInfinite", NULL, "Z", 0x1, NULL, NULL },
    { "getPointAsDouble", NULL, "[D", 0x1, NULL, NULL },
    { "getVector", NULL, "Lgeogebra.common.geogebra3D.kernel3D.geos.Geo3DVec;", 0x1, NULL, NULL },
    { "getLabelPosition", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "switchMoveModeWithInt:", "switchMoveMode", "V", 0x1, NULL, NULL },
    { "setMoveModeWithInt:", "setMoveMode", "V", 0x1, NULL, NULL },
    { "getMoveMode", NULL, "I", 0x1, NULL, NULL },
    { "getRealMoveMode", NULL, "I", 0x1, NULL, NULL },
    { "setMoveNormalDirectionWithGeogebraCommonKernelMatrixCoords:", "setMoveNormalDirection", "V", 0x1, NULL, NULL },
    { "getMoveNormalDirection", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "showUndefinedInAlgebraViewWithBoolean:", "showUndefinedInAlgebraView", "V", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x11, NULL, NULL },
    { "setWithGeogebraCommonKernelKernelNDGeoPointND:", "set", "V", 0x1, NULL, NULL },
    { "setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:", "setParentAlgorithm", "V", 0x1, NULL, NULL },
    { "dontSetEuclidianVisibleBySetParentAlgorithm", NULL, "V", 0x1, NULL, NULL },
    { "updateColumnHeadingsForTraceValues", NULL, "V", 0x1, NULL, NULL },
    { "getTraceModes", NULL, "Lgeogebra.common.kernel.geos.GeoElement$TraceModesEnum;", 0x1, NULL, NULL },
    { "getTraceDialogAsValues", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "addToSpreadsheetTraceListWithJavaUtilArrayList:", "addToSpreadsheetTraceList", "V", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "isMatrixTransformable", NULL, "Z", 0x1, NULL, NULL },
    { "getDimension", NULL, "I", 0x1, NULL, NULL },
    { "isCasEvaluableObject", NULL, "Z", 0x11, NULL, NULL },
    { "setCartesian", NULL, "V", 0x1, NULL, NULL },
    { "setCartesian3D", NULL, "V", 0x1, NULL, NULL },
    { "setSpherical", NULL, "V", 0x1, NULL, NULL },
    { "setPolar", NULL, "V", 0x1, NULL, NULL },
    { "setComplex", NULL, "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:", "rotate", "V", 0x11, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:", "rotate", "V", 0x11, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelMatrixCoords:", "rotate", "V", 0x11, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "rotate", "V", 0x2, NULL, NULL },
    { "rotateWithDouble:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoLineND:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithDouble:withGeogebraCommonKernelKernelNDGeoLineND:", "rotate", "V", 0x1, NULL, NULL },
    { "pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:", "pointChanged", "V", 0x1, NULL, NULL },
    { "pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:", "pathChanged", "V", 0x1, NULL, NULL },
    { "isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:withDouble:", "isOnPath", "Z", 0x1, NULL, NULL },
    { "getMinParameter", NULL, "D", 0x1, NULL, NULL },
    { "getMaxParameter", NULL, "D", 0x1, NULL, NULL },
    { "isClosedPath", NULL, "Z", 0x1, NULL, NULL },
    { "createPathMover", NULL, "Lgeogebra.common.kernel.PathMover;", 0x1, NULL, NULL },
    { "distanceToPathWithGeogebraCommonKernelPathOrPoint:", "distanceToPath", "D", 0x1, NULL, NULL },
    { "getDrawingMatrix", NULL, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", 0x1, NULL, NULL },
    { "setDrawingMatrixWithGeogebraCommonKernelMatrixCoordMatrix4x4:", "setDrawingMatrix", "V", 0x1, NULL, NULL },
    { "isTraceable", NULL, "Z", 0x1, NULL, NULL },
    { "setTraceWithBoolean:", "setTrace", "V", 0x1, NULL, NULL },
    { "getTrace", NULL, "Z", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelMatrixCoords:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelKernelNDGeoLineND:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelKernelNDGeoCoordSys2D:", "mirror", "V", 0x1, NULL, NULL },
    { "dilateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelMatrixCoords:", "dilate", "V", 0x1, NULL, NULL },
    { "getIncidenceList", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "getNonIncidenceList", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "setIncidenceListWithJavaUtilArrayList:", "setIncidenceList", "V", 0x1, NULL, NULL },
    { "createIncidenceList", NULL, "V", 0x1, NULL, NULL },
    { "createNonIncidenceList", NULL, "V", 0x1, NULL, NULL },
    { "addIncidenceWithGeogebraCommonKernelGeosGeoElement:withBoolean:", "addIncidence", "V", 0x1, NULL, NULL },
    { "addNonIncidenceWithGeogebraCommonKernelGeosGeoElement:", "addNonIncidence", "V", 0x1, NULL, NULL },
    { "removeIncidenceWithGeogebraCommonKernelGeosGeoElement:", "removeIncidence", "V", 0x11, NULL, NULL },
    { "addIncidenceWithProbabilisticCheckingWithGeogebraCommonKernelGeosGeoElement:", "addIncidenceWithProbabilisticChecking", "Z", 0x1, NULL, NULL },
    { "evaluatesTo3DVector", NULL, "Z", 0x1, NULL, NULL },
    { "setWithDouble:withDouble:withGeogebraCommonKernelMyPoint:withGeogebraCommonKernelMyPoint:", "set", "V", 0x1, NULL, NULL },
    { "getLastHitType", NULL, "Lgeogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
    { "translateWithGeogebraCommonKernelMatrixCoords:", "translate", "V", 0x1, NULL, NULL },
    { "doAnimationStepWithDouble:", "doAnimationStep", "Z", 0x1, NULL, NULL },
    { "isAnimatable", NULL, "Z", 0x1, NULL, NULL },
    { "getAnimationValue", NULL, "D", 0x1, NULL, NULL },
    { "setAnimationValueWithDouble:", "setAnimationValue", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "isInfinite__", "isInfinite", 0x2, "Z", NULL, NULL,  },
    { "isDefined__", "isDefined", 0x2, "Z", NULL, NULL,  },
    { "pointSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "willingCoords_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "willingDirection_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "path_", NULL, 0x2, "Lgeogebra.common.kernel.Path;", NULL, NULL,  },
    { "pp_", NULL, 0x2, "Lgeogebra.common.kernel.PathParameter;", NULL, NULL,  },
    { "region_", NULL, 0x2, "Lgeogebra.common.kernel.Region;", NULL, NULL,  },
    { "regionParameters_", NULL, 0x2, "Lgeogebra.common.kernel.RegionParameters;", NULL, NULL,  },
    { "x2D_", NULL, 0x2, "D", NULL, NULL,  },
    { "y2D_", NULL, 0x2, "D", NULL, NULL,  },
    { "z2D_", NULL, 0x2, "D", NULL, NULL,  },
    { "inhom_", NULL, 0x1, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "locateableList_", NULL, 0x2, "Lgeogebra.common.kernel.LocateableList;", NULL, NULL,  },
    { "inhom2D_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "tmpMatrix4x4_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "tmpCoordsLength3_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "tempSet_", NULL, 0xa, "Ljava.util.TreeSet;", &GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_tempSet_, "Ljava/util/TreeSet<Lgeogebra/common/kernel/algos/AlgoElement;>;",  },
    { "moveMode_", NULL, 0x4, "I", NULL, NULL,  },
    { "moveNormalDirection_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "showUndefinedInAlgebraView__", "showUndefinedInAlgebraView", 0x2, "Z", NULL, NULL,  },
    { "setEuclidianVisibleBySetParentAlgorithm_", NULL, 0x2, "Z", NULL, NULL,  },
    { "tmpCoords1_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "tmpCoords2_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "tmpCoords3_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "tmpWillingCoords_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "tmpWillingDirection_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "m_drawingMatrix_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "trace_", NULL, 0x2, "Z", NULL, NULL,  },
    { "incidenceList_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "nonIncidenceList_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "animationValue_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D = { 2, "GeoPoint3D", "geogebra.common.geogebra3D.kernel3D.geos", NULL, 0x1, 160, methods, 32, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoVec4D_initWithGeogebraCommonKernelConstruction_withInt_(self, c, 4);
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_willingCoords_(self, nil);
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_willingDirection_(self, nil);
  self->x2D_ = 0;
  self->y2D_ = 0;
  self->z2D_ = 0;
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_inhom_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
  self->moveMode_ = GeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_TOOL_DEFAULT;
  self->showUndefinedInAlgebraView__ = YES;
  self->setEuclidianVisibleBySetParentAlgorithm_ = YES;
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_m_drawingMatrix_(self, nil);
  [self setDrawingMatrixWithGeogebraCommonKernelMatrixCoordMatrix4x4:GeogebraCommonKernelMatrixCoordMatrix4x4_Identity()];
  [self setCartesian3D];
  [self setUndefined];
  [self setIncidenceListWithJavaUtilArrayList:nil];
}

GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *c) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_withDouble_(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self, GeogebraCommonKernelConstruction *c, NSString *label, jdouble x, jdouble y, jdouble z, jdouble w) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoVec4D_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_withDouble_(self, c, x, y, z, w);
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_willingCoords_(self, nil);
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_willingDirection_(self, nil);
  self->x2D_ = 0;
  self->y2D_ = 0;
  self->z2D_ = 0;
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_inhom_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
  self->moveMode_ = GeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_TOOL_DEFAULT;
  self->showUndefinedInAlgebraView__ = YES;
  self->setEuclidianVisibleBySetParentAlgorithm_ = YES;
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_m_drawingMatrix_(self, nil);
  [self setDrawingMatrixWithGeogebraCommonKernelMatrixCoordMatrix4x4:GeogebraCommonKernelMatrixCoordMatrix4x4_Identity()];
  [self setLabelWithNSString:label];
  [self setCartesian3D];
  [self setIncidenceListWithJavaUtilArrayList:nil];
}

GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_withDouble_(GeogebraCommonKernelConstruction *c, NSString *label, jdouble x, jdouble y, jdouble z, jdouble w) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_withDouble_(self, c, label, x, y, z, w);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self, GeogebraCommonKernelConstruction *c, NSString *label, GeogebraCommonKernelMatrixCoords *v) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_withDouble_(self, c, label, [((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) getWithInt:1], [v getWithInt:2], [v getWithInt:3], [v getWithInt:4]);
}

GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonKernelConstruction *c, NSString *label, GeogebraCommonKernelMatrixCoords *v) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelMatrixCoords_(self, c, label, v);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelPath_(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self, GeogebraCommonKernelConstruction *c, id<GeogebraCommonKernelPath> path) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoVec4D_initWithGeogebraCommonKernelConstruction_withInt_(self, c, 4);
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_willingCoords_(self, nil);
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_willingDirection_(self, nil);
  self->x2D_ = 0;
  self->y2D_ = 0;
  self->z2D_ = 0;
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_inhom_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
  self->moveMode_ = GeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_TOOL_DEFAULT;
  self->showUndefinedInAlgebraView__ = YES;
  self->setEuclidianVisibleBySetParentAlgorithm_ = YES;
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_m_drawingMatrix_(self, nil);
  [self setDrawingMatrixWithGeogebraCommonKernelMatrixCoordMatrix4x4:GeogebraCommonKernelMatrixCoordMatrix4x4_Identity()];
  [self setCartesian3D];
  [self setPathWithGeogebraCommonKernelPath:path];
}

GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelPath_(GeogebraCommonKernelConstruction *c, id<GeogebraCommonKernelPath> path) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelPath_(self, c, path);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelRegion_(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self, GeogebraCommonKernelConstruction *c, id<GeogebraCommonKernelRegion> region) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoVec4D_initWithGeogebraCommonKernelConstruction_withInt_(self, c, 4);
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_willingCoords_(self, nil);
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_willingDirection_(self, nil);
  self->x2D_ = 0;
  self->y2D_ = 0;
  self->z2D_ = 0;
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_inhom_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
  self->moveMode_ = GeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_TOOL_DEFAULT;
  self->showUndefinedInAlgebraView__ = YES;
  self->setEuclidianVisibleBySetParentAlgorithm_ = YES;
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_m_drawingMatrix_(self, nil);
  [self setDrawingMatrixWithGeogebraCommonKernelMatrixCoordMatrix4x4:GeogebraCommonKernelMatrixCoordMatrix4x4_Identity()];
  [self setCartesian3D];
  [self setRegionWithGeogebraCommonKernelRegion:region];
}

GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelRegion_(GeogebraCommonKernelConstruction *c, id<GeogebraCommonKernelRegion> region) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelRegion_(self, c, region);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setCoordsWithGeogebraCommonKernelMatrixCoords_(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self, GeogebraCommonKernelMatrixCoords *v) {
  [self setCoordsWithGeogebraCommonKernelMatrixCoords:v withBoolean:YES];
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setCoordsWithDouble_withDouble_withDouble_withDouble_(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self, jdouble x, jdouble y, jdouble z, jdouble w) {
  [self setWillingCoordsUndefined];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setCoordsWithGeogebraCommonKernelMatrixCoords_(self, [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(x, y, z, w) autorelease]);
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_updateCoords(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self) {
  if (GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(self->v_)) getWithInt:4])) {
    self->isInfinite__ = YES;
    self->isDefined__ = !(JavaLangDouble_isNaNWithDouble_([self->v_ getWithInt:1]) || JavaLangDouble_isNaNWithDouble_([self->v_ getWithInt:2]) || JavaLangDouble_isNaNWithDouble_([self->v_ getWithInt:3]));
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->inhom_)) setXWithDouble:JavaLangDouble_NaN];
  }
  else {
    self->isInfinite__ = NO;
    self->isDefined__ = [self->v_ isDefined];
    if (self->isDefined__) {
      if ([self->v_ getWithInt:4] < 0) {
        for (jint i = 1; i <= 4; i++) [self->v_ setWithInt:i withDouble:([self->v_ getWithInt:i]) * (-1.0)];
      }
      if ([self->v_ getWithInt:4] == 1.0) {
        [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->inhom_)) setWithInt:1 withDouble:[self->v_ getWithInt:1]];
        [self->inhom_ setWithInt:2 withDouble:[self->v_ getWithInt:2]];
        [self->inhom_ setWithInt:3 withDouble:[self->v_ getWithInt:3]];
      }
      else {
        [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->inhom_)) setWithInt:1 withDouble:[self->v_ getWithInt:1] / [self->v_ getWithInt:4]];
        [self->inhom_ setWithInt:2 withDouble:[self->v_ getWithInt:2] / [self->v_ getWithInt:4]];
        [self->inhom_ setWithInt:3 withDouble:[self->v_ getWithInt:3] / [self->v_ getWithInt:4]];
      }
    }
    else {
      [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->inhom_)) setXWithDouble:JavaLangDouble_NaN];
    }
  }
  [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([self getDrawingMatrix])) setOriginWithGeogebraCommonKernelMatrixCoords:[self getCoords]];
}

GeogebraCommonKernelMatrixCoords *GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_getInhomCoords(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self) {
  return self->inhom_;
}

jboolean GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_isPointOnPath(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self) {
  return self->path_ != nil;
}

GeogebraCommonKernelPathParameter *GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_getPathParameter(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self) {
  if (self->pp_ == nil) GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setAndConsume_pp_(self, new_GeogebraCommonKernelPathParameter_initWithDouble_(0));
  return self->pp_;
}

jboolean GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_hasRegion(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self) {
  return self->region_ != nil;
}

GeogebraCommonKernelRegionParameters *GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_getRegionParameters(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self) {
  if (self->regionParameters_ == nil) GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setAndConsume_regionParameters_(self, new_GeogebraCommonKernelRegionParameters_init());
  return self->regionParameters_;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self, id<GeogebraCommonKernelKernelNDGeoPointND> point) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoVec4D_initWithGeogebraCommonKernelConstruction_(self, [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [GeogebraCommonKernelGeosGeoElement class])))) getConstruction]);
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_willingCoords_(self, nil);
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_willingDirection_(self, nil);
  self->x2D_ = 0;
  self->y2D_ = 0;
  self->z2D_ = 0;
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_inhom_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
  self->moveMode_ = GeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_TOOL_DEFAULT;
  self->showUndefinedInAlgebraView__ = YES;
  self->setEuclidianVisibleBySetParentAlgorithm_ = YES;
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_set_m_drawingMatrix_(self, nil);
  [self setDrawingMatrixWithGeogebraCommonKernelMatrixCoordMatrix4x4:GeogebraCommonKernelMatrixCoordMatrix4x4_Identity()];
  [self setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [GeogebraCommonKernelGeosGeoElement class])];
}

GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelKernelNDGeoPointND_(id<GeogebraCommonKernelKernelNDGeoPointND> point) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelKernelNDGeoPointND_(self, point);
  return self;
}

jboolean GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_isAbsoluteStartPoint(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self) {
  return [self isIndependent] && ![self isLabelSet];
}

JavaUtilTreeSet *GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_getTempSet() {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initialize();
  if (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_tempSet_ == nil) {
    JreStrongAssignAndConsume(&GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_tempSet_, nil, new_JavaUtilTreeSet_init());
  }
  return GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_tempSet_;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_rotateWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self, id<GeogebraCommonKernelArithmeticNumberValue> phiValue, GeogebraCommonKernelMatrixCoords *point) {
  jdouble phi = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(phiValue)) getDouble];
  jdouble cos = JavaLangMath_cosWithDouble_(phi);
  jdouble sin = JavaLangMath_sinWithDouble_(phi);
  jdouble x = [self getX];
  jdouble y = [self getY];
  jdouble z = [self getZ];
  jdouble w = [self getW];
  GeogebraCommonKernelMatrixCoords *Q = point;
  jdouble qx = w * [((GeogebraCommonKernelMatrixCoords *) nil_chk(Q)) getX];
  jdouble qy = w * [Q getY];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_setCoordsWithDouble_withDouble_withDouble_withDouble_(self, (x - qx) * cos + (qy - y) * sin + qx, (x - qx) * sin + (y - qy) * cos + qy, z, w);
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_rotateWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *self, id<GeogebraCommonKernelArithmeticNumberValue> phiValue, GeogebraCommonKernelMatrixCoords *o1, GeogebraCommonKernelMatrixCoords *vn) {
  [self rotateWithDouble:[((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(phiValue)) getDouble] withGeogebraCommonKernelMatrixCoords:o1 withGeogebraCommonKernelMatrixCoords:vn];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D)
