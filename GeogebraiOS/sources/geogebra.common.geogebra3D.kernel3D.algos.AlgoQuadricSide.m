//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricSide.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoElement3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadric.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricComputer.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricComputerSide.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricSide.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DLimited.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DPart.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricSide () {
 @public
  jboolean isHelperAlgo_;
}

@end

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricSide

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited:(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *)inputQuadric
                                             withBoolean:(jboolean)isHelperAlgo {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricSide_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_withBoolean_(self, c, inputQuadric, isHelperAlgo);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                            withNSString:(NSString *)label
withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited:(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *)inputQuadric {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricSide_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_(self, c, label, inputQuadric);
  return self;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *)getInputQuadric {
  return (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) check_class_cast([self getSecondInput], [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class]);
}

- (void)compute {
  if (![((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) nil_chk([self getInputQuadric])) isDefined]) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) nil_chk([self getQuadric])) setUndefined];
    return;
  }
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) nil_chk([self getQuadric])) setDefined];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) nil_chk([self getQuadric])) setTypeWithInt:[((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) nil_chk([self getInputQuadric])) getType]];
  [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricComputer *) nil_chk([self getComputer])) setQuadricWithGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D:[self getQuadric] withGeogebraCommonKernelMatrixCoords:[((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) nil_chk([self getInputQuadric])) getOrigin] withGeogebraCommonKernelMatrixCoords:[((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) nil_chk([self getInputQuadric])) getDirection] withDouble:[((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) nil_chk([self getInputQuadric])) getRadius]];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) check_class_cast([self getQuadric], [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart class])))) setLimitsWithDouble:[((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) nil_chk([self getInputQuadric])) getBottomParameter] withDouble:[((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) nil_chk([self getInputQuadric])) getTopParameter]];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) check_class_cast([self getQuadric], [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart class])))) calcArea];
}

- (void)remove {
  if (removed_) return;
  [super remove];
  if (isHelperAlgo_) [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) nil_chk([self getInputQuadric])) remove];
}

- (GeogebraCommonKernelMatrixCoords *)getDirection {
  return nil;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_QuadricSide();
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited:withBoolean:", "AlgoQuadricSide", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited:", "AlgoQuadricSide", NULL, 0x1, NULL, NULL },
    { "getInputQuadric", NULL, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3DLimited;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
    { "getDirection", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "isHelperAlgo_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricSide = { 2, "AlgoQuadricSide", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 7, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricSide;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricSide_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_withBoolean_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricSide *self, GeogebraCommonKernelConstruction *c, GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *inputQuadric, jboolean isHelperAlgo) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadric_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricComputer_(self, c, inputQuadric, nil, [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricComputerSide_init() autorelease]);
  self->isHelperAlgo_ = isHelperAlgo;
  [self setInputOutputWithGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ inputQuadric } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()] withGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ [self getQuadric] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()]];
  [self compute];
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricSide *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricSide_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_withBoolean_(GeogebraCommonKernelConstruction *c, GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *inputQuadric, jboolean isHelperAlgo) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricSide *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricSide alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricSide_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_withBoolean_(self, c, inputQuadric, isHelperAlgo);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricSide_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricSide *self, GeogebraCommonKernelConstruction *c, NSString *label, GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *inputQuadric) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricSide_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_withBoolean_(self, c, inputQuadric, NO);
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) nil_chk([self getQuadric])) setLabelWithNSString:label];
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricSide *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricSide_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_(GeogebraCommonKernelConstruction *c, NSString *label, GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *inputQuadric) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricSide *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricSide alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricSide_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_(self, c, label, inputQuadric);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricSide)
