//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/commands/CmdIntersect3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdIntersect3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolyhedron.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DLimited.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Manager3DInterface.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CmdIntersect.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPlaneND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoQuadricND.h"
#include "geogebra/common/main/MyError.h"

@implementation GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersect3D

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersect3D_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSBooleanArray *ok = [IOSBooleanArray arrayWithLength:n];
  IOSObjectArray *arg;
  switch (n) {
    case 2:
    arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoElement3D] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoElement3D]) {
      if (([GeogebraCommonKernelKernelNDGeoLineND_class_() isInstance:IOSObjectArray_Get(arg, 0)]) && ([IOSObjectArray_Get(arg, 1) isKindOfClass:[GeogebraCommonKernelKernelNDGeoConicND class]])) return (IOSObjectArray *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectLineConicWithNSStringArray:[c getLabels] withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelKernelNDGeoLineND)) withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelKernelNDGeoConicND class])], [IOSObjectArray class]);
      else if (([IOSObjectArray_Get(arg, 0) isKindOfClass:[GeogebraCommonKernelKernelNDGeoConicND class]]) && ([GeogebraCommonKernelKernelNDGeoLineND_class_() isInstance:IOSObjectArray_Get(arg, 1)])) return (IOSObjectArray *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectLineConicWithNSStringArray:[c getLabels] withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelKernelNDGeoLineND)) withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelKernelNDGeoConicND class])], [IOSObjectArray class]);
      else if (([IOSObjectArray_Get(arg, 0) isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]]) && ([IOSObjectArray_Get(arg, 1) isKindOfClass:[GeogebraCommonKernelKernelNDGeoConicND class]])) return (IOSObjectArray *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectPlaneConicWithNSStringArray:[c getLabels] withGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<GeogebraCommonKernelKernelNDGeoCoordSys2D>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelKernelNDGeoCoordSys2D)) withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelKernelNDGeoConicND class])], [IOSObjectArray class]);
      else if (([IOSObjectArray_Get(arg, 0) isKindOfClass:[GeogebraCommonKernelKernelNDGeoConicND class]]) && ([IOSObjectArray_Get(arg, 1) isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]])) return (IOSObjectArray *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectPlaneConicWithNSStringArray:[c getLabels] withGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<GeogebraCommonKernelKernelNDGeoCoordSys2D>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelKernelNDGeoCoordSys2D)) withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelKernelNDGeoConicND class])], [IOSObjectArray class]);
      else if (([IOSObjectArray_Get(arg, 0) isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]]) && ([IOSObjectArray_Get(arg, 1) isKindOfClass:[GeogebraCommonKernelGeosGeoPolygon class]])) return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectionPointWithNSStringArray:[c getLabels] withGeogebraCommonKernelKernelNDGeoPlaneND:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]) withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoPolygon class])];
      else if (([IOSObjectArray_Get(arg, 0) isKindOfClass:[GeogebraCommonKernelGeosGeoPolygon class]]) && ([IOSObjectArray_Get(arg, 1) isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]])) return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectionPointWithNSStringArray:[c getLabels] withGeogebraCommonKernelKernelNDGeoPlaneND:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]) withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoPolygon class])];
      else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 1) = ([IOSObjectArray_Get(arg, 1) isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]]))) return (IOSObjectArray *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectLineQuadricWithNSStringArray:[c getLabels] withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelKernelNDGeoLineND)) withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class])], [IOSObjectArray class]);
      else if ((*IOSBooleanArray_GetRef(ok, 0) = ([IOSObjectArray_Get(arg, 0) isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine]))) return (IOSObjectArray *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectLineQuadricWithNSStringArray:[c getLabels] withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelKernelNDGeoLineND)) withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class])], [IOSObjectArray class]);
      else if (([IOSObjectArray_Get(arg, 0) isKindOfClass:[GeogebraCommonKernelKernelNDGeoConicND class]]) && ([IOSObjectArray_Get(arg, 1) isKindOfClass:[GeogebraCommonKernelKernelNDGeoConicND class]])) return (IOSObjectArray *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectConicsWithNSStringArray:[c getLabels] withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelKernelNDGeoConicND class]) withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelKernelNDGeoConicND class])], [IOSObjectArray class]);
      else if (([GeogebraCommonKernelKernelNDGeoLineND_class_() isInstance:IOSObjectArray_Get(arg, 0)] && [IOSObjectArray_Get(arg, 1) isKindOfClass:[GeogebraCommonKernelGeosGeoPolygon class]]) || ([GeogebraCommonKernelKernelNDGeoLineND_class_() isInstance:IOSObjectArray_Get(arg, 1)] && [IOSObjectArray_Get(arg, 0) isKindOfClass:[GeogebraCommonKernelGeosGeoPolygon class]])) return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectionPointWithNSStringArray:[c getLabels] withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelKernelNDGeoLineND)) withGeogebraCommonKernelGeosGeoSurfaceFinite:(GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoPolygon class])];
      else if (([GeogebraCommonKernelKernelNDGeoLineND_class_() isInstance:IOSObjectArray_Get(arg, 0)] && [GeogebraCommonKernelKernelNDGeoCoordSys2D_class_() isInstance:IOSObjectArray_Get(arg, 1)]) || ([GeogebraCommonKernelKernelNDGeoLineND_class_() isInstance:IOSObjectArray_Get(arg, 1)] && [GeogebraCommonKernelKernelNDGeoCoordSys2D_class_() isInstance:IOSObjectArray_Get(arg, 0)])) {
        GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point = (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectWithNSString:[c getLabel] withGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(arg, 0) withGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(arg, 1)], [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
        [kernelA_ setStringModeWithGeogebraCommonKernelKernelNDGeoPointND:point];
        return [IOSObjectArray arrayWithObjects:(id[]){ point } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      }
      else if ([GeogebraCommonKernelKernelNDGeoLineND_class_() isInstance:IOSObjectArray_Get(arg, 0)] && [GeogebraCommonKernelKernelNDGeoLineND_class_() isInstance:IOSObjectArray_Get(arg, 1)]) {
        GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point = (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectWithNSString:[c getLabel] withGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(arg, 0) withGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(arg, 1)], [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
        [kernelA_ setStringModeWithGeogebraCommonKernelKernelNDGeoPointND:point];
        return [IOSObjectArray arrayWithObjects:(id[]){ point } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      }
      if (([GeogebraCommonKernelKernelNDGeoPlaneND_class_() isInstance:IOSObjectArray_Get(arg, 0)]) && ([GeogebraCommonKernelKernelNDGeoPlaneND_class_() isInstance:IOSObjectArray_Get(arg, 1)])) {
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectPlanesWithNSString:[c getLabel] withGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelKernelNDGeoPlaneND)) withGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelKernelNDGeoPlaneND))] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      if (([GeogebraCommonKernelKernelNDGeoPlaneND_class_() isInstance:IOSObjectArray_Get(arg, 0)]) && ([IOSObjectArray_Get(arg, 1) isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class]])) {
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectQuadricLimitedWithNSString:[c getLabel] withGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelKernelNDGeoPlaneND)) withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class])] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      else if (([IOSObjectArray_Get(arg, 0) isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class]]) && ([GeogebraCommonKernelKernelNDGeoPlaneND_class_() isInstance:IOSObjectArray_Get(arg, 1)])) {
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectQuadricLimitedWithNSString:[c getLabel] withGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelKernelNDGeoPlaneND)) withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class])] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      if (([GeogebraCommonKernelKernelNDGeoPlaneND_class_() isInstance:IOSObjectArray_Get(arg, 0)]) && ([IOSObjectArray_Get(arg, 1) isKindOfClass:[GeogebraCommonKernelKernelNDGeoQuadricND class]])) {
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectWithNSString:[c getLabel] withGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelKernelNDGeoPlaneND)) withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class])] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      else if (([GeogebraCommonKernelKernelNDGeoPlaneND_class_() isInstance:IOSObjectArray_Get(arg, 1)]) && ([IOSObjectArray_Get(arg, 0) isKindOfClass:[GeogebraCommonKernelKernelNDGeoQuadricND class]])) {
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectWithNSString:[c getLabel] withGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelKernelNDGeoPlaneND)) withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class])] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      if ((*IOSBooleanArray_GetRef(ok, 0) = ([IOSObjectArray_Get(arg, 0) isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]] || [IOSObjectArray_Get(arg, 0) isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class]])) && (*IOSBooleanArray_GetRef(ok, 1) = ([IOSObjectArray_Get(arg, 1) isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]] || [IOSObjectArray_Get(arg, 1) isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class]]))) {
        IOSObjectArray *ret = [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectAsCircleWithNSStringArray:[c getLabels] withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelKernelNDGeoQuadricND class]) withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelKernelNDGeoQuadricND class])];
        return ret;
      }
      if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoPlane])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPolyhedron]))) return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectRegionWithNSStringArray:[c getLabels] withGeogebraCommonKernelKernelNDGeoPlaneND:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]) withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron class]) withIntArray:[c getOutputSizes]];
      else if ((*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPlane])) && (*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoPolyhedron]))) return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectRegionWithNSStringArray:[c getLabels] withGeogebraCommonKernelKernelNDGeoPlaneND:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]) withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron class]) withIntArray:[c getOutputSizes]];
    }
    return [super processWithGeogebraCommonKernelArithmeticCommand:c];
    case 3:
    arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
    if (([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoElement3D]) || ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoElement3D]) || ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoElement3D])) {
      if (([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoLine]) && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoConic] && [GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)]) {
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectLineConicSingleWithNSString:[c getLabel] withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelKernelNDGeoLineND)) withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelKernelNDGeoConicND class]) withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelGeosGeoNumberValue))], [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      else if (([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine]) && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoConic] && [GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)]) {
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectLineConicSingleWithNSString:[c getLabel] withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelKernelNDGeoLineND)) withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelKernelNDGeoConicND class]) withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelGeosGeoNumberValue))], [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      else if (([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoLine]) && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoConic] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoPoint]) {
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectLineConicSingleWithNSString:[c getLabel] withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelKernelNDGeoLineND)) withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelKernelNDGeoConicND class]) withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelKernelNDGeoPointND))], [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      else if (([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine]) && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoConic] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoPoint]) {
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectLineConicSingleWithNSString:[c getLabel] withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelKernelNDGeoLineND)) withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelKernelNDGeoConicND class]) withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelKernelNDGeoPointND))], [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      else if (([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoConic]) && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoConic] && [GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)]) {
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectConicsSingleWithNSString:[c getLabel] withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelKernelNDGeoConicND class]) withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelKernelNDGeoConicND class]) withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelGeosGeoNumberValue))], [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      else if (([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoConic]) && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoConic] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoPoint]) {
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectConicsSingleWithNSString:[c getLabel] withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelKernelNDGeoConicND class]) withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelKernelNDGeoConicND class]) withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelKernelNDGeoPointND))], [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      else if (([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoLine]) && [IOSObjectArray_Get(arg, 1) isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]] && [GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)]) {
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectLineQuadricSingleWithNSString:[c getLabel] withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelKernelNDGeoLineND)) withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]) withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelGeosGeoNumberValue))], [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      else if (([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine]) && [IOSObjectArray_Get(arg, 0) isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]] && [GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)]) {
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectLineQuadricSingleWithNSString:[c getLabel] withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelKernelNDGeoLineND)) withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]) withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelGeosGeoNumberValue))], [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      else if (([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoLine]) && [IOSObjectArray_Get(arg, 1) isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoPoint]) {
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectLineQuadricSingleWithNSString:[c getLabel] withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelKernelNDGeoLineND)) withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]) withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelKernelNDGeoPointND))], [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      else if (([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine]) && [IOSObjectArray_Get(arg, 0) isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoPoint]) {
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectLineQuadricSingleWithNSString:[c getLabel] withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelKernelNDGeoLineND)) withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]) withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelKernelNDGeoPointND))], [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
    }
    default:
    return [super processWithGeogebraCommonKernelArithmeticCommand:c];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdIntersect3D", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersect3D = { 2, "CmdIntersect3D", "geogebra.common.geogebra3D.kernel3D.commands", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersect3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersect3D_initWithGeogebraCommonKernelKernel_(GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersect3D *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdIntersect_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersect3D *new_GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersect3D_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersect3D *self = [GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersect3D alloc];
  GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersect3D_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersect3D)
