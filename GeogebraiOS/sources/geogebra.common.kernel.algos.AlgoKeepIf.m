//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoKeepIf.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoKeepIf.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/MyBoolean.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/main/MyError.h"

@interface GeogebraCommonKernelAlgosAlgoKeepIf () {
 @public
  GeogebraCommonKernelGeosGeoList *inputList_;
  GeogebraCommonKernelGeosGeoList *outputList_;
  GeogebraCommonKernelGeosGeoFunction *boolFun_;
  jint size_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoKeepIf, inputList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoKeepIf, outputList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoKeepIf, boolFun_, GeogebraCommonKernelGeosGeoFunction *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoKeepIf_compute(GeogebraCommonKernelAlgosAlgoKeepIf *self);

@implementation GeogebraCommonKernelAlgosAlgoKeepIf

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)boolFun
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)inputList {
  GeogebraCommonKernelAlgosAlgoKeepIf_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoList_(self, cons, label, boolFun, inputList);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_KeepIf();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, boolFun_);
  IOSObjectArray_Set(input_, 1, inputList_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:outputList_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoList *)getResult {
  return outputList_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoKeepIf_compute(self);
}

- (void)dealloc {
  RELEASE_(inputList_);
  RELEASE_(outputList_);
  RELEASE_(boolFun_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelGeosGeoList:", "AlgoKeepIf", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inputList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "outputList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "boolFun_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "size_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoKeepIf = { 2, "AlgoKeepIf", "geogebra.common.kernel.algos", NULL, 0x1, 5, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoKeepIf;
}

@end

void GeogebraCommonKernelAlgosAlgoKeepIf_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoKeepIf *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoFunction *boolFun, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoKeepIf_set_inputList_(self, inputList);
  GeogebraCommonKernelAlgosAlgoKeepIf_set_boolFun_(self, boolFun);
  GeogebraCommonKernelAlgosAlgoKeepIf_setAndConsume_outputList_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoKeepIf_compute(self);
  [self->outputList_ setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoKeepIf *new_GeogebraCommonKernelAlgosAlgoKeepIf_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoFunction *boolFun, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelAlgosAlgoKeepIf *self = [GeogebraCommonKernelAlgosAlgoKeepIf alloc];
  GeogebraCommonKernelAlgosAlgoKeepIf_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoList_(self, cons, label, boolFun, inputList);
  return self;
}

void GeogebraCommonKernelAlgosAlgoKeepIf_compute(GeogebraCommonKernelAlgosAlgoKeepIf *self) {
  self->size_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->inputList_)) size];
  if (![self->inputList_ isDefined]) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setUndefined];
    return;
  }
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setDefinedWithBoolean:YES];
  [self->outputList_ clear];
  if (self->size_ == 0) return;
  GeogebraCommonKernelArithmeticFunctionVariable *var = [((GeogebraCommonKernelArithmeticFunction *) nil_chk([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->boolFun_)) getFunction])) getFunctionVariable];
  @try {
    for (jint i = 0; i < self->size_; i++) {
      GeogebraCommonKernelGeosGeoElement *geo = [self->inputList_ getWithInt:i];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoNumeric]) {
        if ([self->boolFun_ evaluateBooleanWithDouble:[((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class])) getValue]]) {
          [self->outputList_ addWithGeogebraCommonKernelGeosGeoElement:[geo copyInternalWithGeogebraCommonKernelConstruction:self->cons_]];
        }
      }
      else {
        GeogebraCommonKernelArithmeticExpressionNode *ex = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticFunction *) nil_chk([self->boolFun_ getFunction])) getExpression])) deepCopyWithGeogebraCommonKernelKernel:self->kernel_], [GeogebraCommonKernelArithmeticExpressionNode class]);
        ex = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(ex)) replaceWithGeogebraCommonKernelArithmeticExpressionValue:var withGeogebraCommonKernelArithmeticExpressionValue:[geo evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]])) wrap];
        if ([((GeogebraCommonKernelArithmeticMyBoolean *) nil_chk(((GeogebraCommonKernelArithmeticMyBoolean *) check_class_cast([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(ex)) evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()], [GeogebraCommonKernelArithmeticMyBoolean class])))) getBoolean]) {
          [self->outputList_ addWithGeogebraCommonKernelGeosGeoElement:[geo copyInternalWithGeogebraCommonKernelConstruction:self->cons_]];
        }
      }
    }
  }
  @catch (GeogebraCommonMainMyError *e) {
    [((GeogebraCommonMainMyError *) nil_chk(e)) printStackTrace];
    [self->outputList_ setUndefined];
    return;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoKeepIf)
