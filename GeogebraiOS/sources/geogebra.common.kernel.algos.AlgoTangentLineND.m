//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoTangentLineND.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoTangentLineND.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/kernelND/AlgoIntersectND.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/Localization.h"

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoTangentLineND_compute(GeogebraCommonKernelAlgosAlgoTangentLineND *self);

@implementation GeogebraCommonKernelAlgosAlgoTangentLineND

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
              withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  GeogebraCommonKernelAlgosAlgoTangentLineND_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, label, g, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
              withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  GeogebraCommonKernelAlgosAlgoTangentLineND_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, labels, g, c);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Tangent();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_TANGENTS;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
              withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  GeogebraCommonKernelAlgosAlgoTangentLineND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, g, c);
  return self;
}

- (void)initDiameterAndDirection {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setTangents {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 1, c_);
  IOSObjectArray *out = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(tangents_))->size_ type:GeogebraCommonKernelGeosGeoElement_class_()];
  for (jint i = 0; i < tangents_->size_; i++) {
    IOSObjectArray_Set(out, i, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(tangents_, i), [GeogebraCommonKernelGeosGeoElement class]));
  }
  [super setOutputWithGeogebraCommonKernelGeosGeoElementArray:out];
  [self setDependencies];
}

- (IOSObjectArray *)getTangents {
  return tangents_;
}

- (id<GeogebraCommonKernelKernelNDGeoLineND>)getLine {
  return g_;
}

- (GeogebraCommonKernelKernelNDGeoConicND *)getConic {
  return c_;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getTangentPointWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)conic
                                                                withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)line {
  if (conic != c_) return nil;
  if (line == IOSObjectArray_Get(nil_chk(tangents_), 0)) {
    return IOSObjectArray_Get(nil_chk(tangentPoints_), 0);
  }
  else if (line == IOSObjectArray_Get(tangents_, 1)) {
    return IOSObjectArray_Get(nil_chk(tangentPoints_), 1);
  }
  else {
    return nil;
  }
}

- (jboolean)checkUndefined {
  return [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c_)) isDegenerate];
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoTangentLineND_compute(self);
}

- (void)updateDiameterLine {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)updateTangentWithInt:(jint)index {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"TangentToAParallelToB" withNSString:[((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(g_);
  RELEASE_(c_);
  RELEASE_(tangents_);
  RELEASE_(diameter_);
  RELEASE_(algoIntersect_);
  RELEASE_(tangentPoints_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoConicND:", "AlgoTangentLineND", NULL, 0x4, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoConicND:", "AlgoTangentLineND", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoConicND:", "AlgoTangentLineND", NULL, 0x0, NULL, NULL },
    { "initDiameterAndDirection", NULL, "V", 0x404, NULL, NULL },
    { "setTangents", NULL, "V", 0x404, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x1, NULL, NULL },
    { "getTangents", NULL, "[Lgeogebra.common.kernel.kernelND.GeoLineND;", 0x1, NULL, NULL },
    { "getLine", NULL, "Lgeogebra.common.kernel.kernelND.GeoLineND;", 0x0, NULL, NULL },
    { "getConic", NULL, "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x0, NULL, NULL },
    { "getTangentPointWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoLine:", "getTangentPoint", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "checkUndefined", NULL, "Z", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "updateDiameterLine", NULL, "V", 0x404, NULL, NULL },
    { "updateTangentWithInt:", "updateTangent", "V", 0x404, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "g_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoLineND;", NULL, NULL,  },
    { "c_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoConicND;", NULL, NULL,  },
    { "tangents_", NULL, 0x4, "[Lgeogebra.common.kernel.kernelND.GeoLineND;", NULL, NULL,  },
    { "diameter_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "algoIntersect_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.AlgoIntersectND;", NULL, NULL,  },
    { "tangentPoints_", NULL, 0x4, "[Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "i_", NULL, 0x4, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoTangentLineND = { 2, "AlgoTangentLineND", "geogebra.common.kernel.algos", NULL, 0x401, 17, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoTangentLineND;
}

@end

void GeogebraCommonKernelAlgosAlgoTangentLineND_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonKernelAlgosAlgoTangentLineND *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoLineND> g, GeogebraCommonKernelKernelNDGeoConicND *c) {
  GeogebraCommonKernelAlgosAlgoTangentLineND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, g, c);
  GeogebraCommonKernelGeosGeoElement_setLabelsWithNSString_withGeogebraCommonKernelGeosGeoElementArray_(label, [self getOutput]);
}

void GeogebraCommonKernelAlgosAlgoTangentLineND_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonKernelAlgosAlgoTangentLineND *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, id<GeogebraCommonKernelKernelNDGeoLineND> g, GeogebraCommonKernelKernelNDGeoConicND *c) {
  GeogebraCommonKernelAlgosAlgoTangentLineND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, g, c);
  GeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withGeogebraCommonKernelGeosGeoElementArray_(labels, [self getOutput]);
}

void GeogebraCommonKernelAlgosAlgoTangentLineND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonKernelAlgosAlgoTangentLineND *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoLineND> g, GeogebraCommonKernelKernelNDGeoConicND *c) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoTangentLineND_set_g_(self, g);
  GeogebraCommonKernelAlgosAlgoTangentLineND_set_c_(self, c);
  [self initDiameterAndDirection];
  [self setTangents];
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoTangentLineND_compute(self);
}

void GeogebraCommonKernelAlgosAlgoTangentLineND_compute(GeogebraCommonKernelAlgosAlgoTangentLineND *self) {
  if ([self checkUndefined]) {
    [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(IOSObjectArray_Get(nil_chk(self->tangents_), 0))) setUndefined];
    [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(IOSObjectArray_Get(self->tangents_, 1))) setUndefined];
    return;
  }
  [self updateDiameterLine];
  [((GeogebraCommonKernelKernelNDAlgoIntersectND *) nil_chk(self->algoIntersect_)) update];
  for (self->i_ = 0; self->i_ < ((IOSObjectArray *) nil_chk(self->tangents_))->size_; self->i_++) {
    [self updateTangentWithInt:self->i_];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoTangentLineND)
