//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/CmdFillCells.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/gwt/regexp/shared/MatchResult.h"
#include "com/google/gwt/regexp/shared/RegExp.h"
#include "geogebra/common/awt/GPoint.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/MyPoint.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoElementSpreadsheet.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoLocus.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/statistics/AlgoCellRange.h"
#include "geogebra/common/kernel/statistics/CmdFillCells.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/MyError.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonKernelStatisticsCmdFillCells ()

- (void)removePossibleGeoWithNSString:(NSString *)label;

@end

__attribute__((unused)) static void GeogebraCommonKernelStatisticsCmdFillCells_removePossibleGeoWithNSString_(GeogebraCommonKernelStatisticsCmdFillCells *self, NSString *label);

@implementation GeogebraCommonKernelStatisticsCmdFillCells

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelStatisticsCmdFillCells_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSObjectArray *arg;
  {
    IOSObjectArray *ret;
    switch (n) {
      case 2:
      [((GeogebraCommonMainApp *) nil_chk(app_)) setScrollToShowWithBoolean:NO];
      arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoList]) {
        GeogebraCommonKernelGeosGeoList *cellRange = (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoList class]);
        if (!([[((GeogebraCommonKernelGeosGeoList *) nil_chk(cellRange)) getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelStatisticsAlgoCellRange class]])) {
          GeogebraCommonMainApp_debugWithNSString_(@"not cell range");
          @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
        }
        GeogebraCommonKernelStatisticsAlgoCellRange *algo = (GeogebraCommonKernelStatisticsAlgoCellRange *) check_class_cast([cellRange getParentAlgorithm], [GeogebraCommonKernelStatisticsAlgoCellRange class]);
        IOSObjectArray *points = [((GeogebraCommonKernelStatisticsAlgoCellRange *) nil_chk(algo)) getRectangle];
        GeogebraCommonAwtGPoint *startCoords = IOSObjectArray_Get(nil_chk(points), 0);
        GeogebraCommonAwtGPoint *endCoords = IOSObjectArray_Get(points, 1);
        jint minCol = JavaLangMath_minWithInt_withInt_(((GeogebraCommonAwtGPoint *) nil_chk(startCoords))->x_, ((GeogebraCommonAwtGPoint *) nil_chk(endCoords))->x_);
        jint maxCol = JavaLangMath_maxWithInt_withInt_(startCoords->x_, endCoords->x_);
        jint minRow = JavaLangMath_minWithInt_withInt_(startCoords->y_, endCoords->y_);
        jint maxRow = JavaLangMath_maxWithInt_withInt_(startCoords->y_, endCoords->y_);
        GeogebraCommonKernelGeosGeoElement *geo = IOSObjectArray_Get(arg, 1);
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:GeogebraCommonKernelGeosGeoElement_class_()];
        if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoLocus]) {
          if (![geo isDefined]) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 1)];
          if (minCol + 1 != maxCol) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
          GeogebraCommonKernelGeosGeoLocus *locus = (GeogebraCommonKernelGeosGeoLocus *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoLocus class]);
          JavaUtilArrayList *al = [locus getPoints];
          jint length = JavaLangMath_minWithInt_withInt_([((JavaUtilArrayList *) nil_chk(al)) size], maxRow - minRow);
          for (jint i = 0; i < length; i++) {
            jint row = i + minRow;
            @try {
              GeogebraCommonKernelStatisticsCmdFillCells_removePossibleGeoWithNSString_(self, GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(minCol, row));
              GeogebraCommonKernelStatisticsCmdFillCells_removePossibleGeoWithNSString_(self, GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(minCol + 1, row));
              GeogebraCommonKernelMyPoint *p = [al getWithInt:i];
              [((GeogebraCommonKernelGeosGeoElementSpreadsheet *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getGeoElementSpreadsheet])) setSpreadsheetCellWithGeogebraCommonMainApp:app_ withInt:row withInt:minCol withGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, ((GeogebraCommonKernelMyPoint *) nil_chk(p))->x_) autorelease]];
              [((GeogebraCommonKernelGeosGeoElementSpreadsheet *) nil_chk([kernelA_ getGeoElementSpreadsheet])) setSpreadsheetCellWithGeogebraCommonMainApp:app_ withInt:row withInt:minCol + 1 withGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, p->y_) autorelease]];
            }
            @catch (JavaLangException *e) {
              [((JavaLangException *) nil_chk(e)) printStackTrace];
              [app_ setScrollToShowWithBoolean:YES];
              @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 1)];
            }
          }
          [app_ setScrollToShowWithBoolean:YES];
          return ret;
        }
        if (![geo isGeoList]) {
          for (jint row = minRow; row <= maxRow; row++) for (jint col = minCol; col <= maxCol; col++) {
            @try {
              GeogebraCommonKernelStatisticsCmdFillCells_removePossibleGeoWithNSString_(self, GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(col, row));
              [((GeogebraCommonKernelGeosGeoElementSpreadsheet *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getGeoElementSpreadsheet])) setSpreadsheetCellWithGeogebraCommonMainApp:app_ withInt:row withInt:col withGeogebraCommonKernelGeosGeoElement:geo];
            }
            @catch (JavaLangException *e) {
              [app_ setScrollToShowWithBoolean:YES];
              [((JavaLangException *) nil_chk(e)) printStackTrace];
              @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 1)];
            }
          }
          [app_ setScrollToShowWithBoolean:YES];
          return ret;
        }
        GeogebraCommonKernelGeosGeoList *list = (GeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoList class]);
        if ([list isMatrix]) {
          jint countX = 0;
          for (jint row = minRow; row <= maxRow; row++) {
            GeogebraCommonKernelGeosGeoList *rowList = (GeogebraCommonKernelGeosGeoList *) check_class_cast([list getWithInt:countX % [list size]], [GeogebraCommonKernelGeosGeoList class]);
            countX++;
            jint countY = 0;
            for (jint col = minCol; col <= maxCol; col++) {
              @try {
                GeogebraCommonKernelStatisticsCmdFillCells_removePossibleGeoWithNSString_(self, GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(col, row));
                [((GeogebraCommonKernelGeosGeoElementSpreadsheet *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getGeoElementSpreadsheet])) setSpreadsheetCellWithGeogebraCommonMainApp:app_ withInt:row withInt:col withGeogebraCommonKernelGeosGeoElement:[rowList getWithInt:countY % [((GeogebraCommonKernelGeosGeoList *) nil_chk(rowList)) size]]];
                countY++;
              }
              @catch (JavaLangException *e) {
                [app_ setScrollToShowWithBoolean:YES];
                [((JavaLangException *) nil_chk(e)) printStackTrace];
                @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 1)];
              }
            }
          }
        }
        else {
          jint count = 0;
          for (jint row = minRow; row <= maxRow; row++) for (jint col = minCol; col <= maxCol; col++) {
            @try {
              GeogebraCommonKernelStatisticsCmdFillCells_removePossibleGeoWithNSString_(self, GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(col, row));
              [((GeogebraCommonKernelGeosGeoElementSpreadsheet *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getGeoElementSpreadsheet])) setSpreadsheetCellWithGeogebraCommonMainApp:app_ withInt:row withInt:col withGeogebraCommonKernelGeosGeoElement:[list getWithInt:count % [list size]]];
              count++;
            }
            @catch (JavaLangException *e) {
              [app_ setScrollToShowWithBoolean:YES];
              [((JavaLangException *) nil_chk(e)) printStackTrace];
              @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 1)];
            }
          }
        }
        [app_ storeUndoInfo];
        [app_ setScrollToShowWithBoolean:YES];
        return ret;
      }
      {
        [((GeogebraCommonKernelKernel *) nil_chk([app_ getKernel])) getGeoElementSpreadsheet];
        if (GeogebraCommonKernelGeosGeoElementSpreadsheet_hasSpreadsheetLabelWithGeogebraCommonKernelGeosGeoElement_(IOSObjectArray_Get(arg, 0))) {
          if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoList]) {
            [app_ setScrollToShowWithBoolean:YES];
            @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 1)];
          }
          GeogebraCommonKernelGeosGeoList *list = (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoList class]);
          ComGoogleGwtRegexpSharedMatchResult *matcher = [((ComGoogleGwtRegexpSharedRegExp *) nil_chk(GeogebraCommonKernelGeosGeoElementSpreadsheet_get_spreadsheetPattern_())) execWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
          jint column = GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetColumnWithComGoogleGwtRegexpSharedMatchResult_(matcher);
          jint row = GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetRowWithComGoogleGwtRegexpSharedMatchResult_(matcher);
          if (row == -1 || column == -1) {
            [app_ setScrollToShowWithBoolean:YES];
            @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
          }
          if ([((GeogebraCommonKernelGeosGeoList *) nil_chk(list)) isMatrix]) {
            if (IOSObjectArray_Get(arg, 0) != nil) {
              [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) remove];
            }
            @try {
              jint rows = [list size];
              jint cols = [((GeogebraCommonKernelGeosGeoList *) nil_chk(((GeogebraCommonKernelGeosGeoList *) check_class_cast([list getWithInt:0], [GeogebraCommonKernelGeosGeoList class])))) size];
              for (jint r = 0; r < rows; r++) {
                GeogebraCommonKernelGeosGeoList *rowList = (GeogebraCommonKernelGeosGeoList *) check_class_cast([list getWithInt:r], [GeogebraCommonKernelGeosGeoList class]);
                for (jint c1 = 0; c1 < cols; c1++) {
                  [((GeogebraCommonKernelGeosGeoElementSpreadsheet *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getGeoElementSpreadsheet])) setSpreadsheetCellWithGeogebraCommonMainApp:app_ withInt:row + r withInt:column + c1 withGeogebraCommonKernelGeosGeoElement:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonKernelGeosGeoList *) nil_chk(rowList)) getWithInt:c1])) copy__]];
                }
              }
            }
            @catch (JavaLangException *e) {
              [app_ setScrollToShowWithBoolean:YES];
              @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:list];
            }
          }
          else {
            if (IOSObjectArray_Get(arg, 0) != nil) {
              [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) remove];
            }
            for (jint i = [list size] - 1; i >= 0; i--) @try {
              [((GeogebraCommonKernelGeosGeoElementSpreadsheet *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getGeoElementSpreadsheet])) setSpreadsheetCellWithGeogebraCommonMainApp:app_ withInt:row withInt:column + i withGeogebraCommonKernelGeosGeoElement:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([list getWithInt:i])) copy__]];
            }
            @catch (JavaLangException *e) {
              [((JavaLangException *) nil_chk(e)) printStackTrace];
              [app_ setScrollToShowWithBoolean:YES];
              @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 1)];
            }
          }
        }
        else {
          [app_ setScrollToShowWithBoolean:YES];
          @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
        }
      }
      ret = [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:GeogebraCommonKernelGeosGeoElement_class_()];
      [app_ storeUndoInfo];
      [app_ setScrollToShowWithBoolean:YES];
      return ret;
      default:
      @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
    }
  }
}

- (void)removePossibleGeoWithNSString:(NSString *)label {
  GeogebraCommonKernelStatisticsCmdFillCells_removePossibleGeoWithNSString_(self, label);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdFillCells", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, "Lgeogebra.common.main.MyError;", NULL },
    { "removePossibleGeoWithNSString:", "removePossibleGeo", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsCmdFillCells = { 2, "CmdFillCells", "geogebra.common.kernel.statistics", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsCmdFillCells;
}

@end

void GeogebraCommonKernelStatisticsCmdFillCells_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelStatisticsCmdFillCells *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelStatisticsCmdFillCells *new_GeogebraCommonKernelStatisticsCmdFillCells_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelStatisticsCmdFillCells *self = [GeogebraCommonKernelStatisticsCmdFillCells alloc];
  GeogebraCommonKernelStatisticsCmdFillCells_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

void GeogebraCommonKernelStatisticsCmdFillCells_removePossibleGeoWithNSString_(GeogebraCommonKernelStatisticsCmdFillCells *self, NSString *label) {
  GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(self->kernelA_)) lookupLabelWithNSString:label];
  if (geo != nil) {
    [geo remove];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsCmdFillCells)
