//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectCS1D1D.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectCS1D1D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectCoordSys.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoElement3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordMatrixUtil.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "java/lang/Double.h"

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D1D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)cs1
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)cs2 {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D1D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(self, cons, label, cs1, cs2);
  return self;
}

- (void)compute {
  if (![self outputIsDefined]) return;
  id<GeogebraCommonKernelKernelNDGeoLineND> line1 = (id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast([self getCS1], @protocol(GeogebraCommonKernelKernelNDGeoLineND));
  id<GeogebraCommonKernelKernelNDGeoLineND> line2 = (id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast([self getCS2], @protocol(GeogebraCommonKernelKernelNDGeoLineND));
  GeogebraCommonKernelMatrixCoords *o1 = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line1)) getPointInDWithInt:3 withDouble:0])) getInhomCoordsInSameDimension];
  GeogebraCommonKernelMatrixCoords *d1 = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([line1 getPointInDWithInt:3 withDouble:1])) getInhomCoordsInSameDimension])) subWithGeogebraCommonKernelMatrixCoords:o1];
  GeogebraCommonKernelMatrixCoords *o2 = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line2)) getPointInDWithInt:3 withDouble:0])) getInhomCoordsInSameDimension];
  GeogebraCommonKernelMatrixCoords *d2 = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([line2 getPointInDWithInt:3 withDouble:1])) getInhomCoordsInSameDimension])) subWithGeogebraCommonKernelMatrixCoords:o2];
  IOSObjectArray *project = GeogebraCommonKernelMatrixCoordMatrixUtil_nearestPointsFromTwoLinesWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(o1, d1, o2, d2);
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *p = (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([self getIntersection], [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
  if (project == nil) [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) setUndefined];
  else if (JavaLangDouble_isNaNWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(project, 2))) getWithInt:1])) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getCS1])) isGeoSegment] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getCS1])) isGeoRay] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getCS2])) isGeoSegment] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getCS2])) isGeoRay]) [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) setUndefined];
    else {
      [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) setCoordsWithGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(project, 0)];
      [p updateCoords];
    }
  }
  else if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(project, 0))) equalsForKernelWithGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(project, 1) withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION]) {
    jdouble t1 = [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(project, 2))) getWithInt:1];
    jdouble t2 = [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(project, 2))) getWithInt:2];
    if (t1 > [line1 getMinParameter] - GeogebraCommonKernelKernel_STANDARD_PRECISION && t1 < [line1 getMaxParameter] + GeogebraCommonKernelKernel_STANDARD_PRECISION && t2 > [line2 getMinParameter] - GeogebraCommonKernelKernel_STANDARD_PRECISION && t2 < [line2 getMaxParameter] + GeogebraCommonKernelKernel_STANDARD_PRECISION) [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) setCoordsWithGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(project, 0)];
    else [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) setUndefined];
  }
  else [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) setUndefined];
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Intersect();
}

- (NSString *)getIntersectionTypeString {
  return @"IntersectionPointOfAB";
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoLineND:", "AlgoIntersectCS1D1D", NULL, 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x11, NULL, NULL },
    { "getIntersectionTypeString", NULL, "Ljava.lang.String;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D1D = { 2, "AlgoIntersectCS1D1D", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D1D;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D1D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D1D *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoLineND> cs1, id<GeogebraCommonKernelKernelNDGeoLineND> cs2) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCoordSys_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(cs1, [GeogebraCommonKernelGeosGeoElement class]), (GeogebraCommonKernelGeosGeoElement *) check_class_cast(cs2, [GeogebraCommonKernelGeosGeoElement class]));
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D1D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D1D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoLineND> cs1, id<GeogebraCommonKernelKernelNDGeoLineND> cs2) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D1D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D1D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D1D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(self, cons, label, cs1, cs2);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D1D)
