//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/KernelCAS.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/KernelCAS.h"
#include "geogebra/common/kernel/cas/AlgoDependentCasCell.h"
#include "geogebra/common/kernel/cas/AlgoTangentCurve.h"
#include "geogebra/common/kernel/cas/AlgoTangentFunctionPoint.h"
#include "geogebra/common/kernel/geos/GeoCasCell.h"
#include "geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"

@implementation GeogebraCommonKernelKernelCAS

+ (GeogebraCommonKernelGeosGeoCasCell *)DependentCasCellWithGeogebraCommonKernelGeosGeoCasCell:(GeogebraCommonKernelGeosGeoCasCell *)geoCasCell {
  return GeogebraCommonKernelKernelCAS_DependentCasCellWithGeogebraCommonKernelGeosGeoCasCell_(geoCasCell);
}

+ (GeogebraCommonKernelGeosGeoLine *)TangentWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                                                    withNSString:(NSString *)label
                                      withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
                                         withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f {
  return GeogebraCommonKernelKernelCAS_TangentWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoFunction_(cons, label, P, f);
}

+ (GeogebraCommonKernelGeosGeoLine *)TangentWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                                                    withNSString:(NSString *)label
                                      withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
                                   withGeogebraCommonKernelGeosGeoCurveCartesian:(GeogebraCommonKernelGeosGeoCurveCartesian *)f {
  return GeogebraCommonKernelKernelCAS_TangentWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoCurveCartesian_(cons, label, P, f);
}

- (instancetype)init {
  GeogebraCommonKernelKernelCAS_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "DependentCasCellWithGeogebraCommonKernelGeosGeoCasCell:", "DependentCasCell", "Lgeogebra.common.kernel.geos.GeoCasCell;", 0x19, NULL, NULL },
    { "TangentWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelGeosGeoFunction:", "Tangent", "Lgeogebra.common.kernel.geos.GeoLine;", 0x9, NULL, NULL },
    { "TangentWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelGeosGeoCurveCartesian:", "Tangent", "Lgeogebra.common.kernel.geos.GeoLine;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelKernelCAS = { 2, "KernelCAS", "geogebra.common.kernel", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelKernelCAS;
}

@end

GeogebraCommonKernelGeosGeoCasCell *GeogebraCommonKernelKernelCAS_DependentCasCellWithGeogebraCommonKernelGeosGeoCasCell_(GeogebraCommonKernelGeosGeoCasCell *geoCasCell) {
  GeogebraCommonKernelKernelCAS_initialize();
  GeogebraCommonKernelCasAlgoDependentCasCell *algo = [new_GeogebraCommonKernelCasAlgoDependentCasCell_initWithGeogebraCommonKernelGeosGeoCasCell_(geoCasCell) autorelease];
  return [algo getCasCell];
}

GeogebraCommonKernelGeosGeoLine *GeogebraCommonKernelKernelCAS_TangentWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> P, GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelKernelCAS_initialize();
  GeogebraCommonKernelCasAlgoTangentFunctionPoint *algo = [new_GeogebraCommonKernelCasAlgoTangentFunctionPoint_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoFunction_(cons, label, P, f) autorelease];
  GeogebraCommonKernelGeosGeoLine *t = [algo getTangent];
  [((GeogebraCommonKernelGeosGeoLine *) nil_chk(t)) setToExplicit];
  [t update];
  return t;
}

GeogebraCommonKernelGeosGeoLine *GeogebraCommonKernelKernelCAS_TangentWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoCurveCartesian_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> P, GeogebraCommonKernelGeosGeoCurveCartesian *f) {
  GeogebraCommonKernelKernelCAS_initialize();
  GeogebraCommonKernelCasAlgoTangentCurve *algo = [new_GeogebraCommonKernelCasAlgoTangentCurve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoCurveCartesian_(cons, label, P, f) autorelease];
  GeogebraCommonKernelGeosGeoLine *t = [algo getTangent];
  [((GeogebraCommonKernelGeosGeoLine *) nil_chk(t)) setToExplicit];
  [t update];
  return t;
}

void GeogebraCommonKernelKernelCAS_init(GeogebraCommonKernelKernelCAS *self) {
  NSObject_init(self);
}

GeogebraCommonKernelKernelCAS *new_GeogebraCommonKernelKernelCAS_init() {
  GeogebraCommonKernelKernelCAS *self = [GeogebraCommonKernelKernelCAS alloc];
  GeogebraCommonKernelKernelCAS_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelKernelCAS)
