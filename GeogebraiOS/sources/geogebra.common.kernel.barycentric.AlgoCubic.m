//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/barycentric/AlgoCubic.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/Equation.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "geogebra/common/kernel/barycentric/AlgoCubic.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "geogebra/common/kernel/parser/ParseException.h"
#include "geogebra/common/kernel/parser/Parser.h"
#include "geogebra/common/main/AlgoCubicSwitchInterface.h"
#include "geogebra/common/main/AlgoCubicSwitchParams.h"
#include "geogebra/common/main/App.h"

@interface GeogebraCommonKernelBarycentricAlgoCubic () {
 @public
  GeogebraCommonKernelGeosGeoPoint *A_, *B_, *C_;
  id<GeogebraCommonKernelArithmeticNumberValue> n_;
  GeogebraCommonKernelImplicitGeoImplicitPoly *poly_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelBarycentricAlgoCubic, A_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelBarycentricAlgoCubic, B_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelBarycentricAlgoCubic, C_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelBarycentricAlgoCubic, n_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelBarycentricAlgoCubic, poly_, GeogebraCommonKernelImplicitGeoImplicitPoly *)

__attribute__((unused)) static void GeogebraCommonKernelBarycentricAlgoCubic_compute(GeogebraCommonKernelBarycentricAlgoCubic *self);

@implementation GeogebraCommonKernelBarycentricAlgoCubic

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)B
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)C
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)e {
  GeogebraCommonKernelBarycentricAlgoCubic_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, A, B, C, e);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Cubic();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:4 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, A_);
  IOSObjectArray_Set(input_, 1, B_);
  IOSObjectArray_Set(input_, 2, C_);
  IOSObjectArray_Set(input_, 3, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(n_)) toGeoElement]);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:poly_];
  [self setDependencies];
}

- (GeogebraCommonKernelImplicitGeoImplicitPoly *)getResult {
  return poly_;
}

- (void)compute {
  GeogebraCommonKernelBarycentricAlgoCubic_compute(self);
}

- (void)dealloc {
  RELEASE_(A_);
  RELEASE_(B_);
  RELEASE_(C_);
  RELEASE_(n_);
  RELEASE_(poly_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoCubic", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.implicit.GeoImplicitPoly;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "A_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "B_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "C_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "n_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "poly_", NULL, 0x2, "Lgeogebra.common.kernel.implicit.GeoImplicitPoly;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelBarycentricAlgoCubic = { 2, "AlgoCubic", "geogebra.common.kernel.barycentric", NULL, 0x1, 5, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelBarycentricAlgoCubic;
}

@end

void GeogebraCommonKernelBarycentricAlgoCubic_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelBarycentricAlgoCubic *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *A, GeogebraCommonKernelGeosGeoPoint *B, GeogebraCommonKernelGeosGeoPoint *C, id<GeogebraCommonKernelArithmeticNumberValue> e) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getAlgoCubicSwitch];
  GeogebraCommonKernelBarycentricAlgoCubic_set_A_(self, A);
  GeogebraCommonKernelBarycentricAlgoCubic_set_B_(self, B);
  GeogebraCommonKernelBarycentricAlgoCubic_set_C_(self, C);
  GeogebraCommonKernelBarycentricAlgoCubic_set_n_(self, e);
  GeogebraCommonKernelBarycentricAlgoCubic_setAndConsume_poly_(self, new_GeogebraCommonKernelImplicitGeoImplicitPoly_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelBarycentricAlgoCubic_compute(self);
  [self->poly_ setLabelWithNSString:label];
}

GeogebraCommonKernelBarycentricAlgoCubic *new_GeogebraCommonKernelBarycentricAlgoCubic_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *A, GeogebraCommonKernelGeosGeoPoint *B, GeogebraCommonKernelGeosGeoPoint *C, id<GeogebraCommonKernelArithmeticNumberValue> e) {
  GeogebraCommonKernelBarycentricAlgoCubic *self = [GeogebraCommonKernelBarycentricAlgoCubic alloc];
  GeogebraCommonKernelBarycentricAlgoCubic_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, A, B, C, e);
  return self;
}

void GeogebraCommonKernelBarycentricAlgoCubic_compute(GeogebraCommonKernelBarycentricAlgoCubic *self) {
  if ([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getAlgoCubicSwitch] == nil) {
    [((GeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(self->poly_)) setUndefined];
    return;
  }
  jdouble c = [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->A_)) distanceWithGeogebraCommonKernelGeosGeoPoint:self->B_];
  jdouble b = [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->C_)) distanceWithGeogebraCommonKernelGeosGeoPoint:self->A_];
  jdouble a = [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->B_)) distanceWithGeogebraCommonKernelGeosGeoPoint:self->C_];
  jdouble x1 = self->A_->inhomX_;
  jdouble y1 = self->A_->inhomY_;
  jdouble x2 = self->B_->inhomX_;
  jdouble y2 = self->B_->inhomY_;
  jdouble x3 = self->C_->inhomX_;
  jdouble y3 = self->C_->inhomY_;
  NSString *equation = @"";
  jdouble det = (-x2 + x3) * (y1 - y3) + (x1 - x3) * (y2 - y3);
  if (GeogebraCommonKernelKernel_isZeroWithDouble_(det)) {
    [((GeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(self->poly_)) setUndefined];
    return;
  }
  NSString *Astr = JreStrcat("CD$D$DC", '(', (x3 - x2) / det, @"*y  + ", (y2 - y3) / det, @"*x - ", ((x3 - x2) * y3 + (y2 - y3) * x3) / det, ')');
  NSString *Bstr = JreStrcat("CD$D$DC", '(', (x1 - x3) / det, @"*y  + ", (y3 - y1) / det, @"*x - ", ((x1 - x3) * y1 + (y3 - y1) * x1) / det, ')');
  NSString *Cstr = JreStrcat("CD$D$DC", '(', (x2 - x1) / det, @"*y  + ", (y1 - y2) / det, @"*x - ", ((x2 - x1) * y2 + (y1 - y2) * x2) / det, ')');
  equation = [((GeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) cubicSwitchWithGeogebraCommonMainAlgoCubicSwitchParams:[new_GeogebraCommonMainAlgoCubicSwitchParams_initWithDouble_withDouble_withDouble_withDouble_([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->n_)) getDouble], a, b, c) autorelease]];
  if (equation == nil) {
    [((GeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(self->poly_)) setUndefined];
    return;
  }
  equation = [((NSString *) nil_chk(equation)) replace:@"A" withSequence:Astr];
  equation = [((NSString *) nil_chk(equation)) replace:@"B" withSequence:Bstr];
  equation = [((NSString *) nil_chk(equation)) replace:@"C" withSequence:Cstr];
  equation = [((NSString *) nil_chk(equation)) replace:@"a" withSequence:JreStrcat("D", a)];
  equation = [((NSString *) nil_chk(equation)) replace:@"b" withSequence:JreStrcat("D", b)];
  equation = [((NSString *) nil_chk(equation)) replace:@"c" withSequence:JreStrcat("D", c)];
  GeogebraCommonKernelParserParser *parser = [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getParser];
  GeogebraCommonKernelCommandsAlgebraProcessor *algebraProcessor = [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getAlgebraProcessor];
  GeogebraCommonKernelArithmeticValidExpression *ve = nil;
  @try {
    ve = [((GeogebraCommonKernelParserParser *) nil_chk(parser)) parseGeoGebraExpressionWithNSString:equation];
    GeogebraCommonKernelImplicitGeoImplicitPoly *result = (GeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast((IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk(algebraProcessor)) processEquationWithGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *) check_class_cast(ve, [GeogebraCommonKernelArithmeticEquation class]) withBoolean:YES]), 0)), [GeogebraCommonKernelImplicitGeoImplicitPoly class]);
    [((GeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(result)) remove];
    [((GeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(self->poly_)) setCoeffWithDoubleArray2:[result getCoeff]];
    [self->poly_ setDefined];
  }
  @catch (GeogebraCommonKernelParserParseException *e) {
    [((GeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(self->poly_)) setUndefined];
    GeogebraCommonMainApp_errorWithNSString_(equation);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelBarycentricAlgoCubic)
