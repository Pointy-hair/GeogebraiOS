//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/arithmetic3D/MyVec3DNode.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Manager3DInterface.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Inspecting.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/arithmetic/Traversing.h"
#include "geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "geogebra/common/kernel/arithmetic3D/MyVec3DNode.h"
#include "geogebra/common/kernel/kernelND/Geo3DVec.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/main/MyParseError.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/HashSet.h"
#include "java/util/TreeSet.h"

@interface GeogebraCommonKernelArithmetic3DMyVec3DNode () {
 @public
  id<GeogebraCommonKernelArithmeticExpressionValue> x_, y_, z_;
  GeogebraCommonKernelKernel *kernel_;
  jint mode_;
  jboolean isCASVector__;
}

- (void)setCoordsWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)x
                 withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)y
                 withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)z;

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl
                                                 withBoolean:(jboolean)values;

- (void)appendSeparatorWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmetic3DMyVec3DNode, x_, id<GeogebraCommonKernelArithmeticExpressionValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmetic3DMyVec3DNode, y_, id<GeogebraCommonKernelArithmeticExpressionValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmetic3DMyVec3DNode, z_, id<GeogebraCommonKernelArithmeticExpressionValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmetic3DMyVec3DNode, kernel_, GeogebraCommonKernelKernel *)

__attribute__((unused)) static void GeogebraCommonKernelArithmetic3DMyVec3DNode_setCoordsWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelArithmetic3DMyVec3DNode *self, id<GeogebraCommonKernelArithmeticExpressionValue> x, id<GeogebraCommonKernelArithmeticExpressionValue> y, id<GeogebraCommonKernelArithmeticExpressionValue> z);

__attribute__((unused)) static IOSDoubleArray *GeogebraCommonKernelArithmetic3DMyVec3DNode_getCoords(GeogebraCommonKernelArithmetic3DMyVec3DNode *self);

__attribute__((unused)) static NSString *GeogebraCommonKernelArithmetic3DMyVec3DNode_toStringWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelArithmetic3DMyVec3DNode *self, GeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static NSString *GeogebraCommonKernelArithmetic3DMyVec3DNode_toStringWithGeogebraCommonKernelStringTemplate_withBoolean_(GeogebraCommonKernelArithmetic3DMyVec3DNode *self, GeogebraCommonKernelStringTemplate *tpl, jboolean values);

__attribute__((unused)) static void GeogebraCommonKernelArithmetic3DMyVec3DNode_appendSeparatorWithJavaLangStringBuilder_(GeogebraCommonKernelArithmetic3DMyVec3DNode *self, JavaLangStringBuilder *sb);

@implementation GeogebraCommonKernelArithmetic3DMyVec3DNode

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelArithmetic3DMyVec3DNode_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
 withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)x
 withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)y
 withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)z {
  GeogebraCommonKernelArithmetic3DMyVec3DNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(self, kernel, x, y, z);
  return self;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)deepCopyWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel1 {
  GeogebraCommonKernelArithmetic3DMyVec3DNode *ret = [new_GeogebraCommonKernelArithmetic3DMyVec3DNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(kernel1, [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(x_)) deepCopyWithGeogebraCommonKernelKernel:kernel1], [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(y_)) deepCopyWithGeogebraCommonKernelKernel:kernel1], [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(z_)) deepCopyWithGeogebraCommonKernelKernel:kernel1]) autorelease];
  ret->mode_ = mode_;
  if ([self isCASVector]) {
    [ret setCASVector];
  }
  return ret;
}

- (void)resolveVariables {
  [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(x_)) resolveVariables];
  [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(y_)) resolveVariables];
  [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(z_)) resolveVariables];
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)getX {
  return x_;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)getY {
  return y_;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)getZ {
  return z_;
}

- (void)setCoordsWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)x
                 withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)y
                 withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)z {
  GeogebraCommonKernelArithmetic3DMyVec3DNode_setCoordsWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(self, x, y, z);
}

- (IOSDoubleArray *)getCoords {
  return GeogebraCommonKernelArithmetic3DMyVec3DNode_getCoords(self);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelArithmetic3DMyVec3DNode_toStringWithGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl
                                                 withBoolean:(jboolean)values {
  return GeogebraCommonKernelArithmetic3DMyVec3DNode_toStringWithGeogebraCommonKernelStringTemplate_withBoolean_(self, tpl, values);
}

- (void)appendSeparatorWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  GeogebraCommonKernelArithmetic3DMyVec3DNode_appendSeparatorWithJavaLangStringBuilder_(self, sb);
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelArithmetic3DMyVec3DNode_toStringWithGeogebraCommonKernelStringTemplate_withBoolean_(self, tpl, YES);
}

- (NSString *)toLaTeXStringWithBoolean:(jboolean)symbolic
withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelArithmetic3DMyVec3DNode_toStringWithGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (IOSDoubleArray *)getPointAsDouble {
  return GeogebraCommonKernelArithmetic3DMyVec3DNode_getCoords(self);
}

- (jboolean)isConstant {
  return [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(x_)) isConstant] && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(y_)) isConstant] && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(z_)) isConstant];
}

- (jboolean)isLeaf {
  return YES;
}

- (JavaUtilHashSet *)getVariables {
  JavaUtilHashSet *temp, *varset = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(x_)) getVariables];
  if (varset == nil) varset = [new_JavaUtilHashSet_init() autorelease];
  temp = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(y_)) getVariables];
  if (temp != nil) [((JavaUtilHashSet *) nil_chk(varset)) addAllWithJavaUtilCollection:temp];
  temp = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(z_)) getVariables];
  if (temp != nil) [((JavaUtilHashSet *) nil_chk(varset)) addAllWithJavaUtilCollection:temp];
  return varset;
}

- (jboolean)isPoint3DValue {
  return YES;
}

- (jboolean)isNumberValue {
  return NO;
}

- (jboolean)containsWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  return ev == self;
}

- (jboolean)evaluatesTo3DVector {
  return YES;
}

- (jboolean)evaluatesToVectorNotPoint {
  return isCASVector__;
}

- (id<GeogebraCommonKernelKernelNDGeo3DVec>)getVector {
  id<GeogebraCommonKernelKernelNDGeo3DVec> ret = [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getManager3D])) newGeo3DVecWithDouble:[((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(x_)) evaluateDouble] withDouble:[((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(y_)) evaluateDouble] withDouble:[((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(z_)) evaluateDouble]];
  return ret;
}

- (NSString *)toOutputValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [self toValueStringWithGeogebraCommonKernelStringTemplate:tpl];
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)traverseWithGeogebraCommonKernelArithmeticTraversing:(id<GeogebraCommonKernelArithmeticTraversing>)t {
  id<GeogebraCommonKernelArithmeticExpressionValue> ev = [((id<GeogebraCommonKernelArithmeticTraversing>) nil_chk(t)) processWithGeogebraCommonKernelArithmeticExpressionValue:self];
  if (ev != self) return ev;
  GeogebraCommonKernelArithmetic3DMyVec3DNode_set_x_(self, [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(x_)) traverseWithGeogebraCommonKernelArithmeticTraversing:t]);
  GeogebraCommonKernelArithmetic3DMyVec3DNode_set_y_(self, [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(y_)) traverseWithGeogebraCommonKernelArithmeticTraversing:t]);
  GeogebraCommonKernelArithmetic3DMyVec3DNode_set_z_(self, [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(z_)) traverseWithGeogebraCommonKernelArithmeticTraversing:t]);
  return self;
}

- (jboolean)inspectWithGeogebraCommonKernelArithmeticInspecting:(id<GeogebraCommonKernelArithmeticInspecting>)t {
  return [((id<GeogebraCommonKernelArithmeticInspecting>) nil_chk(t)) checkWithGeogebraCommonKernelArithmeticExpressionValue:self] || [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(x_)) inspectWithGeogebraCommonKernelArithmeticInspecting:t] || [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(y_)) inspectWithGeogebraCommonKernelArithmeticInspecting:t] || [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(z_)) inspectWithGeogebraCommonKernelArithmeticInspecting:t];
}

- (GeogebraCommonKernelKernel *)getKernel {
  return kernel_;
}

- (jboolean)hasCoords {
  return YES;
}

- (void)setSphericalPolarCoordsWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)r
                               withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)theta
                               withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)phi {
  GeogebraCommonKernelArithmetic3DMyVec3DNode_setCoordsWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(self, r, theta, phi);
  mode_ = GeogebraCommonKernelKernel_COORD_SPHERICAL;
}

- (jint)getMode {
  return mode_;
}

- (void)setCASVector {
  isCASVector__ = YES;
}

- (GeogebraCommonKernelArithmeticExpressionNode *)wrap {
  return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self) autorelease];
}

- (jboolean)isCASVector {
  return isCASVector__;
}

- (jint)getDimension {
  return 3;
}

- (void)dealloc {
  RELEASE_(x_);
  RELEASE_(y_);
  RELEASE_(z_);
  RELEASE_(kernel_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "MyVec3DNode", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelKernel:withGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticExpressionValue:", "MyVec3DNode", NULL, 0x1, NULL, NULL },
    { "deepCopyWithGeogebraCommonKernelKernel:", "deepCopy", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "resolveVariables", NULL, "V", 0x1, NULL, NULL },
    { "getX", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getY", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getZ", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "setCoordsWithGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticExpressionValue:", "setCoords", "V", 0x2, NULL, NULL },
    { "getCoords", NULL, "[D", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:withBoolean:", "toString", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "appendSeparatorWithJavaLangStringBuilder:", "appendSeparator", "V", 0x2, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toLaTeXStringWithBoolean:withGeogebraCommonKernelStringTemplate:", "toLaTeXString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getPointAsDouble", NULL, "[D", 0x1, NULL, NULL },
    { "isConstant", NULL, "Z", 0x1, NULL, NULL },
    { "isLeaf", NULL, "Z", 0x1, NULL, NULL },
    { "getVariables", NULL, "Ljava.util.HashSet;", 0x1, NULL, NULL },
    { "isPoint3DValue", NULL, "Z", 0x1, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "containsWithGeogebraCommonKernelArithmeticExpressionValue:", "contains", "Z", 0x11, NULL, NULL },
    { "evaluatesTo3DVector", NULL, "Z", 0x11, NULL, NULL },
    { "evaluatesToVectorNotPoint", NULL, "Z", 0x1, NULL, NULL },
    { "getVector", NULL, "Lgeogebra.common.kernel.kernelND.Geo3DVec;", 0x1, NULL, NULL },
    { "toOutputValueStringWithGeogebraCommonKernelStringTemplate:", "toOutputValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "traverseWithGeogebraCommonKernelArithmeticTraversing:", "traverse", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "inspectWithGeogebraCommonKernelArithmeticInspecting:", "inspect", "Z", 0x1, NULL, NULL },
    { "getKernel", NULL, "Lgeogebra.common.kernel.Kernel;", 0x1, NULL, NULL },
    { "hasCoords", NULL, "Z", 0x1, NULL, NULL },
    { "setSphericalPolarCoordsWithGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticExpressionValue:", "setSphericalPolarCoords", "V", 0x1, NULL, NULL },
    { "getMode", NULL, "I", 0x1, NULL, NULL },
    { "setCASVector", NULL, "V", 0x1, NULL, NULL },
    { "wrap", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "isCASVector", NULL, "Z", 0x1, NULL, NULL },
    { "getDimension", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "x_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", NULL, NULL,  },
    { "y_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", NULL, NULL,  },
    { "z_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "mode_", NULL, 0x2, "I", NULL, NULL,  },
    { "isCASVector__", "isCASVector", 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmetic3DMyVec3DNode = { 2, "MyVec3DNode", "geogebra.common.kernel.arithmetic3D", NULL, 0x1, 35, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmetic3DMyVec3DNode;
}

@end

void GeogebraCommonKernelArithmetic3DMyVec3DNode_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelArithmetic3DMyVec3DNode *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelArithmeticValidExpression_init(self);
  self->mode_ = GeogebraCommonKernelKernel_COORD_CARTESIAN_3D;
  self->isCASVector__ = NO;
  GeogebraCommonKernelArithmetic3DMyVec3DNode_set_kernel_(self, kernel);
  [((JavaUtilTreeSet *) nil_chk(((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel)) getConstruction]))->usedGeos_)) addWithId:GeogebraCommonPluginGeoClassEnum_get_POINT3D()];
}

GeogebraCommonKernelArithmetic3DMyVec3DNode *new_GeogebraCommonKernelArithmetic3DMyVec3DNode_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelArithmetic3DMyVec3DNode *self = [GeogebraCommonKernelArithmetic3DMyVec3DNode alloc];
  GeogebraCommonKernelArithmetic3DMyVec3DNode_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

void GeogebraCommonKernelArithmetic3DMyVec3DNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelArithmetic3DMyVec3DNode *self, GeogebraCommonKernelKernel *kernel, id<GeogebraCommonKernelArithmeticExpressionValue> x, id<GeogebraCommonKernelArithmeticExpressionValue> y, id<GeogebraCommonKernelArithmeticExpressionValue> z) {
  GeogebraCommonKernelArithmetic3DMyVec3DNode_initWithGeogebraCommonKernelKernel_(self, kernel);
  GeogebraCommonKernelArithmetic3DMyVec3DNode_setCoordsWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(self, x, y, z);
}

GeogebraCommonKernelArithmetic3DMyVec3DNode *new_GeogebraCommonKernelArithmetic3DMyVec3DNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelKernel *kernel, id<GeogebraCommonKernelArithmeticExpressionValue> x, id<GeogebraCommonKernelArithmeticExpressionValue> y, id<GeogebraCommonKernelArithmeticExpressionValue> z) {
  GeogebraCommonKernelArithmetic3DMyVec3DNode *self = [GeogebraCommonKernelArithmetic3DMyVec3DNode alloc];
  GeogebraCommonKernelArithmetic3DMyVec3DNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(self, kernel, x, y, z);
  return self;
}

void GeogebraCommonKernelArithmetic3DMyVec3DNode_setCoordsWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelArithmetic3DMyVec3DNode *self, id<GeogebraCommonKernelArithmeticExpressionValue> x, id<GeogebraCommonKernelArithmeticExpressionValue> y, id<GeogebraCommonKernelArithmeticExpressionValue> z) {
  GeogebraCommonKernelArithmetic3DMyVec3DNode_set_x_(self, x);
  GeogebraCommonKernelArithmetic3DMyVec3DNode_set_y_(self, y);
  GeogebraCommonKernelArithmetic3DMyVec3DNode_set_z_(self, z);
}

IOSDoubleArray *GeogebraCommonKernelArithmetic3DMyVec3DNode_getCoords(GeogebraCommonKernelArithmetic3DMyVec3DNode *self) {
  GeogebraCommonKernelStringTemplate *tpl = GeogebraCommonKernelStringTemplate_get_defaultTemplate_();
  id<GeogebraCommonKernelArithmeticExpressionValue> evx = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(self->x_)) evaluateWithGeogebraCommonKernelStringTemplate:tpl];
  if (!([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:evx])) {
    IOSObjectArray *str = [IOSObjectArray arrayWithObjects:(id[]){ @"NumberExpected", [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(evx)) toStringWithGeogebraCommonKernelStringTemplate:tpl] } count:2 type:NSString_class_()];
    @throw [new_GeogebraCommonMainMyParseError_initWithGeogebraCommonMainLocalization_withNSStringArray_([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getLocalization], str) autorelease];
  }
  id<GeogebraCommonKernelArithmeticExpressionValue> evy = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(self->y_)) evaluateWithGeogebraCommonKernelStringTemplate:tpl];
  if (!([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:evy])) {
    IOSObjectArray *str = [IOSObjectArray arrayWithObjects:(id[]){ @"NumberExpected", [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(evy)) toStringWithGeogebraCommonKernelStringTemplate:tpl] } count:2 type:NSString_class_()];
    @throw [new_GeogebraCommonMainMyParseError_initWithGeogebraCommonMainLocalization_withNSStringArray_([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getLocalization], str) autorelease];
  }
  id<GeogebraCommonKernelArithmeticExpressionValue> evz = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(self->z_)) evaluateWithGeogebraCommonKernelStringTemplate:tpl];
  if (!([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:evz])) {
    IOSObjectArray *str = [IOSObjectArray arrayWithObjects:(id[]){ @"NumberExpected", [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(evz)) toStringWithGeogebraCommonKernelStringTemplate:tpl] } count:2 type:NSString_class_()];
    @throw [new_GeogebraCommonMainMyParseError_initWithGeogebraCommonMainLocalization_withNSStringArray_([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getLocalization], str) autorelease];
  }
  if (self->mode_ == GeogebraCommonKernelKernel_COORD_SPHERICAL) {
    jdouble r = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(evx, @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
    jdouble theta = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(evy, @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
    jdouble phi = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(evz, @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
    IOSDoubleArray *ret = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ r * JavaLangMath_cosWithDouble_(theta) * JavaLangMath_cosWithDouble_(phi), r * JavaLangMath_sinWithDouble_(theta) * JavaLangMath_cosWithDouble_(phi), r * JavaLangMath_sinWithDouble_(phi) } count:3];
    return ret;
  }
  IOSDoubleArray *ret = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(evx, @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble], [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(evy, @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble], [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(evz, @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble] } count:3];
  return ret;
}

NSString *GeogebraCommonKernelArithmetic3DMyVec3DNode_toStringWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelArithmetic3DMyVec3DNode *self, GeogebraCommonKernelStringTemplate *tpl) {
  return GeogebraCommonKernelArithmetic3DMyVec3DNode_toStringWithGeogebraCommonKernelStringTemplate_withBoolean_(self, tpl, NO);
}

NSString *GeogebraCommonKernelArithmetic3DMyVec3DNode_toStringWithGeogebraCommonKernelStringTemplate_withBoolean_(GeogebraCommonKernelArithmetic3DMyVec3DNode *self, GeogebraCommonKernelStringTemplate *tpl, jboolean values) {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  switch ([[((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getStringType] ordinal]) {
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
    switch (self->mode_) {
      case GeogebraCommonKernelKernel_COORD_SPHERICAL:
      [sb appendWithNSString:@"point(("];
      [sb appendWithNSString:GeogebraCommonKernelArithmeticValidExpression_printWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withGeogebraCommonKernelStringTemplate_(self->x_, values, tpl)];
      [sb appendWithNSString:@")*cos("];
      [sb appendWithNSString:GeogebraCommonKernelArithmeticValidExpression_printWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withGeogebraCommonKernelStringTemplate_(self->y_, values, tpl)];
      [sb appendWithNSString:@")*cos("];
      [sb appendWithNSString:GeogebraCommonKernelArithmeticValidExpression_printWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withGeogebraCommonKernelStringTemplate_(self->z_, values, tpl)];
      [sb appendWithNSString:@"),("];
      [sb appendWithNSString:GeogebraCommonKernelArithmeticValidExpression_printWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withGeogebraCommonKernelStringTemplate_(self->x_, values, tpl)];
      [sb appendWithNSString:@")*sin("];
      [sb appendWithNSString:GeogebraCommonKernelArithmeticValidExpression_printWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withGeogebraCommonKernelStringTemplate_(self->y_, values, tpl)];
      [sb appendWithNSString:@")*cos("];
      [sb appendWithNSString:GeogebraCommonKernelArithmeticValidExpression_printWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withGeogebraCommonKernelStringTemplate_(self->z_, values, tpl)];
      [sb appendWithNSString:@"),("];
      [sb appendWithNSString:GeogebraCommonKernelArithmeticValidExpression_printWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withGeogebraCommonKernelStringTemplate_(self->x_, values, tpl)];
      [sb appendWithNSString:@")*sin("];
      [sb appendWithNSString:GeogebraCommonKernelArithmeticValidExpression_printWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withGeogebraCommonKernelStringTemplate_(self->z_, values, tpl)];
      [sb appendWithNSString:@"))"];
      break;
      default:
      case GeogebraCommonKernelKernel_COORD_CARTESIAN_3D:
      [sb appendWithNSString:[self isCASVector] ? @"ggbvect[" : @"point("];
      [sb appendWithNSString:GeogebraCommonKernelArithmeticValidExpression_printWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withGeogebraCommonKernelStringTemplate_(self->x_, values, tpl)];
      [sb appendWithChar:','];
      [sb appendWithNSString:GeogebraCommonKernelArithmeticValidExpression_printWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withGeogebraCommonKernelStringTemplate_(self->y_, values, tpl)];
      [sb appendWithChar:','];
      [sb appendWithNSString:GeogebraCommonKernelArithmeticValidExpression_printWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withGeogebraCommonKernelStringTemplate_(self->z_, values, tpl)];
      [sb appendWithNSString:[self isCASVector] ? @"]" : @")"];
      break;
    }
    break;
    default:
    if (self->isCASVector__ && [((GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk([tpl getStringType])) isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) {
      if ([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) isHTML5Applet]) {
        [sb appendWithNSString:@" \\left( \\ggbtable{"];
        [sb appendWithNSString:@"\\ggbtr{ \\ggbtdL{  "];
        [sb appendWithJavaLangCharSequence:[sb appendWithNSString:GeogebraCommonKernelArithmeticValidExpression_printWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withGeogebraCommonKernelStringTemplate_(self->x_, values, tpl)]];
        [sb appendWithNSString:@"} }"];
        [sb appendWithNSString:@"\\ggbtr{ \\ggbtdL{  "];
        [sb appendWithJavaLangCharSequence:[sb appendWithNSString:GeogebraCommonKernelArithmeticValidExpression_printWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withGeogebraCommonKernelStringTemplate_(self->y_, values, tpl)]];
        [sb appendWithNSString:@"} }"];
        [sb appendWithNSString:@"\\ggbtr{ \\ggbtdL{  "];
        [sb appendWithJavaLangCharSequence:[sb appendWithNSString:GeogebraCommonKernelArithmeticValidExpression_printWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withGeogebraCommonKernelStringTemplate_(self->z_, values, tpl)]];
        [sb appendWithNSString:@"} }"];
        [sb appendWithNSString:@"} \\right) "];
      }
      else {
        [sb appendWithNSString:@"\\left( \\begin{tabular}{r}"];
        [sb appendWithNSString:GeogebraCommonKernelArithmeticValidExpression_printWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withGeogebraCommonKernelStringTemplate_(self->x_, values, tpl)];
        [sb appendWithNSString:@"\\\\"];
        [sb appendWithNSString:GeogebraCommonKernelArithmeticValidExpression_printWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withGeogebraCommonKernelStringTemplate_(self->y_, values, tpl)];
        [sb appendWithNSString:@"\\\\ "];
        [sb appendWithNSString:GeogebraCommonKernelArithmeticValidExpression_printWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withGeogebraCommonKernelStringTemplate_(self->z_, values, tpl)];
        [sb appendWithNSString:@"\\\\ \\end{tabular} \\right)\t"];
      }
    }
    else {
      [sb appendWithNSString:[tpl leftBracket]];
      [sb appendWithNSString:GeogebraCommonKernelArithmeticValidExpression_printWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withGeogebraCommonKernelStringTemplate_(self->x_, values, tpl)];
      GeogebraCommonKernelArithmetic3DMyVec3DNode_appendSeparatorWithJavaLangStringBuilder_(self, sb);
      [sb appendWithNSString:GeogebraCommonKernelArithmeticValidExpression_printWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withGeogebraCommonKernelStringTemplate_(self->y_, values, tpl)];
      GeogebraCommonKernelArithmetic3DMyVec3DNode_appendSeparatorWithJavaLangStringBuilder_(self, sb);
      [sb appendWithNSString:GeogebraCommonKernelArithmeticValidExpression_printWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withGeogebraCommonKernelStringTemplate_(self->z_, values, tpl)];
      [sb appendWithNSString:[tpl rightBracket]];
    }
  }
  return [sb description];
}

void GeogebraCommonKernelArithmetic3DMyVec3DNode_appendSeparatorWithJavaLangStringBuilder_(GeogebraCommonKernelArithmetic3DMyVec3DNode *self, JavaLangStringBuilder *sb) {
  if (self->mode_ == GeogebraCommonKernelKernel_COORD_CARTESIAN_3D) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@", "];
  else [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"; "];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmetic3DMyVec3DNode)
