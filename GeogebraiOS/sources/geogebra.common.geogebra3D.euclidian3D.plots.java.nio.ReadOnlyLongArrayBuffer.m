//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/ReadOnlyLongArrayBuffer.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/euclidian3D/plots/java/nio/Buffer.h"
#include "geogebra/common/geogebra3D/euclidian3D/plots/java/nio/LongArrayBuffer.h"
#include "geogebra/common/geogebra3D/euclidian3D/plots/java/nio/LongBuffer.h"
#include "geogebra/common/geogebra3D/euclidian3D/plots/java/nio/ReadOnlyBufferException.h"
#include "geogebra/common/geogebra3D/euclidian3D/plots/java/nio/ReadOnlyLongArrayBuffer.h"

@implementation GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyLongArrayBuffer

+ (GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyLongArrayBuffer *)copy__WithGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioLongArrayBuffer:(GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioLongArrayBuffer *)other
                                                                                                                                             withInt:(jint)markOfOther {
  return GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyLongArrayBuffer_copy__WithGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioLongArrayBuffer_withInt_(other, markOfOther);
}

- (instancetype)initWithInt:(jint)capacity
              withLongArray:(IOSLongArray *)backingArray
                    withInt:(jint)arrayOffset {
  GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyLongArrayBuffer_initWithInt_withLongArray_withInt_(self, capacity, backingArray, arrayOffset);
  return self;
}

- (GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioLongBuffer *)asReadOnlyBuffer {
  return [self duplicate];
}

- (GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioLongBuffer *)compact {
  @throw [new_GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyBufferException_init() autorelease];
}

- (GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioLongBuffer *)duplicate {
  return GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyLongArrayBuffer_copy__WithGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioLongArrayBuffer_withInt_(self, mark__);
}

- (jboolean)isReadOnly {
  return YES;
}

- (IOSLongArray *)protectedArray {
  @throw [new_GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyBufferException_init() autorelease];
}

- (jint)protectedArrayOffset {
  @throw [new_GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyBufferException_init() autorelease];
}

- (jboolean)protectedHasArray {
  return NO;
}

- (GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioLongBuffer *)putWithLong:(jlong)c {
  @throw [new_GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyBufferException_init() autorelease];
}

- (GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioLongBuffer *)putWithInt:(jint)index
                                                                 withLong:(jlong)c {
  @throw [new_GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyBufferException_init() autorelease];
}

- (GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioLongBuffer *)putWithGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioLongBuffer:(GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioLongBuffer *)buf {
  @throw [new_GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyBufferException_init() autorelease];
}

- (GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioLongBuffer *)putWithLongArray:(IOSLongArray *)src
                                                                        withInt:(jint)off
                                                                        withInt:(jint)len {
  @throw [new_GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyBufferException_init() autorelease];
}

- (GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioLongBuffer *)slice {
  return [new_GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyLongArrayBuffer_initWithInt_withLongArray_withInt_([self remaining], backingArray_, offset_ + position__) autorelease];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "copy__WithGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioLongArrayBuffer:withInt:", "copy", "Lgeogebra.common.geogebra3D.euclidian3D.plots.java.nio.ReadOnlyLongArrayBuffer;", 0x8, NULL, NULL },
    { "initWithInt:withLongArray:withInt:", "ReadOnlyLongArrayBuffer", NULL, 0x0, NULL, NULL },
    { "asReadOnlyBuffer", NULL, "Lgeogebra.common.geogebra3D.euclidian3D.plots.java.nio.LongBuffer;", 0x1, NULL, NULL },
    { "compact", NULL, "Lgeogebra.common.geogebra3D.euclidian3D.plots.java.nio.LongBuffer;", 0x1, NULL, NULL },
    { "duplicate", NULL, "Lgeogebra.common.geogebra3D.euclidian3D.plots.java.nio.LongBuffer;", 0x1, NULL, NULL },
    { "isReadOnly", NULL, "Z", 0x1, NULL, NULL },
    { "protectedArray", NULL, "[J", 0x4, NULL, NULL },
    { "protectedArrayOffset", NULL, "I", 0x4, NULL, NULL },
    { "protectedHasArray", NULL, "Z", 0x4, NULL, NULL },
    { "putWithLong:", "put", "Lgeogebra.common.geogebra3D.euclidian3D.plots.java.nio.LongBuffer;", 0x1, NULL, NULL },
    { "putWithInt:withLong:", "put", "Lgeogebra.common.geogebra3D.euclidian3D.plots.java.nio.LongBuffer;", 0x1, NULL, NULL },
    { "putWithGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioLongBuffer:", "put", "Lgeogebra.common.geogebra3D.euclidian3D.plots.java.nio.LongBuffer;", 0x1, NULL, NULL },
    { "putWithLongArray:withInt:withInt:", "put", "Lgeogebra.common.geogebra3D.euclidian3D.plots.java.nio.LongBuffer;", 0x11, NULL, NULL },
    { "slice", NULL, "Lgeogebra.common.geogebra3D.euclidian3D.plots.java.nio.LongBuffer;", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyLongArrayBuffer = { 2, "ReadOnlyLongArrayBuffer", "geogebra.common.geogebra3D.euclidian3D.plots.java.nio", NULL, 0x10, 14, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyLongArrayBuffer;
}

@end

GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyLongArrayBuffer *GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyLongArrayBuffer_copy__WithGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioLongArrayBuffer_withInt_(GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioLongArrayBuffer *other, jint markOfOther) {
  GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyLongArrayBuffer_initialize();
  GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyLongArrayBuffer *buf = [new_GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyLongArrayBuffer_initWithInt_withLongArray_withInt_([((GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioLongArrayBuffer *) nil_chk(other)) capacity], other->backingArray_, other->offset_) autorelease];
  buf->limit__ = [other limit];
  buf->position__ = [other position];
  buf->mark__ = markOfOther;
  return buf;
}

void GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyLongArrayBuffer_initWithInt_withLongArray_withInt_(GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyLongArrayBuffer *self, jint capacity, IOSLongArray *backingArray, jint arrayOffset) {
  GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioLongArrayBuffer_initWithInt_withLongArray_withInt_(self, capacity, backingArray, arrayOffset);
}

GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyLongArrayBuffer *new_GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyLongArrayBuffer_initWithInt_withLongArray_withInt_(jint capacity, IOSLongArray *backingArray, jint arrayOffset) {
  GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyLongArrayBuffer *self = [GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyLongArrayBuffer alloc];
  GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyLongArrayBuffer_initWithInt_withLongArray_withInt_(self, capacity, backingArray, arrayOffset);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyLongArrayBuffer)
