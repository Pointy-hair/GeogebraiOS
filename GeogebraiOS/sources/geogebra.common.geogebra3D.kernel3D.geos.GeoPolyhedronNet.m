//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/geos/GeoPolyhedronNet.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolyhedron.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolyhedronNet.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoSegment3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/ConstructionElementCycle.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/TreeMap.h"

@interface GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet () {
 @public
  JavaLangStringBuilder *sbToString_GeoPolyhedronNet_;
  IOSObjectArray *oldFaces_;
  jint oldFacesIndex_;
  IOSObjectArray *oldSegments_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet, sbToString_GeoPolyhedronNet_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet, oldFaces_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet, oldSegments_, IOSObjectArray *)

@implementation GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (NSString *)getTypeString {
  return @"Net";
}

- (jboolean)isGeoPolyhedron {
  return NO;
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sbToString_GeoPolyhedronNet_)) setLengthWithInt:0];
  [sbToString_GeoPolyhedronNet_ appendWithNSString:label_];
  [sbToString_GeoPolyhedronNet_ appendWithNSString:@" = "];
  [sbToString_GeoPolyhedronNet_ appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:[self getArea] withGeogebraCommonKernelStringTemplate:tpl]];
  return [sbToString_GeoPolyhedronNet_ description];
}

- (NSString *)toStringMinimalWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sbToString_GeoPolyhedronNet_)) setLengthWithInt:0];
  [sbToString_GeoPolyhedronNet_ appendWithNSString:[self regrFormatWithDouble:[self getArea]]];
  return [sbToString_GeoPolyhedronNet_ description];
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:[self getArea] withGeogebraCommonKernelStringTemplate:tpl];
}

- (void)createFaces {
  if (polygons_ != nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet_set_oldFaces_(self, [self getFaces3D]);
    oldFacesIndex_ = 0;
  }
  else {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet_set_oldFaces_(self, nil);
  }
  if (segments_ != nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet_set_oldSegments_(self, [self getSegments3D]);
  }
  else {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet_set_oldSegments_(self, nil);
  }
  [((JavaUtilTreeMap *) nil_chk(polygons_)) clear];
  [((JavaUtilTreeMap *) nil_chk(segments_)) clear];
  [super createFaces];
}

- (void)clearIndexes {
  [((JavaUtilTreeMap *) nil_chk(polygonsIndex_)) clear];
  [((JavaUtilArrayList *) nil_chk(polygonsDescriptions_)) clear];
  polygonsIndexMax_ = 0;
  [((JavaUtilTreeMap *) nil_chk(segmentsIndex_)) clear];
  segmentsIndexMax_ = 0;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *)createPolygonWithGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
                                                                                                           withInt:(jint)index {
  if (oldFaces_ != nil && oldFacesIndex_ < oldFaces_->size_) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *polygon = IOSObjectArray_Get(oldFaces_, oldFacesIndex_);
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(polygon)) modifyInputPointsWithGeogebraCommonKernelKernelNDGeoPointNDArray:points];
    [((JavaUtilTreeMap *) nil_chk(polygons_)) putWithId:JavaLangInteger_valueOfWithInt_(index) withId:polygon];
    oldFacesIndex_++;
    return polygon;
  }
  return [super createPolygonWithGeogebraCommonKernelKernelNDGeoPointNDArray:points withInt:index];
}

- (id<GeogebraCommonKernelKernelNDGeoSegmentND>)createNewSegmentWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)startPoint
                                                                withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)endPoint
                                                          withGeogebraCommonKernelConstructionElementCycle:(GeogebraCommonKernelConstructionElementCycle *)key {
  if (oldSegments_ != nil && segmentsIndexMax_ < oldSegments_->size_) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *segment = IOSObjectArray_Get(oldSegments_, (jint) segmentsIndexMax_);
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(segment)) modifyInputPointsWithGeogebraCommonKernelKernelNDGeoPointND:startPoint withGeogebraCommonKernelKernelNDGeoPointND:endPoint];
    [self storeSegmentWithGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D:segment withGeogebraCommonKernelConstructionElementCycle:key];
    return segment;
  }
  return [super createNewSegmentWithGeogebraCommonKernelKernelNDGeoPointND:startPoint withGeogebraCommonKernelKernelNDGeoPointND:endPoint withGeogebraCommonKernelConstructionElementCycle:key];
}

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return GeogebraCommonPluginGeoClassEnum_get_NET();
}

- (void)setEuclidianVisibleWithBoolean:(jboolean)visible {
  [super setEuclidianVisibleWithBoolean:visible];
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D * __strong point in nil_chk(pointsCreated_)) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point)) setEuclidianVisibleWithBoolean:visible];
  }
}

- (jdouble)getDouble {
  return [self getArea];
}

- (void)dealloc {
  RELEASE_(sbToString_GeoPolyhedronNet_);
  RELEASE_(oldFaces_);
  RELEASE_(oldSegments_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:", "GeoPolyhedronNet", NULL, 0x1, NULL, NULL },
    { "getTypeString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isGeoPolyhedron", NULL, "Z", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toStringMinimalWithGeogebraCommonKernelStringTemplate:", "toStringMinimal", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "createFaces", NULL, "V", 0x1, NULL, NULL },
    { "clearIndexes", NULL, "V", 0x1, NULL, NULL },
    { "createPolygonWithGeogebraCommonKernelKernelNDGeoPointNDArray:withInt:", "createPolygon", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPolygon3D;", 0x1, NULL, NULL },
    { "createNewSegmentWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelConstructionElementCycle:", "createNewSegment", "Lgeogebra.common.kernel.kernelND.GeoSegmentND;", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "setEuclidianVisibleWithBoolean:", "setEuclidianVisible", "V", 0x1, NULL, NULL },
    { "getDouble", NULL, "D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "sbToString_GeoPolyhedronNet_", "sbToString", 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "oldFaces_", NULL, 0x2, "[Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPolygon3D;", NULL, NULL,  },
    { "oldFacesIndex_", NULL, 0x2, "I", NULL, NULL,  },
    { "oldSegments_", NULL, 0x2, "[Lgeogebra.common.geogebra3D.kernel3D.geos.GeoSegment3D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet = { 2, "GeoPolyhedronNet", "geogebra.common.geogebra3D.kernel3D.geos", NULL, 0x1, 13, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet;
}

@end

void GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet_initWithGeogebraCommonKernelConstruction_(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_initWithGeogebraCommonKernelConstruction_(self, c);
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet_setAndConsume_sbToString_GeoPolyhedronNet_(self, new_JavaLangStringBuilder_initWithInt_(50));
}

GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet *new_GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *c) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet)
