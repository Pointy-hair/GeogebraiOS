//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/cas/AlgoSolveODECas.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/MyArbitraryConstant.h"
#include "geogebra/common/kernel/cas/AlgoSolveODECas.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/CasEvaluableFunction.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoFunctionable.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/App.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"

@interface GeogebraCommonKernelCasAlgoSolveODECas () {
 @public
  id<GeogebraCommonKernelGeosCasEvaluableFunction> f_;
  GeogebraCommonKernelGeosGeoElement *g_;
  id<GeogebraCommonKernelKernelNDGeoPointND> pt_;
  GeogebraCommonKernelArithmeticMyArbitraryConstant *arbconst_;
  NSString *oldCASstring_;
}

- (void)findPathThroughPoint;

- (void)updateGWithNSString:(NSString *)casString;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoSolveODECas, f_, id<GeogebraCommonKernelGeosCasEvaluableFunction>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoSolveODECas, g_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoSolveODECas, pt_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoSolveODECas, arbconst_, GeogebraCommonKernelArithmeticMyArbitraryConstant *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoSolveODECas, oldCASstring_, NSString *)

__attribute__((unused)) static void GeogebraCommonKernelCasAlgoSolveODECas_findPathThroughPoint(GeogebraCommonKernelCasAlgoSolveODECas *self);

__attribute__((unused)) static void GeogebraCommonKernelCasAlgoSolveODECas_updateGWithNSString_(GeogebraCommonKernelCasAlgoSolveODECas *self, NSString *casString);

@implementation GeogebraCommonKernelCasAlgoSolveODECas

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
        withGeogebraCommonKernelGeosCasEvaluableFunction:(id<GeogebraCommonKernelGeosCasEvaluableFunction>)f {
  GeogebraCommonKernelCasAlgoSolveODECas_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosCasEvaluableFunction_(self, cons, label, f);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
        withGeogebraCommonKernelGeosCasEvaluableFunction:(id<GeogebraCommonKernelGeosCasEvaluableFunction>)f
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)pt {
  GeogebraCommonKernelCasAlgoSolveODECas_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosCasEvaluableFunction_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, label, f, pt);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_SolveODE();
}

- (void)setInputOutput {
  if (pt_ == nil) {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithObjects:(id[]){ [((id<GeogebraCommonKernelGeosCasEvaluableFunction>) nil_chk(f_)) toGeoElement] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  }
  else {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithObjects:(id[]){ [((id<GeogebraCommonKernelGeosCasEvaluableFunction>) nil_chk(f_)) toGeoElement], [pt_ toGeoElement] } count:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  }
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:g_];
  [self setDependencies];
}

- (void)compute {
  if (![((id<GeogebraCommonKernelGeosCasEvaluableFunction>) nil_chk(f_)) isDefined] && g_ != nil) {
    [g_ setUndefined];
    return;
  }
  NSString *funExp = [f_ toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_prefixedDefault_()];
  if ([((NSString *) nil_chk(funExp)) indexOf:'='] > -1) {
    funExp = IOSObjectArray_Get(nil_chk([funExp split:@"="]), 1);
  }
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [sb setLengthWithInt:0];
  [sb appendWithNSString:@"SolveODE("];
  [sb appendWithNSString:funExp];
  if (pt_ != nil) {
    [sb appendWithNSString:@","];
    [sb appendWithNSString:[pt_ toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_prefixedDefault_()]];
  }
  [sb appendWithNSString:@")"];
  NSString *casString = [sb description];
  if (![((NSString *) nil_chk(casString)) isEqual:oldCASstring_]) {
    GeogebraCommonKernelCasAlgoSolveODECas_updateGWithNSString_(self, casString);
    GeogebraCommonKernelCasAlgoSolveODECas_set_oldCASstring_(self, casString);
  }
  if (pt_ != nil && [((GeogebraCommonKernelArithmeticMyArbitraryConstant *) nil_chk(arbconst_)) getTotalNumberOfConsts] == 1) {
    GeogebraCommonKernelCasAlgoSolveODECas_findPathThroughPoint(self);
  }
}

- (void)findPathThroughPoint {
  GeogebraCommonKernelCasAlgoSolveODECas_findPathThroughPoint(self);
}

- (void)updateGWithNSString:(NSString *)casString {
  GeogebraCommonKernelCasAlgoSolveODECas_updateGWithNSString_(self, casString);
}

- (GeogebraCommonKernelGeosGeoElement *)getResult {
  return g_;
}

- (void)dealloc {
  RELEASE_(f_);
  RELEASE_(g_);
  RELEASE_(pt_);
  RELEASE_(arbconst_);
  RELEASE_(oldCASstring_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosCasEvaluableFunction:", "AlgoSolveODECas", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosCasEvaluableFunction:withGeogebraCommonKernelKernelNDGeoPointND:", "AlgoSolveODECas", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "findPathThroughPoint", NULL, "V", 0x2, NULL, NULL },
    { "updateGWithNSString:", "updateG", "V", 0x2, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "f_", NULL, 0x2, "Lgeogebra.common.kernel.geos.CasEvaluableFunction;", NULL, NULL,  },
    { "g_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "pt_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "arbconst_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.MyArbitraryConstant;", NULL, NULL,  },
    { "oldCASstring_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCasAlgoSolveODECas = { 2, "AlgoSolveODECas", "geogebra.common.kernel.cas", NULL, 0x1, 8, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCasAlgoSolveODECas;
}

@end

void GeogebraCommonKernelCasAlgoSolveODECas_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosCasEvaluableFunction_(GeogebraCommonKernelCasAlgoSolveODECas *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelGeosCasEvaluableFunction> f) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelCasAlgoSolveODECas_setAndConsume_arbconst_(self, new_GeogebraCommonKernelArithmeticMyArbitraryConstant_initWithGeogebraCommonKernelAlgosConstructionElement_(self));
  [((GeogebraCommonKernelConstruction *) nil_chk(cons)) addCASAlgoWithGeogebraCommonKernelAlgosAlgoElement:self];
  GeogebraCommonKernelCasAlgoSolveODECas_set_f_(self, f);
  [self compute];
  [self setInputOutput];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->g_)) setLabelWithNSString:label];
}

GeogebraCommonKernelCasAlgoSolveODECas *new_GeogebraCommonKernelCasAlgoSolveODECas_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosCasEvaluableFunction_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelGeosCasEvaluableFunction> f) {
  GeogebraCommonKernelCasAlgoSolveODECas *self = [GeogebraCommonKernelCasAlgoSolveODECas alloc];
  GeogebraCommonKernelCasAlgoSolveODECas_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosCasEvaluableFunction_(self, cons, label, f);
  return self;
}

void GeogebraCommonKernelCasAlgoSolveODECas_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosCasEvaluableFunction_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelCasAlgoSolveODECas *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelGeosCasEvaluableFunction> f, id<GeogebraCommonKernelKernelNDGeoPointND> pt) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelCasAlgoSolveODECas_setAndConsume_arbconst_(self, new_GeogebraCommonKernelArithmeticMyArbitraryConstant_initWithGeogebraCommonKernelAlgosConstructionElement_(self));
  [((GeogebraCommonKernelConstruction *) nil_chk(cons)) addCASAlgoWithGeogebraCommonKernelAlgosAlgoElement:self];
  GeogebraCommonKernelCasAlgoSolveODECas_set_f_(self, f);
  GeogebraCommonKernelCasAlgoSolveODECas_set_pt_(self, pt);
  [self compute];
  [self setInputOutput];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->g_)) setLabelWithNSString:label];
}

GeogebraCommonKernelCasAlgoSolveODECas *new_GeogebraCommonKernelCasAlgoSolveODECas_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosCasEvaluableFunction_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelGeosCasEvaluableFunction> f, id<GeogebraCommonKernelKernelNDGeoPointND> pt) {
  GeogebraCommonKernelCasAlgoSolveODECas *self = [GeogebraCommonKernelCasAlgoSolveODECas alloc];
  GeogebraCommonKernelCasAlgoSolveODECas_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosCasEvaluableFunction_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, label, f, pt);
  return self;
}

void GeogebraCommonKernelCasAlgoSolveODECas_findPathThroughPoint(GeogebraCommonKernelCasAlgoSolveODECas *self) {
  GeogebraCommonKernelGeosGeoNumeric *c1 = [((GeogebraCommonKernelArithmeticMyArbitraryConstant *) nil_chk(self->arbconst_)) getConstWithInt:0];
  if (c1 == nil) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->g_)) setUndefined];
    return;
  }
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(c1)) setAlgebraVisibleWithBoolean:NO];
}

void GeogebraCommonKernelCasAlgoSolveODECas_updateGWithNSString_(GeogebraCommonKernelCasAlgoSolveODECas *self, NSString *casString) {
  NSString *functionOut;
  jboolean ok = NO;
  @try {
    functionOut = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) evaluateGeoGebraCASWithNSString:casString withGeogebraCommonKernelArithmeticMyArbitraryConstant:self->arbconst_];
    jboolean flag = [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isSuppressLabelsActive];
    [self->cons_ setSuppressLabelCreationWithBoolean:YES];
    IOSObjectArray *res = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([self->kernel_ getAlgebraProcessor])) processAlgebraCommandNoExceptionHandlingWithNSString:functionOut withBoolean:NO withBoolean:NO withBoolean:NO withBoolean:NO];
    [self->cons_ setSuppressLabelCreationWithBoolean:flag];
    if (res != nil && res->size_ > 0) {
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(res, 0))) isGeoFunctionable]) {
        IOSObjectArray_Set(res, 0, [((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(res, 0), @protocol(GeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction]);
      }
      if (self->g_ == nil) {
        GeogebraCommonKernelCasAlgoSolveODECas_set_g_(self, IOSObjectArray_Get(res, 0));
      }
      else {
        [self->g_ setWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(res, 0)];
      }
      ok = YES;
    }
  }
  @catch (JavaLangThrowable *e) {
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"AlgoSolveODECas: ", [((JavaLangThrowable *) nil_chk(e)) getMessage]));
  }
  if (!ok) {
    if (self->g_ != nil) {
      [self->g_ setUndefined];
    }
    else {
      GeogebraCommonKernelCasAlgoSolveODECas_setAndConsume_g_(self, new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_(self->cons_));
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCasAlgoSolveODECas)
