//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlanePolyhedron.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectLinePolygon3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlanePolyhedron.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolyhedron.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "geogebra/common/kernel/kernelND/HasSegments.h"
#include "java/lang/Double.h"
#include "java/util/TreeMap.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron () {
 @public
  GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane_;
}

- (GeogebraCommonKernelMatrixCoords *)intersectionCoordsWithGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)seg;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron, plane_, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)

__attribute__((unused)) static GeogebraCommonKernelMatrixCoords *GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron_intersectionCoordsWithGeogebraCommonKernelKernelNDGeoSegmentND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron *self, id<GeogebraCommonKernelKernelNDGeoSegmentND> seg);

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                       withNSStringArray:(IOSObjectArray *)labels
      withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)plane
   withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *)p {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(self, c, labels, plane, p);
  return self;
}

- (void)setFirstInputWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron_set_plane_(self, (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(geo, [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]));
}

- (GeogebraCommonKernelGeosGeoElement *)getFirstInput {
  return plane_;
}

- (void)setIntersectionLine {
}

- (void)intersectionsCoordsWithGeogebraCommonKernelKernelNDHasSegments:(id<GeogebraCommonKernelKernelNDHasSegments>)p
                                                   withJavaUtilTreeMap:(JavaUtilTreeMap *)newCoords {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk([((id<GeogebraCommonKernelKernelNDHasSegments>) nil_chk(p)) getSegments]))->size_; i++) {
    id<GeogebraCommonKernelKernelNDGeoSegmentND> seg = IOSObjectArray_Get(nil_chk([p getSegments]), i);
    GeogebraCommonKernelMatrixCoords *coords = GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron_intersectionCoordsWithGeogebraCommonKernelKernelNDGeoSegmentND_(self, seg);
    if (coords != nil) [((JavaUtilTreeMap *) nil_chk(newCoords)) putWithId:JavaLangDouble_valueOfWithDouble_((jdouble) i) withId:coords];
  }
}

- (GeogebraCommonKernelMatrixCoords *)intersectionCoordsWithGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)seg {
  return GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron_intersectionCoordsWithGeogebraCommonKernelKernelNDGeoSegmentND_(self, seg);
}

- (jboolean)checkParameterWithDouble:(jdouble)t1 {
  return YES;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Intersect();
}

- (void)dealloc {
  RELEASE_(plane_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:", "AlgoIntersectPlanePolyhedron", NULL, 0x1, NULL, NULL },
    { "setFirstInputWithGeogebraCommonKernelGeosGeoElement:", "setFirstInput", "V", 0x4, NULL, NULL },
    { "getFirstInput", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "setIntersectionLine", NULL, "V", 0x4, NULL, NULL },
    { "intersectionsCoordsWithGeogebraCommonKernelKernelNDHasSegments:withJavaUtilTreeMap:", "intersectionsCoords", "V", 0x4, NULL, NULL },
    { "intersectionCoordsWithGeogebraCommonKernelKernelNDGeoSegmentND:", "intersectionCoords", "Lgeogebra.common.kernel.Matrix.Coords;", 0x2, NULL, NULL },
    { "checkParameterWithDouble:", "checkParameter", "Z", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "plane_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron = { 2, "AlgoIntersectPlanePolyhedron", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 8, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *p) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDHasSegments_(self, c, labels, plane, p);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *p) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(self, c, labels, plane, p);
  return self;
}

GeogebraCommonKernelMatrixCoords *GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron_intersectionCoordsWithGeogebraCommonKernelKernelNDGeoSegmentND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron *self, id<GeogebraCommonKernelKernelNDGeoSegmentND> seg) {
  GeogebraCommonKernelMatrixCoords *o = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(seg)) getPointInDWithInt:3 withDouble:0])) getInhomCoordsInSameDimension];
  GeogebraCommonKernelMatrixCoords *d = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([seg getPointInDWithInt:3 withDouble:1])) getInhomCoordsInSameDimension])) subWithGeogebraCommonKernelMatrixCoords:o];
  GeogebraCommonKernelMatrixCoords *globalCoords = [new_GeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease];
  GeogebraCommonKernelMatrixCoords *inPlaneCoords = [new_GeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(o)) projectPlaneThruVWithGeogebraCommonKernelMatrixCoordMatrix:[((GeogebraCommonKernelMatrixCoordSys *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(self->plane_)) getCoordSys])) getMatrixOrthonormal] withGeogebraCommonKernelMatrixCoords:d withGeogebraCommonKernelMatrixCoords:globalCoords withGeogebraCommonKernelMatrixCoords:inPlaneCoords];
  if (!GeogebraCommonKernelKernel_isZeroWithDouble_([globalCoords getW]) && [seg respectLimitedPathWithDouble:-[inPlaneCoords getWithInt:3]]) return globalCoords;
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron)
