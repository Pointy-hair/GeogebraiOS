//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoMode.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/statistics/AlgoMode.h"
#include "java/util/Arrays.h"

@interface GeogebraCommonKernelStatisticsAlgoMode () {
 @public
  GeogebraCommonKernelGeosGeoList *inputList_;
  GeogebraCommonKernelGeosGeoList *outputList_;
  jint size_;
}

- (void)setListElementWithInt:(jint)index
                   withDouble:(jdouble)value;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoMode, inputList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoMode, outputList_, GeogebraCommonKernelGeosGeoList *)

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoMode_compute(GeogebraCommonKernelStatisticsAlgoMode *self);

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoMode_setListElementWithInt_withDouble_(GeogebraCommonKernelStatisticsAlgoMode *self, jint index, jdouble value);

@implementation GeogebraCommonKernelStatisticsAlgoMode

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)inputList {
  GeogebraCommonKernelStatisticsAlgoMode_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Mode();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, inputList_);
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:outputList_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoList *)getResult {
  return outputList_;
}

- (void)compute {
  GeogebraCommonKernelStatisticsAlgoMode_compute(self);
}

- (void)setListElementWithInt:(jint)index
                   withDouble:(jdouble)value {
  GeogebraCommonKernelStatisticsAlgoMode_setListElementWithInt_withDouble_(self, index, value);
}

- (void)dealloc {
  RELEASE_(inputList_);
  RELEASE_(outputList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:", "AlgoMode", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "setListElementWithInt:withDouble:", "setListElement", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inputList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "outputList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "size_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoMode = { 2, "AlgoMode", "geogebra.common.kernel.statistics", NULL, 0x1, 6, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoMode;
}

@end

void GeogebraCommonKernelStatisticsAlgoMode_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelStatisticsAlgoMode *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoMode_set_inputList_(self, inputList);
  GeogebraCommonKernelStatisticsAlgoMode_setAndConsume_outputList_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoMode_compute(self);
  [self->outputList_ setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoMode *new_GeogebraCommonKernelStatisticsAlgoMode_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelStatisticsAlgoMode *self = [GeogebraCommonKernelStatisticsAlgoMode alloc];
  GeogebraCommonKernelStatisticsAlgoMode_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoMode_compute(GeogebraCommonKernelStatisticsAlgoMode *self) {
  self->size_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->inputList_)) size];
  if (![self->inputList_ isDefined] || self->size_ == 0) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setUndefined];
    return;
  }
  IOSDoubleArray *sortList = [IOSDoubleArray arrayWithLength:self->size_];
  for (jint i = 0; i < self->size_; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [self->inputList_ getWithInt:i];
    if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo]) {
      id<GeogebraCommonKernelArithmeticNumberValue> num = (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelArithmeticNumberValue));
      *IOSDoubleArray_GetRef(sortList, i) = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(num)) getDouble];
    }
    else {
      [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setUndefined];
      return;
    }
  }
  JavaUtilArrays_sortWithDoubleArray_(sortList);
  jint maxRun = 1;
  jint run = 1;
  jdouble val = IOSDoubleArray_Get(sortList, 0);
  for (jint i = 1; i < self->size_; i++) {
    if (IOSDoubleArray_Get(sortList, i) == val) {
      run++;
    }
    else {
      if (run >= maxRun) maxRun = run;
      run = 1;
      val = IOSDoubleArray_Get(sortList, i);
    }
  }
  if (run >= maxRun) maxRun = run;
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setDefinedWithBoolean:YES];
  [self->outputList_ clear];
  if (maxRun == 1) return;
  run = 1;
  val = IOSDoubleArray_Get(sortList, 0);
  jint modeNo = 0;
  for (jint i = 1; i < self->size_; i++) {
    if (IOSDoubleArray_Get(sortList, i) == val) {
      run++;
      if (run == maxRun) GeogebraCommonKernelStatisticsAlgoMode_setListElementWithInt_withDouble_(self, modeNo++, val);
    }
    else {
      run = 1;
      val = IOSDoubleArray_Get(sortList, i);
    }
  }
}

void GeogebraCommonKernelStatisticsAlgoMode_setListElementWithInt_withDouble_(GeogebraCommonKernelStatisticsAlgoMode *self, jint index, jdouble value) {
  GeogebraCommonKernelGeosGeoNumeric *listElement;
  if (index < [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) getCacheSize]) {
    listElement = (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([self->outputList_ getCachedWithInt:index], [GeogebraCommonKernelGeosGeoNumeric class]);
  }
  else {
    listElement = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(self->cons_) autorelease];
    [listElement setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:self];
    [listElement setConstructionDefaults];
    [listElement setUseVisualDefaultsWithBoolean:NO];
  }
  [self->outputList_ addWithGeogebraCommonKernelGeosGeoElement:listElement];
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(listElement)) setValueWithDouble:value];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoMode)
