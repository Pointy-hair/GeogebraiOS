//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoPolarLine3D.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPolarLine3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoLine3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/algos/AlgoPolarLineND.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D () {
 @public
  GeogebraCommonKernelGeosGeoLine *polar2D_;
  GeogebraCommonKernelMatrixCoords *coords2D_;
  IOSDoubleArray *polarCoords_;
  GeogebraCommonKernelMatrixCoords *polarOrigin_, *polarDirection_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D, polar2D_, GeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D, coords2D_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D, polarCoords_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D, polarOrigin_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D, polarDirection_, GeogebraCommonKernelMatrixCoords *)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, label, c, P);
  return self;
}

- (id<GeogebraCommonKernelKernelNDGeoLineND>)newGeoLineWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D_setAndConsume_polar2D_(self, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons));
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D_setAndConsume_polarCoords_(self, [IOSDoubleArray newArrayWithLength:3]);
  return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_(cons) autorelease];
}

- (void)compute {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D_set_coords2D_(self, IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelMatrixCoordSys *) nil_chk([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c_)) getCoordSys])) getNormalProjectionWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P_)) getInhomCoordsInD3]]), 1));
  if (!GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(coords2D_)) getZ])) {
    [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(polar_)) setUndefined];
    return;
  }
  [coords2D_ setZWithDouble:1];
  [c_ polarLineWithGeogebraCommonKernelMatrixCoords:coords2D_ withGeogebraCommonKernelGeosGeoLine:polar2D_];
  [((GeogebraCommonKernelGeosGeoLine *) nil_chk(polar2D_)) getCoordsWithDoubleArray:polarCoords_];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D_set_polarDirection_(self, [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([c_ getCoordSys])) getVectorWithDouble:-IOSDoubleArray_Get(nil_chk(polarCoords_), 1) withDouble:IOSDoubleArray_Get(polarCoords_, 0)]);
  if (GeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(polarCoords_, 0))) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D_set_polarOrigin_(self, [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([c_ getCoordSys])) getPointWithDouble:0 withDouble:-IOSDoubleArray_Get(polarCoords_, 2) / IOSDoubleArray_Get(polarCoords_, 1)]);
  }
  else {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D_set_polarOrigin_(self, [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([c_ getCoordSys])) getPointWithDouble:-IOSDoubleArray_Get(polarCoords_, 2) / IOSDoubleArray_Get(polarCoords_, 0) withDouble:0]);
  }
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) check_class_cast(polar_, [GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D class])))) setCoordWithGeogebraCommonKernelMatrixCoords:polarOrigin_ withGeogebraCommonKernelMatrixCoords:polarDirection_];
}

- (void)dealloc {
  RELEASE_(polar2D_);
  RELEASE_(coords2D_);
  RELEASE_(polarCoords_);
  RELEASE_(polarOrigin_);
  RELEASE_(polarDirection_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoConicND:withGeogebraCommonKernelKernelNDGeoPointND:", "AlgoPolarLine3D", NULL, 0x1, NULL, NULL },
    { "newGeoLineWithGeogebraCommonKernelConstruction:", "newGeoLine", "Lgeogebra.common.kernel.kernelND.GeoLineND;", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "polar2D_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "coords2D_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "polarCoords_", NULL, 0x2, "[D", NULL, NULL,  },
    { "polarOrigin_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "polarDirection_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D = { 2, "AlgoPolarLine3D", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 3, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelKernelNDGeoConicND *c, id<GeogebraCommonKernelKernelNDGeoPointND> P) {
  GeogebraCommonKernelAlgosAlgoPolarLineND_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, label, c, P);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelKernelNDGeoConicND *c, id<GeogebraCommonKernelKernelNDGeoPointND> P) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, label, c, P);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D)
