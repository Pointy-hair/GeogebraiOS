//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/view/data/TwoVarInferenceModel.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/gui/view/data/StatisticsModel.h"
#include "geogebra/common/gui/view/data/TwoVarInferenceModel.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/main/App.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "org/apache/commons/math/MathException.h"
#include "org/apache/commons/math/distribution/TDistributionImpl.h"
#include "org/apache/commons/math/stat/StatUtils.h"
#include "org/apache/commons/math/stat/descriptive/SummaryStatistics.h"
#include "org/apache/commons/math/stat/inference/TTestImpl.h"

#define GeogebraCommonGuiViewDataTwoVarInferenceModel_serialVersionUID 1LL

@interface GeogebraCommonGuiViewDataTwoVarInferenceModel () {
 @public
  GeogebraCommonMainApp *app_;
  jint selectedInference_;
  NSString *tail_;
  jdouble confLevel_, hypMean_;
  OrgApacheCommonsMathStatInferenceTTestImpl *tTestImpl_;
  OrgApacheCommonsMathDistributionTDistributionImpl *tDist_;
  jboolean pooled_;
  jdouble meanDifference_;
  id<GeogebraCommonGuiViewDataTwoVarInferenceModel_TwoVarInferenceListener> listener_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewDataTwoVarInferenceModel, app_, GeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewDataTwoVarInferenceModel, tail_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewDataTwoVarInferenceModel, tTestImpl_, OrgApacheCommonsMathStatInferenceTTestImpl *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewDataTwoVarInferenceModel, tDist_, OrgApacheCommonsMathDistributionTDistributionImpl *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewDataTwoVarInferenceModel, listener_, id<GeogebraCommonGuiViewDataTwoVarInferenceModel_TwoVarInferenceListener>)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGuiViewDataTwoVarInferenceModel, serialVersionUID, jlong)

static NSString *GeogebraCommonGuiViewDataTwoVarInferenceModel_tail_left_ = @"<";
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGuiViewDataTwoVarInferenceModel, tail_left_, NSString *)

static NSString *GeogebraCommonGuiViewDataTwoVarInferenceModel_tail_right_ = @">";
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGuiViewDataTwoVarInferenceModel, tail_right_, NSString *)

static NSString *GeogebraCommonGuiViewDataTwoVarInferenceModel_tail_two_ = @"\u2260";
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGuiViewDataTwoVarInferenceModel, tail_two_, NSString *)

@interface GeogebraCommonGuiViewDataTwoVarInferenceModel_TwoVarInferenceListener : NSObject
@end

@interface GeogebraCommonGuiViewDataTwoVarInferenceModel_UpdatePanel : NSObject
@end

@implementation GeogebraCommonGuiViewDataTwoVarInferenceModel

- (instancetype)initWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
withGeogebraCommonGuiViewDataTwoVarInferenceModel_TwoVarInferenceListener:(id<GeogebraCommonGuiViewDataTwoVarInferenceModel_TwoVarInferenceListener>)listener {
  GeogebraCommonGuiViewDataTwoVarInferenceModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiViewDataTwoVarInferenceModel_TwoVarInferenceListener_(self, app, listener);
  return self;
}

- (jboolean)isPairedData {
  return (selectedInference_ == GeogebraCommonGuiViewDataStatisticsModel_INFER_TINT_PAIRED || selectedInference_ == GeogebraCommonGuiViewDataStatisticsModel_INFER_TTEST_PAIRED);
}

- (NSString *)getNullHypName {
  if (selectedInference_ == GeogebraCommonGuiViewDataStatisticsModel_INFER_TTEST_2MEANS) {
    return [((GeogebraCommonMainApp *) nil_chk(app_)) getMenuWithNSString:@"DifferenceOfMeans.short"];
  }
  else if (selectedInference_ == GeogebraCommonGuiViewDataStatisticsModel_INFER_TTEST_PAIRED) {
    return [((GeogebraCommonMainApp *) nil_chk(app_)) getMenuWithNSString:@"MeanDifference"];
  }
  else {
    return @"";
  }
}

- (jboolean)isTest {
  return (selectedInference_ == GeogebraCommonGuiViewDataStatisticsModel_INFER_TTEST_2MEANS || selectedInference_ == GeogebraCommonGuiViewDataStatisticsModel_INFER_TTEST_PAIRED);
}

- (void)setResults {
  JavaUtilArrayList *list = [new_JavaUtilArrayList_init() autorelease];
  switch (selectedInference_) {
    case GeogebraCommonGuiViewDataStatisticsModel_INFER_TTEST_2MEANS:
    case GeogebraCommonGuiViewDataStatisticsModel_INFER_TTEST_PAIRED:
    if (selectedInference_ == GeogebraCommonGuiViewDataStatisticsModel_INFER_TTEST_PAIRED) [list addWithId:[((GeogebraCommonMainApp *) nil_chk(app_)) getMenuWithNSString:@"MeanDifference"]];
    else [list addWithId:[((GeogebraCommonMainApp *) nil_chk(app_)) getPlainWithNSString:@"fncInspector.Difference"]];
    [list addWithId:[((GeogebraCommonMainApp *) nil_chk(app_)) getMenuWithNSString:@"PValue"]];
    [list addWithId:[app_ getMenuWithNSString:@"TStatistic"]];
    [list addWithId:[app_ getMenuWithNSString:@"StandardError.short"]];
    [list addWithId:[app_ getMenuWithNSString:@"DegreesOfFreedom.short"]];
    break;
    case GeogebraCommonGuiViewDataStatisticsModel_INFER_TINT_2MEANS:
    case GeogebraCommonGuiViewDataStatisticsModel_INFER_TINT_PAIRED:
    if (selectedInference_ == GeogebraCommonGuiViewDataStatisticsModel_INFER_TINT_PAIRED) [list addWithId:[((GeogebraCommonMainApp *) nil_chk(app_)) getMenuWithNSString:@"MeanDifference"]];
    else [list addWithId:[((GeogebraCommonMainApp *) nil_chk(app_)) getPlainWithNSString:@"fncInspector.Difference"]];
    [list addWithId:[((GeogebraCommonMainApp *) nil_chk(app_)) getMenuWithNSString:@"MarginOfError.short"]];
    [list addWithId:[app_ getMenuWithNSString:@"LowerLimit"]];
    [list addWithId:[app_ getMenuWithNSString:@"UpperLimit"]];
    [list addWithId:[app_ getMenuWithNSString:@"StandardError.short"]];
    [list addWithId:[app_ getMenuWithNSString:@"DegreesOfFreedom.short"]];
    break;
  }
  IOSObjectArray *columnNames = [IOSObjectArray arrayWithLength:[list size] type:NSString_class_()];
  [list toArrayWithNSObjectArray:columnNames];
  [((id<GeogebraCommonGuiViewDataTwoVarInferenceModel_TwoVarInferenceListener>) nil_chk(listener_)) setStatTableWithInt:1 withNSStringArray:nil withInt:columnNames->size_ withNSStringArray:columnNames];
}

- (void)updateResults {
  jboolean ok = [self evaluate];
  if (!ok) {
    return;
  }
  switch (selectedInference_) {
    case GeogebraCommonGuiViewDataStatisticsModel_INFER_TTEST_2MEANS:
    case GeogebraCommonGuiViewDataStatisticsModel_INFER_TTEST_PAIRED:
    if (selectedInference_ == GeogebraCommonGuiViewDataStatisticsModel_INFER_TTEST_PAIRED) [((id<GeogebraCommonGuiViewDataTwoVarInferenceModel_TwoVarInferenceListener>) nil_chk(listener_)) setFormattedValueAtWithDouble:meanDifference_ withInt:0 withInt:0];
    else [((id<GeogebraCommonGuiViewDataTwoVarInferenceModel_TwoVarInferenceListener>) nil_chk(listener_)) setFormattedValueAtWithDouble:diffMeans_ withInt:0 withInt:0];
    [((id<GeogebraCommonGuiViewDataTwoVarInferenceModel_TwoVarInferenceListener>) nil_chk(listener_)) setFormattedValueAtWithDouble:P_ withInt:0 withInt:1];
    [listener_ setFormattedValueAtWithDouble:t_ withInt:0 withInt:2];
    [listener_ setFormattedValueAtWithDouble:se_ withInt:0 withInt:3];
    [listener_ setFormattedValueAtWithDouble:df_ withInt:0 withInt:4];
    break;
    case GeogebraCommonGuiViewDataStatisticsModel_INFER_TINT_2MEANS:
    case GeogebraCommonGuiViewDataStatisticsModel_INFER_TINT_PAIRED:
    if (selectedInference_ == GeogebraCommonGuiViewDataStatisticsModel_INFER_TINT_PAIRED) [((id<GeogebraCommonGuiViewDataTwoVarInferenceModel_TwoVarInferenceListener>) nil_chk(listener_)) setFormattedValueAtWithDouble:meanDifference_ withInt:0 withInt:0];
    else [((id<GeogebraCommonGuiViewDataTwoVarInferenceModel_TwoVarInferenceListener>) nil_chk(listener_)) setFormattedValueAtWithDouble:diffMeans_ withInt:0 withInt:0];
    [((id<GeogebraCommonGuiViewDataTwoVarInferenceModel_TwoVarInferenceListener>) nil_chk(listener_)) setFormattedValueAtWithDouble:me_ withInt:0 withInt:1];
    [listener_ setFormattedValueAtWithDouble:lower_ withInt:0 withInt:2];
    [listener_ setFormattedValueAtWithDouble:upper_ withInt:0 withInt:3];
    [listener_ setFormattedValueAtWithDouble:se_ withInt:0 withInt:4];
    [listener_ setFormattedValueAtWithDouble:df_ withInt:0 withInt:5];
    break;
  }
}

- (jboolean)evaluate {
  GeogebraCommonKernelGeosGeoList *dataCollection = [((id<GeogebraCommonGuiViewDataTwoVarInferenceModel_TwoVarInferenceListener>) nil_chk(listener_)) getDataSelected];
  GeogebraCommonKernelGeosGeoList *dataList1 = (GeogebraCommonKernelGeosGeoList *) check_class_cast([((GeogebraCommonKernelGeosGeoList *) nil_chk(dataCollection)) getWithInt:[listener_ getSelectedDataIndexWithInt:0]], [GeogebraCommonKernelGeosGeoList class]);
  IOSDoubleArray *sample1 = [listener_ getValueArrayWithGeogebraCommonKernelGeosGeoList:dataList1];
  OrgApacheCommonsMathStatDescriptiveSummaryStatistics *stats1 = [new_OrgApacheCommonsMathStatDescriptiveSummaryStatistics_init() autorelease];
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(sample1))->size_; i++) {
    [stats1 addValueWithDouble:IOSDoubleArray_Get(sample1, i)];
  }
  GeogebraCommonKernelGeosGeoList *dataList2 = (GeogebraCommonKernelGeosGeoList *) check_class_cast([dataCollection getWithInt:[listener_ getSelectedDataIndexWithInt:1]], [GeogebraCommonKernelGeosGeoList class]);
  IOSDoubleArray *sample2 = [listener_ getValueArrayWithGeogebraCommonKernelGeosGeoList:dataList2];
  OrgApacheCommonsMathStatDescriptiveSummaryStatistics *stats2 = [new_OrgApacheCommonsMathStatDescriptiveSummaryStatistics_init() autorelease];
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(sample2))->size_; i++) {
    [stats2 addValueWithDouble:IOSDoubleArray_Get(sample2, i)];
  }
  if ([self isPairedData] && [stats1 getN] != [stats2 getN]) return NO;
  if (tTestImpl_ == nil) GeogebraCommonGuiViewDataTwoVarInferenceModel_setAndConsume_tTestImpl_(self, new_OrgApacheCommonsMathStatInferenceTTestImpl_init());
  jdouble tCritical;
  @try {
    {
      jdouble v1;
      jdouble v2;
      switch (selectedInference_) {
        case GeogebraCommonGuiViewDataStatisticsModel_INFER_TTEST_2MEANS:
        case GeogebraCommonGuiViewDataStatisticsModel_INFER_TINT_2MEANS:
        mean1_ = OrgApacheCommonsMathStatStatUtils_meanWithDoubleArray_(sample1);
        mean2_ = OrgApacheCommonsMathStatStatUtils_meanWithDoubleArray_(sample2);
        diffMeans_ = mean1_ - mean2_;
        n1_ = [stats1 getN];
        n2_ = [stats2 getN];
        v1 = [stats1 getVariance];
        v2 = [stats2 getVariance];
        df_ = [self getDegreeOfFreedomWithDouble:v1 withDouble:v2 withDouble:n1_ withDouble:n2_ withBoolean:[self isPooled]];
        if ([self isPooled]) {
          jdouble pooledVariance = ((n1_ - 1) * v1 + (n2_ - 1) * v2) / (n1_ + n2_ - 2);
          se_ = JavaLangMath_sqrtWithDouble_(pooledVariance * (1.0 / n1_ + 1.0 / n2_));
        }
        else se_ = JavaLangMath_sqrtWithDouble_((v1 / n1_) + (v2 / n2_));
        GeogebraCommonGuiViewDataTwoVarInferenceModel_setAndConsume_tDist_(self, new_OrgApacheCommonsMathDistributionTDistributionImpl_initWithDouble_(df_));
        tCritical = [tDist_ inverseCumulativeProbabilityWithDouble:([self getConfLevel] + 1.0) / 2];
        me_ = tCritical * se_;
        upper_ = diffMeans_ + me_;
        lower_ = diffMeans_ - me_;
        if ([self isPooled]) {
          t_ = [((OrgApacheCommonsMathStatInferenceTTestImpl *) nil_chk(tTestImpl_)) homoscedasticTWithDoubleArray:sample1 withDoubleArray:sample2];
          P_ = [tTestImpl_ homoscedasticTTestWithDoubleArray:sample1 withDoubleArray:sample2];
        }
        else {
          t_ = [((OrgApacheCommonsMathStatInferenceTTestImpl *) nil_chk(tTestImpl_)) tWithDoubleArray:sample1 withDoubleArray:sample2];
          P_ = [tTestImpl_ tTestWithDoubleArray:sample1 withDoubleArray:sample2];
        }
        P_ = [self adjustedPValueWithDouble:P_ withDouble:t_ withNSString:tail_];
        break;
        case GeogebraCommonGuiViewDataStatisticsModel_INFER_TTEST_PAIRED:
        case GeogebraCommonGuiViewDataStatisticsModel_INFER_TINT_PAIRED:
        n1_ = sample1->size_;
        meanDifference_ = OrgApacheCommonsMathStatStatUtils_meanDifferenceWithDoubleArray_withDoubleArray_(sample1, sample2);
        se_ = JavaLangMath_sqrtWithDouble_(OrgApacheCommonsMathStatStatUtils_varianceDifferenceWithDoubleArray_withDoubleArray_withDouble_(sample1, sample2, meanDifference_) / n1_);
        df_ = n1_ - 1;
        GeogebraCommonGuiViewDataTwoVarInferenceModel_setAndConsume_tDist_(self, new_OrgApacheCommonsMathDistributionTDistributionImpl_initWithDouble_(df_));
        tCritical = [tDist_ inverseCumulativeProbabilityWithDouble:([self getConfLevel] + 1.0) / 2];
        me_ = tCritical * se_;
        upper_ = meanDifference_ + me_;
        lower_ = meanDifference_ - me_;
        t_ = meanDifference_ / se_;
        P_ = 2.0 * [tDist_ cumulativeProbabilityWithDouble:-JavaLangMath_absWithDouble_(t_)];
        P_ = [self adjustedPValueWithDouble:P_ withDouble:t_ withNSString:tail_];
        break;
      }
    }
  }
  @catch (JavaLangIllegalArgumentException *e) {
    [((JavaLangIllegalArgumentException *) nil_chk(e)) printStackTrace];
    return NO;
  }
  @catch (OrgApacheCommonsMathMathException *e) {
    [((OrgApacheCommonsMathMathException *) nil_chk(e)) printStackTrace];
    return NO;
  }
  return YES;
}

- (jdouble)adjustedPValueWithDouble:(jdouble)p
                         withDouble:(jdouble)testStatistic
                       withNSString:(NSString *)tail {
  if ([((NSString *) nil_chk(tail)) isEqual:GeogebraCommonGuiViewDataTwoVarInferenceModel_tail_two_]) return p;
  else if (([tail isEqual:GeogebraCommonGuiViewDataTwoVarInferenceModel_tail_right_] && testStatistic > 0) || ([tail isEqual:GeogebraCommonGuiViewDataTwoVarInferenceModel_tail_left_] && testStatistic < 0)) return p / 2;
  else return 1 - p / 2;
}

- (jdouble)getDegreeOfFreedomWithDouble:(jdouble)v1
                             withDouble:(jdouble)v2
                             withDouble:(jdouble)n1
                             withDouble:(jdouble)n2
                            withBoolean:(jboolean)pooled {
  if (pooled) return n1 + n2 - 2;
  else return (((v1 / n1) + (v2 / n2)) * ((v1 / n1) + (v2 / n2))) / ((v1 * v1) / (n1 * n1 * (n1 - 1.0)) + (v2 * v2) / (n2 * n2 * (n2 - 1.0)));
}

- (jdouble)getMarginOfErrorWithDouble:(jdouble)v1
                           withDouble:(jdouble)n1
                           withDouble:(jdouble)v2
                           withDouble:(jdouble)n2
                           withDouble:(jdouble)confLevel
                          withBoolean:(jboolean)pooled {
  if (pooled) {
    jdouble pooledVariance = ((n1 - 1) * v1 + (n2 - 1) * v2) / (n1 + n2 - 2);
    jdouble se = JavaLangMath_sqrtWithDouble_(pooledVariance * (1.0 / n1 + 1.0 / n2));
    GeogebraCommonGuiViewDataTwoVarInferenceModel_setAndConsume_tDist_(self, new_OrgApacheCommonsMathDistributionTDistributionImpl_initWithDouble_([self getDegreeOfFreedomWithDouble:v1 withDouble:v2 withDouble:n1 withDouble:n2 withBoolean:pooled]));
    jdouble a = [tDist_ inverseCumulativeProbabilityWithDouble:(confLevel + 1.0) / 2];
    return a * se;
  }
  else {
    jdouble se = JavaLangMath_sqrtWithDouble_((v1 / n1) + (v2 / n2));
    GeogebraCommonGuiViewDataTwoVarInferenceModel_setAndConsume_tDist_(self, new_OrgApacheCommonsMathDistributionTDistributionImpl_initWithDouble_([self getDegreeOfFreedomWithDouble:v1 withDouble:v2 withDouble:n1 withDouble:n2 withBoolean:pooled]));
    jdouble a = [tDist_ inverseCumulativeProbabilityWithDouble:(confLevel + 1.0) / 2];
    return a * se;
  }
}

- (void)setSelectedInferenceWithInt:(jint)value {
  selectedInference_ = value;
}

- (jdouble)getHypMean {
  return hypMean_;
}

- (void)setHypMeanWithDouble:(jdouble)hypMean {
  self->hypMean_ = hypMean;
}

- (jdouble)getConfLevel {
  return confLevel_;
}

- (void)setConfLevelWithDouble:(jdouble)confLevel {
  self->confLevel_ = confLevel;
}

- (jboolean)isPooled {
  return pooled_;
}

- (void)applyTailWithInt:(jint)idx {
  if (idx == 0) {
    GeogebraCommonGuiViewDataTwoVarInferenceModel_set_tail_(self, GeogebraCommonGuiViewDataTwoVarInferenceModel_tail_right_);
  }
  else if (idx == 1) {
    GeogebraCommonGuiViewDataTwoVarInferenceModel_set_tail_(self, GeogebraCommonGuiViewDataTwoVarInferenceModel_tail_left_);
  }
  else {
    GeogebraCommonGuiViewDataTwoVarInferenceModel_set_tail_(self, GeogebraCommonGuiViewDataTwoVarInferenceModel_tail_two_);
  }
  [self updateResults];
}

- (void)setPooledWithBoolean:(jboolean)pooled {
  self->pooled_ = pooled;
}

- (void)fillAlternateHyp {
  NSString *nullHypName = [self getNullHypName];
  [((id<GeogebraCommonGuiViewDataTwoVarInferenceModel_TwoVarInferenceListener>) nil_chk(listener_)) addAltHypItemWithNSString:nullHypName withNSString:GeogebraCommonGuiViewDataTwoVarInferenceModel_tail_right_ withDouble:hypMean_];
  [listener_ addAltHypItemWithNSString:nullHypName withNSString:GeogebraCommonGuiViewDataTwoVarInferenceModel_tail_left_ withDouble:hypMean_];
  [listener_ addAltHypItemWithNSString:nullHypName withNSString:GeogebraCommonGuiViewDataTwoVarInferenceModel_tail_two_ withDouble:hypMean_];
  if (tail_ == GeogebraCommonGuiViewDataTwoVarInferenceModel_tail_right_) {
    [listener_ selectAltHypWithInt:0];
  }
  else if (tail_ == GeogebraCommonGuiViewDataTwoVarInferenceModel_tail_left_) {
    [listener_ selectAltHypWithInt:0];
  }
  else {
    [listener_ selectAltHypWithInt:2];
  }
}

- (void)dealloc {
  RELEASE_(app_);
  RELEASE_(tail_);
  RELEASE_(tTestImpl_);
  RELEASE_(tDist_);
  RELEASE_(listener_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonMainApp:withGeogebraCommonGuiViewDataTwoVarInferenceModel_TwoVarInferenceListener:", "TwoVarInferenceModel", NULL, 0x1, NULL, NULL },
    { "isPairedData", NULL, "Z", 0x1, NULL, NULL },
    { "getNullHypName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isTest", NULL, "Z", 0x1, NULL, NULL },
    { "setResults", NULL, "V", 0x1, NULL, NULL },
    { "updateResults", NULL, "V", 0x1, NULL, NULL },
    { "evaluate", NULL, "Z", 0x1, NULL, NULL },
    { "adjustedPValueWithDouble:withDouble:withNSString:", "adjustedPValue", "D", 0x1, NULL, NULL },
    { "getDegreeOfFreedomWithDouble:withDouble:withDouble:withDouble:withBoolean:", "getDegreeOfFreedom", "D", 0x1, NULL, NULL },
    { "getMarginOfErrorWithDouble:withDouble:withDouble:withDouble:withDouble:withBoolean:", "getMarginOfError", "D", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
    { "setSelectedInferenceWithInt:", "setSelectedInference", "V", 0x1, NULL, NULL },
    { "getHypMean", NULL, "D", 0x1, NULL, NULL },
    { "setHypMeanWithDouble:", "setHypMean", "V", 0x1, NULL, NULL },
    { "getConfLevel", NULL, "D", 0x1, NULL, NULL },
    { "setConfLevelWithDouble:", "setConfLevel", "V", 0x1, NULL, NULL },
    { "isPooled", NULL, "Z", 0x1, NULL, NULL },
    { "applyTailWithInt:", "applyTail", "V", 0x1, NULL, NULL },
    { "setPooledWithBoolean:", "setPooled", "V", 0x1, NULL, NULL },
    { "fillAlternateHyp", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = GeogebraCommonGuiViewDataTwoVarInferenceModel_serialVersionUID },
    { "app_", NULL, 0x2, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "selectedInference_", NULL, 0x2, "I", NULL, NULL,  },
    { "tail_left_", NULL, 0x1a, "Ljava.lang.String;", &GeogebraCommonGuiViewDataTwoVarInferenceModel_tail_left_, NULL,  },
    { "tail_right_", NULL, 0x1a, "Ljava.lang.String;", &GeogebraCommonGuiViewDataTwoVarInferenceModel_tail_right_, NULL,  },
    { "tail_two_", NULL, 0x1a, "Ljava.lang.String;", &GeogebraCommonGuiViewDataTwoVarInferenceModel_tail_two_, NULL,  },
    { "tail_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "confLevel_", NULL, 0x2, "D", NULL, NULL,  },
    { "hypMean_", NULL, 0x2, "D", NULL, NULL,  },
    { "t_", NULL, 0x0, "D", NULL, NULL,  },
    { "P_", NULL, 0x0, "D", NULL, NULL,  },
    { "df_", NULL, 0x0, "D", NULL, NULL,  },
    { "lower_", NULL, 0x0, "D", NULL, NULL,  },
    { "upper_", NULL, 0x0, "D", NULL, NULL,  },
    { "mean_", NULL, 0x0, "D", NULL, NULL,  },
    { "se_", NULL, 0x0, "D", NULL, NULL,  },
    { "me_", NULL, 0x0, "D", NULL, NULL,  },
    { "n1_", NULL, 0x0, "D", NULL, NULL,  },
    { "n2_", NULL, 0x0, "D", NULL, NULL,  },
    { "diffMeans_", NULL, 0x0, "D", NULL, NULL,  },
    { "mean1_", NULL, 0x0, "D", NULL, NULL,  },
    { "mean2_", NULL, 0x0, "D", NULL, NULL,  },
    { "tTestImpl_", NULL, 0x2, "Lorg.apache.commons.math.stat.inference.TTestImpl;", NULL, NULL,  },
    { "tDist_", NULL, 0x2, "Lorg.apache.commons.math.distribution.TDistributionImpl;", NULL, NULL,  },
    { "pooled_", NULL, 0x2, "Z", NULL, NULL,  },
    { "meanDifference_", NULL, 0x2, "D", NULL, NULL,  },
    { "listener_", NULL, 0x2, "Lgeogebra.common.gui.view.data.TwoVarInferenceModel$TwoVarInferenceListener;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.gui.view.data.TwoVarInferenceModel$TwoVarInferenceListener;", "Lgeogebra.common.gui.view.data.TwoVarInferenceModel$UpdatePanel;"};
  static const J2ObjcClassInfo _GeogebraCommonGuiViewDataTwoVarInferenceModel = { 2, "TwoVarInferenceModel", "geogebra.common.gui.view.data", NULL, 0x1, 19, methods, 27, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_GeogebraCommonGuiViewDataTwoVarInferenceModel;
}

@end

void GeogebraCommonGuiViewDataTwoVarInferenceModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiViewDataTwoVarInferenceModel_TwoVarInferenceListener_(GeogebraCommonGuiViewDataTwoVarInferenceModel *self, GeogebraCommonMainApp *app, id<GeogebraCommonGuiViewDataTwoVarInferenceModel_TwoVarInferenceListener> listener) {
  NSObject_init(self);
  self->selectedInference_ = GeogebraCommonGuiViewDataStatisticsModel_INFER_TINT_2MEANS;
  GeogebraCommonGuiViewDataTwoVarInferenceModel_set_tail_(self, GeogebraCommonGuiViewDataTwoVarInferenceModel_tail_two_);
  self->confLevel_ = .95;
  self->hypMean_ = 0;
  self->pooled_ = NO;
  GeogebraCommonGuiViewDataTwoVarInferenceModel_set_app_(self, app);
  GeogebraCommonGuiViewDataTwoVarInferenceModel_set_listener_(self, listener);
}

GeogebraCommonGuiViewDataTwoVarInferenceModel *new_GeogebraCommonGuiViewDataTwoVarInferenceModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiViewDataTwoVarInferenceModel_TwoVarInferenceListener_(GeogebraCommonMainApp *app, id<GeogebraCommonGuiViewDataTwoVarInferenceModel_TwoVarInferenceListener> listener) {
  GeogebraCommonGuiViewDataTwoVarInferenceModel *self = [GeogebraCommonGuiViewDataTwoVarInferenceModel alloc];
  GeogebraCommonGuiViewDataTwoVarInferenceModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiViewDataTwoVarInferenceModel_TwoVarInferenceListener_(self, app, listener);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiViewDataTwoVarInferenceModel)

@implementation GeogebraCommonGuiViewDataTwoVarInferenceModel_TwoVarInferenceListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setStatTableWithInt:withNSStringArray:withInt:withNSStringArray:", "setStatTable", "V", 0x401, NULL, NULL },
    { "setFormattedValueAtWithDouble:withInt:withInt:", "setFormattedValueAt", "V", 0x401, NULL, NULL },
    { "getDataSelected", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x401, NULL, NULL },
    { "getSelectedDataIndexWithInt:", "getSelectedDataIndex", "I", 0x401, NULL, NULL },
    { "getValueArrayWithGeogebraCommonKernelGeosGeoList:", "getValueArray", "[D", 0x401, NULL, NULL },
    { "addAltHypItemWithNSString:withNSString:withDouble:", "addAltHypItem", "V", 0x401, NULL, NULL },
    { "selectAltHypWithInt:", "selectAltHyp", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiViewDataTwoVarInferenceModel_TwoVarInferenceListener = { 2, "TwoVarInferenceListener", "geogebra.common.gui.view.data", "TwoVarInferenceModel", 0x609, 7, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiViewDataTwoVarInferenceModel_TwoVarInferenceListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(GeogebraCommonGuiViewDataTwoVarInferenceModel_TwoVarInferenceListener)

@implementation GeogebraCommonGuiViewDataTwoVarInferenceModel_UpdatePanel

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "updatePanel", NULL, "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiViewDataTwoVarInferenceModel_UpdatePanel = { 2, "UpdatePanel", "geogebra.common.gui.view.data", "TwoVarInferenceModel", 0x609, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiViewDataTwoVarInferenceModel_UpdatePanel;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(GeogebraCommonGuiViewDataTwoVarInferenceModel_UpdatePanel)
