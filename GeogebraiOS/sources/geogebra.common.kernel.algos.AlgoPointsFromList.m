//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoPointsFromList.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoPointsFromList.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "java/lang/Math.h"

@interface GeogebraCommonKernelAlgosAlgoPointsFromList () {
 @public
  GeogebraCommonKernelGeosGeoList *list_;
  IOSObjectArray *points_;
  IOSObjectArray *labels_;
  jboolean initLabels_, setLabels__;
}

- (void)updateLabelsWithInt:(jint)number;

- (void)initPointsWithInt:(jint)number OBJC_METHOD_FAMILY_NONE;

- (void)removeRootPointWithInt:(jint)pos;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoPointsFromList, list_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoPointsFromList, points_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoPointsFromList, labels_, IOSObjectArray *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoPointsFromList_setPointsWithDoubleArray_withDoubleArray_withInt_(GeogebraCommonKernelAlgosAlgoPointsFromList *self, IOSDoubleArray *x, IOSDoubleArray *y, jint number);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoPointsFromList_updateLabelsWithInt_(GeogebraCommonKernelAlgosAlgoPointsFromList *self, jint number);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoPointsFromList_removeRootPointWithInt_(GeogebraCommonKernelAlgosAlgoPointsFromList *self, jint pos);

@implementation GeogebraCommonKernelAlgosAlgoPointsFromList

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
                                             withBoolean:(jboolean)setLabels
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list {
  GeogebraCommonKernelAlgosAlgoPointsFromList_initWithGeogebraCommonKernelConstruction_withNSStringArray_withBoolean_withGeogebraCommonKernelGeosGeoList_(self, cons, labels, setLabels, list);
  return self;
}

- (void)setLabelsWithNSStringArray:(IOSObjectArray *)labels {
  GeogebraCommonKernelAlgosAlgoPointsFromList_set_labels_(self, labels);
  setLabels__ = YES;
  if (labels != nil) [self initPointsWithInt:labels->size_];
  [self update];
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Point();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, list_);
  [super setOutputWithGeogebraCommonKernelGeosGeoElementArray:points_];
  for (jint i = 1; i < ((IOSObjectArray *) nil_chk(points_))->size_; i++) {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(points_, i))) showUndefinedInAlgebraViewWithBoolean:NO];
  }
  [self setDependencies];
}

- (IOSObjectArray *)getPoints {
  return points_;
}

- (void)compute {
  jint n;
  if (![((GeogebraCommonKernelGeosGeoList *) nil_chk(list_)) isDefined] || (n = [list_ size]) == 0) {
    GeogebraCommonKernelAlgosAlgoPointsFromList_setPointsWithDoubleArray_withDoubleArray_withInt_(self, nil, nil, 0);
    return;
  }
  jint length = -1;
  IOSDoubleArray *x = [IOSDoubleArray arrayWithLength:n];
  IOSDoubleArray *y = [IOSDoubleArray arrayWithLength:n];
  if ([list_ size] == 2) {
    GeogebraCommonKernelGeosGeoElement *arg0, *arg1;
    if ([(arg0 = [list_ getWithInt:0]) isGeoNumeric] && [(arg1 = [list_ getWithInt:1]) isGeoNumeric]) {
      *IOSDoubleArray_GetRef(x, 0) = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(arg0, [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
      *IOSDoubleArray_GetRef(y, 0) = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(arg1, [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
      length = 1;
    }
  }
  if (length == -1) {
    for (jint i = 0; i < n; i++) {
      GeogebraCommonKernelGeosGeoElement *geo = [list_ getWithInt:i];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoList]) {
        GeogebraCommonKernelGeosGeoList *geoList = ((GeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoList class]));
        GeogebraCommonKernelGeosGeoElement *geoX = [geoList getWithInt:0];
        GeogebraCommonKernelGeosGeoElement *geoY = [geoList getWithInt:1];
        *IOSDoubleArray_GetRef(x, i) = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geoX, [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
        *IOSDoubleArray_GetRef(y, i) = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geoY, [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
      }
    }
    length = x->size_;
  }
  if (length > 0) GeogebraCommonKernelAlgosAlgoPointsFromList_setPointsWithDoubleArray_withDoubleArray_withInt_(self, x, y, length);
}

- (void)setPointsWithDoubleArray:(IOSDoubleArray *)x
                 withDoubleArray:(IOSDoubleArray *)y
                         withInt:(jint)number {
  GeogebraCommonKernelAlgosAlgoPointsFromList_setPointsWithDoubleArray_withDoubleArray_withInt_(self, x, y, number);
}

- (void)updateLabelsWithInt:(jint)number {
  GeogebraCommonKernelAlgosAlgoPointsFromList_updateLabelsWithInt_(self, number);
}

- (void)removeWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)output {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points_))->size_; i++) {
    if (IOSObjectArray_Get(points_, i) == output && ![((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(points_, i))) isDefined]) {
      GeogebraCommonKernelAlgosAlgoPointsFromList_removeRootPointWithInt_(self, i);
      return;
    }
  }
  [super remove];
}

- (void)initPointsWithInt:(jint)number {
  if (((IOSObjectArray *) nil_chk(points_))->size_ < number) {
    IOSObjectArray *temp = [IOSObjectArray arrayWithLength:number type:GeogebraCommonKernelGeosGeoPoint_class_()];
    for (jint i = 0; i < points_->size_; i++) {
      IOSObjectArray_Set(temp, i, IOSObjectArray_Get(points_, i));
      [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(temp, i))) setCoordsWithDouble:0 withDouble:0 withDouble:1];
    }
    for (jint i = points_->size_; i < temp->size_; i++) {
      IOSObjectArray_SetAndConsume(temp, i, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons_));
      [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(temp, i))) setCoordsWithDouble:0 withDouble:0 withDouble:1];
      [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(temp, i))) setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:self];
    }
    GeogebraCommonKernelAlgosAlgoPointsFromList_set_points_(self, temp);
    [super setOutputWithGeogebraCommonKernelGeosGeoElementArray:points_];
  }
}

- (void)removeRootPointWithInt:(jint)pos {
  GeogebraCommonKernelAlgosAlgoPointsFromList_removeRootPointWithInt_(self, pos);
}

- (void)dealloc {
  RELEASE_(list_);
  RELEASE_(points_);
  RELEASE_(labels_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withBoolean:withGeogebraCommonKernelGeosGeoList:", "AlgoPointsFromList", NULL, 0x1, NULL, NULL },
    { "setLabelsWithNSStringArray:", "setLabels", "V", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getPoints", NULL, "[Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "setPointsWithDoubleArray:withDoubleArray:withInt:", "setPoints", "V", 0x10, NULL, NULL },
    { "updateLabelsWithInt:", "updateLabels", "V", 0x2, NULL, NULL },
    { "removeWithGeogebraCommonKernelGeosGeoElement:", "remove", "V", 0x1, NULL, NULL },
    { "initPointsWithInt:", "initPoints", "V", 0x2, NULL, NULL },
    { "removeRootPointWithInt:", "removeRootPoint", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "list_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "points_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "labels_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL,  },
    { "initLabels_", NULL, 0x2, "Z", NULL, NULL,  },
    { "setLabels__", "setLabels", 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoPointsFromList = { 2, "AlgoPointsFromList", "geogebra.common.kernel.algos", NULL, 0x1, 11, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoPointsFromList;
}

@end

void GeogebraCommonKernelAlgosAlgoPointsFromList_initWithGeogebraCommonKernelConstruction_withNSStringArray_withBoolean_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoPointsFromList *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, jboolean setLabels, GeogebraCommonKernelGeosGeoList *list) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoPointsFromList_set_list_(self, list);
  GeogebraCommonKernelAlgosAlgoPointsFromList_set_labels_(self, labels);
  self->setLabels__ = setLabels;
  jint number = labels == nil ? 1 : JavaLangMath_maxWithInt_withInt_(1, labels->size_);
  GeogebraCommonKernelAlgosAlgoPointsFromList_setAndConsume_points_(self, [IOSObjectArray newArrayWithLength:0 type:GeogebraCommonKernelGeosGeoPoint_class_()]);
  [self initPointsWithInt:number];
  self->initLabels_ = YES;
  [self setInputOutput];
  [self compute];
  if (![((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->points_, 0))) isDefined]) {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->points_, 0))) setCoordsWithDouble:0 withDouble:0 withDouble:1];
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->points_, 0))) update];
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->points_, 0))) setUndefined];
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->points_, 0))) update];
  }
}

GeogebraCommonKernelAlgosAlgoPointsFromList *new_GeogebraCommonKernelAlgosAlgoPointsFromList_initWithGeogebraCommonKernelConstruction_withNSStringArray_withBoolean_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, jboolean setLabels, GeogebraCommonKernelGeosGeoList *list) {
  GeogebraCommonKernelAlgosAlgoPointsFromList *self = [GeogebraCommonKernelAlgosAlgoPointsFromList alloc];
  GeogebraCommonKernelAlgosAlgoPointsFromList_initWithGeogebraCommonKernelConstruction_withNSStringArray_withBoolean_withGeogebraCommonKernelGeosGeoList_(self, cons, labels, setLabels, list);
  return self;
}

void GeogebraCommonKernelAlgosAlgoPointsFromList_setPointsWithDoubleArray_withDoubleArray_withInt_(GeogebraCommonKernelAlgosAlgoPointsFromList *self, IOSDoubleArray *x, IOSDoubleArray *y, jint number) {
  [self initPointsWithInt:number];
  for (jint i = 0; i < number; i++) {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(self->points_), i))) setCoordsWithDouble:IOSDoubleArray_Get(nil_chk(x), i) withDouble:IOSDoubleArray_Get(nil_chk(y), i) withDouble:1.0];
  }
  for (jint i = number; i < ((IOSObjectArray *) nil_chk(self->points_))->size_; i++) {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->points_, i))) setUndefined];
  }
  if (self->setLabels__) GeogebraCommonKernelAlgosAlgoPointsFromList_updateLabelsWithInt_(self, number);
}

void GeogebraCommonKernelAlgosAlgoPointsFromList_updateLabelsWithInt_(GeogebraCommonKernelAlgosAlgoPointsFromList *self, jint number) {
  if (self->initLabels_) {
    GeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withGeogebraCommonKernelGeosGeoElementArray_(self->labels_, self->points_);
    self->initLabels_ = NO;
  }
  else {
    for (jint i = 0; i < number; i++) {
      if (![((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(self->points_), i))) isLabelSet]) {
        NSString *newLabel = (self->labels_ != nil && i < self->labels_->size_) ? IOSObjectArray_Get(self->labels_, i) : nil;
        [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->points_, i))) setLabelWithNSString:newLabel];
      }
    }
  }
  for (jint i = number; i < ((IOSObjectArray *) nil_chk(self->points_))->size_; i++) {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->points_, i))) setUndefined];
  }
}

void GeogebraCommonKernelAlgosAlgoPointsFromList_removeRootPointWithInt_(GeogebraCommonKernelAlgosAlgoPointsFromList *self, jint pos) {
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(self->points_), pos))) doRemove];
  IOSObjectArray *temp = [IOSObjectArray arrayWithLength:self->points_->size_ - 1 type:GeogebraCommonKernelGeosGeoPoint_class_()];
  jint i;
  for (i = 0; i < pos; i++) IOSObjectArray_Set(temp, i, IOSObjectArray_Get(self->points_, i));
  for (i = pos + 1; i < self->points_->size_; i++) IOSObjectArray_Set(temp, i - 1, IOSObjectArray_Get(self->points_, i));
  GeogebraCommonKernelAlgosAlgoPointsFromList_set_points_(self, temp);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoPointsFromList)
