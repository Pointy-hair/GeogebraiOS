//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/main/settings/EuclidianSettingsForPlane.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/main/settings/EuclidianSettingsForPlane.h"
#include "geogebra/common/main/settings/EuclidianSettings.h"

@interface GeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane () {
 @public
  jboolean mirror_;
  jint rotate_;
}

@end

@implementation GeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane

- (instancetype)initWithGeogebraCommonMainSettingsEuclidianSettings:(GeogebraCommonMainSettingsEuclidianSettings *)standardSettings {
  GeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane_initWithGeogebraCommonMainSettingsEuclidianSettings_(self, standardSettings);
  return self;
}

- (void)setTransformForPlaneWithBoolean:(jboolean)mirror
                                withInt:(jint)rotate {
  self->mirror_ = mirror;
  self->rotate_ = rotate;
}

- (jboolean)getMirror {
  return mirror_;
}

- (jint)getRotate {
  return rotate_;
}

- (jboolean)isViewForPlane {
  return YES;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonMainSettingsEuclidianSettings:", "EuclidianSettingsForPlane", NULL, 0x1, NULL, NULL },
    { "setTransformForPlaneWithBoolean:withInt:", "setTransformForPlane", "V", 0x1, NULL, NULL },
    { "getMirror", NULL, "Z", 0x1, NULL, NULL },
    { "getRotate", NULL, "I", 0x1, NULL, NULL },
    { "isViewForPlane", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mirror_", NULL, 0x2, "Z", NULL, NULL,  },
    { "rotate_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane = { 2, "EuclidianSettingsForPlane", "geogebra.common.geogebra3D.main.settings", NULL, 0x1, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane;
}

@end

void GeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane_initWithGeogebraCommonMainSettingsEuclidianSettings_(GeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane *self, GeogebraCommonMainSettingsEuclidianSettings *standardSettings) {
  GeogebraCommonMainSettingsEuclidianSettings_initWithGeogebraCommonMainSettingsEuclidianSettings_(self, standardSettings);
  self->mirror_ = NO;
  self->rotate_ = 0;
}

GeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane *new_GeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane_initWithGeogebraCommonMainSettingsEuclidianSettings_(GeogebraCommonMainSettingsEuclidianSettings *standardSettings) {
  GeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane *self = [GeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane alloc];
  GeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane_initWithGeogebraCommonMainSettingsEuclidianSettings_(self, standardSettings);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane)
