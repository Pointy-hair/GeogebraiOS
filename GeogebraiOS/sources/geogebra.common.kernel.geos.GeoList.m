//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/geos/GeoList.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GFont.h"
#include "geogebra/common/euclidian/EuclidianViewInterfaceSlim.h"
#include "geogebra/common/factories/SwingFactory.h"
#include "geogebra/common/javax/swing/AbstractJComboBox.h"
#include "geogebra/common/kernel/CircularDefinitionException.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/PathMover.h"
#include "geogebra/common/kernel/PathMoverGeneric.h"
#include "geogebra/common/kernel/PathNormalizer.h"
#include "geogebra/common/kernel/PathOrPoint.h"
#include "geogebra/common/kernel/PathParameter.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoConicPartCircumcircle.h"
#include "geogebra/common/kernel/algos/AlgoConicPartConicPoints.h"
#include "geogebra/common/kernel/algos/AlgoDependentList.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoMacroInterface.h"
#include "geogebra/common/kernel/algos/AlgoSemicircle.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/MyList.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/AngleProperties.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoConicPart.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoElementGraphicsAdapter.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoScriptAction.h"
#include "geogebra/common/kernel/geos/GeoSegment.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/geos/InequalityProperties.h"
#include "geogebra/common/kernel/geos/PointProperties.h"
#include "geogebra/common/kernel/geos/SpreadsheetTraceable.h"
#include "geogebra/common/kernel/geos/TextProperties.h"
#include "geogebra/common/kernel/kernelND/GeoCurveCartesianND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoQuadricND.h"
#include "geogebra/common/kernel/kernelND/GeoSurfaceCartesianND.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/plugin/EuclidianStyleConstants.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "geogebra/common/util/StringUtil.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface GeogebraCommonKernelGeosGeoList () {
 @public
  jboolean trace_;
  JavaUtilArrayList *geoList_;
  JavaUtilArrayList *cacheList_;
  jboolean isDefined__;
  jboolean isDrawable__;
  jboolean drawAsComboBox__;
  GeogebraCommonPluginGeoClassEnum *elementType_;
  jboolean showAllProperties_;
  JavaUtilArrayList *colorFunctionListener_;
  JavaLangStringBuilder *sbBuildValueString_;
  NSString *typeStringForXML_;
  jint pointSize_;
  jint pointStyle_;
  jboolean serifFont_;
  jint fontStyle_;
  jdouble fontSizeD_;
  jint printDecimals_;
  jint printFigures_;
  jboolean useSignificantFigures__;
  jint selectedIndex_;
  jint closestPointIndex_;
  GeogebraCommonJavaxSwingAbstractJComboBox *comboBox_, *comboBox2_;
  GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *traceModes_;
  jboolean showOnAxis__;
  IOSBooleanArray *directionInfoArray_;
  IOSIntArray *directionInfoOrdering_;
  jboolean shouldUseAlgoLocusList__;
  jboolean locusCalledAlgoLocusList_;
  GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum *angleStyle_;
  jboolean emphasizeRightAngle_;
  jint arcSize_;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                                 withInt:(jint)size;

- (void)copyListElementsWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)otherList OBJC_METHOD_FAMILY_NONE;

- (GeogebraCommonKernelGeosGeoElement *)getCopyForListWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo;

- (void)applyVisualStyleWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo;

+ (void)setElementEuclidianVisibleWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                             withBoolean:(jboolean)visible;

- (JavaLangStringBuilder *)buildValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (GeogebraCommonJavaxSwingAbstractJComboBox *)buildComboBoxWithGeogebraCommonJavaxSwingAbstractJComboBox:(GeogebraCommonJavaxSwingAbstractJComboBox *)cb;

- (GeogebraCommonJavaxSwingAbstractJComboBox *)buildComboBoxWithInt:(jint)view;

- (void)rebuildComboBoxes;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoList, geoList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoList, cacheList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoList, elementType_, GeogebraCommonPluginGeoClassEnum *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoList, colorFunctionListener_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoList, sbBuildValueString_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoList, typeStringForXML_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoList, comboBox_, GeogebraCommonJavaxSwingAbstractJComboBox *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoList, comboBox2_, GeogebraCommonJavaxSwingAbstractJComboBox *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoList, traceModes_, GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoList, directionInfoArray_, IOSBooleanArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoList, directionInfoOrdering_, IOSIntArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoList, angleStyle_, GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum *)

static GeogebraCommonPluginGeoClassEnum *GeogebraCommonKernelGeosGeoList_ELEMENT_TYPE_MIXED_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoList, ELEMENT_TYPE_MIXED_, GeogebraCommonPluginGeoClassEnum *)

static NSString *GeogebraCommonKernelGeosGeoList_STR_OPEN_ = @"{";
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoList, STR_OPEN_, NSString *)

static NSString *GeogebraCommonKernelGeosGeoList_STR_CLOSE_ = @"}";
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoList, STR_CLOSE_, NSString *)

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_withInt_(GeogebraCommonKernelGeosGeoList *self, GeogebraCommonKernelConstruction *c, jint size);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoList *new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_withInt_(GeogebraCommonKernelConstruction *c, jint size) NS_RETURNS_RETAINED;

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoList_copyListElementsWithGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelGeosGeoList *self, GeogebraCommonKernelGeosGeoList *otherList);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoElement *GeogebraCommonKernelGeosGeoList_getCopyForListWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelGeosGeoList *self, GeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoList_applyVisualStyleWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelGeosGeoList *self, GeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoList_setElementEuclidianVisibleWithGeogebraCommonKernelGeosGeoElement_withBoolean_(GeogebraCommonKernelGeosGeoElement *geo, jboolean visible);

__attribute__((unused)) static jboolean GeogebraCommonKernelGeosGeoList_isDefined(GeogebraCommonKernelGeosGeoList *self);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoList_clear(GeogebraCommonKernelGeosGeoList *self);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoList_addWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelGeosGeoList *self, GeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoList_removeWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelGeosGeoList *self, GeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoElement *GeogebraCommonKernelGeosGeoList_getWithInt_(GeogebraCommonKernelGeosGeoList *self, jint index);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoList_ensureCapacityWithInt_(GeogebraCommonKernelGeosGeoList *self, jint size);

__attribute__((unused)) static jint GeogebraCommonKernelGeosGeoList_size(GeogebraCommonKernelGeosGeoList *self);

__attribute__((unused)) static JavaLangStringBuilder *GeogebraCommonKernelGeosGeoList_buildValueStringWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelGeosGeoList *self, GeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static jint GeogebraCommonKernelGeosGeoList_getPrintDecimals(GeogebraCommonKernelGeosGeoList *self);

__attribute__((unused)) static jint GeogebraCommonKernelGeosGeoList_getPrintFigures(GeogebraCommonKernelGeosGeoList *self);

__attribute__((unused)) static GeogebraCommonJavaxSwingAbstractJComboBox *GeogebraCommonKernelGeosGeoList_buildComboBoxWithGeogebraCommonJavaxSwingAbstractJComboBox_(GeogebraCommonKernelGeosGeoList *self, GeogebraCommonJavaxSwingAbstractJComboBox *cb);

__attribute__((unused)) static GeogebraCommonJavaxSwingAbstractJComboBox *GeogebraCommonKernelGeosGeoList_buildComboBoxWithInt_(GeogebraCommonKernelGeosGeoList *self, jint view);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoList_rebuildComboBoxes(GeogebraCommonKernelGeosGeoList *self);

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelGeosGeoList)

@implementation GeogebraCommonKernelGeosGeoList

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                                 withInt:(jint)size {
  GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_withInt_(self, c, size);
  return self;
}

- (void)setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)algo {
  [super setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:algo];
  [self setEuclidianVisibleWithBoolean:YES];
}

- (instancetype)initWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list {
  GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelGeosGeoList_(self, list);
  return self;
}

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return GeogebraCommonPluginGeoClassEnum_get_LIST();
}

- (GeogebraCommonPluginGeoClassEnum *)getElementType {
  return elementType_;
}

- (GeogebraCommonKernelGeosGeoList *)copy__ {
  return [new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelGeosGeoList_(self) autorelease];
}

- (GeogebraCommonKernelGeosGeoList *)deepCopyGeo {
  GeogebraCommonKernelGeosGeoList *ret = [new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geoList_)) size]; i++) {
    GeogebraCommonKernelGeosGeoList_addWithGeogebraCommonKernelGeosGeoElement_(ret, [((GeogebraCommonKernelGeosGeoElement *) nil_chk([geoList_ getWithInt:i])) deepCopyGeo]);
  }
  return ret;
}

- (void)setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoNumeric]) {
    [self setSelectedIndexWithInt:-1 + J2ObjCFpToInt([((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class])) getDouble]) withBoolean:YES];
    isDefined__ = YES;
    return;
  }
  GeogebraCommonKernelGeosGeoList *l = (GeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoList class]);
  if ((l->cons_ != cons_) && [self isAlgoMacroOutput]) {
    id<GeogebraCommonKernelAlgosAlgoMacroInterface> algoMacro = (id<GeogebraCommonKernelAlgosAlgoMacroInterface>) check_protocol_cast([self getParentAlgorithm], @protocol(GeogebraCommonKernelAlgosAlgoMacroInterface));
    [((id<GeogebraCommonKernelAlgosAlgoMacroInterface>) nil_chk(algoMacro)) initListWithGeogebraCommonKernelGeosGeoList:l withGeogebraCommonKernelGeosGeoList:self];
  }
  else {
    GeogebraCommonKernelGeosGeoList_copyListElementsWithGeogebraCommonKernelGeosGeoList_(self, l);
  }
  isDefined__ = l->isDefined__;
  GeogebraCommonKernelGeosGeoList_set_elementType_(self, l->elementType_);
}

- (void)setShowAllPropertiesWithBoolean:(jboolean)showAllProperties {
  self->showAllProperties_ = showAllProperties;
}

- (void)copyListElementsWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)otherList {
  GeogebraCommonKernelGeosGeoList_copyListElementsWithGeogebraCommonKernelGeosGeoList_(self, otherList);
}

- (GeogebraCommonKernelGeosGeoElement *)getCopyForListWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return GeogebraCommonKernelGeosGeoList_getCopyForListWithGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (void)applyVisualStyleWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonKernelGeosGeoList_applyVisualStyleWithGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (void)removeColorFunction {
  [super removeColorFunction];
  if ((geoList_ == nil) || ([geoList_ size] == 0)) {
    return;
  }
  jint size = [((JavaUtilArrayList *) nil_chk(geoList_)) size];
  for (jint i = 0; i < size; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
      [geo removeColorFunction];
    }
  }
}

- (void)setColorFunctionWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)col {
  [super setColorFunctionWithGeogebraCommonKernelGeosGeoList:col];
  if ((geoList_ == nil) || ([geoList_ size] == 0)) {
    return;
  }
  jint size = [((JavaUtilArrayList *) nil_chk(geoList_)) size];
  for (jint i = 0; i < size; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
      [geo setColorFunctionWithGeogebraCommonKernelGeosGeoList:col];
    }
  }
}

- (void)setColorSpaceWithInt:(jint)colorSpace {
  [super setColorSpaceWithInt:colorSpace];
  if ((geoList_ == nil) || ([geoList_ size] == 0)) {
    return;
  }
  jint size = [((JavaUtilArrayList *) nil_chk(geoList_)) size];
  for (jint i = 0; i < size; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
      [geo setColorSpaceWithInt:colorSpace];
    }
  }
}

- (void)setShowObjectConditionWithGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)bool_ {
  [super setShowObjectConditionWithGeogebraCommonKernelGeosGeoBoolean:bool_];
  if ((geoList_ == nil) || ([geoList_ size] == 0)) {
    return;
  }
  jint size = [((JavaUtilArrayList *) nil_chk(geoList_)) size];
  for (jint i = 0; i < size; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
      [geo setShowObjectConditionWithGeogebraCommonKernelGeosGeoBoolean:bool_];
    }
  }
}

- (void)setVisualStyleWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)style {
  [super setVisualStyleWithGeogebraCommonKernelGeosGeoElement:style];
  if ([GeogebraCommonKernelGeosPointProperties_class_() isInstance:style]) {
    [self setPointSizeWithInt:[((id<GeogebraCommonKernelGeosPointProperties>) nil_chk(((id<GeogebraCommonKernelGeosPointProperties>) check_protocol_cast(style, @protocol(GeogebraCommonKernelGeosPointProperties))))) getPointSize]];
    [self setPointStyleWithInt:[((id<GeogebraCommonKernelGeosPointProperties>) nil_chk(((id<GeogebraCommonKernelGeosPointProperties>) check_protocol_cast(style, @protocol(GeogebraCommonKernelGeosPointProperties))))) getPointStyle]];
  }
  if ((geoList_ == nil) || ([geoList_ size] == 0)) {
    return;
  }
  jint size = [((JavaUtilArrayList *) nil_chk(geoList_)) size];
  for (jint i = 0; i < size; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
      [geo setVisualStyleWithGeogebraCommonKernelGeosGeoElement:style];
    }
  }
}

- (void)setObjColorWithGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)color {
  [super setObjColorWithGeogebraCommonAwtGColor:color];
  if ((geoList_ == nil) || ([geoList_ size] == 0)) {
    return;
  }
  jint size = [((JavaUtilArrayList *) nil_chk(geoList_)) size];
  for (jint i = 0; i < size; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = GeogebraCommonKernelGeosGeoList_getWithInt_(self, i);
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
      [geo setObjColorWithGeogebraCommonAwtGColor:color];
    }
  }
}

- (void)setBackgroundColorWithGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)color {
  [super setBackgroundColorWithGeogebraCommonAwtGColor:color];
  if ((geoList_ == nil) || ([geoList_ size] == 0)) {
    return;
  }
  jint size = [((JavaUtilArrayList *) nil_chk(geoList_)) size];
  for (jint i = 0; i < size; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = GeogebraCommonKernelGeosGeoList_getWithInt_(self, i);
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
      [geo setBackgroundColorWithGeogebraCommonAwtGColor:color];
    }
  }
}

- (void)setEuclidianVisibleWithBoolean:(jboolean)visible {
  [super setEuclidianVisibleWithBoolean:visible];
  if ((geoList_ == nil) || ([geoList_ size] == 0)) {
    return;
  }
  jint size = [((JavaUtilArrayList *) nil_chk(geoList_)) size];
  for (jint i = 0; i < size; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = GeogebraCommonKernelGeosGeoList_getWithInt_(self, i);
    GeogebraCommonKernelGeosGeoList_setElementEuclidianVisibleWithGeogebraCommonKernelGeosGeoElement_withBoolean_(geo, visible);
  }
}

+ (void)setElementEuclidianVisibleWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                             withBoolean:(jboolean)visible {
  GeogebraCommonKernelGeosGeoList_setElementEuclidianVisibleWithGeogebraCommonKernelGeosGeoElement_withBoolean_(geo, visible);
}

- (void)setVisibilityWithInt:(jint)viewId
                 withBoolean:(jboolean)setVisible {
  [super setVisibilityWithInt:viewId withBoolean:setVisible];
  if ((geoList_ == nil) || ([geoList_ size] == 0)) {
    return;
  }
  jint size = [((JavaUtilArrayList *) nil_chk(geoList_)) size];
  for (jint i = 0; i < size; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = GeogebraCommonKernelGeosGeoList_getWithInt_(self, i);
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
      [geo setVisibilityWithInt:viewId withBoolean:setVisible];
    }
  }
}

- (GeogebraCommonKernelArithmeticMyList *)getMyList {
  jint size = [((JavaUtilArrayList *) nil_chk(geoList_)) size];
  GeogebraCommonKernelArithmeticMyList *myList = [new_GeogebraCommonKernelArithmeticMyList_initWithGeogebraCommonKernelKernel_withInt_(kernel_, size) autorelease];
  for (jint i = 0; i < size; i++) {
    [myList addListElementWithGeogebraCommonKernelArithmeticExpressionValue:[new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [geoList_ getWithInt:i]) autorelease]];
  }
  return myList;
}

- (jboolean)isDefined {
  return GeogebraCommonKernelGeosGeoList_isDefined(self);
}

- (void)setDefinedWithBoolean:(jboolean)flag {
  isDefined__ = flag;
  if (!isDefined__) {
    jint size = [((JavaUtilArrayList *) nil_chk(geoList_)) size];
    for (jint i = 0; i < size; i++) {
      GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
      if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
        [geo setUndefined];
      }
    }
    for (jint i = size; i < [((JavaUtilArrayList *) nil_chk(cacheList_)) size]; i++) {
      GeogebraCommonKernelGeosGeoElement *geo = [cacheList_ getWithInt:i];
      if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
        [geo setUndefined];
      }
    }
  }
}

- (void)setUndefined {
  [self setDefinedWithBoolean:NO];
}

- (jboolean)showInEuclidianView {
  return GeogebraCommonKernelGeosGeoList_isDefined(self) && [self isDrawable];
}

- (jboolean)isDrawable {
  return isDrawable__ || [self drawAsComboBox];
}

- (jboolean)showInAlgebraView {
  return YES;
}

- (void)clear {
  GeogebraCommonKernelGeosGeoList_clear(self);
}

- (void)clearCache {
  if ([((JavaUtilArrayList *) nil_chk(cacheList_)) size] > 0) {
    for (jint i = 0; i < [cacheList_ size]; i++) {
      GeogebraCommonKernelGeosGeoElement *geo = [cacheList_ getWithInt:i];
      if ((geo != nil) && ![geo isLabelSet]) {
        [geo remove];
      }
    }
  }
  [cacheList_ clear];
  GeogebraCommonKernelGeosGeoList_clear(self);
  [self setUndefined];
}

- (void)addWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonKernelGeosGeoList_addWithGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (void)removeWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonKernelGeosGeoList_removeWithGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (void)addQueueWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonKernelGeosGeoElement *first = GeogebraCommonKernelGeosGeoList_getWithInt_(self, 0);
  GeogebraCommonKernelGeosGeoList_removeWithGeogebraCommonKernelGeosGeoElement_(self, first);
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(first)) remove];
  GeogebraCommonKernelGeosGeoList_addWithGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (void)removeWithInt:(jint)index {
  [((JavaUtilArrayList *) nil_chk(geoList_)) removeWithInt:index];
  GeogebraCommonKernelGeosGeoList_rebuildComboBoxes(self);
}

- (GeogebraCommonKernelGeosGeoElement *)getWithInt:(jint)index {
  return GeogebraCommonKernelGeosGeoList_getWithInt_(self, index);
}

- (GeogebraCommonKernelGeosGeoElement *)getWithInt:(jint)index
                                           withInt:(jint)index2 {
  return GeogebraCommonKernelGeosGeoList_getWithInt_(nil_chk(((GeogebraCommonKernelGeosGeoList *) check_class_cast([((JavaUtilArrayList *) nil_chk(geoList_)) getWithInt:index], [GeogebraCommonKernelGeosGeoList class]))), index2);
}

- (IOSDoubleArray *)toDouble {
  @try {
    IOSDoubleArray *valueArray = [IOSDoubleArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(geoList_)) size]];
    for (jint i = 0; i < valueArray->size_; i++) {
      *IOSDoubleArray_GetRef(valueArray, i) = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([geoList_ getWithInt:i], @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
    }
    return valueArray;
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

- (void)ensureCapacityWithInt:(jint)size {
  GeogebraCommonKernelGeosGeoList_ensureCapacityWithInt_(self, size);
}

- (jint)size {
  return GeogebraCommonKernelGeosGeoList_size(self);
}

- (jint)getCacheSize {
  return [((JavaUtilArrayList *) nil_chk(cacheList_)) size];
}

- (GeogebraCommonKernelGeosGeoElement *)getCachedWithInt:(jint)index {
  return [((JavaUtilArrayList *) nil_chk(cacheList_)) getWithInt:index];
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuilder *sbToString = [new_JavaLangStringBuilder_initWithInt_(50) autorelease];
  [sbToString setLengthWithInt:0];
  [sbToString appendWithNSString:label_];
  [sbToString appendWithNSString:@" = "];
  [sbToString appendWithNSString:[((JavaLangStringBuilder *) nil_chk(GeogebraCommonKernelGeosGeoList_buildValueStringWithGeogebraCommonKernelStringTemplate_(self, tpl))) description]];
  return [sbToString description];
}

- (NSString *)toStringMinimalWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sbBuildValueString_)) setLengthWithInt:0];
  if (!isDefined__) {
    [sbBuildValueString_ appendWithNSString:@"?"];
    return [sbBuildValueString_ description];
  }
  jint lastIndex = [((JavaUtilArrayList *) nil_chk(geoList_)) size] - 1;
  if (lastIndex > -1) {
    for (jint i = 0; i < lastIndex; i++) {
      GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
      [sbBuildValueString_ appendWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getAlgebraDescriptionRegrOutWithGeogebraCommonKernelStringTemplate:tpl]];
      [sbBuildValueString_ appendWithNSString:@" "];
    }
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:lastIndex];
    [sbBuildValueString_ appendWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getAlgebraDescriptionRegrOutWithGeogebraCommonKernelStringTemplate:tpl]];
  }
  return [sbBuildValueString_ description];
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((JavaLangStringBuilder *) nil_chk(GeogebraCommonKernelGeosGeoList_buildValueStringWithGeogebraCommonKernelStringTemplate_(self, tpl))) description];
}

- (JavaLangStringBuilder *)buildValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelGeosGeoList_buildValueStringWithGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (jboolean)isGeoList {
  return YES;
}

- (jboolean)evaluatesToList {
  return YES;
}

- (void)getXMLWithBoolean:(jboolean)getListenersToo
withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  if ([self isIndependent] && ([self getDefaultGeoType] < 0)) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<expression"];
    [sb appendWithNSString:@" label =\""];
    GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, label_);
    [sb appendWithNSString:@"\" exp=\""];
    GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [self toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_xmlTemplate_()]);
    [sb appendWithNSString:@"\"/>\n"];
  }
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<element"];
  [sb appendWithNSString:@" type=\"list\""];
  [sb appendWithNSString:@" label=\""];
  [sb appendWithNSString:label_];
  if ([self getDefaultGeoType] >= 0) {
    [sb appendWithNSString:@"\" default=\""];
    [sb appendWithInt:[self getDefaultGeoType]];
  }
  [sb appendWithNSString:@"\">\n"];
  [self getXMLtagsWithJavaLangStringBuilder:sb];
  if (GeogebraCommonKernelGeosGeoList_size(self) == 0 && [self getTypeStringForXML] != nil) {
    [sb appendWithNSString:@"<listType val=\""];
    [sb appendWithNSString:[self getTypeStringForXML]];
    [sb appendWithNSString:@"\"/>\n"];
  }
  if (selectedIndex_ != 0) {
    [sb appendWithNSString:@"\t<selectedIndex val=\""];
    [sb appendWithInt:selectedIndex_];
    [sb appendWithNSString:@"\"/>\n"];
  }
  if (drawAsComboBox__ == YES) {
    [sb appendWithNSString:@"\t<comboBox val=\"true\"/>\n"];
  }
  [sb appendWithNSString:@"\t<pointSize val=\""];
  [sb appendWithInt:pointSize_];
  [sb appendWithNSString:@"\"/>\n"];
  [sb appendWithNSString:@"\t<pointStyle val=\""];
  [sb appendWithInt:pointStyle_];
  [sb appendWithNSString:@"\"/>\n"];
  GeogebraCommonKernelGeosGeoText_appendFontTagWithJavaLangStringBuilder_withBoolean_withDouble_withInt_withBoolean_withGeogebraCommonMainApp_(sb, serifFont_, fontSizeD_, fontStyle_, NO, [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication]);
  if ((printDecimals_ >= 0) && !useSignificantFigures__) {
    [sb appendWithNSString:@"\t<decimals val=\""];
    [sb appendWithInt:printDecimals_];
    [sb appendWithNSString:@"\"/>\n"];
  }
  if ((printFigures_ >= 0) && useSignificantFigures__) {
    [sb appendWithNSString:@"\t<significantfigures val=\""];
    [sb appendWithInt:printFigures_];
    [sb appendWithNSString:@"\"/>\n"];
  }
  if (angleStyle_ != GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_ANTICLOCKWISE()) {
    [sb appendWithNSString:@"\t<allowReflexAngle val=\""];
    [sb appendWithBoolean:angleStyle_ != GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_NOTREFLEX()];
    [sb appendWithNSString:@"\"/>\n"];
  }
  if (angleStyle_ == GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_ISREFLEX()) {
    [sb appendWithNSString:@"\t<forceReflexAngle val=\""];
    [sb appendWithBoolean:YES];
    [sb appendWithNSString:@"\"/>\n"];
  }
  if (!emphasizeRightAngle_) {
    [sb appendWithNSString:@"\t<emphasizeRightAngle val=\""];
    [sb appendWithBoolean:emphasizeRightAngle_];
    [sb appendWithNSString:@"\"/>\n"];
  }
  [self getCaptionXMLWithJavaLangStringBuilder:sb];
  if (getListenersToo) [self getListenerTagsXMLWithJavaLangStringBuilder:sb];
  [sb appendWithNSString:@"</element>\n"];
}

- (NSString *)getTypeStringForXML {
  return typeStringForXML_;
}

- (void)setTypeStringForXMLWithNSString:(NSString *)type {
  GeogebraCommonKernelGeosGeoList_set_typeStringForXML_(self, type);
}

- (void)registerColorFunctionListenerWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (colorFunctionListener_ == nil) {
    GeogebraCommonKernelGeosGeoList_setAndConsume_colorFunctionListener_(self, new_JavaUtilArrayList_init());
  }
  [((JavaUtilArrayList *) nil_chk(colorFunctionListener_)) addWithId:geo];
}

- (void)unregisterColorFunctionListenerWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (colorFunctionListener_ != nil) {
    [colorFunctionListener_ removeWithId:geo];
  }
}

- (void)update {
  [super update];
  [self shouldUseAlgoLocusListWithBoolean:NO];
  if (colorFunctionListener_ != nil) {
    for (jint i = 0; i < [colorFunctionListener_ size]; i++) {
      GeogebraCommonKernelGeosGeoElement *geo = [colorFunctionListener_ getWithInt:i];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) updateVisualStyle];
    }
  }
}

- (void)doRemove {
  if (colorFunctionListener_ != nil) {
    IOSObjectArray *geos = [colorFunctionListener_ toArray];
    [colorFunctionListener_ clear];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(geos))->size_; i++) {
      GeogebraCommonKernelGeosGeoElement *geo = (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(geos, i), [GeogebraCommonKernelGeosGeoElement class]);
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) removeColorFunction];
      [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyUpdateWithGeogebraCommonKernelGeosGeoElement:geo];
    }
  }
  [super doRemove];
}

- (jboolean)isEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoList]) {
    return NO;
  }
  GeogebraCommonKernelGeosGeoList *list = (GeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoList class]);
  if ([((JavaUtilArrayList *) nil_chk(geoList_)) size] != GeogebraCommonKernelGeosGeoList_size(list)) {
    return NO;
  }
  for (jint i = 0; i < [list->geoList_ size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geoA = [geoList_ getWithInt:i];
    GeogebraCommonKernelGeosGeoElement *geoB = GeogebraCommonKernelGeosGeoList_getWithInt_(list, i);
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geoA)) isEqualWithGeogebraCommonKernelGeosGeoElement:geoB]) {
      return NO;
    }
  }
  return YES;
}

- (void)setZero {
  [((JavaUtilArrayList *) nil_chk(geoList_)) clear];
}

- (void)setLineThicknessWithInt:(jint)thickness {
  [super setLineThicknessWithInt:thickness];
  if ((geoList_ == nil) || ([geoList_ size] == 0)) {
    return;
  }
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geoList_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
      [geo setLineThicknessWithInt:thickness];
    }
  }
}

- (jint)getMinimumLineThickness {
  if ((geoList_ == nil) || ([geoList_ size] == 0)) {
    return 1;
  }
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geoList_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
      if ([geo getMinimumLineThickness] == 1) {
        return 1;
      }
    }
  }
  return 0;
}

- (void)setLineTypeWithInt:(jint)type {
  [super setLineTypeWithInt:type];
  if ((geoList_ == nil) || ([geoList_ size] == 0)) {
    return;
  }
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geoList_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
      [geo setLineTypeWithInt:type];
    }
  }
}

- (void)setPointSizeWithInt:(jint)size {
  pointSize_ = size;
  if ((geoList_ == nil) || ([geoList_ size] == 0)) {
    return;
  }
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geoList_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet] && ([GeogebraCommonKernelGeosPointProperties_class_() isInstance:geo])) {
      [((id<GeogebraCommonKernelGeosPointProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosPointProperties))) setPointSizeWithInt:size];
    }
  }
}

- (jint)getPointSize {
  return pointSize_;
}

- (void)setPointStyleWithInt:(jint)style {
  pointStyle_ = style;
  if ((geoList_ == nil) || ([geoList_ size] == 0)) {
    return;
  }
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geoList_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet] && ([GeogebraCommonKernelGeosPointProperties_class_() isInstance:geo])) {
      [((id<GeogebraCommonKernelGeosPointProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosPointProperties))) setPointStyleWithInt:style];
    }
  }
}

- (jfloat)getAlphaValue {
  if ([super getAlphaValue] == -1) {
    if ((geoList_ != nil) && ([geoList_ size] > 0)) {
      jfloat alpha = [((GeogebraCommonKernelGeosGeoElement *) nil_chk([geoList_ getWithInt:0])) getAlphaValue];
      [super setAlphaValueWithFloat:alpha];
      if ([geoList_ size] > 1) {
        for (jint i = 1; i < [geoList_ size]; i++) {
          GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
          if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
            [geo setAlphaValueWithFloat:alpha];
          }
        }
      }
    }
    else {
      return -1.0f;
    }
  }
  return [super getAlphaValue];
}

- (void)setAlphaValueWithFloat:(jfloat)alpha {
  if (alpha == -1) {
    alphaValue_ = -1;
    return;
  }
  [super setAlphaValueWithFloat:alpha];
  if ((geoList_ == nil) || ([geoList_ size] == 0)) {
    return;
  }
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geoList_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
      [geo setAlphaValueWithFloat:alpha];
    }
  }
}

- (jint)getPointStyle {
  return pointStyle_;
}

- (jboolean)isFillable {
  if ((geoList_ == nil) || ([geoList_ size] == 0)) {
    return NO;
  }
  jboolean someFillable = NO;
  jboolean allLabelsSet = YES;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geoList_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isFillable]) {
      someFillable = YES;
    }
    if (![geo isLabelSet]) {
      allLabelsSet = NO;
    }
  }
  return someFillable && !allLabelsSet;
}

- (GeogebraCommonKernelGeosGeoElement *)getGeoElementForPropertiesDialog {
  if (([((JavaUtilArrayList *) nil_chk(geoList_)) size] > 0) && (elementType_ != GeogebraCommonKernelGeosGeoList_ELEMENT_TYPE_MIXED_)) {
    return [((GeogebraCommonKernelGeosGeoElement *) nil_chk(GeogebraCommonKernelGeosGeoList_getWithInt_(self, 0))) getGeoElementForPropertiesDialog];
  }
  return self;
}

- (jboolean)isMatrix {
  if (![((GeogebraCommonPluginGeoClassEnum *) nil_chk([self getElementType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_LIST()] || (GeogebraCommonKernelGeosGeoList_size(self) == 0)) {
    return NO;
  }
  GeogebraCommonKernelGeosGeoElement *geo0 = GeogebraCommonKernelGeosGeoList_getWithInt_(self, 0);
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo0)) isGeoList]) {
    jint length = GeogebraCommonKernelGeosGeoList_size(((GeogebraCommonKernelGeosGeoList *) check_class_cast(geo0, [GeogebraCommonKernelGeosGeoList class])));
    if (length == 0) {
      return NO;
    }
    if (GeogebraCommonKernelGeosGeoList_size(self) > 0) {
      for (jint i = 0; i < GeogebraCommonKernelGeosGeoList_size(self); i++) {
        GeogebraCommonKernelGeosGeoElement *geoi = GeogebraCommonKernelGeosGeoList_getWithInt_(self, i);
        if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(GeogebraCommonKernelGeosGeoList_getWithInt_(self, i))) isGeoList] || (GeogebraCommonKernelGeosGeoList_size(nil_chk(((GeogebraCommonKernelGeosGeoList *) check_class_cast(geoi, [GeogebraCommonKernelGeosGeoList class])))) == 0) || (GeogebraCommonKernelGeosGeoList_size(nil_chk(((GeogebraCommonKernelGeosGeoList *) check_class_cast(geoi, [GeogebraCommonKernelGeosGeoList class])))) != length)) {
          return NO;
        }
        for (jint j = 0; j < GeogebraCommonKernelGeosGeoList_size(nil_chk(((GeogebraCommonKernelGeosGeoList *) check_class_cast(geoi, [GeogebraCommonKernelGeosGeoList class])))); j++) {
          GeogebraCommonKernelGeosGeoElement *geoij = GeogebraCommonKernelGeosGeoList_getWithInt_(nil_chk(((GeogebraCommonKernelGeosGeoList *) check_class_cast(geoi, [GeogebraCommonKernelGeosGeoList class]))), j);
          if (![((GeogebraCommonPluginGeoClassEnum *) nil_chk([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geoij)) getGeoClassType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_NUMERIC()] && ![((GeogebraCommonPluginGeoClassEnum *) nil_chk([geoij getGeoClassType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_FUNCTION()] && ![((GeogebraCommonPluginGeoClassEnum *) nil_chk([geoij getGeoClassType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_FUNCTION_NVAR()]) {
            return NO;
          }
        }
      }
    }
  }
  return YES;
}

- (jdouble)getFontSizeMultiplier {
  return fontSizeD_;
}

- (void)setFontSizeMultiplierWithDouble:(jdouble)size {
  fontSizeD_ = size;
  if ((geoList_ == nil) || ([geoList_ size] == 0)) {
    return;
  }
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geoList_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    if (([GeogebraCommonKernelGeosTextProperties_class_() isInstance:geo]) && ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
      [((id<GeogebraCommonKernelGeosTextProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosTextProperties))) setFontSizeMultiplierWithDouble:size];
    }
  }
}

- (jint)getFontStyle {
  return fontStyle_;
}

- (void)setFontStyleWithInt:(jint)fontStyle {
  self->fontStyle_ = fontStyle;
  if ((geoList_ == nil) || ([geoList_ size] == 0)) {
    return;
  }
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geoList_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    if (([GeogebraCommonKernelGeosTextProperties_class_() isInstance:geo]) && ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
      [((id<GeogebraCommonKernelGeosTextProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosTextProperties))) setFontStyleWithInt:fontStyle];
    }
  }
}

- (jint)getPrintDecimals {
  return GeogebraCommonKernelGeosGeoList_getPrintDecimals(self);
}

- (jint)getPrintFigures {
  return GeogebraCommonKernelGeosGeoList_getPrintFigures(self);
}

- (void)setPrintDecimalsWithInt:(jint)printDecimals
                    withBoolean:(jboolean)update {
  self->printDecimals_ = printDecimals;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geoList_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    if (([GeogebraCommonKernelGeosTextProperties_class_() isInstance:geo]) && ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
      [((id<GeogebraCommonKernelGeosTextProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosTextProperties))) setPrintDecimalsWithInt:printDecimals withBoolean:update];
    }
  }
}

- (void)setPrintFiguresWithInt:(jint)printFigures
                   withBoolean:(jboolean)update {
  self->printFigures_ = printFigures;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geoList_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    if (([GeogebraCommonKernelGeosTextProperties_class_() isInstance:geo]) && ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
      [((id<GeogebraCommonKernelGeosTextProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosTextProperties))) setPrintFiguresWithInt:printFigures withBoolean:update];
    }
  }
}

- (jboolean)useSignificantFigures {
  return useSignificantFigures__;
}

- (jboolean)isSerifFont {
  return serifFont_;
}

- (void)setSerifFontWithBoolean:(jboolean)serifFont {
  self->serifFont_ = serifFont;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geoList_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    if (([GeogebraCommonKernelGeosTextProperties_class_() isInstance:geo]) && ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
      [((id<GeogebraCommonKernelGeosTextProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosTextProperties))) setSerifFontWithBoolean:serifFont];
    }
  }
}

- (void)setHatchingAngleWithInt:(jint)angle {
  [super setHatchingAngleWithInt:angle];
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geoList_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
      [geo setHatchingAngleWithInt:angle];
    }
  }
}

- (void)setHatchingDistanceWithInt:(jint)distance {
  [super setHatchingDistanceWithInt:distance];
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geoList_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
      [geo setHatchingDistanceWithInt:distance];
    }
  }
}

- (void)setFillTypeWithGeogebraCommonKernelGeosGeoElement_FillTypeEnum:(GeogebraCommonKernelGeosGeoElement_FillTypeEnum *)type {
  [super setFillTypeWithGeogebraCommonKernelGeosGeoElement_FillTypeEnum:type];
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geoList_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
      [geo setFillTypeWithGeogebraCommonKernelGeosGeoElement_FillTypeEnum:type];
    }
  }
}

- (void)setFillImageWithNSString:(NSString *)filename {
  [super setFillImageWithNSString:filename];
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geoList_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
      [geo setFillImageWithNSString:filename];
    }
  }
}

- (void)setImageFileNameWithNSString:(NSString *)filename {
  [super setImageFileNameWithNSString:filename];
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geoList_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
      [geo setImageFileNameWithNSString:filename];
    }
  }
}

- (jboolean)showLineProperties {
  if (showAllProperties_) {
    return YES;
  }
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geoList_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) showLineProperties] && ![geo isLabelSet]) {
      return YES;
    }
  }
  return NO;
}

- (jboolean)showPointProperties {
  if (showAllProperties_) {
    return YES;
  }
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geoList_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    if (([GeogebraCommonKernelGeosPointProperties_class_() isInstance:geo]) && ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
      return YES;
    }
  }
  return NO;
}

- (NSString *)toLaTeXStringWithBoolean:(jboolean)symbolic
withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if ([self isMatrix]) {
    jint cols = GeogebraCommonKernelGeosGeoList_size(nil_chk(((GeogebraCommonKernelGeosGeoList *) check_class_cast(GeogebraCommonKernelGeosGeoList_getWithInt_(self, 0), [GeogebraCommonKernelGeosGeoList class]))));
    JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
    if ([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) isHTML5Applet]) {
      [sb appendWithNSString:@"\\left(\\ggbtable{"];
      for (jint i = 0; i < GeogebraCommonKernelGeosGeoList_size(self); i++) {
        GeogebraCommonKernelGeosGeoList *geo = (GeogebraCommonKernelGeosGeoList *) check_class_cast(GeogebraCommonKernelGeosGeoList_getWithInt_(self, i), [GeogebraCommonKernelGeosGeoList class]);
        [sb appendWithNSString:@"\\ggbtr{"];
        for (jint j = 0; j < GeogebraCommonKernelGeosGeoList_size(nil_chk(geo)); j++) {
          [sb appendWithNSString:@"\\ggbtd{"];
          [sb appendWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(GeogebraCommonKernelGeosGeoList_getWithInt_(geo, j))) toLaTeXStringWithBoolean:symbolic withGeogebraCommonKernelStringTemplate:tpl]];
          [sb appendWithNSString:@"}"];
        }
        [sb appendWithNSString:@"}"];
      }
      [sb appendWithNSString:@"}\\right)"];
      return [sb description];
    }
    [sb appendWithNSString:@"\\left(\\begin{array}{"];
    for (jint i = 0; i < cols; i++) {
      [sb appendWithChar:'r'];
    }
    [sb appendWithNSString:@"}"];
    for (jint i = 0; i < GeogebraCommonKernelGeosGeoList_size(self); i++) {
      GeogebraCommonKernelGeosGeoList *geo = (GeogebraCommonKernelGeosGeoList *) check_class_cast(GeogebraCommonKernelGeosGeoList_getWithInt_(self, i), [GeogebraCommonKernelGeosGeoList class]);
      for (jint j = 0; j < GeogebraCommonKernelGeosGeoList_size(nil_chk(geo)); j++) {
        [sb appendWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(GeogebraCommonKernelGeosGeoList_getWithInt_(geo, j))) toLaTeXStringWithBoolean:symbolic withGeogebraCommonKernelStringTemplate:tpl]];
        if (j < (GeogebraCommonKernelGeosGeoList_size(geo) - 1)) {
          [sb appendWithNSString:@"&"];
        }
      }
      [sb appendWithNSString:@"\\\\"];
    }
    [sb appendWithNSString:@" \\end{array}\\right)"];
    return [sb description];
  }
  return [super toLaTeXStringWithBoolean:symbolic withGeogebraCommonKernelStringTemplate:tpl];
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [super getXMLtagsWithJavaLangStringBuilder:sb];
  [self getLineStyleXMLWithJavaLangStringBuilder:sb];
  [self getScriptTagsWithJavaLangStringBuilder:sb];
}

- (jint)getSelectedIndex {
  if (selectedIndex_ >= GeogebraCommonKernelGeosGeoList_size(self)) {
    selectedIndex_ = 0;
  }
  return selectedIndex_;
}

- (void)setSelectedIndexWithInt:(jint)selectedIndex0
                    withBoolean:(jboolean)update {
  selectedIndex_ = selectedIndex0;
  if (selectedIndex_ < 0 || selectedIndex_ > GeogebraCommonKernelGeosGeoList_size(self) - 1) {
    selectedIndex_ = 0;
  }
  if (update) {
    [self updateCascade];
    [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) notifyRepaint];
    [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) storeUndoInfo];
    if (comboBox_ != nil) {
      [comboBox_ setSelectedIndexWithInt:[self getSelectedIndex]];
    }
    if (comboBox2_ != nil) {
      [comboBox2_ setSelectedIndexWithInt:[self getSelectedIndex]];
    }
  }
}

- (jboolean)hasDrawable3D {
  return YES;
}

- (GeogebraCommonKernelGeosGeoElement *)getSelectedElement {
  if ((selectedIndex_ > -1) && (selectedIndex_ < GeogebraCommonKernelGeosGeoList_size(self))) {
    return GeogebraCommonKernelGeosGeoList_getWithInt_(self, selectedIndex_);
  }
  return nil;
}

- (void)setTraceWithBoolean:(jboolean)trace {
  self->trace_ = trace;
}

- (jboolean)getTrace {
  return trace_;
}

- (jboolean)isTraceable {
  return YES;
}

- (jboolean)isLimitedPath {
  return NO;
}

- (jboolean)isPath {
  return YES;
}

- (void)pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) updateCoords];
  [self getNearestPointWithGeogebraCommonKernelKernelNDGeoPointND:P];
  if ([((JavaUtilArrayList *) nil_chk(geoList_)) size] == 0) {
    if ([P isDefined]) [P setUndefined];
    return;
  }
  GeogebraCommonKernelGeosGeoElement *geo = GeogebraCommonKernelGeosGeoList_getWithInt_(self, closestPointIndex_);
  if (!([GeogebraCommonKernelPathOrPoint_class_() isInstance:geo])) {
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@$", @"TODO: ", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getGeoClassType], @" should implement PathOrPoint interface"));
    return;
  }
  id<GeogebraCommonKernelPathOrPoint> path = (id<GeogebraCommonKernelPathOrPoint>) check_protocol_cast(GeogebraCommonKernelGeosGeoList_getWithInt_(self, closestPointIndex_), @protocol(GeogebraCommonKernelPathOrPoint));
  jint type = [((GeogebraCommonKernelPathParameter *) nil_chk([P getPathParameter])) getPathType];
  [((id<GeogebraCommonKernelPathOrPoint>) nil_chk(path)) pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:P];
  GeogebraCommonKernelPathParameter *pp = [P getPathParameter];
  [((GeogebraCommonKernelPathParameter *) nil_chk(pp)) setPathTypeWithInt:type];
  jint closestPointIndexBack = closestPointIndex_;
  if (directionInfoOrdering_ != nil) for (jint i = 0; i < GeogebraCommonKernelGeosGeoList_size(self); i++) {
    if (IOSIntArray_Get(directionInfoOrdering_, i) == closestPointIndex_) {
      closestPointIndexBack = i;
      break;
    }
  }
  if ((directionInfoArray_ == nil) || IOSBooleanArray_Get(directionInfoArray_, closestPointIndex_)) pp->t_ = closestPointIndexBack + GeogebraCommonKernelPathNormalizer_toNormalizedPathParameterWithDouble_withDouble_withDouble_(pp->t_, [path getMinParameter], [path getMaxParameter]);
  else pp->t_ = closestPointIndexBack + 1 - GeogebraCommonKernelPathNormalizer_toNormalizedPathParameterWithDouble_withDouble_withDouble_(pp->t_, [path getMinParameter], [path getMaxParameter]);
}

- (void)getNearestPointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p {
  jdouble distance = JavaLangDouble_POSITIVE_INFINITY;
  closestPointIndex_ = 0;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geoList_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    if ([GeogebraCommonKernelPathOrPoint_class_() isInstance:geo]) {
      jdouble d = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p)) distanceToPathWithGeogebraCommonKernelPathOrPoint:(id<GeogebraCommonKernelPathOrPoint>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelPathOrPoint))];
      if (d < distance) {
        distance = d;
        closestPointIndex_ = i;
      }
    }
  }
}

- (jdouble)distanceWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)p {
  jdouble distance = JavaLangDouble_POSITIVE_INFINITY;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geoList_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    jdouble d = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) distanceWithGeogebraCommonKernelGeosGeoPoint:p];
    if (d < distance) {
      distance = d;
    }
  }
  return distance;
}

- (jdouble)distanceWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p {
  jdouble distance = JavaLangDouble_POSITIVE_INFINITY;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geoList_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    jdouble d = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) distanceWithGeogebraCommonKernelKernelNDGeoPointND:p];
    if (d < distance) {
      distance = d;
    }
  }
  return distance;
}

- (void)pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)PI {
  if (GeogebraCommonKernelGeosGeoList_size(self) == 0) {
    [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(PI)) setUndefined];
    return;
  }
  if (![((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) usePathAndRegionParametersWithGeogebraCommonKernelKernelNDGeoPointND:PI]) {
    [self pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:PI];
    return;
  }
  GeogebraCommonKernelPathParameter *pp = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(PI)) getPathParameter];
  jdouble t = [((GeogebraCommonKernelPathParameter *) nil_chk(pp)) getT];
  jint n0 = J2ObjCFpToInt(JavaLangMath_floorWithDouble_(t));
  jint n = n0;
  if ((n >= GeogebraCommonKernelGeosGeoList_size(self)) || (n < 0)) {
    jdouble check = t - GeogebraCommonKernelGeosGeoList_size(self);
    if (check != 0.0) {
      GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"problem with path param ", [PI getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]));
    }
    n = (n < 0) ? 0 : GeogebraCommonKernelGeosGeoList_size(self) - 1;
  }
  jint n1 = n;
  if (directionInfoOrdering_ != nil) n = IOSIntArray_Get(directionInfoOrdering_, n);
  GeogebraCommonKernelGeosGeoElement *elementN = GeogebraCommonKernelGeosGeoList_getWithInt_(self, n);
  if (!([GeogebraCommonKernelPathOrPoint_class_() isInstance:elementN])) {
    GeogebraCommonMainApp_debugWithNSString_(@"not path or point");
    return;
  }
  id<GeogebraCommonKernelPathOrPoint> path = (id<GeogebraCommonKernelPathOrPoint>) check_protocol_cast(elementN, @protocol(GeogebraCommonKernelPathOrPoint));
  jint pt = [pp getPathType];
  if ([path isKindOfClass:[GeogebraCommonKernelKernelNDGeoQuadricND class]]) {
    [pp setPathTypeWithInt:[((GeogebraCommonKernelKernelNDGeoQuadricND *) nil_chk(((GeogebraCommonKernelKernelNDGeoQuadricND *) check_class_cast(path, [GeogebraCommonKernelKernelNDGeoQuadricND class])))) getType]];
  }
  if ((directionInfoArray_ == nil) || IOSBooleanArray_Get(directionInfoArray_, n)) {
    [pp setTWithDouble:GeogebraCommonKernelPathNormalizer_toParentPathParameterWithDouble_withDouble_withDouble_(t - n1, [((id<GeogebraCommonKernelPathOrPoint>) nil_chk(path)) getMinParameter], [path getMaxParameter])];
  }
  else {
    [pp setTWithDouble:GeogebraCommonKernelPathNormalizer_toParentPathParameterWithDouble_withDouble_withDouble_(n1 - t + 1, [((id<GeogebraCommonKernelPathOrPoint>) nil_chk(path)) getMinParameter], [path getMaxParameter])];
  }
  [((id<GeogebraCommonKernelPathOrPoint>) nil_chk(path)) pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:PI];
  t = [pp getT];
  if ((directionInfoArray_ == nil) || IOSBooleanArray_Get(directionInfoArray_, n)) [pp setTWithDouble:GeogebraCommonKernelPathNormalizer_toNormalizedPathParameterWithDouble_withDouble_withDouble_(t, [path getMinParameter], [path getMaxParameter]) + n1];
  else [pp setTWithDouble:1 - GeogebraCommonKernelPathNormalizer_toNormalizedPathParameterWithDouble_withDouble_withDouble_(t, [path getMinParameter], [path getMaxParameter]) + n1];
  [pp setPathTypeWithInt:pt];
}

- (jboolean)isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)PI
                                                    withDouble:(jdouble)eps {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geoList_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    if ([((id<GeogebraCommonKernelPathOrPoint>) nil_chk(((id<GeogebraCommonKernelPathOrPoint>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelPathOrPoint))))) isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:PI withDouble:eps]) {
      return YES;
    }
  }
  return NO;
}

- (jdouble)getMinParameter {
  return 0;
}

- (jdouble)getMaxParameter {
  return [((JavaUtilArrayList *) nil_chk(geoList_)) size];
}

- (jboolean)isClosedPath {
  return !shouldUseAlgoLocusList__;
}

- (id<GeogebraCommonKernelPathMover>)createPathMover {
  return [new_GeogebraCommonKernelPathMoverGeneric_initWithGeogebraCommonKernelPath_(self) autorelease];
}

- (jboolean)justFontSize {
  return NO;
}

- (jboolean)hasMoveableInputPointsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:(id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim>)view {
  if (!(([self getParentAlgorithm] == nil) || ([[self getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoDependentList class]]))) {
    return NO;
  }
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geoList_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint]) {
      if (![geo isMoveable]) {
        return NO;
      }
    }
    else {
      if (![geo hasMoveableInputPointsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:view]) {
        return NO;
      }
    }
  }
  return YES;
}

- (JavaUtilArrayList *)getFreeInputPointsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:(id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim>)view {
  JavaUtilArrayList *al = [new_JavaUtilArrayList_init() autorelease];
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geoList_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint]) {
      GeogebraCommonKernelGeosGeoPoint *p = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPoint class]);
      if ([p isMoveable] && ![al containsWithId:p]) {
        [al addWithId:p];
      }
    }
    else {
      JavaUtilArrayList *al2 = [geo getFreeInputPointsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:view];
      if (al2 != nil) {
        for (jint j = 0; j < [al2 size]; j++) {
          id<GeogebraCommonKernelKernelNDGeoPointND> p = [al2 getWithInt:j];
          if (![al containsWithId:p]) {
            [al addWithId:p];
          }
        }
      }
    }
  }
  return al;
}

- (jboolean)isCasEvaluableObject {
  return YES;
}

- (NSString *)getCASStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl
                                                     withBoolean:(jboolean)symbolic {
  GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *casPrinttype = [((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getStringType];
  if ((![((GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(casPrinttype)) isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()]) || ![self isMatrix]) {
    return [super getCASStringWithGeogebraCommonKernelStringTemplate:tpl withBoolean:symbolic];
  }
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  if ([casPrinttype isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()]) {
    [sb appendWithNSString:@"matrix("];
    for (jint i = 0; i < GeogebraCommonKernelGeosGeoList_size(self); i++) {
      GeogebraCommonKernelGeosGeoList *geo = (GeogebraCommonKernelGeosGeoList *) check_class_cast(GeogebraCommonKernelGeosGeoList_getWithInt_(self, i), [GeogebraCommonKernelGeosGeoList class]);
      [sb appendWithChar:'['];
      for (jint j = 0; j < GeogebraCommonKernelGeosGeoList_size(nil_chk(geo)); j++) {
        [sb appendWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(GeogebraCommonKernelGeosGeoList_getWithInt_(geo, j))) getCASStringWithGeogebraCommonKernelStringTemplate:tpl withBoolean:symbolic]];
        if (j != (GeogebraCommonKernelGeosGeoList_size(geo) - 1)) {
          [sb appendWithChar:','];
        }
      }
      [sb appendWithChar:']'];
      if (i != (GeogebraCommonKernelGeosGeoList_size(self) - 1)) {
        [sb appendWithChar:','];
      }
    }
    [sb appendWithChar:')'];
  }
  else {
    [sb appendWithNSString:@"mat("];
    for (jint i = 0; i < GeogebraCommonKernelGeosGeoList_size(self); i++) {
      GeogebraCommonKernelGeosGeoList *geo = (GeogebraCommonKernelGeosGeoList *) check_class_cast(GeogebraCommonKernelGeosGeoList_getWithInt_(self, i), [GeogebraCommonKernelGeosGeoList class]);
      [sb appendWithNSString:@"("];
      for (jint j = 0; j < GeogebraCommonKernelGeosGeoList_size(nil_chk(geo)); j++) {
        [sb appendWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(GeogebraCommonKernelGeosGeoList_getWithInt_(geo, j))) getCASStringWithGeogebraCommonKernelStringTemplate:tpl withBoolean:symbolic]];
        if (j != (GeogebraCommonKernelGeosGeoList_size(geo) - 1)) {
          [sb appendWithChar:','];
        }
      }
      [sb appendWithChar:')'];
      if (i != (GeogebraCommonKernelGeosGeoList_size(self) - 1)) {
        [sb appendWithChar:','];
      }
    }
    [sb appendWithChar:')'];
  }
  return [sb description];
}

- (jboolean)listContainsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (geoList_ == nil) {
    return YES;
  }
  return [((JavaUtilArrayList *) nil_chk(geoList_)) containsWithId:geo];
}

- (jboolean)isLaTeXDrawableGeo {
  if (GeogebraCommonKernelGeosGeoList_size(self) == 0) {
    return NO;
  }
  if ([((GeogebraCommonPluginGeoClassEnum *) nil_chk([self getElementType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_LIST()]) {
    GeogebraCommonPluginGeoClassEnum *geoClass = [((GeogebraCommonKernelGeosGeoList *) nil_chk(((GeogebraCommonKernelGeosGeoList *) check_class_cast(GeogebraCommonKernelGeosGeoList_getWithInt_(self, 0), [GeogebraCommonKernelGeosGeoList class])))) getElementType];
    return [((GeogebraCommonPluginGeoClassEnum *) nil_chk(geoClass)) isEqual:GeogebraCommonPluginGeoClassEnum_get_NUMERIC()] || [geoClass isEqual:GeogebraCommonPluginGeoClassEnum_get_FUNCTION()] || [geoClass isEqual:GeogebraCommonPluginGeoClassEnum_get_NUMERIC()];
  }
  if ([((GeogebraCommonPluginGeoClassEnum *) nil_chk([self getElementType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_NUMERIC()]) {
    return NO;
  }
  jboolean ret = YES;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geoList_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo1 = [geoList_ getWithInt:i];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo1)) isLaTeXDrawableGeo]) {
      return NO;
    }
  }
  return ret;
}

- (void)updateColumnHeadingsForTraceValues {
  [self resetSpreadsheetColumnHeadings];
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geoList_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    if ([GeogebraCommonKernelGeosSpreadsheetTraceable_class_() isInstance:geo]) {
      JavaUtilArrayList *geoHead = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getColumnHeadings];
      for (jint j = 0; j < [((JavaUtilArrayList *) nil_chk(geoHead)) size]; j++) {
        [((JavaUtilArrayList *) nil_chk(spreadsheetColumnHeadings_)) addWithId:[geoHead getWithInt:j]];
      }
    }
  }
}

+ (GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *)getTraceModesWithJavaUtilArrayList:(JavaUtilArrayList *)geos {
  return GeogebraCommonKernelGeosGeoList_getTraceModesWithJavaUtilArrayList_(geos);
}

- (GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *)getTraceModes {
  if (traceModes_ != nil) return traceModes_;
  if ([self getParentAlgorithm] != nil && ([[self getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoDependentList class]])) {
    GeogebraCommonKernelGeosGeoList_set_traceModes_(self, GeogebraCommonKernelGeosGeoList_getTraceModesWithJavaUtilArrayList_(geoList_));
  }
  else {
    GeogebraCommonKernelGeosGeoList_set_traceModes_(self, GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_get_ONLY_COPY());
  }
  return traceModes_;
}

- (jboolean)hasSpreadsheetTraceModeTraceable {
  return [self getTraceModes] != GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_get_NOT_TRACEABLE();
}

- (NSString *)getTraceDialogAsValues {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  if ([self getParentAlgorithm] != nil && ([[self getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoDependentList class]])) {
    jboolean notFirst = NO;
    for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(geoList_)) {
      if (notFirst) [sb appendWithNSString:@", "];
      [sb appendWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getTraceDialogAsValues]];
      notFirst = YES;
    }
  }
  else {
    [sb appendWithNSString:[super getTraceDialogAsValues]];
  }
  return [sb description];
}

- (void)addToSpreadsheetTraceListWithJavaUtilArrayList:(JavaUtilArrayList *)spreadsheetTraceList {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geoList_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    if ([GeogebraCommonKernelGeosSpreadsheetTraceable_class_() isInstance:geo]) {
      [((id<GeogebraCommonKernelGeosSpreadsheetTraceable>) nil_chk(((id<GeogebraCommonKernelGeosSpreadsheetTraceable>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosSpreadsheetTraceable))))) addToSpreadsheetTraceListWithJavaUtilArrayList:spreadsheetTraceList];
    }
  }
}

- (jint)performScriptActions {
  jint actions = 0;
  for (jint i = 0; i < GeogebraCommonKernelGeosGeoList_size(self); i++) {
    if ([GeogebraCommonKernelGeosGeoList_getWithInt_(self, i) isKindOfClass:[GeogebraCommonKernelGeosGeoScriptAction class]]) {
      [((GeogebraCommonKernelGeosGeoScriptAction *) nil_chk(((GeogebraCommonKernelGeosGeoScriptAction *) check_class_cast(GeogebraCommonKernelGeosGeoList_getWithInt_(self, i), [GeogebraCommonKernelGeosGeoScriptAction class])))) perform];
      actions++;
    }
    if ([GeogebraCommonKernelGeosGeoList_getWithInt_(self, i) isKindOfClass:[GeogebraCommonKernelGeosGeoList class]]) actions += [((GeogebraCommonKernelGeosGeoList *) nil_chk(((GeogebraCommonKernelGeosGeoList *) check_class_cast(GeogebraCommonKernelGeosGeoList_getWithInt_(self, i), [GeogebraCommonKernelGeosGeoList class])))) performScriptActions];
  }
  return actions;
}

- (jint)findWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)needle {
  return [((JavaUtilArrayList *) nil_chk(geoList_)) indexOfWithId:needle];
}

- (jboolean)drawAsComboBox {
  return drawAsComboBox__;
}

- (void)setDrawAsComboBoxWithBoolean:(jboolean)b {
  drawAsComboBox__ = b;
}

- (GeogebraCommonJavaxSwingAbstractJComboBox *)getComboBoxWithInt:(jint)viewID {
  if (comboBox_ == nil) {
    GeogebraCommonKernelGeosGeoList_set_comboBox_(self, GeogebraCommonKernelGeosGeoList_buildComboBoxWithInt_(self, GeogebraCommonMainApp_VIEW_EUCLIDIAN));
  }
  if (viewID != GeogebraCommonMainApp_VIEW_EUCLIDIAN2) {
    return comboBox_;
  }
  if (comboBox2_ == nil) {
    GeogebraCommonKernelGeosGeoList_set_comboBox2_(self, GeogebraCommonKernelGeosGeoList_buildComboBoxWithInt_(self, GeogebraCommonMainApp_VIEW_EUCLIDIAN2));
  }
  return comboBox2_;
}

- (GeogebraCommonJavaxSwingAbstractJComboBox *)buildComboBoxWithGeogebraCommonJavaxSwingAbstractJComboBox:(GeogebraCommonJavaxSwingAbstractJComboBox *)cb {
  return GeogebraCommonKernelGeosGeoList_buildComboBoxWithGeogebraCommonJavaxSwingAbstractJComboBox_(self, cb);
}

- (GeogebraCommonJavaxSwingAbstractJComboBox *)buildComboBoxWithInt:(jint)view {
  return GeogebraCommonKernelGeosGeoList_buildComboBoxWithInt_(self, view);
}

- (void)rebuildComboxBoxIfNecessaryWithGeogebraCommonJavaxSwingAbstractJComboBox:(GeogebraCommonJavaxSwingAbstractJComboBox *)cb {
  if ([((GeogebraCommonJavaxSwingAbstractJComboBox *) nil_chk(cb)) getItemCount] != GeogebraCommonKernelGeosGeoList_size(self)) {
    GeogebraCommonKernelGeosGeoList_buildComboBoxWithGeogebraCommonJavaxSwingAbstractJComboBox_(self, cb);
    return;
  }
  if (GeogebraCommonKernelGeosGeoList_size(self) > 0) {
    for (jint i = 0; i < GeogebraCommonKernelGeosGeoList_size(self); i++) {
      NSString *item;
      item = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(GeogebraCommonKernelGeosGeoList_getWithInt_(self, i))) toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
      if (![((NSString *) nil_chk([nil_chk([cb getItemAtWithInt:i]) description])) isEqual:item]) {
        GeogebraCommonKernelGeosGeoList_buildComboBoxWithGeogebraCommonJavaxSwingAbstractJComboBox_(self, cb);
        return;
      }
    }
  }
}

- (void)rebuildComboBoxes {
  GeogebraCommonKernelGeosGeoList_rebuildComboBoxes(self);
}

- (jboolean)isAbsoluteScreenLocateable {
  return [self drawAsComboBox];
}

- (jboolean)isMoveable {
  return [self drawAsComboBox];
}

- (jboolean)isAbsoluteScreenLocActive {
  return YES;
}

- (void)setAbsoluteScreenLocWithInt:(jint)x
                            withInt:(jint)y {
  labelOffsetX_ = x;
  labelOffsetY_ = y;
}

- (jint)getAbsoluteScreenLocX {
  return labelOffsetX_;
}

- (jint)getAbsoluteScreenLocY {
  return labelOffsetY_;
}

- (void)setAbsoluteScreenLocActiveWithBoolean:(jboolean)flag {
}

- (void)setRealWorldLocWithDouble:(jdouble)x
                       withDouble:(jdouble)y {
}

- (jdouble)getRealWorldLocX {
  return 0;
}

- (jdouble)getRealWorldLocY {
  return 0;
}

- (jboolean)isFurniture {
  return [self drawAsComboBox];
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)getListElementWithInt:(jint)i {
  return GeogebraCommonKernelGeosGeoList_getWithInt_(self, i);
}

- (jdouble)mean {
  if (GeogebraCommonKernelGeosGeoList_size(self) == 0) {
    return JavaLangDouble_NaN;
  }
  jdouble sum = 0;
  for (jint i = 0; i < GeogebraCommonKernelGeosGeoList_size(self); i++) {
    GeogebraCommonKernelGeosGeoElement *geo = GeogebraCommonKernelGeosGeoList_getWithInt_(self, i);
    if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo]) {
      sum += [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
    }
    else {
      return JavaLangDouble_NaN;
    }
  }
  return sum / GeogebraCommonKernelGeosGeoList_size(self);
}

- (jboolean)shouldUseAlgoLocusListWithBoolean:(jboolean)locusCalling {
  IOSObjectArray *minParArray = [IOSObjectArray arrayWithLength:GeogebraCommonKernelGeosGeoList_size(self) type:GeogebraCommonKernelGeosGeoPoint_class_()];
  IOSObjectArray *maxParArray = [IOSObjectArray arrayWithLength:GeogebraCommonKernelGeosGeoList_size(self) type:GeogebraCommonKernelGeosGeoPoint_class_()];
  IOSObjectArray *minParStatic = [IOSObjectArray arrayWithLength:GeogebraCommonKernelGeosGeoList_size(self) type:GeogebraCommonKernelGeosGeoPoint_class_()];
  IOSObjectArray *maxParStatic = [IOSObjectArray arrayWithLength:GeogebraCommonKernelGeosGeoList_size(self) type:GeogebraCommonKernelGeosGeoPoint_class_()];
  if (!locusCalledAlgoLocusList_ && !locusCalling) {
    GeogebraCommonKernelGeosGeoList_set_directionInfoArray_(self, nil);
    GeogebraCommonKernelGeosGeoList_set_directionInfoOrdering_(self, nil);
    return YES;
  }
  GeogebraCommonKernelGeosGeoList_setAndConsume_directionInfoArray_(self, [IOSBooleanArray newArrayWithLength:GeogebraCommonKernelGeosGeoList_size(self)]);
  GeogebraCommonKernelGeosGeoList_setAndConsume_directionInfoOrdering_(self, [IOSIntArray newArrayWithLength:GeogebraCommonKernelGeosGeoList_size(self)]);
  shouldUseAlgoLocusList__ = YES;
  locusCalledAlgoLocusList_ = YES;
  jint i = 0;
  for (; i < GeogebraCommonKernelGeosGeoList_size(self); i++) {
    *IOSBooleanArray_GetRef(directionInfoArray_, i) = YES;
    *IOSIntArray_GetRef(directionInfoOrdering_, i) = i;
    if ([(id<GeogebraCommonKernelPath>) check_protocol_cast(GeogebraCommonKernelGeosGeoList_getWithInt_(self, i), @protocol(GeogebraCommonKernelPath)) isKindOfClass:[GeogebraCommonKernelGeosGeoSegment class]]) {
      IOSObjectArray_Set(minParArray, i, [((GeogebraCommonKernelGeosGeoSegment *) nil_chk(((GeogebraCommonKernelGeosGeoSegment *) check_class_cast(GeogebraCommonKernelGeosGeoList_getWithInt_(self, i), [GeogebraCommonKernelGeosGeoSegment class])))) getStartPoint]);
      IOSObjectArray_Set(maxParArray, i, [((GeogebraCommonKernelGeosGeoSegment *) nil_chk(((GeogebraCommonKernelGeosGeoSegment *) check_class_cast(GeogebraCommonKernelGeosGeoList_getWithInt_(self, i), [GeogebraCommonKernelGeosGeoSegment class])))) getEndPoint]);
    }
    else if ([(id<GeogebraCommonKernelPath>) check_protocol_cast(GeogebraCommonKernelGeosGeoList_getWithInt_(self, i), @protocol(GeogebraCommonKernelPath)) isKindOfClass:[GeogebraCommonKernelGeosGeoLine class]]) {
      IOSObjectArray_Set(minParArray, i, [((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(GeogebraCommonKernelGeosGeoList_getWithInt_(self, i), [GeogebraCommonKernelGeosGeoLine class])))) getStartPoint]);
      IOSObjectArray_Set(maxParArray, i, [((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(GeogebraCommonKernelGeosGeoList_getWithInt_(self, i), [GeogebraCommonKernelGeosGeoLine class])))) getEndPoint]);
    }
    else if ([(id<GeogebraCommonKernelPath>) check_protocol_cast(GeogebraCommonKernelGeosGeoList_getWithInt_(self, i), @protocol(GeogebraCommonKernelPath)) isKindOfClass:[GeogebraCommonKernelGeosGeoConicPart class]]) {
      if ([[((GeogebraCommonKernelGeosGeoConicPart *) nil_chk(((GeogebraCommonKernelGeosGeoConicPart *) check_class_cast(GeogebraCommonKernelGeosGeoList_getWithInt_(self, i), [GeogebraCommonKernelGeosGeoConicPart class])))) getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoConicPartConicPoints class]]) {
        IOSObjectArray_Set(minParArray, i, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([((GeogebraCommonKernelAlgosAlgoConicPartConicPoints *) nil_chk(((GeogebraCommonKernelAlgosAlgoConicPartConicPoints *) check_class_cast([((GeogebraCommonKernelGeosGeoConicPart *) nil_chk(((GeogebraCommonKernelGeosGeoConicPart *) check_class_cast(GeogebraCommonKernelGeosGeoList_getWithInt_(self, i), [GeogebraCommonKernelGeosGeoConicPart class])))) getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoConicPartConicPoints class])))) getStartPoint], [GeogebraCommonKernelGeosGeoPoint class]));
        IOSObjectArray_Set(maxParArray, i, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([((GeogebraCommonKernelAlgosAlgoConicPartConicPoints *) nil_chk(((GeogebraCommonKernelAlgosAlgoConicPartConicPoints *) check_class_cast([((GeogebraCommonKernelGeosGeoConicPart *) nil_chk(((GeogebraCommonKernelGeosGeoConicPart *) check_class_cast(GeogebraCommonKernelGeosGeoList_getWithInt_(self, i), [GeogebraCommonKernelGeosGeoConicPart class])))) getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoConicPartConicPoints class])))) getEndPoint], [GeogebraCommonKernelGeosGeoPoint class]));
      }
      else if ([[((GeogebraCommonKernelGeosGeoConicPart *) nil_chk(((GeogebraCommonKernelGeosGeoConicPart *) check_class_cast(GeogebraCommonKernelGeosGeoList_getWithInt_(self, i), [GeogebraCommonKernelGeosGeoConicPart class])))) getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoConicPartCircumcircle class]]) {
        IOSObjectArray_Set(minParArray, i, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelAlgosAlgoConicPartCircumcircle *) nil_chk(((GeogebraCommonKernelAlgosAlgoConicPartCircumcircle *) check_class_cast([((GeogebraCommonKernelGeosGeoConicPart *) nil_chk(((GeogebraCommonKernelGeosGeoConicPart *) check_class_cast(GeogebraCommonKernelGeosGeoList_getWithInt_(self, i), [GeogebraCommonKernelGeosGeoConicPart class])))) getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoConicPartCircumcircle class])))) getInput]), 0), [GeogebraCommonKernelGeosGeoPoint class]));
        IOSObjectArray_Set(maxParArray, i, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelAlgosAlgoConicPartCircumcircle *) nil_chk(((GeogebraCommonKernelAlgosAlgoConicPartCircumcircle *) check_class_cast([((GeogebraCommonKernelGeosGeoConicPart *) nil_chk(((GeogebraCommonKernelGeosGeoConicPart *) check_class_cast(GeogebraCommonKernelGeosGeoList_getWithInt_(self, i), [GeogebraCommonKernelGeosGeoConicPart class])))) getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoConicPartCircumcircle class])))) getInput]), 2), [GeogebraCommonKernelGeosGeoPoint class]));
      }
      else if ([[((GeogebraCommonKernelGeosGeoConicPart *) nil_chk(((GeogebraCommonKernelGeosGeoConicPart *) check_class_cast(GeogebraCommonKernelGeosGeoList_getWithInt_(self, i), [GeogebraCommonKernelGeosGeoConicPart class])))) getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoSemicircle class]]) {
        IOSObjectArray_Set(minParArray, i, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelAlgosAlgoSemicircle *) nil_chk(((GeogebraCommonKernelAlgosAlgoSemicircle *) check_class_cast([((GeogebraCommonKernelGeosGeoConicPart *) nil_chk(((GeogebraCommonKernelGeosGeoConicPart *) check_class_cast(GeogebraCommonKernelGeosGeoList_getWithInt_(self, i), [GeogebraCommonKernelGeosGeoConicPart class])))) getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoSemicircle class])))) getInput]), 1), [GeogebraCommonKernelGeosGeoPoint class]));
        IOSObjectArray_Set(maxParArray, i, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelAlgosAlgoSemicircle *) nil_chk(((GeogebraCommonKernelAlgosAlgoSemicircle *) check_class_cast([((GeogebraCommonKernelGeosGeoConicPart *) nil_chk(((GeogebraCommonKernelGeosGeoConicPart *) check_class_cast(GeogebraCommonKernelGeosGeoList_getWithInt_(self, i), [GeogebraCommonKernelGeosGeoConicPart class])))) getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoSemicircle class])))) getInput]), 0), [GeogebraCommonKernelGeosGeoPoint class]));
      }
      else {
        IOSObjectArray_Set(minParArray, i, [((GeogebraCommonKernelGeosGeoConicPart *) nil_chk(((GeogebraCommonKernelGeosGeoConicPart *) check_class_cast(GeogebraCommonKernelGeosGeoList_getWithInt_(self, i), [GeogebraCommonKernelGeosGeoConicPart class])))) getPointParamWithDouble:0]);
        IOSObjectArray_Set(maxParArray, i, [((GeogebraCommonKernelGeosGeoConicPart *) nil_chk(((GeogebraCommonKernelGeosGeoConicPart *) check_class_cast(GeogebraCommonKernelGeosGeoList_getWithInt_(self, i), [GeogebraCommonKernelGeosGeoConicPart class])))) getPointParamWithDouble:1]);
      }
    }
    else {
      IOSObjectArray_Set(minParArray, i, nil);
      IOSObjectArray_Set(maxParArray, i, nil);
      break;
    }
    IOSObjectArray_Set(minParStatic, i, IOSObjectArray_Get(minParArray, i));
    IOSObjectArray_Set(maxParStatic, i, IOSObjectArray_Get(maxParArray, i));
  }
  if (i < GeogebraCommonKernelGeosGeoList_size(self) || IOSObjectArray_Get(minParArray, GeogebraCommonKernelGeosGeoList_size(self) - 1) == nil) {
    GeogebraCommonKernelGeosGeoList_set_directionInfoArray_(self, nil);
    GeogebraCommonKernelGeosGeoList_set_directionInfoOrdering_(self, nil);
    return YES;
  }
  for (jint j = 0; j < GeogebraCommonKernelGeosGeoList_size(self); j++) {
    for (i = j + 1; i < GeogebraCommonKernelGeosGeoList_size(self); i++) {
      if (GeogebraCommonKernelGeosGeoPoint_samePositionWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(IOSObjectArray_Get(minParArray, j), IOSObjectArray_Get(minParArray, i))) {
        IOSObjectArray_Set(minParArray, i, IOSObjectArray_Get(maxParArray, j));
        i = 0;
        break;
      }
      else if (GeogebraCommonKernelGeosGeoPoint_samePositionWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(IOSObjectArray_Get(minParArray, j), IOSObjectArray_Get(maxParArray, i))) {
        IOSObjectArray_Set(maxParArray, i, IOSObjectArray_Get(maxParArray, j));
        i = 0;
        break;
      }
      else if (GeogebraCommonKernelGeosGeoPoint_samePositionWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(IOSObjectArray_Get(maxParArray, j), IOSObjectArray_Get(minParArray, i))) {
        IOSObjectArray_Set(minParArray, i, IOSObjectArray_Get(minParArray, j));
        i = 0;
        break;
      }
      else if (GeogebraCommonKernelGeosGeoPoint_samePositionWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(IOSObjectArray_Get(maxParArray, j), IOSObjectArray_Get(maxParArray, i))) {
        IOSObjectArray_Set(maxParArray, i, IOSObjectArray_Get(minParArray, j));
        i = 0;
        break;
      }
    }
    if (i != 0 && j < GeogebraCommonKernelGeosGeoList_size(self) - 1) {
      GeogebraCommonKernelGeosGeoList_set_directionInfoArray_(self, nil);
      GeogebraCommonKernelGeosGeoList_set_directionInfoOrdering_(self, nil);
      return YES;
    }
  }
  if (!GeogebraCommonKernelGeosGeoPoint_samePositionWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(IOSObjectArray_Get(minParArray, GeogebraCommonKernelGeosGeoList_size(self) - 1), IOSObjectArray_Get(maxParArray, GeogebraCommonKernelGeosGeoList_size(self) - 1))) {
    GeogebraCommonKernelGeosGeoList_set_directionInfoArray_(self, nil);
    GeogebraCommonKernelGeosGeoList_set_directionInfoOrdering_(self, nil);
    return YES;
  }
  jint ii = 0;
  jboolean direction = YES;
  for (jint j = 0; j < GeogebraCommonKernelGeosGeoList_size(self); j++) {
    *IOSIntArray_GetRef(nil_chk(directionInfoOrdering_), j) = ii;
    *IOSBooleanArray_GetRef(nil_chk(directionInfoArray_), ii) = direction;
    for (i = 0; i < GeogebraCommonKernelGeosGeoList_size(self); i++) {
      if (i == ii) continue;
      if (j > 0) if (IOSIntArray_Get(directionInfoOrdering_, j - 1) == i) continue;
      if (direction) {
        if (GeogebraCommonKernelGeosGeoPoint_samePositionWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(IOSObjectArray_Get(maxParStatic, ii), IOSObjectArray_Get(minParStatic, i))) {
          ii = i;
          direction = YES;
          break;
        }
        else if (GeogebraCommonKernelGeosGeoPoint_samePositionWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(IOSObjectArray_Get(maxParStatic, ii), IOSObjectArray_Get(maxParStatic, i))) {
          ii = i;
          direction = NO;
          break;
        }
      }
      else {
        if (GeogebraCommonKernelGeosGeoPoint_samePositionWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(IOSObjectArray_Get(minParStatic, ii), IOSObjectArray_Get(minParStatic, i))) {
          ii = i;
          direction = YES;
          break;
        }
        else if (GeogebraCommonKernelGeosGeoPoint_samePositionWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(IOSObjectArray_Get(minParStatic, ii), IOSObjectArray_Get(maxParStatic, i))) {
          ii = i;
          direction = NO;
          break;
        }
      }
    }
  }
  shouldUseAlgoLocusList__ = NO;
  return NO;
}

- (jboolean)showOnAxis {
  return showOnAxis__;
}

- (void)setShowOnAxisWithBoolean:(jboolean)showOnAxis {
  self->showOnAxis__ = showOnAxis;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geoList_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geoList_ getWithInt:i];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet] && ([GeogebraCommonKernelGeosInequalityProperties_class_() isInstance:geo])) {
      [((id<GeogebraCommonKernelGeosInequalityProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosInequalityProperties))) setShowOnAxisWithBoolean:showOnAxis];
    }
  }
}

- (jboolean)containsGeoElement3D {
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(geoList_)) {
    jboolean contains = NO;
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoList]) {
      contains = [((GeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoList class])) containsGeoElement3D];
    }
    else {
      contains = [geo isGeoElement3D];
    }
    if (contains) return YES;
  }
  return NO;
}

- (GeogebraCommonKernelMatrixCoords *)getMainDirection {
  return [((GeogebraCommonKernelGeosGeoElement *) nil_chk([((JavaUtilArrayList *) nil_chk(geoList_)) getWithInt:closestPointIndex_])) getMainDirection];
}

- (jboolean)isLaTeXTextCommand {
  return NO;
}

- (void)setAngleStyleWithInt:(jint)style {
  [self setAngleStyleWithGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_getStyleWithInt_(style)];
}

- (void)setAngleStyleWithGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:(GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum *)angleStyle {
  GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum *newAngleStyle = angleStyle;
  if (newAngleStyle == self->angleStyle_) return;
  GeogebraCommonKernelGeosGeoList_set_angleStyle_(self, newAngleStyle);
  switch ([newAngleStyle ordinal]) {
    case GeogebraCommonKernelGeosGeoAngle_AngleStyle_NOTREFLEX:
    newAngleStyle = GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_NOTREFLEX();
    break;
    case GeogebraCommonKernelGeosGeoAngle_AngleStyle_ISREFLEX:
    newAngleStyle = GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_ISREFLEX();
    break;
    default:
    newAngleStyle = GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_ANTICLOCKWISE();
  }
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(geoList_)) {
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet] && ([GeogebraCommonKernelGeosAngleProperties_class_() isInstance:geo])) {
      [((id<GeogebraCommonKernelGeosAngleProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosAngleProperties))) setAngleStyleWithGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:angleStyle];
    }
  }
}

- (GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum *)getAngleStyle {
  return angleStyle_;
}

- (jboolean)hasOrientation {
  return YES;
}

- (void)setAllowReflexAngleWithBoolean:(jboolean)allowReflexAngle {
  switch ([angleStyle_ ordinal]) {
    case GeogebraCommonKernelGeosGeoAngle_AngleStyle_NOTREFLEX:
    if (allowReflexAngle) [self setAngleStyleWithGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_ANTICLOCKWISE()];
    break;
    case GeogebraCommonKernelGeosGeoAngle_AngleStyle_ISREFLEX:
    break;
    default:
    if (!allowReflexAngle) [self setAngleStyleWithGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_NOTREFLEX()];
    break;
  }
  if (allowReflexAngle) [self setAngleStyleWithGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_ANTICLOCKWISE()];
  else [self setAngleStyleWithGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_NOTREFLEX()];
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(geoList_)) {
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet] && ([GeogebraCommonKernelGeosAngleProperties_class_() isInstance:geo])) {
      [((id<GeogebraCommonKernelGeosAngleProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosAngleProperties))) setAllowReflexAngleWithBoolean:allowReflexAngle];
    }
  }
}

- (void)setEmphasizeRightAngleWithBoolean:(jboolean)emphasizeRightAngle {
  self->emphasizeRightAngle_ = emphasizeRightAngle;
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(geoList_)) {
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet] && ([GeogebraCommonKernelGeosAngleProperties_class_() isInstance:geo])) {
      [((id<GeogebraCommonKernelGeosAngleProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosAngleProperties))) setEmphasizeRightAngleWithBoolean:emphasizeRightAngle];
    }
  }
}

- (void)setForceReflexAngleWithBoolean:(jboolean)forceReflexAngle {
  if (forceReflexAngle) {
    [self setAngleStyleWithGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_ISREFLEX()];
  }
  else if (angleStyle_ == GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_ISREFLEX()) {
    [self setAngleStyleWithGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_ANTICLOCKWISE()];
  }
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(geoList_)) {
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet] && ([GeogebraCommonKernelGeosAngleProperties_class_() isInstance:geo])) {
      [((id<GeogebraCommonKernelGeosAngleProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosAngleProperties))) setForceReflexAngleWithBoolean:forceReflexAngle];
    }
  }
}

- (void)setDecorationTypeWithInt:(jint)type {
  if (type >= ((IOSObjectArray *) nil_chk(GeogebraCommonKernelGeosGeoAngle_getDecoTypes()))->size_ || type < 0) {
    decorationType_ = GeogebraCommonKernelGeosGeoElement_DECORATION_NONE;
  }
  else {
    decorationType_ = type;
  }
  if (geoList_ != nil) {
    for (GeogebraCommonKernelGeosGeoElement * __strong geo in geoList_) {
      if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet] && ([GeogebraCommonKernelGeosAngleProperties_class_() isInstance:geo])) {
        [((id<GeogebraCommonKernelGeosAngleProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosAngleProperties))) setDecorationTypeWithInt:type];
      }
    }
  }
}

- (void)setArcSizeWithInt:(jint)i {
  arcSize_ = i;
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(geoList_)) {
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet] && ([GeogebraCommonKernelGeosAngleProperties_class_() isInstance:geo])) {
      [((id<GeogebraCommonKernelGeosAngleProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosAngleProperties))) setArcSizeWithInt:i];
    }
  }
}

- (jint)getArcSize {
  return arcSize_;
}

- (jboolean)isEmphasizeRightAngle {
  return emphasizeRightAngle_;
}

- (void)replaceChildrenByValuesWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)vars {
  if (self->elementType_ != GeogebraCommonPluginGeoClassEnum_get_FUNCTION() && self->elementType_ != GeogebraCommonPluginGeoClassEnum_get_CURVE_CARTESIAN() && self->elementType_ != GeogebraCommonPluginGeoClassEnum_get_FUNCTION_NVAR() && self->elementType_ != GeogebraCommonPluginGeoClassEnum_get_SURFACECARTESIAN3D() && self->elementType_ != GeogebraCommonPluginGeoClassEnum_get_LIST() && self->elementType_ != GeogebraCommonKernelGeosGeoList_ELEMENT_TYPE_MIXED_) {
    return;
  }
  for (GeogebraCommonKernelGeosGeoElement * __strong listElement in nil_chk(self->geoList_)) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(listElement)) isGeoFunction] || [listElement isGeoFunctionBoolean]) {
      GeogebraCommonKernelGeosGeoFunction *f = (GeogebraCommonKernelGeosGeoFunction *) check_class_cast(listElement, [GeogebraCommonKernelGeosGeoFunction class]);
      [f replaceChildrenByValuesWithGeogebraCommonKernelGeosGeoElement:vars];
    }
    else if ([listElement isGeoCurveCartesian]) {
      GeogebraCommonKernelKernelNDGeoCurveCartesianND *curve = (GeogebraCommonKernelKernelNDGeoCurveCartesianND *) check_class_cast(listElement, [GeogebraCommonKernelKernelNDGeoCurveCartesianND class]);
      [curve replaceChildrenByValuesWithGeogebraCommonKernelGeosGeoElement:vars];
    }
    else if ([listElement isGeoFunctionNVar]) {
      GeogebraCommonKernelGeosGeoFunctionNVar *fnv = (GeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(listElement, [GeogebraCommonKernelGeosGeoFunctionNVar class]);
      [fnv replaceChildrenByValuesWithGeogebraCommonKernelGeosGeoElement:vars];
    }
    else if ([listElement isGeoSurfaceCartesian]) {
      GeogebraCommonKernelKernelNDGeoSurfaceCartesianND *surface = (GeogebraCommonKernelKernelNDGeoSurfaceCartesianND *) check_class_cast(listElement, [GeogebraCommonKernelKernelNDGeoSurfaceCartesianND class]);
      [surface replaceChildrenByValuesWithGeogebraCommonKernelGeosGeoElement:vars];
    }
    else if ([listElement isGeoList]) {
      [((GeogebraCommonKernelGeosGeoList *) check_class_cast(listElement, [GeogebraCommonKernelGeosGeoList class])) replaceChildrenByValuesWithGeogebraCommonKernelGeosGeoElement:vars];
    }
  }
}

- (NSString *)getLabelDescription {
  if (labelMode_ == GeogebraCommonKernelGeosGeoElement_LABEL_CAPTION) {
    return [self getCaptionWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  }
  return [self getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
}

- (GeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return GeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_FILLING();
}

- (void)dealloc {
  RELEASE_(geoList_);
  RELEASE_(cacheList_);
  RELEASE_(elementType_);
  RELEASE_(colorFunctionListener_);
  RELEASE_(sbBuildValueString_);
  RELEASE_(typeStringForXML_);
  RELEASE_(comboBox_);
  RELEASE_(comboBox2_);
  RELEASE_(traceModes_);
  RELEASE_(directionInfoArray_);
  RELEASE_(directionInfoOrdering_);
  RELEASE_(angleStyle_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelGeosGeoList class]) {
    JreStrongAssign(&GeogebraCommonKernelGeosGeoList_ELEMENT_TYPE_MIXED_, nil, GeogebraCommonPluginGeoClassEnum_get_DEFAULT());
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelGeosGeoList)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:", "GeoList", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withInt:", "GeoList", NULL, 0x2, NULL, NULL },
    { "setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:", "setParentAlgorithm", "V", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelGeosGeoList:", "GeoList", NULL, 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "getElementType", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "deepCopyGeo", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "setShowAllPropertiesWithBoolean:", "setShowAllProperties", "V", 0x1, NULL, NULL },
    { "copyListElementsWithGeogebraCommonKernelGeosGeoList:", "copyListElements", "V", 0x2, NULL, NULL },
    { "getCopyForListWithGeogebraCommonKernelGeosGeoElement:", "getCopyForList", "Lgeogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "applyVisualStyleWithGeogebraCommonKernelGeosGeoElement:", "applyVisualStyle", "V", 0x2, NULL, NULL },
    { "removeColorFunction", NULL, "V", 0x11, NULL, NULL },
    { "setColorFunctionWithGeogebraCommonKernelGeosGeoList:", "setColorFunction", "V", 0x11, NULL, NULL },
    { "setColorSpaceWithInt:", "setColorSpace", "V", 0x11, NULL, NULL },
    { "setShowObjectConditionWithGeogebraCommonKernelGeosGeoBoolean:", "setShowObjectCondition", "V", 0x11, "Lgeogebra.common.kernel.CircularDefinitionException;", NULL },
    { "setVisualStyleWithGeogebraCommonKernelGeosGeoElement:", "setVisualStyle", "V", 0x1, NULL, NULL },
    { "setObjColorWithGeogebraCommonAwtGColor:", "setObjColor", "V", 0x1, NULL, NULL },
    { "setBackgroundColorWithGeogebraCommonAwtGColor:", "setBackgroundColor", "V", 0x1, NULL, NULL },
    { "setEuclidianVisibleWithBoolean:", "setEuclidianVisible", "V", 0x1, NULL, NULL },
    { "setElementEuclidianVisibleWithGeogebraCommonKernelGeosGeoElement:withBoolean:", "setElementEuclidianVisible", "V", 0xa, NULL, NULL },
    { "setVisibilityWithInt:withBoolean:", "setVisibility", "V", 0x1, NULL, NULL },
    { "getMyList", NULL, "Lgeogebra.common.kernel.arithmetic.MyList;", 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x11, NULL, NULL },
    { "setDefinedWithBoolean:", "setDefined", "V", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x4, NULL, NULL },
    { "isDrawable", NULL, "Z", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x11, NULL, NULL },
    { "clearCache", NULL, "V", 0x11, NULL, NULL },
    { "addWithGeogebraCommonKernelGeosGeoElement:", "add", "V", 0x11, NULL, NULL },
    { "removeWithGeogebraCommonKernelGeosGeoElement:", "remove", "V", 0x11, NULL, NULL },
    { "addQueueWithGeogebraCommonKernelGeosGeoElement:", "addQueue", "V", 0x11, NULL, NULL },
    { "removeWithInt:", "remove", "V", 0x11, NULL, NULL },
    { "getWithInt:", "get", "Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "getWithInt:withInt:", "get", "Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "toDouble", NULL, "[D", 0x1, NULL, NULL },
    { "ensureCapacityWithInt:", "ensureCapacity", "V", 0x11, NULL, NULL },
    { "size", NULL, "I", 0x11, NULL, NULL },
    { "getCacheSize", NULL, "I", 0x11, NULL, NULL },
    { "getCachedWithInt:", "getCached", "Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringMinimalWithGeogebraCommonKernelStringTemplate:", "toStringMinimal", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "buildValueStringWithGeogebraCommonKernelStringTemplate:", "buildValueString", "Ljava.lang.StringBuilder;", 0x2, NULL, NULL },
    { "isGeoList", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesToList", NULL, "Z", 0x1, NULL, NULL },
    { "getXMLWithBoolean:withJavaLangStringBuilder:", "getXML", "V", 0x11, NULL, NULL },
    { "getTypeStringForXML", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setTypeStringForXMLWithNSString:", "setTypeStringForXML", "V", 0x1, NULL, NULL },
    { "registerColorFunctionListenerWithGeogebraCommonKernelGeosGeoElement:", "registerColorFunctionListener", "V", 0x1, NULL, NULL },
    { "unregisterColorFunctionListenerWithGeogebraCommonKernelGeosGeoElement:", "unregisterColorFunctionListener", "V", 0x1, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "doRemove", NULL, "V", 0x1, NULL, NULL },
    { "isEqualWithGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x11, NULL, NULL },
    { "setZero", NULL, "V", 0x1, NULL, NULL },
    { "setLineThicknessWithInt:", "setLineThickness", "V", 0x1, NULL, NULL },
    { "getMinimumLineThickness", NULL, "I", 0x1, NULL, NULL },
    { "setLineTypeWithInt:", "setLineType", "V", 0x1, NULL, NULL },
    { "setPointSizeWithInt:", "setPointSize", "V", 0x1, NULL, NULL },
    { "getPointSize", NULL, "I", 0x1, NULL, NULL },
    { "setPointStyleWithInt:", "setPointStyle", "V", 0x1, NULL, NULL },
    { "getAlphaValue", NULL, "F", 0x1, NULL, NULL },
    { "setAlphaValueWithFloat:", "setAlphaValue", "V", 0x1, NULL, NULL },
    { "getPointStyle", NULL, "I", 0x1, NULL, NULL },
    { "isFillable", NULL, "Z", 0x1, NULL, NULL },
    { "getGeoElementForPropertiesDialog", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "isMatrix", NULL, "Z", 0x1, NULL, NULL },
    { "getFontSizeMultiplier", NULL, "D", 0x1, NULL, NULL },
    { "setFontSizeMultiplierWithDouble:", "setFontSizeMultiplier", "V", 0x1, NULL, NULL },
    { "getFontStyle", NULL, "I", 0x1, NULL, NULL },
    { "setFontStyleWithInt:", "setFontStyle", "V", 0x1, NULL, NULL },
    { "getPrintDecimals", NULL, "I", 0x11, NULL, NULL },
    { "getPrintFigures", NULL, "I", 0x11, NULL, NULL },
    { "setPrintDecimalsWithInt:withBoolean:", "setPrintDecimals", "V", 0x1, NULL, NULL },
    { "setPrintFiguresWithInt:withBoolean:", "setPrintFigures", "V", 0x1, NULL, NULL },
    { "useSignificantFigures", NULL, "Z", 0x1, NULL, NULL },
    { "isSerifFont", NULL, "Z", 0x1, NULL, NULL },
    { "setSerifFontWithBoolean:", "setSerifFont", "V", 0x1, NULL, NULL },
    { "setHatchingAngleWithInt:", "setHatchingAngle", "V", 0x1, NULL, NULL },
    { "setHatchingDistanceWithInt:", "setHatchingDistance", "V", 0x1, NULL, NULL },
    { "setFillTypeWithGeogebraCommonKernelGeosGeoElement_FillTypeEnum:", "setFillType", "V", 0x1, NULL, NULL },
    { "setFillImageWithNSString:", "setFillImage", "V", 0x1, NULL, NULL },
    { "setImageFileNameWithNSString:", "setImageFileName", "V", 0x1, NULL, NULL },
    { "showLineProperties", NULL, "Z", 0x1, NULL, NULL },
    { "showPointProperties", NULL, "Z", 0x1, NULL, NULL },
    { "toLaTeXStringWithBoolean:withGeogebraCommonKernelStringTemplate:", "toLaTeXString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "getSelectedIndex", NULL, "I", 0x1, NULL, NULL },
    { "setSelectedIndexWithInt:withBoolean:", "setSelectedIndex", "V", 0x1, NULL, NULL },
    { "hasDrawable3D", NULL, "Z", 0x1, NULL, NULL },
    { "getSelectedElement", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setTraceWithBoolean:", "setTrace", "V", 0x1, NULL, NULL },
    { "getTrace", NULL, "Z", 0x1, NULL, NULL },
    { "isTraceable", NULL, "Z", 0x1, NULL, NULL },
    { "isLimitedPath", NULL, "Z", 0x1, NULL, NULL },
    { "isPath", NULL, "Z", 0x1, NULL, NULL },
    { "pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:", "pointChanged", "V", 0x1, NULL, NULL },
    { "getNearestPointWithGeogebraCommonKernelKernelNDGeoPointND:", "getNearestPoint", "V", 0x1, NULL, NULL },
    { "distanceWithGeogebraCommonKernelGeosGeoPoint:", "distance", "D", 0x1, NULL, NULL },
    { "distanceWithGeogebraCommonKernelKernelNDGeoPointND:", "distance", "D", 0x1, NULL, NULL },
    { "pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:", "pathChanged", "V", 0x1, NULL, NULL },
    { "isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:withDouble:", "isOnPath", "Z", 0x1, NULL, NULL },
    { "getMinParameter", NULL, "D", 0x1, NULL, NULL },
    { "getMaxParameter", NULL, "D", 0x1, NULL, NULL },
    { "isClosedPath", NULL, "Z", 0x1, NULL, NULL },
    { "createPathMover", NULL, "Lgeogebra.common.kernel.PathMover;", 0x1, NULL, NULL },
    { "justFontSize", NULL, "Z", 0x1, NULL, NULL },
    { "hasMoveableInputPointsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:", "hasMoveableInputPoints", "Z", 0x1, NULL, NULL },
    { "getFreeInputPointsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:", "getFreeInputPoints", "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "isCasEvaluableObject", NULL, "Z", 0x11, NULL, NULL },
    { "getCASStringWithGeogebraCommonKernelStringTemplate:withBoolean:", "getCASString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "listContainsWithGeogebraCommonKernelGeosGeoElement:", "listContains", "Z", 0x1, NULL, NULL },
    { "isLaTeXDrawableGeo", NULL, "Z", 0x1, NULL, NULL },
    { "updateColumnHeadingsForTraceValues", NULL, "V", 0x1, NULL, NULL },
    { "getTraceModesWithJavaUtilArrayList:", "getTraceModes", "Lgeogebra.common.kernel.geos.GeoElement$TraceModesEnum;", 0x19, NULL, NULL },
    { "getTraceModes", NULL, "Lgeogebra.common.kernel.geos.GeoElement$TraceModesEnum;", 0x1, NULL, NULL },
    { "hasSpreadsheetTraceModeTraceable", NULL, "Z", 0x1, NULL, NULL },
    { "getTraceDialogAsValues", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "addToSpreadsheetTraceListWithJavaUtilArrayList:", "addToSpreadsheetTraceList", "V", 0x1, NULL, NULL },
    { "performScriptActions", NULL, "I", 0x1, NULL, NULL },
    { "findWithGeogebraCommonKernelGeosGeoElement:", "find", "I", 0x1, NULL, NULL },
    { "drawAsComboBox", NULL, "Z", 0x1, NULL, NULL },
    { "setDrawAsComboBoxWithBoolean:", "setDrawAsComboBox", "V", 0x1, NULL, NULL },
    { "getComboBoxWithInt:", "getComboBox", "Lgeogebra.common.javax.swing.AbstractJComboBox;", 0x1, NULL, NULL },
    { "buildComboBoxWithGeogebraCommonJavaxSwingAbstractJComboBox:", "buildComboBox", "Lgeogebra.common.javax.swing.AbstractJComboBox;", 0x2, NULL, NULL },
    { "buildComboBoxWithInt:", "buildComboBox", "Lgeogebra.common.javax.swing.AbstractJComboBox;", 0x2, NULL, NULL },
    { "rebuildComboxBoxIfNecessaryWithGeogebraCommonJavaxSwingAbstractJComboBox:", "rebuildComboxBoxIfNecessary", "V", 0x1, NULL, NULL },
    { "rebuildComboBoxes", NULL, "V", 0x2, NULL, NULL },
    { "isAbsoluteScreenLocateable", NULL, "Z", 0x1, NULL, NULL },
    { "isMoveable", NULL, "Z", 0x1, NULL, NULL },
    { "isAbsoluteScreenLocActive", NULL, "Z", 0x1, NULL, NULL },
    { "setAbsoluteScreenLocWithInt:withInt:", "setAbsoluteScreenLoc", "V", 0x1, NULL, NULL },
    { "getAbsoluteScreenLocX", NULL, "I", 0x1, NULL, NULL },
    { "getAbsoluteScreenLocY", NULL, "I", 0x1, NULL, NULL },
    { "setAbsoluteScreenLocActiveWithBoolean:", "setAbsoluteScreenLocActive", "V", 0x1, NULL, NULL },
    { "setRealWorldLocWithDouble:withDouble:", "setRealWorldLoc", "V", 0x1, NULL, NULL },
    { "getRealWorldLocX", NULL, "D", 0x1, NULL, NULL },
    { "getRealWorldLocY", NULL, "D", 0x1, NULL, NULL },
    { "isFurniture", NULL, "Z", 0x1, NULL, NULL },
    { "getListElementWithInt:", "getListElement", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "mean", NULL, "D", 0x1, NULL, NULL },
    { "shouldUseAlgoLocusListWithBoolean:", "shouldUseAlgoLocusList", "Z", 0x1, NULL, NULL },
    { "showOnAxis", NULL, "Z", 0x1, NULL, NULL },
    { "setShowOnAxisWithBoolean:", "setShowOnAxis", "V", 0x1, NULL, NULL },
    { "containsGeoElement3D", NULL, "Z", 0x1, NULL, NULL },
    { "getMainDirection", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x11, NULL, NULL },
    { "isLaTeXTextCommand", NULL, "Z", 0x1, NULL, NULL },
    { "setAngleStyleWithInt:", "setAngleStyle", "V", 0x1, NULL, NULL },
    { "setAngleStyleWithGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:", "setAngleStyle", "V", 0x1, NULL, NULL },
    { "getAngleStyle", NULL, "Lgeogebra.common.kernel.geos.GeoAngle$AngleStyle;", 0x1, NULL, NULL },
    { "hasOrientation", NULL, "Z", 0x1, NULL, NULL },
    { "setAllowReflexAngleWithBoolean:", "setAllowReflexAngle", "V", 0x11, NULL, NULL },
    { "setEmphasizeRightAngleWithBoolean:", "setEmphasizeRightAngle", "V", 0x1, NULL, NULL },
    { "setForceReflexAngleWithBoolean:", "setForceReflexAngle", "V", 0x11, NULL, NULL },
    { "setDecorationTypeWithInt:", "setDecorationType", "V", 0x1, NULL, NULL },
    { "setArcSizeWithInt:", "setArcSize", "V", 0x1, NULL, NULL },
    { "getArcSize", NULL, "I", 0x1, NULL, NULL },
    { "isEmphasizeRightAngle", NULL, "Z", 0x1, NULL, NULL },
    { "replaceChildrenByValuesWithGeogebraCommonKernelGeosGeoElement:", "replaceChildrenByValues", "V", 0x1, NULL, NULL },
    { "getLabelDescription", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getLastHitType", NULL, "Lgeogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ELEMENT_TYPE_MIXED_", NULL, 0x1a, "Lgeogebra.common.plugin.GeoClass;", &GeogebraCommonKernelGeosGeoList_ELEMENT_TYPE_MIXED_, NULL,  },
    { "trace_", NULL, 0x2, "Z", NULL, NULL,  },
    { "STR_OPEN_", NULL, 0x1a, "Ljava.lang.String;", &GeogebraCommonKernelGeosGeoList_STR_OPEN_, NULL,  },
    { "STR_CLOSE_", NULL, 0x1a, "Ljava.lang.String;", &GeogebraCommonKernelGeosGeoList_STR_CLOSE_, NULL,  },
    { "geoList_", NULL, 0x12, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "cacheList_", NULL, 0x12, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "isDefined__", "isDefined", 0x2, "Z", NULL, NULL,  },
    { "isDrawable__", "isDrawable", 0x2, "Z", NULL, NULL,  },
    { "drawAsComboBox__", "drawAsComboBox", 0x2, "Z", NULL, NULL,  },
    { "elementType_", NULL, 0x2, "Lgeogebra.common.plugin.GeoClass;", NULL, NULL,  },
    { "showAllProperties_", NULL, 0x2, "Z", NULL, NULL,  },
    { "colorFunctionListener_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "sbBuildValueString_", NULL, 0x12, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "typeStringForXML_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "pointSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "pointStyle_", NULL, 0x2, "I", NULL, NULL,  },
    { "serifFont_", NULL, 0x2, "Z", NULL, NULL,  },
    { "fontStyle_", NULL, 0x2, "I", NULL, NULL,  },
    { "fontSizeD_", NULL, 0x2, "D", NULL, NULL,  },
    { "printDecimals_", NULL, 0x2, "I", NULL, NULL,  },
    { "printFigures_", NULL, 0x2, "I", NULL, NULL,  },
    { "useSignificantFigures__", "useSignificantFigures", 0x2, "Z", NULL, NULL,  },
    { "selectedIndex_", NULL, 0x2, "I", NULL, NULL,  },
    { "closestPointIndex_", NULL, 0x2, "I", NULL, NULL,  },
    { "comboBox_", NULL, 0x2, "Lgeogebra.common.javax.swing.AbstractJComboBox;", NULL, NULL,  },
    { "comboBox2_", NULL, 0x2, "Lgeogebra.common.javax.swing.AbstractJComboBox;", NULL, NULL,  },
    { "traceModes_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement$TraceModesEnum;", NULL, NULL,  },
    { "showOnAxis__", "showOnAxis", 0x2, "Z", NULL, NULL,  },
    { "directionInfoArray_", NULL, 0x2, "[Z", NULL, NULL,  },
    { "directionInfoOrdering_", NULL, 0x2, "[I", NULL, NULL,  },
    { "shouldUseAlgoLocusList__", "shouldUseAlgoLocusList", 0x2, "Z", NULL, NULL,  },
    { "locusCalledAlgoLocusList_", NULL, 0x2, "Z", NULL, NULL,  },
    { "angleStyle_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoAngle$AngleStyle;", NULL, NULL,  },
    { "emphasizeRightAngle_", NULL, 0x2, "Z", NULL, NULL,  },
    { "arcSize_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoList = { 2, "GeoList", "geogebra.common.kernel.geos", NULL, 0x1, 164, methods, 35, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelGeosGeoList;
}

@end

void GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelGeosGeoList *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_withInt_(self, c, 20);
}

GeogebraCommonKernelGeosGeoList *new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelGeosGeoList *self = [GeogebraCommonKernelGeosGeoList alloc];
  GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_withInt_(GeogebraCommonKernelGeosGeoList *self, GeogebraCommonKernelConstruction *c, jint size) {
  GeogebraCommonKernelGeosGeoElement_initWithGeogebraCommonKernelConstruction_(self, c);
  self->isDefined__ = YES;
  self->isDrawable__ = YES;
  self->drawAsComboBox__ = NO;
  GeogebraCommonKernelGeosGeoList_set_elementType_(self, GeogebraCommonKernelGeosGeoList_ELEMENT_TYPE_MIXED_);
  self->showAllProperties_ = NO;
  GeogebraCommonKernelGeosGeoList_setAndConsume_sbBuildValueString_(self, new_JavaLangStringBuilder_initWithInt_(50));
  GeogebraCommonKernelGeosGeoList_set_typeStringForXML_(self, nil);
  self->pointSize_ = GeogebraCommonPluginEuclidianStyleConstants_DEFAULT_POINT_SIZE;
  self->pointStyle_ = -1;
  self->serifFont_ = NO;
  self->fontStyle_ = GeogebraCommonAwtGFont_PLAIN;
  self->fontSizeD_ = 1;
  self->printDecimals_ = -1;
  self->printFigures_ = -1;
  self->useSignificantFigures__ = NO;
  self->selectedIndex_ = 0;
  GeogebraCommonKernelGeosGeoList_set_traceModes_(self, nil);
  GeogebraCommonKernelGeosGeoList_set_directionInfoArray_(self, nil);
  GeogebraCommonKernelGeosGeoList_set_directionInfoOrdering_(self, nil);
  self->shouldUseAlgoLocusList__ = YES;
  self->locusCalledAlgoLocusList_ = NO;
  GeogebraCommonKernelGeosGeoList_set_angleStyle_(self, GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_ANTICLOCKWISE());
  self->emphasizeRightAngle_ = YES;
  self->arcSize_ = GeogebraCommonPluginEuclidianStyleConstants_DEFAULT_ANGLE_SIZE;
  [self setConstructionDefaults];
  GeogebraCommonKernelGeosGeoList_setAndConsume_geoList_(self, new_JavaUtilArrayList_initWithInt_(size));
  GeogebraCommonKernelGeosGeoList_setAndConsume_cacheList_(self, new_JavaUtilArrayList_initWithInt_(size));
  [self setEuclidianVisibleWithBoolean:NO];
}

GeogebraCommonKernelGeosGeoList *new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_withInt_(GeogebraCommonKernelConstruction *c, jint size) {
  GeogebraCommonKernelGeosGeoList *self = [GeogebraCommonKernelGeosGeoList alloc];
  GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_withInt_(self, c, size);
  return self;
}

void GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelGeosGeoList *self, GeogebraCommonKernelGeosGeoList *list) {
  GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_withInt_(self, ((GeogebraCommonKernelGeosGeoList *) nil_chk(list))->cons_, GeogebraCommonKernelGeosGeoList_size(list));
  [self setWithGeogebraCommonKernelGeosGeoElement:list];
}

GeogebraCommonKernelGeosGeoList *new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelGeosGeoList *list) {
  GeogebraCommonKernelGeosGeoList *self = [GeogebraCommonKernelGeosGeoList alloc];
  GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelGeosGeoList_(self, list);
  return self;
}

void GeogebraCommonKernelGeosGeoList_copyListElementsWithGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelGeosGeoList *self, GeogebraCommonKernelGeosGeoList *otherList) {
  jint otherListSize = GeogebraCommonKernelGeosGeoList_size(nil_chk(otherList));
  GeogebraCommonKernelGeosGeoList_ensureCapacityWithInt_(self, otherListSize);
  [((JavaUtilArrayList *) nil_chk(self->geoList_)) clear];
  for (jint i = 0; i < otherListSize; i++) {
    GeogebraCommonKernelGeosGeoElement *otherElement = GeogebraCommonKernelGeosGeoList_getWithInt_(otherList, i);
    GeogebraCommonKernelGeosGeoElement *thisElement = nil;
    if (i < [((JavaUtilArrayList *) nil_chk(self->cacheList_)) size]) {
      GeogebraCommonKernelGeosGeoElement *cachedGeo = [self->cacheList_ getWithInt:i];
      if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(cachedGeo)) isLabelSet] && ([cachedGeo getGeoClassType] == [((GeogebraCommonKernelGeosGeoElement *) nil_chk(otherElement)) getGeoClassType])) {
        [cachedGeo setWithGeogebraCommonKernelGeosGeoElement:otherElement];
        thisElement = cachedGeo;
      }
    }
    if (thisElement == nil) {
      thisElement = GeogebraCommonKernelGeosGeoList_getCopyForListWithGeogebraCommonKernelGeosGeoElement_(self, otherElement);
    }
    GeogebraCommonKernelGeosGeoList_addWithGeogebraCommonKernelGeosGeoElement_(self, thisElement);
  }
}

GeogebraCommonKernelGeosGeoElement *GeogebraCommonKernelGeosGeoList_getCopyForListWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelGeosGeoList *self, GeogebraCommonKernelGeosGeoElement *geo) {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
    return geo;
  }
  GeogebraCommonKernelGeosGeoElement *ret = [geo copyInternalWithGeogebraCommonKernelConstruction:self->cons_];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(ret)) setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:[self getParentAlgorithm]];
  return ret;
}

void GeogebraCommonKernelGeosGeoList_applyVisualStyleWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelGeosGeoList *self, GeogebraCommonKernelGeosGeoElement *geo) {
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
    [geo setObjColorWithGeogebraCommonAwtGColor:[self getObjectColor]];
    [geo setColorSpaceWithInt:[self getColorSpace]];
    if ([self getColorFunction] != nil) {
      [geo setColorFunctionWithGeogebraCommonKernelGeosGeoList:[self getColorFunction]];
    }
    else {
      [geo removeColorFunction];
    }
    [geo setLineThicknessWithInt:[self getLineThickness]];
    [geo setLineTypeWithInt:[self getLineType]];
    if ([GeogebraCommonKernelGeosPointProperties_class_() isInstance:geo]) {
      [((id<GeogebraCommonKernelGeosPointProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosPointProperties))) setPointSizeWithInt:[self getPointSize]];
      [((id<GeogebraCommonKernelGeosPointProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosPointProperties))) setPointStyleWithInt:[self getPointStyle]];
    }
    if ([GeogebraCommonKernelGeosTextProperties_class_() isInstance:geo]) {
      [((id<GeogebraCommonKernelGeosTextProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosTextProperties))) setFontSizeMultiplierWithDouble:[self getFontSizeMultiplier]];
      [((id<GeogebraCommonKernelGeosTextProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosTextProperties))) setFontStyleWithInt:[self getFontStyle]];
      [((id<GeogebraCommonKernelGeosTextProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosTextProperties))) setSerifFontWithBoolean:[self isSerifFont]];
      if (self->useSignificantFigures__) {
        [((id<GeogebraCommonKernelGeosTextProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosTextProperties))) setPrintFiguresWithInt:GeogebraCommonKernelGeosGeoList_getPrintFigures(self) withBoolean:NO];
      }
      else {
        [((id<GeogebraCommonKernelGeosTextProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosTextProperties))) setPrintDecimalsWithInt:GeogebraCommonKernelGeosGeoList_getPrintDecimals(self) withBoolean:NO];
      }
    }
    [geo setFillTypeWithGeogebraCommonKernelGeosGeoElement_FillTypeEnum:self->fillType_];
    [geo setHatchingAngleWithInt:self->hatchingAngle_];
    [geo setHatchingDistanceWithInt:self->hatchingDistance_];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk([geo getGeoElementForPropertiesDialog])) isGeoImage]) [geo setImageFileNameWithNSString:[((GeogebraCommonKernelGeosGeoElementGraphicsAdapter *) nil_chk([self getGraphicsAdapter])) getImageFileName]];
    [geo setAlphaValueWithFloat:[self getAlphaValue]];
    [geo setLayerWithInt:[self getLayer]];
    @try {
      [geo setShowObjectConditionWithGeogebraCommonKernelGeosGeoBoolean:[self getShowObjectCondition]];
    }
    @catch (JavaLangException *e) {
    }
    GeogebraCommonKernelGeosGeoList_setElementEuclidianVisibleWithGeogebraCommonKernelGeosGeoElement_withBoolean_(geo, [self isSetEuclidianVisible]);
  }
}

void GeogebraCommonKernelGeosGeoList_setElementEuclidianVisibleWithGeogebraCommonKernelGeosGeoElement_withBoolean_(GeogebraCommonKernelGeosGeoElement *geo, jboolean visible) {
  GeogebraCommonKernelGeosGeoList_initialize();
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet] && ![geo isGeoNumeric]) {
    [geo setEuclidianVisibleWithBoolean:visible];
  }
}

jboolean GeogebraCommonKernelGeosGeoList_isDefined(GeogebraCommonKernelGeosGeoList *self) {
  return self->isDefined__;
}

void GeogebraCommonKernelGeosGeoList_clear(GeogebraCommonKernelGeosGeoList *self) {
  [((JavaUtilArrayList *) nil_chk(self->geoList_)) clear];
  GeogebraCommonKernelGeosGeoList_set_comboBox_(self, nil);
  GeogebraCommonKernelGeosGeoList_set_comboBox2_(self, nil);
}

void GeogebraCommonKernelGeosGeoList_addWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelGeosGeoList *self, GeogebraCommonKernelGeosGeoElement *geo) {
  [((JavaUtilArrayList *) nil_chk(self->geoList_)) addWithId:geo];
  if ([self->geoList_ size] == 1) {
    [self setTypeStringForXMLWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getXMLtypeString]];
  }
  jint pos = [self->geoList_ size] - 1;
  if (pos < [((JavaUtilArrayList *) nil_chk(self->cacheList_)) size]) {
    [self->cacheList_ setWithInt:pos withId:geo];
  }
  else {
    [self->cacheList_ addWithId:geo];
  }
  if (pos == 0) {
    self->isDrawable__ = YES;
    GeogebraCommonKernelGeosGeoList_set_elementType_(self, [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getGeoClassType]);
  }
  else if (self->elementType_ != [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getGeoClassType]) {
    GeogebraCommonKernelGeosGeoList_set_elementType_(self, GeogebraCommonKernelGeosGeoList_ELEMENT_TYPE_MIXED_);
  }
  self->isDrawable__ = (self->isDrawable__ && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isDrawable] && ![geo isGeoBoolean] && !([geo isKindOfClass:[GeogebraCommonKernelGeosGeoNumeric class]] && [((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class])) isSlider]));
  GeogebraCommonKernelGeosGeoList_applyVisualStyleWithGeogebraCommonKernelGeosGeoElement_(self, geo);
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
    [geo setViewFlagsWithJavaUtilList:[self getViewSet]];
    [geo setVisibleInView3DWithGeogebraCommonKernelGeosGeoElement:self];
  }
  GeogebraCommonKernelGeosGeoList_rebuildComboBoxes(self);
}

void GeogebraCommonKernelGeosGeoList_removeWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelGeosGeoList *self, GeogebraCommonKernelGeosGeoElement *geo) {
  [((JavaUtilArrayList *) nil_chk(self->geoList_)) removeWithId:geo];
  GeogebraCommonKernelGeosGeoList_rebuildComboBoxes(self);
}

GeogebraCommonKernelGeosGeoElement *GeogebraCommonKernelGeosGeoList_getWithInt_(GeogebraCommonKernelGeosGeoList *self, jint index) {
  return [((JavaUtilArrayList *) nil_chk(self->geoList_)) getWithInt:index];
}

void GeogebraCommonKernelGeosGeoList_ensureCapacityWithInt_(GeogebraCommonKernelGeosGeoList *self, jint size) {
  [((JavaUtilArrayList *) nil_chk(self->geoList_)) ensureCapacityWithInt:size];
  [((JavaUtilArrayList *) nil_chk(self->cacheList_)) ensureCapacityWithInt:size];
}

jint GeogebraCommonKernelGeosGeoList_size(GeogebraCommonKernelGeosGeoList *self) {
  return [((JavaUtilArrayList *) nil_chk(self->geoList_)) size];
}

JavaLangStringBuilder *GeogebraCommonKernelGeosGeoList_buildValueStringWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelGeosGeoList *self, GeogebraCommonKernelStringTemplate *tpl) {
  [((JavaLangStringBuilder *) nil_chk(self->sbBuildValueString_)) setLengthWithInt:0];
  if (!self->isDefined__) {
    [self->sbBuildValueString_ appendWithNSString:@"?"];
    return self->sbBuildValueString_;
  }
  if ([((GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk([((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getStringType])) isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) {
    [self->sbBuildValueString_ appendWithNSString:@"\\left\\"];
  }
  [self->sbBuildValueString_ appendWithNSString:GeogebraCommonKernelGeosGeoList_STR_OPEN_];
  jint lastIndex = [((JavaUtilArrayList *) nil_chk(self->geoList_)) size] - 1;
  if (lastIndex > -1) {
    for (jint i = 0; i < lastIndex; i++) {
      GeogebraCommonKernelGeosGeoElement *geo = [self->geoList_ getWithInt:i];
      [self->sbBuildValueString_ appendWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) toOutputValueStringWithGeogebraCommonKernelStringTemplate:tpl]];
      [self->sbBuildValueString_ appendWithChar:((GeogebraCommonMainLocalization *) nil_chk([self getLoc]))->unicodeComma_];
      [self->sbBuildValueString_ appendWithNSString:@" "];
    }
    GeogebraCommonKernelGeosGeoElement *geo = [self->geoList_ getWithInt:lastIndex];
    [self->sbBuildValueString_ appendWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) toOutputValueStringWithGeogebraCommonKernelStringTemplate:tpl]];
  }
  if ([((GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk([tpl getStringType])) isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) {
    [self->sbBuildValueString_ appendWithNSString:@"\\right\\"];
  }
  [self->sbBuildValueString_ appendWithNSString:GeogebraCommonKernelGeosGeoList_STR_CLOSE_];
  return self->sbBuildValueString_;
}

jint GeogebraCommonKernelGeosGeoList_getPrintDecimals(GeogebraCommonKernelGeosGeoList *self) {
  return self->printDecimals_;
}

jint GeogebraCommonKernelGeosGeoList_getPrintFigures(GeogebraCommonKernelGeosGeoList *self) {
  return self->printFigures_;
}

GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *GeogebraCommonKernelGeosGeoList_getTraceModesWithJavaUtilArrayList_(JavaUtilArrayList *geos) {
  GeogebraCommonKernelGeosGeoList_initialize();
  GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *traceModes = nil;
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(geos)) {
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isSpreadsheetTraceable]) {
      traceModes = GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_get_NOT_TRACEABLE();
      return traceModes;
    }
    GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *geoMode = [geo getTraceModes];
    if (traceModes == nil) {
      traceModes = geoMode;
      if (geoMode == GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_get_NOT_TRACEABLE()) return traceModes;
    }
    else {
      switch ([geoMode ordinal]) {
        case GeogebraCommonKernelGeosGeoElement_TraceModesEnum_NOT_TRACEABLE:
        traceModes = GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_get_NOT_TRACEABLE();
        return traceModes;
        case GeogebraCommonKernelGeosGeoElement_TraceModesEnum_ONE_VALUE_ONLY:
        case GeogebraCommonKernelGeosGeoElement_TraceModesEnum_SEVERAL_VALUES_ONLY:
        if (traceModes == GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_get_ONLY_COPY()) {
          traceModes = GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_get_NOT_TRACEABLE();
          return traceModes;
        }
        traceModes = GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_get_SEVERAL_VALUES_ONLY();
        break;
        case GeogebraCommonKernelGeosGeoElement_TraceModesEnum_ONE_VALUE_OR_COPY:
        case GeogebraCommonKernelGeosGeoElement_TraceModesEnum_SEVERAL_VALUES_OR_COPY:
        if (traceModes == GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_get_ONE_VALUE_ONLY()) traceModes = GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_get_SEVERAL_VALUES_ONLY();
        else if (traceModes == GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_get_ONE_VALUE_OR_COPY()) traceModes = GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_get_SEVERAL_VALUES_OR_COPY();
        break;
        case GeogebraCommonKernelGeosGeoElement_TraceModesEnum_ONLY_COPY:
        if (traceModes == GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_get_ONE_VALUE_ONLY() || traceModes == GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_get_SEVERAL_VALUES_ONLY()) {
          traceModes = GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_get_NOT_TRACEABLE();
          return traceModes;
        }
        traceModes = GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_get_ONLY_COPY();
        break;
      }
    }
  }
  return traceModes;
}

GeogebraCommonJavaxSwingAbstractJComboBox *GeogebraCommonKernelGeosGeoList_buildComboBoxWithGeogebraCommonJavaxSwingAbstractJComboBox_(GeogebraCommonKernelGeosGeoList *self, GeogebraCommonJavaxSwingAbstractJComboBox *cb) {
  [((GeogebraCommonJavaxSwingAbstractJComboBox *) nil_chk(cb)) removeAllItems];
  [cb setEditableWithBoolean:NO];
  if (GeogebraCommonKernelGeosGeoList_size(self) > 0) {
    for (jint i = 0; i < GeogebraCommonKernelGeosGeoList_size(self); i++) {
      NSString *item;
      item = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(GeogebraCommonKernelGeosGeoList_getWithInt_(self, i))) toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
      [cb addItemWithNSString:item];
    }
    [cb setSelectedIndexWithInt:[self getSelectedIndex]];
  }
  return cb;
}

GeogebraCommonJavaxSwingAbstractJComboBox *GeogebraCommonKernelGeosGeoList_buildComboBoxWithInt_(GeogebraCommonKernelGeosGeoList *self, jint view) {
  return GeogebraCommonKernelGeosGeoList_buildComboBoxWithGeogebraCommonJavaxSwingAbstractJComboBox_(self, [((GeogebraCommonFactoriesSwingFactory *) nil_chk([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getSwingFactory])) newJComboBoxWithGeogebraCommonMainApp:[self->kernel_ getApplication] withInt:view]);
}

void GeogebraCommonKernelGeosGeoList_rebuildComboBoxes(GeogebraCommonKernelGeosGeoList *self) {
  if (self->comboBox_ == nil) return;
  GeogebraCommonKernelGeosGeoList_set_comboBox_(self, GeogebraCommonKernelGeosGeoList_buildComboBoxWithInt_(self, GeogebraCommonMainApp_VIEW_EUCLIDIAN));
  GeogebraCommonKernelGeosGeoList_set_comboBox2_(self, GeogebraCommonKernelGeosGeoList_buildComboBoxWithInt_(self, GeogebraCommonMainApp_VIEW_EUCLIDIAN));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoList)
