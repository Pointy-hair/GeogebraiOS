//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/scripting/CmdShowAxes.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "geogebra/common/euclidian3D/EuclidianView3DInterface.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/arithmetic/BooleanValue.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/CmdScripting.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/scripting/CmdShowAxes.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/MyError.h"

@implementation GeogebraCommonKernelScriptingCmdShowAxes

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelScriptingCmdShowAxes_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (void)performWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon> ev = nil;
  GeogebraCommonKernelCommandsCmdScripting_set_arg_(self, [self resArgsWithGeogebraCommonKernelArithmeticCommand:c]);
  {
    jboolean show;
    switch (n) {
      case 0:
      ev = [((GeogebraCommonMainApp *) nil_chk(app_)) getActiveEuclidianView];
      [((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk(ev)) setShowAxisWithBoolean:YES];
      [ev repaintView];
      break;
      case 1:
      if (!([GeogebraCommonKernelArithmeticBooleanValue_class_() isInstance:IOSObjectArray_Get(nil_chk(arg_), 0)])) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg_, 0)];
      show = [((id<GeogebraCommonKernelArithmeticBooleanValue>) nil_chk(((id<GeogebraCommonKernelArithmeticBooleanValue>) check_protocol_cast(IOSObjectArray_Get(arg_, 0), @protocol(GeogebraCommonKernelArithmeticBooleanValue))))) getBoolean];
      ev = [((GeogebraCommonMainApp *) nil_chk(app_)) getActiveEuclidianView];
      [((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk(ev)) setShowAxisWithBoolean:show];
      [ev repaintView];
      break;
      case 2:
      if (!([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:IOSObjectArray_Get(nil_chk(arg_), 0)])) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg_, 0)];
      if (!([GeogebraCommonKernelArithmeticBooleanValue_class_() isInstance:IOSObjectArray_Get(arg_, 1)])) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg_, 1)];
      show = [((id<GeogebraCommonKernelArithmeticBooleanValue>) nil_chk(((id<GeogebraCommonKernelArithmeticBooleanValue>) check_protocol_cast(IOSObjectArray_Get(arg_, 1), @protocol(GeogebraCommonKernelArithmeticBooleanValue))))) getBoolean];
      switch (J2ObjCFpToInt(([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg_, 0), @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble]))) {
        case 2:
        if ([((GeogebraCommonMainApp *) nil_chk(app_)) hasEuclidianView2WithInt:1]) {
          ev = [app_ getEuclidianView2WithInt:1];
        }
        break;
        case 3:
        if ([((GeogebraCommonMainApp *) nil_chk(app_)) hasEuclidianView3D]) {
          ev = [app_ getEuclidianView3D];
        }
        break;
        default:
        ev = [((GeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1];
      }
      if (ev != nil) {
        [ev setShowAxisWithBoolean:show];
        [ev repaintView];
      }
      break;
      default:
      @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdShowAxes", NULL, 0x1, NULL, NULL },
    { "performWithGeogebraCommonKernelArithmeticCommand:", "perform", "V", 0x14, "Lgeogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelScriptingCmdShowAxes = { 2, "CmdShowAxes", "geogebra.common.kernel.scripting", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelScriptingCmdShowAxes;
}

@end

void GeogebraCommonKernelScriptingCmdShowAxes_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelScriptingCmdShowAxes *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdScripting_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelScriptingCmdShowAxes *new_GeogebraCommonKernelScriptingCmdShowAxes_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelScriptingCmdShowAxes *self = [GeogebraCommonKernelScriptingCmdShowAxes alloc];
  GeogebraCommonKernelScriptingCmdShowAxes_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelScriptingCmdShowAxes)
