//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/AlgoTaylorSeries.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/advanced/AlgoTaylorSeries.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/plugin/Operation.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"

#define GeogebraCommonKernelAdvancedAlgoTaylorSeries_MAX_ORDER 80

@interface GeogebraCommonKernelAdvancedAlgoTaylorSeries () {
 @public
  GeogebraCommonKernelGeosGeoFunction *f_;
  id<GeogebraCommonKernelArithmeticNumberValue> a_;
  id<GeogebraCommonKernelArithmeticNumberValue> n_;
  GeogebraCommonKernelGeosGeoFunction *g_;
  GeogebraCommonKernelGeosGeoElement *ageo_, *ngeo_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoTaylorSeries, f_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoTaylorSeries, a_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoTaylorSeries, n_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoTaylorSeries, g_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoTaylorSeries, ageo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoTaylorSeries, ngeo_, GeogebraCommonKernelGeosGeoElement *)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelAdvancedAlgoTaylorSeries, MAX_ORDER, jint)

__attribute__((unused)) static void GeogebraCommonKernelAdvancedAlgoTaylorSeries_compute(GeogebraCommonKernelAdvancedAlgoTaylorSeries *self);

@implementation GeogebraCommonKernelAdvancedAlgoTaylorSeries

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)a
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)n {
  GeogebraCommonKernelAdvancedAlgoTaylorSeries_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, f, a, n);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_TaylorSeries();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, f_);
  IOSObjectArray_Set(input_, 1, ageo_);
  IOSObjectArray_Set(input_, 2, ngeo_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:g_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoFunction *)getPolynomial {
  return g_;
}

- (void)compute {
  GeogebraCommonKernelAdvancedAlgoTaylorSeries_compute(self);
}

- (void)dealloc {
  RELEASE_(f_);
  RELEASE_(a_);
  RELEASE_(n_);
  RELEASE_(g_);
  RELEASE_(ageo_);
  RELEASE_(ngeo_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoTaylorSeries", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getPolynomial", NULL, "Lgeogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_ORDER_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelAdvancedAlgoTaylorSeries_MAX_ORDER },
    { "f_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "a_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "n_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "g_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "ageo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "ngeo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedAlgoTaylorSeries = { 2, "AlgoTaylorSeries", "geogebra.common.kernel.advanced", NULL, 0x1, 5, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedAlgoTaylorSeries;
}

@end

void GeogebraCommonKernelAdvancedAlgoTaylorSeries_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelAdvancedAlgoTaylorSeries *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoFunction *f, id<GeogebraCommonKernelArithmeticNumberValue> a, id<GeogebraCommonKernelArithmeticNumberValue> n) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAdvancedAlgoTaylorSeries_set_f_(self, f);
  GeogebraCommonKernelAdvancedAlgoTaylorSeries_set_a_(self, a);
  GeogebraCommonKernelAdvancedAlgoTaylorSeries_set_n_(self, n);
  GeogebraCommonKernelAdvancedAlgoTaylorSeries_set_ageo_(self, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(a)) toGeoElement]);
  GeogebraCommonKernelAdvancedAlgoTaylorSeries_set_ngeo_(self, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(n)) toGeoElement]);
  GeogebraCommonKernelAdvancedAlgoTaylorSeries_setAndConsume_g_(self, new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAdvancedAlgoTaylorSeries_compute(self);
  [self->g_ setLabelWithNSString:label];
}

GeogebraCommonKernelAdvancedAlgoTaylorSeries *new_GeogebraCommonKernelAdvancedAlgoTaylorSeries_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoFunction *f, id<GeogebraCommonKernelArithmeticNumberValue> a, id<GeogebraCommonKernelArithmeticNumberValue> n) {
  GeogebraCommonKernelAdvancedAlgoTaylorSeries *self = [GeogebraCommonKernelAdvancedAlgoTaylorSeries alloc];
  GeogebraCommonKernelAdvancedAlgoTaylorSeries_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, f, a, n);
  return self;
}

void GeogebraCommonKernelAdvancedAlgoTaylorSeries_compute(GeogebraCommonKernelAdvancedAlgoTaylorSeries *self) {
  if (![((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f_)) isDefined] || ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->ageo_)) isDefined] || ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->ngeo_)) isDefined]) {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
    return;
  }
  jdouble nd = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->n_)) getDouble];
  if (nd < 0) {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
    return;
  }
  else if (nd > GeogebraCommonKernelAdvancedAlgoTaylorSeries_MAX_ORDER) {
    nd = GeogebraCommonKernelAdvancedAlgoTaylorSeries_MAX_ORDER;
  }
  jint order = (jint) JavaLangMath_roundWithDouble_(nd);
  jdouble ad = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->a_)) getDouble];
  jdouble coeff = [self->f_ evaluateWithDouble:ad];
  if (JavaLangDouble_isNaNWithDouble_(coeff) || JavaLangDouble_isInfiniteWithDouble_(coeff)) {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
    return;
  }
  GeogebraCommonKernelArithmeticExpressionNode *series = nil;
  if (!GeogebraCommonKernelKernel_isZeroWithDouble_(coeff)) {
    series = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, coeff) autorelease]) autorelease];
  }
  GeogebraCommonKernelArithmeticFunctionVariable *fVar = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_(self->kernel_) autorelease];
  if (order > 0) {
    id<GeogebraCommonKernelArithmeticExpressionValue> diffExp;
    if (GeogebraCommonKernelKernel_isZeroWithDouble_(ad)) {
      diffExp = fVar;
    }
    else if (ad > 0) {
      diffExp = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, fVar, GeogebraCommonPluginOperationEnum_get_MINUS(), [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, ad) autorelease]) autorelease];
    }
    else {
      diffExp = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, fVar, GeogebraCommonPluginOperationEnum_get_PLUS(), [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, -ad) autorelease]) autorelease];
    }
    for (jint k = 1; k <= order; k++) {
      GeogebraCommonKernelArithmeticFunction *deriv = [((GeogebraCommonKernelArithmeticFunction *) nil_chk([self->f_ getFunction])) getDerivativeWithInt:k withBoolean:YES];
      if (deriv == nil) {
        [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
        return;
      }
      coeff = [((GeogebraCommonKernelArithmeticFunction *) nil_chk(deriv)) evaluateWithDouble:ad];
      if (JavaLangDouble_isNaNWithDouble_(coeff) || JavaLangDouble_isInfiniteWithDouble_(coeff)) {
        [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
        return;
      }
      else if (GeogebraCommonKernelKernel_isZeroWithDouble_(coeff)) continue;
      jboolean negativeCoeff = coeff < 0;
      id<GeogebraCommonKernelArithmeticExpressionValue> powerExp;
      switch (k) {
        case 1:
        powerExp = diffExp;
        break;
        default:
        powerExp = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, diffExp, GeogebraCommonPluginOperationEnum_get_POWER(), [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, k) autorelease]) autorelease], GeogebraCommonPluginOperationEnum_get_DIVIDE(), [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, k) autorelease], GeogebraCommonPluginOperationEnum_get_FACTORIAL(), nil) autorelease]) autorelease];
      }
      id<GeogebraCommonKernelArithmeticExpressionValue> partExp;
      GeogebraCommonKernelArithmeticMyDouble *coeffMyDouble = nil;
      if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(coeff, 1.0)) {
        partExp = powerExp;
      }
      else {
        coeffMyDouble = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, coeff) autorelease];
        partExp = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, coeffMyDouble, GeogebraCommonPluginOperationEnum_get_MULTIPLY(), powerExp) autorelease];
      }
      if (series == nil) {
        series = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, partExp) autorelease];
      }
      else {
        if (negativeCoeff) {
          if (coeffMyDouble != nil) [coeffMyDouble setWithDouble:-coeff];
          series = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, series, GeogebraCommonPluginOperationEnum_get_MINUS(), partExp) autorelease];
        }
        else {
          series = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, series, GeogebraCommonPluginOperationEnum_get_PLUS(), partExp) autorelease];
        }
      }
    }
  }
  if (series == nil) {
    series = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 0) autorelease]) autorelease];
  }
  GeogebraCommonKernelArithmeticFunction *seriesFun = [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(series, fVar) autorelease];
  [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setFunctionWithGeogebraCommonKernelArithmeticFunction:seriesFun];
  [self->g_ setDefinedWithBoolean:YES];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedAlgoTaylorSeries)
