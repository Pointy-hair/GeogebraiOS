//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoCountIf3.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoCountIf3.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgorithmSet.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/main/MyError.h"

@interface GeogebraCommonKernelAlgosAlgoCountIf3 () {
 @public
  GeogebraCommonKernelGeosGeoList *inputList_;
  GeogebraCommonKernelGeosGeoNumeric *result_;
  GeogebraCommonKernelGeosGeoBoolean *bool__;
  GeogebraCommonKernelGeosGeoElement *var_;
  jint size_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoCountIf3, inputList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoCountIf3, result_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoCountIf3, bool__, GeogebraCommonKernelGeosGeoBoolean *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoCountIf3, var_, GeogebraCommonKernelGeosGeoElement *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoCountIf3_compute(GeogebraCommonKernelAlgosAlgoCountIf3 *self);

@implementation GeogebraCommonKernelAlgosAlgoCountIf3

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)bool_
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)var
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)inputList {
  GeogebraCommonKernelAlgosAlgoCountIf3_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoList_(self, cons, label, bool_, var, inputList);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_CountIf();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, bool__);
  IOSObjectArray_Set(input_, 1, var_);
  IOSObjectArray_Set(input_, 2, inputList_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:result_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoNumeric *)getResult {
  return result_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoCountIf3_compute(self);
}

- (void)dealloc {
  RELEASE_(inputList_);
  RELEASE_(result_);
  RELEASE_(bool__);
  RELEASE_(var_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoBoolean:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoList:", "AlgoCountIf3", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inputList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "bool__", "bool", 0x2, "Lgeogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
    { "var_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "size_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoCountIf3 = { 2, "AlgoCountIf3", "geogebra.common.kernel.algos", NULL, 0x1, 5, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoCountIf3;
}

@end

void GeogebraCommonKernelAlgosAlgoCountIf3_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoCountIf3 *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoBoolean *bool_, GeogebraCommonKernelGeosGeoElement *var, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoCountIf3_set_inputList_(self, inputList);
  GeogebraCommonKernelAlgosAlgoCountIf3_set_var_(self, var);
  GeogebraCommonKernelAlgosAlgoCountIf3_set_bool__(self, bool_);
  GeogebraCommonKernelAlgosAlgoCountIf3_setAndConsume_result_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoCountIf3_compute(self);
  [self->result_ setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoCountIf3 *new_GeogebraCommonKernelAlgosAlgoCountIf3_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoBoolean *bool_, GeogebraCommonKernelGeosGeoElement *var, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelAlgosAlgoCountIf3 *self = [GeogebraCommonKernelAlgosAlgoCountIf3 alloc];
  GeogebraCommonKernelAlgosAlgoCountIf3_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoList_(self, cons, label, bool_, var, inputList);
  return self;
}

void GeogebraCommonKernelAlgosAlgoCountIf3_compute(GeogebraCommonKernelAlgosAlgoCountIf3 *self) {
  self->size_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->inputList_)) size];
  if (![self->inputList_ isDefined]) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setUndefined];
    return;
  }
  jint count = 0;
  if (self->size_ > 0) {
    @try {
      for (jint i = 0; i < self->size_; i++) {
        GeogebraCommonKernelGeosGeoElement *geo = [self->inputList_ getWithInt:i];
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->var_)) setWithGeogebraCommonKernelGeosGeoElement:geo];
        [self setStopUpdateCascadeWithBoolean:YES];
        [((GeogebraCommonKernelAlgosAlgorithmSet *) nil_chk([self->var_ getAlgoUpdateSet])) updateAllUntilWithGeogebraCommonKernelAlgosAlgoElement:[((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(self->bool__)) getParentAlgorithm]];
        if ([self->bool__ getBoolean]) {
          count++;
        }
        [self setStopUpdateCascadeWithBoolean:NO];
      }
    }
    @catch (GeogebraCommonMainMyError *e) {
      [((GeogebraCommonMainMyError *) nil_chk(e)) printStackTrace];
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setUndefined];
      return;
    }
  }
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setValueWithDouble:count];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoCountIf3)
