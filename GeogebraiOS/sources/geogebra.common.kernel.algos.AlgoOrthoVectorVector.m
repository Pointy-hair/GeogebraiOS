//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoOrthoVectorVector.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/CircularDefinitionException.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoOrthoVectorVector.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoVector.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/Localization.h"

@interface GeogebraCommonKernelAlgosAlgoOrthoVectorVector () {
 @public
  GeogebraCommonKernelGeosGeoVector *v_;
  GeogebraCommonKernelGeosGeoVector *n_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoOrthoVectorVector, v_, GeogebraCommonKernelGeosGeoVector *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoOrthoVectorVector, n_, GeogebraCommonKernelGeosGeoVector *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoOrthoVectorVector_compute(GeogebraCommonKernelAlgosAlgoOrthoVectorVector *self);

@implementation GeogebraCommonKernelAlgosAlgoOrthoVectorVector

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                   withGeogebraCommonKernelGeosGeoVector:(GeogebraCommonKernelGeosGeoVector *)v {
  GeogebraCommonKernelAlgosAlgoOrthoVectorVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoVector_(self, cons, label, v);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_OrthogonalVector();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_ORTHOGONAL;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, v_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:n_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoVector *)getVector {
  return n_;
}

- (GeogebraCommonKernelGeosGeoVector *)getv {
  return v_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoOrthoVectorVector_compute(self);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"VectorPerpendicularToA" withNSString:[((GeogebraCommonKernelGeosGeoVector *) nil_chk(v_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(v_);
  RELEASE_(n_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoVector:", "AlgoOrthoVectorVector", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getVector", NULL, "Lgeogebra.common.kernel.geos.GeoVector;", 0x1, NULL, NULL },
    { "getv", NULL, "Lgeogebra.common.kernel.geos.GeoVector;", 0x0, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "v_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoVector;", NULL, NULL,  },
    { "n_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoVector;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoOrthoVectorVector = { 2, "AlgoOrthoVectorVector", "geogebra.common.kernel.algos", NULL, 0x1, 8, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoOrthoVectorVector;
}

@end

void GeogebraCommonKernelAlgosAlgoOrthoVectorVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoVector_(GeogebraCommonKernelAlgosAlgoOrthoVectorVector *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoVector *v) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoOrthoVectorVector_set_v_(self, v);
  GeogebraCommonKernelAlgosAlgoOrthoVectorVector_setAndConsume_n_(self, new_GeogebraCommonKernelGeosGeoVector_initWithGeogebraCommonKernelConstruction_(cons));
  id<GeogebraCommonKernelKernelNDGeoPointND> possStartPoint = [((GeogebraCommonKernelGeosGeoVector *) nil_chk(v)) getStartPoint];
  if (possStartPoint != nil && [possStartPoint isLabelSet]) {
    @try {
      [self->n_ setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:possStartPoint];
    }
    @catch (GeogebraCommonKernelCircularDefinitionException *e) {
    }
  }
  [self setInputOutput];
  self->n_->z_ = 0.0;
  GeogebraCommonKernelAlgosAlgoOrthoVectorVector_compute(self);
  [self->n_ setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoOrthoVectorVector *new_GeogebraCommonKernelAlgosAlgoOrthoVectorVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoVector_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoVector *v) {
  GeogebraCommonKernelAlgosAlgoOrthoVectorVector *self = [GeogebraCommonKernelAlgosAlgoOrthoVectorVector alloc];
  GeogebraCommonKernelAlgosAlgoOrthoVectorVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoVector_(self, cons, label, v);
  return self;
}

void GeogebraCommonKernelAlgosAlgoOrthoVectorVector_compute(GeogebraCommonKernelAlgosAlgoOrthoVectorVector *self) {
  ((GeogebraCommonKernelGeosGeoVector *) nil_chk(self->n_))->x_ = -((GeogebraCommonKernelGeosGeoVector *) nil_chk(self->v_))->y_;
  self->n_->y_ = self->v_->x_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoOrthoVectorVector)
