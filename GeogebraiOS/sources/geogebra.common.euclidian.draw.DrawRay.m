//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/draw/DrawRay.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GBasicStroke.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GFont.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/awt/GLine2D.h"
#include "geogebra/common/awt/GPoint2D.h"
#include "geogebra/common/awt/GRectangle.h"
#include "geogebra/common/euclidian/Drawable.h"
#include "geogebra/common/euclidian/EuclidianController.h"
#include "geogebra/common/euclidian/EuclidianStatic.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/clipping/ClipLine.h"
#include "geogebra/common/euclidian/draw/DrawRay.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/ConstructionDefaults.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/util/MyMath.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonEuclidianDrawDrawRay () {
 @public
  id<GeogebraCommonKernelKernelNDGeoLineND> ray_;
  jboolean isVisible_, labelVisible_;
  JavaUtilArrayList *points_;
  id<GeogebraCommonAwtGLine2D> line_;
  IOSDoubleArray *a_;
  IOSDoubleArray *v_;
  GeogebraCommonKernelMatrixCoords *tmpCoords2_;
  GeogebraCommonAwtGPoint2D *endPoint_;
}

- (void)setClippedLine;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawRay, ray_, id<GeogebraCommonKernelKernelNDGeoLineND>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawRay, points_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawRay, line_, id<GeogebraCommonAwtGLine2D>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawRay, a_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawRay, v_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawRay, tmpCoords2_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawRay, endPoint_, GeogebraCommonAwtGPoint2D *)

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawRay_update(GeogebraCommonEuclidianDrawDrawRay *self);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawRay_setClippedLine(GeogebraCommonEuclidianDrawDrawRay *self);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawRay_drawTraceWithGeogebraCommonAwtGGraphics2D_(GeogebraCommonEuclidianDrawDrawRay *self, id<GeogebraCommonAwtGGraphics2D> g2);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawRay_updatePreview(GeogebraCommonEuclidianDrawDrawRay *self);

@implementation GeogebraCommonEuclidianDrawDrawRay

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
                   withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)ray {
  GeogebraCommonEuclidianDrawDrawRay_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoLineND_(self, view, ray);
  return self;
}

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
                                       withJavaUtilArrayList:(JavaUtilArrayList *)points {
  GeogebraCommonEuclidianDrawDrawRay_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(self, view, points);
  return self;
}

- (void)update {
  GeogebraCommonEuclidianDrawDrawRay_update(self);
}

- (void)updateWithBoolean:(jboolean)showLabel {
  isVisible_ = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isEuclidianVisible];
  if (isVisible_) {
    GeogebraCommonKernelMatrixCoords *equation = [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(ray_)) getCartesianEquationVectorWithGeogebraCommonKernelMatrixCoordMatrix:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getMatrix]];
    if (equation == nil) {
      isVisible_ = NO;
      return;
    }
    GeogebraCommonKernelMatrixCoords *A = [view_ getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[ray_ getStartInhomCoords]];
    if (tmpCoords2_ == nil) {
      GeogebraCommonEuclidianDrawDrawRay_setAndConsume_tmpCoords2_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(2));
    }
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords2_)) setXWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(equation)) getY]];
    [tmpCoords2_ setYWithDouble:[equation getX]];
    [self updateWithGeogebraCommonKernelMatrixCoords:A withGeogebraCommonKernelMatrixCoords:tmpCoords2_ withBoolean:showLabel];
  }
}

- (void)updateWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)startPoint
              withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)direction
                                       withBoolean:(jboolean)showLabel {
  labelVisible_ = (showLabel && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isLabelVisible]);
  [self updateStrokesWithGeogebraCommonKernelKernelNDGeoElementND:ray_];
  *IOSDoubleArray_GetRef(nil_chk(a_), 0) = [((GeogebraCommonKernelMatrixCoords *) nil_chk(startPoint)) getX];
  *IOSDoubleArray_GetRef(a_, 1) = [startPoint getY];
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toScreenCoordsWithDoubleArray:a_];
  *IOSDoubleArray_GetRef(nil_chk(v_), 0) = [((GeogebraCommonKernelMatrixCoords *) nil_chk(direction)) getX] * [view_ getXscale];
  *IOSDoubleArray_GetRef(v_, 1) = [direction getY] * [view_ getYscale];
  GeogebraCommonEuclidianDrawDrawRay_setClippedLine(self);
  if (![((id<GeogebraCommonAwtGLine2D>) nil_chk(line_)) intersectsWithInt:0 withInt:0 withInt:[view_ getWidth] withInt:[view_ getHeight]]) {
    isVisible_ = NO;
  }
  if ([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(ray_)) getTrace]) {
    isTracing__ = YES;
    id<GeogebraCommonAwtGGraphics2D> g2 = [view_ getBackgroundGraphics];
    if (g2 != nil) GeogebraCommonEuclidianDrawDrawRay_drawTraceWithGeogebraCommonAwtGGraphics2D_(self, g2);
  }
  else {
    if (isTracing__) {
      isTracing__ = NO;
    }
  }
  if (labelVisible_) {
    GeogebraCommonEuclidianDrawable_set_labelDesc_(self, [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) getLabelDescription]);
    jdouble nx = IOSDoubleArray_Get(v_, 0);
    jdouble ny = -IOSDoubleArray_Get(v_, 1);
    jdouble length = GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(nx, ny);
    jdouble unit;
    if (length > 0.0) {
      unit = 16.0 / length;
    }
    else {
      nx = 0.0;
      ny = 1.0;
      unit = 16.0;
    }
    xLabel_ = J2ObjCFpToInt((IOSDoubleArray_Get(a_, 0) + IOSDoubleArray_Get(v_, 0) / 2.0 + nx * unit));
    yLabel_ = J2ObjCFpToInt((IOSDoubleArray_Get(a_, 1) + IOSDoubleArray_Get(v_, 1) / 2.0 + ny * unit));
    [self addLabelOffset];
  }
}

- (void)setClippedLine {
  GeogebraCommonEuclidianDrawDrawRay_setClippedLine(self);
}

- (void)drawWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  if (isVisible_) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[geo_ getSelColor]];
      [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:selStroke_];
      [g2 drawWithGeogebraCommonAwtGShape:line_];
    }
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[self getObjectColor]];
    [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:objStroke_];
    [g2 drawWithGeogebraCommonAwtGShape:line_];
    if (labelVisible_) {
      [g2 setPaintWithGeogebraCommonAwtGPaint:[geo_ getLabelColor]];
      [g2 setFontWithGeogebraCommonAwtGFont:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getFontLine]];
      [self drawLabelWithGeogebraCommonAwtGGraphics2D:g2];
    }
  }
}

- (void)setStrokeWithGeogebraCommonAwtGBasicStroke:(id<GeogebraCommonAwtGBasicStroke>)objStroke {
  GeogebraCommonEuclidianDrawable_set_objStroke_(self, objStroke);
}

- (void)drawTraceWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  GeogebraCommonEuclidianDrawDrawRay_drawTraceWithGeogebraCommonAwtGGraphics2D_(self, g2);
}

- (void)updatePreview {
  GeogebraCommonEuclidianDrawDrawRay_updatePreview(self);
}

- (void)updateMousePosWithDouble:(jdouble)mouseRWx
                      withDouble:(jdouble)mouseRWy {
  jdouble xRW = mouseRWx;
  jdouble yRW = mouseRWy;
  if (isVisible_) {
    jdouble xx = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toScreenCoordXWithDouble:xRW];
    jdouble yy = [view_ toScreenCoordYWithDouble:yRW];
    if ([((JavaUtilArrayList *) nil_chk(points_)) size] == 1 && [((GeogebraCommonEuclidianEuclidianController *) nil_chk([view_ getEuclidianController])) isAltDown]) {
      GeogebraCommonKernelGeosGeoPoint *p = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([points_ getWithInt:0], [GeogebraCommonKernelGeosGeoPoint class]);
      jdouble px = ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p))->inhomX_;
      jdouble py = p->inhomY_;
      jdouble angle = JavaLangMath_atan2WithDouble_withDouble_(yRW - py, xRW - px) * 180 / JavaLangMath_PI;
      jdouble radius = JavaLangMath_sqrtWithDouble_((py - yRW) * (py - yRW) + (px - xRW) * (px - xRW));
      angle = JavaLangMath_roundWithDouble_(angle / 15) * 15;
      xRW = px + radius * JavaLangMath_cosWithDouble_(angle * JavaLangMath_PI / 180);
      yRW = py + radius * JavaLangMath_sinWithDouble_(angle * JavaLangMath_PI / 180);
      [((GeogebraCommonAwtGPoint2D *) nil_chk(endPoint_)) setXWithDouble:xRW];
      [endPoint_ setYWithDouble:yRW];
      [((GeogebraCommonEuclidianEuclidianController *) nil_chk([view_ getEuclidianController])) setLineEndPointWithGeogebraCommonAwtGPoint2D:endPoint_];
      xx = [view_ getxZero] + xRW * [view_ getXscale];
      yy = [view_ getyZero] - yRW * [view_ getYscale];
    }
    else [((GeogebraCommonEuclidianEuclidianController *) nil_chk([view_ getEuclidianController])) setLineEndPointWithGeogebraCommonAwtGPoint2D_Double:nil];
    *IOSDoubleArray_GetRef(nil_chk(v_), 0) = xx - IOSDoubleArray_Get(nil_chk(a_), 0);
    *IOSDoubleArray_GetRef(v_, 1) = yy - IOSDoubleArray_Get(a_, 1);
    GeogebraCommonEuclidianDrawDrawRay_setClippedLine(self);
  }
}

- (void)drawPreviewWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  if (isVisible_) {
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) getObjectColor]];
    [self updateStrokesWithGeogebraCommonKernelKernelNDGeoElementND:geo_];
    [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:objStroke_];
    [g2 drawWithGeogebraCommonAwtGShape:line_];
  }
}

- (void)disposePreview {
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  return [((id<GeogebraCommonAwtGLine2D>) nil_chk(line_)) intersectsWithInt:x - hitThreshold withInt:y - hitThreshold withInt:2 * hitThreshold withInt:2 * hitThreshold];
}

- (jboolean)isInsideWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  return NO;
}

- (GeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonEuclidianDrawable_set_geo_(self, geo);
}

- (jboolean)intersectsRectangleWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  return [((id<GeogebraCommonAwtGLine2D>) nil_chk(line_)) intersectsWithGeogebraCommonAwtGRectangle2D:rect];
}

- (void)setIsVisible {
  isVisible_ = YES;
}

- (void)dealloc {
  RELEASE_(ray_);
  RELEASE_(points_);
  RELEASE_(line_);
  RELEASE_(a_);
  RELEASE_(v_);
  RELEASE_(tmpCoords2_);
  RELEASE_(endPoint_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonEuclidianEuclidianView:withGeogebraCommonKernelKernelNDGeoLineND:", "DrawRay", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonEuclidianEuclidianView:withJavaUtilArrayList:", "DrawRay", NULL, 0x1, NULL, NULL },
    { "update", NULL, "V", 0x11, NULL, NULL },
    { "updateWithBoolean:", "update", "V", 0x1, NULL, NULL },
    { "updateWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withBoolean:", "update", "V", 0x1, NULL, NULL },
    { "setClippedLine", NULL, "V", 0x2, NULL, NULL },
    { "drawWithGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x11, NULL, NULL },
    { "setStrokeWithGeogebraCommonAwtGBasicStroke:", "setStroke", "V", 0x11, NULL, NULL },
    { "drawTraceWithGeogebraCommonAwtGGraphics2D:", "drawTrace", "V", 0x11, NULL, NULL },
    { "updatePreview", NULL, "V", 0x11, NULL, NULL },
    { "updateMousePosWithDouble:withDouble:", "updateMousePos", "V", 0x11, NULL, NULL },
    { "drawPreviewWithGeogebraCommonAwtGGraphics2D:", "drawPreview", "V", 0x11, NULL, NULL },
    { "disposePreview", NULL, "V", 0x1, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x11, NULL, NULL },
    { "isInsideWithGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x11, NULL, NULL },
    { "getGeoElement", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setGeoElementWithGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x1, NULL, NULL },
    { "intersectsRectangleWithGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "setIsVisible", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ray_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoLineND;", NULL, NULL,  },
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "labelVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "points_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/kernelND/GeoPointND;>;",  },
    { "line_", NULL, 0x2, "Lgeogebra.common.awt.GLine2D;", NULL, NULL,  },
    { "a_", NULL, 0x2, "[D", NULL, NULL,  },
    { "v_", NULL, 0x2, "[D", NULL, NULL,  },
    { "tmpCoords2_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "endPoint_", NULL, 0x2, "Lgeogebra.common.awt.GPoint2D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianDrawDrawRay = { 2, "DrawRay", "geogebra.common.euclidian.draw", NULL, 0x1, 19, methods, 9, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianDrawDrawRay;
}

@end

void GeogebraCommonEuclidianDrawDrawRay_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonEuclidianDrawDrawRay *self, GeogebraCommonEuclidianEuclidianView *view, id<GeogebraCommonKernelKernelNDGeoLineND> ray) {
  GeogebraCommonEuclidianDrawable_init(self);
  GeogebraCommonEuclidianDrawDrawRay_set_line_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newLine2D]);
  GeogebraCommonEuclidianDrawDrawRay_setAndConsume_a_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonEuclidianDrawDrawRay_setAndConsume_v_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonEuclidianDrawDrawRay_set_endPoint_(self, [GeogebraCommonFactoriesAwtFactory_get_prototype_() newPoint2D]);
  GeogebraCommonEuclidianDrawable_set_view_(self, view);
  GeogebraCommonEuclidianDrawDrawRay_set_ray_(self, ray);
  GeogebraCommonEuclidianDrawable_set_geo_(self, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(ray, [GeogebraCommonKernelGeosGeoElement class]));
  GeogebraCommonEuclidianDrawDrawRay_update(self);
}

GeogebraCommonEuclidianDrawDrawRay *new_GeogebraCommonEuclidianDrawDrawRay_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonEuclidianEuclidianView *view, id<GeogebraCommonKernelKernelNDGeoLineND> ray) {
  GeogebraCommonEuclidianDrawDrawRay *self = [GeogebraCommonEuclidianDrawDrawRay alloc];
  GeogebraCommonEuclidianDrawDrawRay_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoLineND_(self, view, ray);
  return self;
}

void GeogebraCommonEuclidianDrawDrawRay_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(GeogebraCommonEuclidianDrawDrawRay *self, GeogebraCommonEuclidianEuclidianView *view, JavaUtilArrayList *points) {
  GeogebraCommonEuclidianDrawable_init(self);
  GeogebraCommonEuclidianDrawDrawRay_set_line_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newLine2D]);
  GeogebraCommonEuclidianDrawDrawRay_setAndConsume_a_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonEuclidianDrawDrawRay_setAndConsume_v_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonEuclidianDrawDrawRay_set_endPoint_(self, [GeogebraCommonFactoriesAwtFactory_get_prototype_() newPoint2D]);
  GeogebraCommonEuclidianDrawable_set_view_(self, view);
  GeogebraCommonEuclidianDrawDrawRay_set_points_(self, points);
  GeogebraCommonEuclidianDrawable_set_geo_(self, [((GeogebraCommonKernelConstructionDefaults *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view)) getKernel])) getConstruction])) getConstructionDefaults])) getDefaultGeoWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_RAY]);
  GeogebraCommonEuclidianDrawDrawRay_updatePreview(self);
}

GeogebraCommonEuclidianDrawDrawRay *new_GeogebraCommonEuclidianDrawDrawRay_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(GeogebraCommonEuclidianEuclidianView *view, JavaUtilArrayList *points) {
  GeogebraCommonEuclidianDrawDrawRay *self = [GeogebraCommonEuclidianDrawDrawRay alloc];
  GeogebraCommonEuclidianDrawDrawRay_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(self, view, points);
  return self;
}

void GeogebraCommonEuclidianDrawDrawRay_update(GeogebraCommonEuclidianDrawDrawRay *self) {
  [self updateWithBoolean:YES];
}

void GeogebraCommonEuclidianDrawDrawRay_setClippedLine(GeogebraCommonEuclidianDrawDrawRay *self) {
  jboolean onscreenA = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) isOnScreenWithDoubleArray:self->a_];
  jdouble lambda;
  if (JavaLangMath_absWithDouble_(IOSDoubleArray_Get(nil_chk(self->v_), 0)) > JavaLangMath_absWithDouble_(IOSDoubleArray_Get(self->v_, 1))) {
    if (IOSDoubleArray_Get(self->v_, 0) > 0) lambda = ([self->view_ getWidth] - IOSDoubleArray_Get(nil_chk(self->a_), 0)) / IOSDoubleArray_Get(self->v_, 0);
    else lambda = -IOSDoubleArray_Get(nil_chk(self->a_), 0) / IOSDoubleArray_Get(self->v_, 0);
  }
  else {
    if (IOSDoubleArray_Get(self->v_, 1) > 0) lambda = ([self->view_ getHeight] - IOSDoubleArray_Get(nil_chk(self->a_), 1)) / IOSDoubleArray_Get(self->v_, 1);
    else lambda = -IOSDoubleArray_Get(nil_chk(self->a_), 1) / IOSDoubleArray_Get(self->v_, 1);
  }
  if (lambda < 0) {
    self->isVisible_ = NO;
    return;
  }
  if (onscreenA) {
    [((id<GeogebraCommonAwtGLine2D>) nil_chk(self->line_)) setLineWithDouble:IOSDoubleArray_Get(nil_chk(self->a_), 0) withDouble:IOSDoubleArray_Get(self->a_, 1) withDouble:IOSDoubleArray_Get(self->a_, 0) + lambda * IOSDoubleArray_Get(self->v_, 0) withDouble:IOSDoubleArray_Get(self->a_, 1) + lambda * IOSDoubleArray_Get(self->v_, 1)];
  }
  else {
    IOSObjectArray *clippedPoints = GeogebraCommonEuclidianClippingClipLine_getClippedWithDouble_withDouble_withDouble_withDouble_withInt_withInt_withInt_withInt_(IOSDoubleArray_Get(nil_chk(self->a_), 0), IOSDoubleArray_Get(self->a_, 1), IOSDoubleArray_Get(self->a_, 0) + lambda * IOSDoubleArray_Get(self->v_, 0), IOSDoubleArray_Get(self->a_, 1) + lambda * IOSDoubleArray_Get(self->v_, 1), -GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE, [self->view_ getWidth] + GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE, -GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE, [self->view_ getHeight] + GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE);
    if (clippedPoints == nil) {
      self->isVisible_ = NO;
    }
    else {
      [((id<GeogebraCommonAwtGLine2D>) nil_chk(self->line_)) setLineWithDouble:[((GeogebraCommonAwtGPoint2D *) nil_chk(IOSObjectArray_Get(clippedPoints, 0))) getX] withDouble:[((GeogebraCommonAwtGPoint2D *) nil_chk(IOSObjectArray_Get(clippedPoints, 0))) getY] withDouble:[((GeogebraCommonAwtGPoint2D *) nil_chk(IOSObjectArray_Get(clippedPoints, 1))) getX] withDouble:[((GeogebraCommonAwtGPoint2D *) nil_chk(IOSObjectArray_Get(clippedPoints, 1))) getY]];
    }
  }
}

void GeogebraCommonEuclidianDrawDrawRay_drawTraceWithGeogebraCommonAwtGGraphics2D_(GeogebraCommonEuclidianDrawDrawRay *self, id<GeogebraCommonAwtGGraphics2D> g2) {
  [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getObjectColor]];
  [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:self->objStroke_];
  [g2 drawWithGeogebraCommonAwtGShape:self->line_];
}

void GeogebraCommonEuclidianDrawDrawRay_updatePreview(GeogebraCommonEuclidianDrawDrawRay *self) {
  self->isVisible_ = ([((JavaUtilArrayList *) nil_chk(self->points_)) size] == 1);
  if (self->isVisible_) {
    GeogebraCommonKernelMatrixCoords *coords = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([self->points_ getWithInt:0])) getInhomCoordsInD3]];
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getWithDoubleArray:self->a_];
    [self->view_ toScreenCoordsWithDoubleArray:self->a_];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianDrawDrawRay)
