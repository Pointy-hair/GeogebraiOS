//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/commands/CmdFunction.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoDependentFunction.h"
#include "geogebra/common/kernel/algos/AlgoFunctionFreehand.h"
#include "geogebra/common/kernel/algos/AlgoFunctionInterval.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/arithmetic/Traversing.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/commands/CmdFunction.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoFunctionable.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/main/MyError.h"
#include "geogebra/common/plugin/Operation.h"
#include "geogebra/common/util/debug/Log.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonKernelCommandsCmdFunction ()

- (GeogebraCommonKernelArithmeticExpressionNode *)wrapWithGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)boolFun
                                           withGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)fv
                                                                                  withBoolean:(jboolean)mayUseIndependent;

- (GeogebraCommonKernelGeosGeoFunction *)FunctionWithNSString:(NSString *)label
                      withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f
                withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)a
                withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)b;

@end

__attribute__((unused)) static GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelCommandsCmdFunction_wrapWithGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticFunctionVariable_withBoolean_(GeogebraCommonKernelCommandsCmdFunction *self, GeogebraCommonKernelGeosGeoFunction *boolFun, GeogebraCommonKernelArithmeticFunctionVariable *fv, jboolean mayUseIndependent);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoFunction *GeogebraCommonKernelCommandsCmdFunction_FunctionWithNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelCommandsCmdFunction *self, NSString *label, GeogebraCommonKernelGeosGeoFunction *f, id<GeogebraCommonKernelArithmeticNumberValue> a, id<GeogebraCommonKernelArithmeticNumberValue> b);

@implementation GeogebraCommonKernelCommandsCmdFunction

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelCommandsCmdFunction_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSBooleanArray *ok = [IOSBooleanArray arrayWithLength:n];
  NSString *varName = nil;
  GeogebraCommonKernelArithmeticExpressionNode *expr;
  jboolean mayUseIndependent;
  NSString *label;
  {
    IOSObjectArray *arg;
    switch (n) {
      case 1:
      arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoList]) {
        GeogebraCommonKernelAlgosAlgoFunctionFreehand *algo = [new_GeogebraCommonKernelAlgosAlgoFunctionFreehand_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(cons_, [c getLabel], (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoList class])) autorelease];
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [algo getFunction] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      case 4:
      varName = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:1])) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
      [c setArgumentWithInt:1 withGeogebraCommonKernelArithmeticExpressionNode:[c getArgumentWithInt:2]];
      [c setArgumentWithInt:2 withGeogebraCommonKernelArithmeticExpressionNode:[c getArgumentWithInt:3]];
      case 3:
      if (![((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isFileLoading]) {
        GeogebraCommonKernelArithmeticFunctionVariable *fv = nil;
        if (varName != nil || [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getConstruction])) getRegisteredFunctionVariable] != nil) {
          if (varName == nil) varName = [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getConstruction])) getRegisteredFunctionVariable];
          fv = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernelA_, varName) autorelease];
          jint r = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:0])) replaceVariablesWithNSString:varName withGeogebraCommonKernelArithmeticFunctionVariable:fv];
          [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:0])) replaceVariablesWithNSString:varName withGeogebraCommonKernelArithmeticFunctionVariable:fv];
          if (r > 0) {
            [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:1])) replaceVariablesWithNSString:varName withGeogebraCommonKernelArithmeticFunctionVariable:fv];
          }
        }
        arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
        if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoFunctionable])) && (*IOSBooleanArray_GetRef(ok, 1) = ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 1)])) && (*IOSBooleanArray_GetRef(ok, 2) = ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)]))) {
          label = [c getLabel];
          GeogebraCommonKernelGeosGeoFunction *geoFun = [((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction];
          id<GeogebraCommonKernelGeosGeoNumberValue> low = (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelGeosGeoNumberValue));
          id<GeogebraCommonKernelGeosGeoNumberValue> high = (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelGeosGeoNumberValue));
          if (fv == nil) {
            fv = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_(kernelA_) autorelease];
          }
          GeogebraCommonKernelArithmeticExpressionNode *left = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernelA_, low, GeogebraCommonPluginOperationEnum_get_LESS_EQUAL(), fv) autorelease];
          GeogebraCommonKernelArithmeticExpressionNode *right = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernelA_, fv, GeogebraCommonPluginOperationEnum_get_LESS_EQUAL(), high) autorelease];
          GeogebraCommonKernelArithmeticExpressionNode *interval = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernelA_, left, GeogebraCommonPluginOperationEnum_get_AND_INTERVAL(), right) autorelease];
          GeogebraCommonKernelArithmeticFunction *intervalFun = [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(interval, fv) autorelease];
          GeogebraCommonKernelAlgosAlgoDependentFunction *intervalAlgo = [new_GeogebraCommonKernelAlgosAlgoDependentFunction_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunction_(cons_, intervalFun) autorelease];
          [cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:intervalAlgo];
          GeogebraCommonKernelGeosGeoFunction *intervalGeo = [intervalAlgo getFunction];
          JavaUtilArrayList *conditions = [new_JavaUtilArrayList_init() autorelease];
          [conditions addWithId:intervalGeo];
          mayUseIndependent = NO;
          expr = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernelA_, GeogebraCommonKernelCommandsCmdFunction_wrapWithGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticFunctionVariable_withBoolean_(self, [conditions getWithInt:0], fv, mayUseIndependent), GeogebraCommonPluginOperationEnum_get_IF(), GeogebraCommonKernelCommandsCmdFunction_wrapWithGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticFunctionVariable_withBoolean_(self, geoFun, fv, mayUseIndependent)) autorelease];
          GeogebraCommonUtilDebugLog_debugWithId_(expr);
          GeogebraCommonUtilDebugLog_debugWithId_(IOSObjectArray_Get(arg, 0));
          GeogebraCommonKernelArithmeticFunction *fun = [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(expr, fv) autorelease];
          if (mayUseIndependent) {
            return [IOSObjectArray arrayWithObjects:(id[]){ [new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunction_(cons_, label, fun) autorelease] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
          }
          GeogebraCommonKernelAlgosAlgoDependentFunction *algo = [new_GeogebraCommonKernelAlgosAlgoDependentFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunction_(cons_, label, fun) autorelease];
          return [IOSObjectArray arrayWithObjects:(id[]){ [algo getFunction] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        }
        @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelCommandsCommandProcessor_getBadArgWithBooleanArray_withGeogebraCommonKernelGeosGeoElementArray_(ok, arg)];
      }
      if (varName != nil || [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getConstruction])) getRegisteredFunctionVariable] != nil) {
        if (varName == nil) varName = [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getConstruction])) getRegisteredFunctionVariable];
        GeogebraCommonKernelArithmeticFunctionVariable *fv = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernelA_, varName) autorelease];
        jint r = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:0])) replaceVariablesWithNSString:varName withGeogebraCommonKernelArithmeticFunctionVariable:fv];
        [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:0])) replaceVariablesWithNSString:varName withGeogebraCommonKernelArithmeticFunctionVariable:fv];
        if (r > 0) {
          jboolean oldFlag = [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getConstruction])) isSuppressLabelsActive];
          [((GeogebraCommonKernelConstruction *) nil_chk([kernelA_ getConstruction])) setSuppressLabelCreationWithBoolean:YES];
          [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:1])) resolveVariables];
          [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:2])) resolveVariables];
          GeogebraCommonKernelGeosGeoFunction *condFun;
          if ([[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:0])) unwrap] isKindOfClass:[GeogebraCommonKernelArithmeticCommand class]]) {
            condFun = (GeogebraCommonKernelGeosGeoFunction *) check_class_cast(IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernelA_ getAlgebraProcessor])) processCommandWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *) check_class_cast([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:0])) unwrap], [GeogebraCommonKernelArithmeticCommand class]) withBoolean:YES]), 0), [GeogebraCommonKernelGeosGeoFunction class]);
          }
          else {
            [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:0])) resolveVariables];
            condFun = (GeogebraCommonKernelGeosGeoFunction *) check_class_cast(IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernelA_ getAlgebraProcessor])) processFunctionWithGeogebraCommonKernelArithmeticFunction:[new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_([c getArgumentWithInt:0], fv) autorelease]]), 0), [GeogebraCommonKernelGeosGeoFunction class]);
          }
          GeogebraCommonKernelGeosGeoElement *low = IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernelA_ getAlgebraProcessor])) processExpressionNodeWithGeogebraCommonKernelArithmeticExpressionNode:[c getArgumentWithInt:1]]), 0);
          GeogebraCommonKernelGeosGeoElement *high = IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernelA_ getAlgebraProcessor])) processExpressionNodeWithGeogebraCommonKernelArithmeticExpressionNode:[c getArgumentWithInt:2]]), 0);
          if (!([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:low])) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:low];
          if (!([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:high])) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:high];
          [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:1])) replaceVariablesWithNSString:varName withGeogebraCommonKernelArithmeticFunctionVariable:fv];
          [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:0])) resolveVariables];
          [((GeogebraCommonKernelConstruction *) nil_chk([kernelA_ getConstruction])) setSuppressLabelCreationWithBoolean:oldFlag];
          return [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelCommandsCmdFunction_FunctionWithNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, [c getLabel], condFun, (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(low, @protocol(GeogebraCommonKernelArithmeticNumberValue)), (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(high, @protocol(GeogebraCommonKernelArithmeticNumberValue))) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        }
      }
      arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
      if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoFunctionable])) && (*IOSBooleanArray_GetRef(ok, 1) = ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 1)])) && (*IOSBooleanArray_GetRef(ok, 2) = ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)]))) {
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelCommandsCmdFunction_FunctionWithNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, [c getLabel], [((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction], (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelGeosGeoNumberValue)), (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelGeosGeoNumberValue))) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelCommandsCommandProcessor_getBadArgWithBooleanArray_withGeogebraCommonKernelGeosGeoElementArray_(ok, arg)];
      default:
      @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
    }
  }
}

- (GeogebraCommonKernelArithmeticExpressionNode *)wrapWithGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)boolFun
                                           withGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)fv
                                                                                  withBoolean:(jboolean)mayUseIndependent {
  return GeogebraCommonKernelCommandsCmdFunction_wrapWithGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticFunctionVariable_withBoolean_(self, boolFun, fv, mayUseIndependent);
}

- (GeogebraCommonKernelGeosGeoFunction *)FunctionWithNSString:(NSString *)label
                      withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f
                withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)a
                withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)b {
  return GeogebraCommonKernelCommandsCmdFunction_FunctionWithNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, label, f, a, b);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdFunction", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;", NULL },
    { "wrapWithGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelArithmeticFunctionVariable:withBoolean:", "wrap", "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x2, NULL, NULL },
    { "FunctionWithNSString:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:", "Function", "Lgeogebra.common.kernel.geos.GeoFunction;", 0x12, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCommandsCmdFunction = { 2, "CmdFunction", "geogebra.common.kernel.commands", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCommandsCmdFunction;
}

@end

void GeogebraCommonKernelCommandsCmdFunction_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelCommandsCmdFunction *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelCommandsCmdFunction *new_GeogebraCommonKernelCommandsCmdFunction_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdFunction *self = [GeogebraCommonKernelCommandsCmdFunction alloc];
  GeogebraCommonKernelCommandsCmdFunction_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelCommandsCmdFunction_wrapWithGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticFunctionVariable_withBoolean_(GeogebraCommonKernelCommandsCmdFunction *self, GeogebraCommonKernelGeosGeoFunction *boolFun, GeogebraCommonKernelArithmeticFunctionVariable *fv, jboolean mayUseIndependent) {
  if (!mayUseIndependent) {
    return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernelA_, boolFun, GeogebraCommonPluginOperationEnum_get_FUNCTION(), fv) autorelease];
  }
  return [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(boolFun)) getFunctionExpression])) deepCopyWithGeogebraCommonKernelKernel:self->kernelA_])) traverseWithGeogebraCommonKernelArithmeticTraversing:GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_getReplacerWithGeogebraCommonKernelArithmeticFunctionVariable_(fv)])) wrap];
}

GeogebraCommonKernelGeosGeoFunction *GeogebraCommonKernelCommandsCmdFunction_FunctionWithNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelCommandsCmdFunction *self, NSString *label, GeogebraCommonKernelGeosGeoFunction *f, id<GeogebraCommonKernelArithmeticNumberValue> a, id<GeogebraCommonKernelArithmeticNumberValue> b) {
  GeogebraCommonKernelAlgosAlgoFunctionInterval *algo = [new_GeogebraCommonKernelAlgosAlgoFunctionInterval_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self->cons_, label, f, a, b) autorelease];
  GeogebraCommonKernelGeosGeoFunction *g = [algo getFunction];
  return g;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCommandsCmdFunction)
