//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/dialog/options/model/ShowConditionModel.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/gui/dialog/options/model/OptionsModel.h"
#include "geogebra/common/gui/dialog/options/model/ShowConditionModel.h"
#include "geogebra/common/kernel/CircularDefinitionException.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/main/App.h"

@interface GeogebraCommonGuiDialogOptionsModelShowConditionModel () {
 @public
  GeogebraCommonKernelKernel *kernel_;
  id<GeogebraCommonGuiDialogOptionsModelShowConditionModel_IShowConditionListener> listener_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogOptionsModelShowConditionModel, kernel_, GeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogOptionsModelShowConditionModel, listener_, id<GeogebraCommonGuiDialogOptionsModelShowConditionModel_IShowConditionListener>)

@interface GeogebraCommonGuiDialogOptionsModelShowConditionModel_IShowConditionListener : NSObject
@end

@implementation GeogebraCommonGuiDialogOptionsModelShowConditionModel

- (instancetype)initWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
withGeogebraCommonGuiDialogOptionsModelShowConditionModel_IShowConditionListener:(id<GeogebraCommonGuiDialogOptionsModelShowConditionModel_IShowConditionListener>)listener {
  GeogebraCommonGuiDialogOptionsModelShowConditionModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiDialogOptionsModelShowConditionModel_IShowConditionListener_(self, app, listener);
  return self;
}

- (void)updateProperties {
  NSString *strCond = @"";
  GeogebraCommonKernelGeosGeoElement *geo0 = [self getGeoAtWithInt:0];
  GeogebraCommonKernelGeosGeoBoolean *cond = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo0)) getShowObjectCondition];
  if (cond != nil) {
    strCond = [cond getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_editTemplate_()];
  }
  for (jint i = 0; i < [self getGeosLength]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
    cond = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getShowObjectCondition];
    if (cond != nil) {
      NSString *strCondGeo = [cond getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_editTemplate_()];
      if (![((NSString *) nil_chk(strCond)) isEqual:strCondGeo]) strCond = @"";
    }
  }
  [((id<GeogebraCommonGuiDialogOptionsModelShowConditionModel_IShowConditionListener>) nil_chk(listener_)) setTextWithNSString:strCond];
}

- (jboolean)isValidAtWithInt:(jint)index {
  return [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoAtWithInt:index])) isEuclidianShowable];
}

- (void)applyChangesWithNSString:(NSString *)strCond {
  GeogebraCommonKernelGeosGeoBoolean *cond;
  if (strCond == nil || ((jint) [((NSString *) nil_chk([strCond trim])) length]) == 0) {
    cond = nil;
  }
  else {
    strCond = GeogebraCommonGuiDialogOptionsModelShowConditionModel_replaceEqualsSignsWithNSString_(strCond);
    cond = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgebraProcessor])) evaluateToBooleanWithNSString:strCond];
  }
  if (cond != nil || ((jint) [((NSString *) nil_chk([((NSString *) nil_chk(strCond)) trim])) length]) == 0) {
    @try {
      for (jint i = 0; i < [self getGeosLength]; i++) {
        GeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setShowObjectConditionWithGeogebraCommonKernelGeosGeoBoolean:cond];
        if (cond == nil) [geo updateRepaint];
      }
    }
    @catch (GeogebraCommonKernelCircularDefinitionException *e) {
      [((id<GeogebraCommonGuiDialogOptionsModelShowConditionModel_IShowConditionListener>) nil_chk(listener_)) setTextWithNSString:@""];
      [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) showErrorWithNSString:@"CircularDefinition"];
    }
    if (cond != nil) [cond updateRepaint];
    [((id<GeogebraCommonGuiDialogOptionsModelShowConditionModel_IShowConditionListener>) nil_chk(listener_)) updateSelectionWithNSObjectArray:[self getGeos]];
  }
  else {
    [((id<GeogebraCommonGuiDialogOptionsModelShowConditionModel_IShowConditionListener>) nil_chk(listener_)) setTextWithNSString:strCond];
  }
}

+ (NSString *)replaceEqualsSignsWithNSString:(NSString *)strCond {
  return GeogebraCommonGuiDialogOptionsModelShowConditionModel_replaceEqualsSignsWithNSString_(strCond);
}

- (void)dealloc {
  RELEASE_(kernel_);
  RELEASE_(listener_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonMainApp:withGeogebraCommonGuiDialogOptionsModelShowConditionModel_IShowConditionListener:", "ShowConditionModel", NULL, 0x1, NULL, NULL },
    { "updateProperties", NULL, "V", 0x1, NULL, NULL },
    { "isValidAtWithInt:", "isValidAt", "Z", 0x1, NULL, NULL },
    { "applyChangesWithNSString:", "applyChanges", "V", 0x1, NULL, NULL },
    { "replaceEqualsSignsWithNSString:", "replaceEqualsSigns", "Ljava.lang.String;", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "kernel_", NULL, 0x2, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "listener_", NULL, 0x2, "Lgeogebra.common.gui.dialog.options.model.ShowConditionModel$IShowConditionListener;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.gui.dialog.options.model.ShowConditionModel$IShowConditionListener;"};
  static const J2ObjcClassInfo _GeogebraCommonGuiDialogOptionsModelShowConditionModel = { 2, "ShowConditionModel", "geogebra.common.gui.dialog.options.model", NULL, 0x1, 5, methods, 2, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonGuiDialogOptionsModelShowConditionModel;
}

@end

void GeogebraCommonGuiDialogOptionsModelShowConditionModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiDialogOptionsModelShowConditionModel_IShowConditionListener_(GeogebraCommonGuiDialogOptionsModelShowConditionModel *self, GeogebraCommonMainApp *app, id<GeogebraCommonGuiDialogOptionsModelShowConditionModel_IShowConditionListener> listener) {
  GeogebraCommonGuiDialogOptionsModelOptionsModel_init(self);
  GeogebraCommonGuiDialogOptionsModelShowConditionModel_set_kernel_(self, [((GeogebraCommonMainApp *) nil_chk(app)) getKernel]);
  GeogebraCommonGuiDialogOptionsModelShowConditionModel_set_listener_(self, listener);
}

GeogebraCommonGuiDialogOptionsModelShowConditionModel *new_GeogebraCommonGuiDialogOptionsModelShowConditionModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiDialogOptionsModelShowConditionModel_IShowConditionListener_(GeogebraCommonMainApp *app, id<GeogebraCommonGuiDialogOptionsModelShowConditionModel_IShowConditionListener> listener) {
  GeogebraCommonGuiDialogOptionsModelShowConditionModel *self = [GeogebraCommonGuiDialogOptionsModelShowConditionModel alloc];
  GeogebraCommonGuiDialogOptionsModelShowConditionModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiDialogOptionsModelShowConditionModel_IShowConditionListener_(self, app, listener);
  return self;
}

NSString *GeogebraCommonGuiDialogOptionsModelShowConditionModel_replaceEqualsSignsWithNSString_(NSString *strCond) {
  GeogebraCommonGuiDialogOptionsModelShowConditionModel_initialize();
  strCond = [((NSString *) nil_chk(strCond)) replaceAll:@">=" withReplacement:GeogebraCommonKernelArithmeticExpressionNodeConstants_get_strGREATER_EQUAL_()];
  strCond = [((NSString *) nil_chk(strCond)) replaceAll:@"<=" withReplacement:GeogebraCommonKernelArithmeticExpressionNodeConstants_get_strLESS_EQUAL_()];
  strCond = [((NSString *) nil_chk(strCond)) replaceAll:@"==" withReplacement:GeogebraCommonKernelArithmeticExpressionNodeConstants_get_strEQUAL_BOOLEAN_()];
  strCond = [((NSString *) nil_chk(strCond)) replaceAll:@"!=" withReplacement:GeogebraCommonKernelArithmeticExpressionNodeConstants_get_strNOT_EQUAL_()];
  return [((NSString *) nil_chk(strCond)) replaceAll:@"=" withReplacement:GeogebraCommonKernelArithmeticExpressionNodeConstants_get_strEQUAL_BOOLEAN_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiDialogOptionsModelShowConditionModel)

@implementation GeogebraCommonGuiDialogOptionsModelShowConditionModel_IShowConditionListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setTextWithNSString:", "setText", "V", 0x401, NULL, NULL },
    { "updateSelectionWithNSObjectArray:", "updateSelection", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiDialogOptionsModelShowConditionModel_IShowConditionListener = { 2, "IShowConditionListener", "geogebra.common.gui.dialog.options.model", "ShowConditionModel", 0x609, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiDialogOptionsModelShowConditionModel_IShowConditionListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(GeogebraCommonGuiDialogOptionsModelShowConditionModel_IShowConditionListener)
