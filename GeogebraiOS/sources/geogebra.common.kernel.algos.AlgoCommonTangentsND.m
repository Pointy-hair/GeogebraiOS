//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoCommonTangentsND.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoCommonTangentsND.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoVec2D.h"
#include "geogebra/common/kernel/kernelND/AlgoIntersectND.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/Localization.h"
#include "java/lang/Math.h"

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoCommonTangentsND_compute(GeogebraCommonKernelAlgosAlgoCommonTangentsND *self);

@implementation GeogebraCommonKernelAlgosAlgoCommonTangentsND

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
              withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c
              withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c2 {
  GeogebraCommonKernelAlgosAlgoCommonTangentsND_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, labels, c, c2);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
              withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c
              withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c2 {
  GeogebraCommonKernelAlgosAlgoCommonTangentsND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, c, c2);
  return self;
}

- (void)createPointsWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setCoordsAsPointWithInt:(jint)index
                     withDouble:(jdouble)x
                     withDouble:(jdouble)y {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setCoordsAsVectorWithInt:(jint)index
                      withDouble:(jdouble)x
                      withDouble:(jdouble)y {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)initTangents {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (GeogebraCommonKernelKernelNDAlgoIntersectND *)createAlgoWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                                     withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p
                                                            withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)line
                                                     withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)conic {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Tangent();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_TANGENTS;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, IOSObjectArray_Get(nil_chk(c_), 0));
  IOSObjectArray_Set(input_, 1, IOSObjectArray_Get(c_, 1));
  IOSObjectArray *out = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(tangents_))->size_ type:GeogebraCommonKernelGeosGeoElement_class_()];
  for (jint i = 0; i < tangents_->size_; i++) {
    IOSObjectArray_Set(out, i, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(tangents_, i), [GeogebraCommonKernelGeosGeoElement class]));
  }
  [super setOutputWithGeogebraCommonKernelGeosGeoElementArray:out];
  [self setDependencies];
}

- (IOSObjectArray *)getTangents {
  return tangents_;
}

- (jboolean)checkUndefined {
  return ![((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(IOSObjectArray_Get(nil_chk(c_), 0))) isCircle] || ![((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(IOSObjectArray_Get(c_, 1))) isCircle];
}

- (jdouble)getMidpointXWithInt:(jint)csIndex
                       withInt:(jint)mpIndex {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getMidpointYWithInt:(jint)csIndex
                       withInt:(jint)mpIndex {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoCommonTangentsND_compute(self);
}

- (void)updatePolarLines {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)updateTangentsWithGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)tangentPoints
                                                              withInt:(jint)index {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setTangentFromPolarWithInt:(jint)i
withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)line {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)isIntersectionPointIncidentWithInt:(jint)index
    withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)conic {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getTangentPointWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)conic
                                                                withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)line {
  if (conic != IOSObjectArray_Get(nil_chk(c_), 0) && conic != IOSObjectArray_Get(c_, 1)) return nil;
  if (conic == IOSObjectArray_Get(c_, 0)) {
    if (line == IOSObjectArray_Get(nil_chk(tangents_), 0)) {
      return IOSObjectArray_Get(nil_chk(tangentPoints_), 0);
    }
    else if (line == IOSObjectArray_Get(tangents_, 1)) {
      return IOSObjectArray_Get(nil_chk(tangentPoints_), 1);
    }
    else {
      return nil;
    }
  }
  else if (conic == IOSObjectArray_Get(c_, 1)) {
    if (line == IOSObjectArray_Get(nil_chk(tangents_), 2)) {
      return IOSObjectArray_Get(nil_chk(tangentPoints2_), 0);
    }
    else if (line == IOSObjectArray_Get(tangents_, 3)) {
      return IOSObjectArray_Get(nil_chk(tangentPoints2_), 1);
    }
    else {
      return nil;
    }
  }
  else {
    return nil;
  }
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"CommonTangentOfCirclesAandB" withNSString:[((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(IOSObjectArray_Get(nil_chk(c_), 0))) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(IOSObjectArray_Get(c_, 1))) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(P_);
  RELEASE_(c_);
  RELEASE_(tangents_);
  RELEASE_(polar_);
  RELEASE_(polar2_);
  RELEASE_(algoIntersect_);
  RELEASE_(algoIntersect2_);
  RELEASE_(tangentPoints_);
  RELEASE_(tangentPoints2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoConicND:withGeogebraCommonKernelKernelNDGeoConicND:", "AlgoCommonTangentsND", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoConicND:withGeogebraCommonKernelKernelNDGeoConicND:", "AlgoCommonTangentsND", NULL, 0x0, NULL, NULL },
    { "createPointsWithGeogebraCommonKernelConstruction:", "createPoints", "V", 0x404, NULL, NULL },
    { "setCoordsAsPointWithInt:withDouble:withDouble:", "setCoordsAsPoint", "V", 0x404, NULL, NULL },
    { "setCoordsAsVectorWithInt:withDouble:withDouble:", "setCoordsAsVector", "V", 0x404, NULL, NULL },
    { "initTangents", NULL, "V", 0x404, NULL, NULL },
    { "createAlgoWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelGeosGeoLine:withGeogebraCommonKernelKernelNDGeoConicND:", "createAlgo", "Lgeogebra.common.kernel.kernelND.AlgoIntersectND;", 0x404, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getTangents", NULL, "[Lgeogebra.common.kernel.kernelND.GeoLineND;", 0x1, NULL, NULL },
    { "checkUndefined", NULL, "Z", 0x4, NULL, NULL },
    { "getMidpointXWithInt:withInt:", "getMidpointX", "D", 0x404, NULL, NULL },
    { "getMidpointYWithInt:withInt:", "getMidpointY", "D", 0x404, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "updatePolarLines", NULL, "V", 0x404, NULL, NULL },
    { "updateTangentsWithGeogebraCommonKernelKernelNDGeoPointNDArray:withInt:", "updateTangents", "V", 0x404, NULL, NULL },
    { "setTangentFromPolarWithInt:withGeogebraCommonKernelGeosGeoLine:", "setTangentFromPolar", "V", 0x404, NULL, NULL },
    { "isIntersectionPointIncidentWithInt:withGeogebraCommonKernelKernelNDGeoConicND:", "isIntersectionPointIncident", "Z", 0x404, NULL, NULL },
    { "getTangentPointWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoLine:", "getTangentPoint", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "P_", NULL, 0x4, "[Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "c_", NULL, 0x4, "[Lgeogebra.common.kernel.kernelND.GeoConicND;", NULL, NULL,  },
    { "tangents_", NULL, 0x4, "[Lgeogebra.common.kernel.kernelND.GeoLineND;", NULL, NULL,  },
    { "polar_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "polar2_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "algoIntersect_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.AlgoIntersectND;", NULL, NULL,  },
    { "algoIntersect2_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.AlgoIntersectND;", NULL, NULL,  },
    { "tangentPoints_", NULL, 0x4, "[Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "tangentPoints2_", NULL, 0x4, "[Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "equalLines_", NULL, 0x4, "Z", NULL, NULL,  },
    { "equalLines2_", NULL, 0x4, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoCommonTangentsND = { 2, "AlgoCommonTangentsND", "geogebra.common.kernel.algos", NULL, 0x401, 21, methods, 11, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoCommonTangentsND;
}

@end

void GeogebraCommonKernelAlgosAlgoCommonTangentsND_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonKernelAlgosAlgoCommonTangentsND *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, GeogebraCommonKernelKernelNDGeoConicND *c, GeogebraCommonKernelKernelNDGeoConicND *c2) {
  GeogebraCommonKernelAlgosAlgoCommonTangentsND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, c, c2);
  GeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withGeogebraCommonKernelGeosGeoElementArray_(labels, [self getOutput]);
}

void GeogebraCommonKernelAlgosAlgoCommonTangentsND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonKernelAlgosAlgoCommonTangentsND *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelKernelNDGeoConicND *c, GeogebraCommonKernelKernelNDGeoConicND *c2) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  self->equalLines_ = NO;
  self->equalLines2_ = NO;
  GeogebraCommonKernelAlgosAlgoCommonTangentsND_setAndConsume_c_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelKernelNDGeoConicND_class_()]);
  IOSObjectArray_Set(self->c_, 0, c);
  IOSObjectArray_Set(self->c_, 1, c2);
  jdouble r = [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c)) getCircleRadius];
  jdouble r2 = [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c2)) getCircleRadius];
  [self createPointsWithGeogebraCommonKernelConstruction:cons];
  if (JavaLangMath_absWithDouble_(r2 - r) > GeogebraCommonKernelKernel_MIN_PRECISION) {
    [self setCoordsAsPointWithInt:0 withDouble:([((GeogebraCommonKernelGeosGeoVec2D *) nil_chk(c->b_)) getX] * r2 - [c2->b_ getX] * r) / (r2 - r) withDouble:([c->b_ getY] * r2 - [c2->b_ getY] * r) / (r2 - r)];
  }
  else {
    [self setCoordsAsVectorWithInt:0 withDouble:([((GeogebraCommonKernelGeosGeoVec2D *) nil_chk(c->b_)) getX] * r2 - [c2->b_ getX] * r) withDouble:([c->b_ getY] * r2 - [c2->b_ getY] * r)];
  }
  GeogebraCommonKernelAlgosAlgoCommonTangentsND_setAndConsume_polar_(self, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons));
  GeogebraCommonKernelAlgosAlgoCommonTangentsND_set_algoIntersect_(self, [self createAlgoWithGeogebraCommonKernelConstruction:cons withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(self->P_), 0) withGeogebraCommonKernelGeosGeoLine:self->polar_ withGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(self->c_, 0)]);
  [((GeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:self->algoIntersect_];
  GeogebraCommonKernelAlgosAlgoCommonTangentsND_set_tangentPoints_(self, [((GeogebraCommonKernelKernelNDAlgoIntersectND *) nil_chk(self->algoIntersect_)) getIntersectionPoints]);
  [self setCoordsAsPointWithInt:1 withDouble:([((GeogebraCommonKernelGeosGeoVec2D *) nil_chk(c->b_)) getX] * r2 + [c2->b_ getX] * r) / (r2 + r) withDouble:([c->b_ getY] * r2 + [c2->b_ getY] * r) / (r2 + r)];
  GeogebraCommonKernelAlgosAlgoCommonTangentsND_setAndConsume_polar2_(self, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons));
  GeogebraCommonKernelAlgosAlgoCommonTangentsND_set_algoIntersect2_(self, [self createAlgoWithGeogebraCommonKernelConstruction:cons withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(self->P_, 1) withGeogebraCommonKernelGeosGeoLine:self->polar2_ withGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(self->c_, 1)]);
  [cons removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:self->algoIntersect2_];
  GeogebraCommonKernelAlgosAlgoCommonTangentsND_set_tangentPoints2_(self, [((GeogebraCommonKernelKernelNDAlgoIntersectND *) nil_chk(self->algoIntersect2_)) getIntersectionPoints]);
  [self initTangents];
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoCommonTangentsND_compute(self);
  self->equalLines_ = [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(IOSObjectArray_Get(nil_chk(self->tangents_), 0))) isEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(self->tangents_, 1), [GeogebraCommonKernelGeosGeoElement class])];
  if (self->equalLines_) {
    [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(IOSObjectArray_Get(self->tangents_, 1))) setUndefined];
    [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk(self->tangentPoints_), 1))) setUndefined];
  }
  self->equalLines2_ = [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(IOSObjectArray_Get(self->tangents_, 0 + 2))) isEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(self->tangents_, 1 + 2), [GeogebraCommonKernelGeosGeoElement class])];
  if (self->equalLines2_) {
    [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(IOSObjectArray_Get(self->tangents_, 1 + 2))) setUndefined];
    [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk(self->tangentPoints2_), 1))) setUndefined];
  }
}

void GeogebraCommonKernelAlgosAlgoCommonTangentsND_compute(GeogebraCommonKernelAlgosAlgoCommonTangentsND *self) {
  if ([self checkUndefined]) {
    for (jint i = 0; i < 4; i++) {
      [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(IOSObjectArray_Get(nil_chk(self->tangents_), i))) setUndefined];
    }
    return;
  }
  jdouble r = [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(IOSObjectArray_Get(nil_chk(self->c_), 0))) getCircleRadius];
  jdouble r2 = [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(IOSObjectArray_Get(self->c_, 1))) getCircleRadius];
  if (JavaLangMath_absWithDouble_(r2 - r) > GeogebraCommonKernelKernel_MIN_PRECISION) {
    [self setCoordsAsPointWithInt:0 withDouble:([self getMidpointXWithInt:0 withInt:0] * r2 - [self getMidpointXWithInt:0 withInt:1] * r) / (r2 - r) withDouble:([self getMidpointYWithInt:0 withInt:0] * r2 - [self getMidpointYWithInt:0 withInt:1] * r) / (r2 - r)];
  }
  else {
    [self setCoordsAsVectorWithInt:0 withDouble:([self getMidpointXWithInt:0 withInt:0] * r2 - [self getMidpointXWithInt:0 withInt:1] * r) withDouble:([self getMidpointYWithInt:0 withInt:0] * r2 - [self getMidpointYWithInt:0 withInt:1] * r)];
  }
  [self setCoordsAsPointWithInt:1 withDouble:([self getMidpointXWithInt:1 withInt:0] * r2 + [self getMidpointXWithInt:1 withInt:1] * r) / (r2 + r) withDouble:([self getMidpointYWithInt:1 withInt:0] * r2 + [self getMidpointYWithInt:1 withInt:1] * r) / (r2 + r)];
  [self updatePolarLines];
  if ([self isIntersectionPointIncidentWithInt:0 withGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(self->c_, 0)]) {
    [self setTangentFromPolarWithInt:0 withGeogebraCommonKernelGeosGeoLine:self->polar_];
    [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk(self->tangentPoints_), 0))) setCoordsFromPointWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(self->P_), 0)];
    if (self->equalLines_) {
      [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(IOSObjectArray_Get(nil_chk(self->tangents_), 1))) setUndefined];
      [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(self->tangentPoints_, 1))) setUndefined];
    }
    else {
      [self setTangentFromPolarWithInt:1 withGeogebraCommonKernelGeosGeoLine:self->polar_];
      [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(self->tangentPoints_, 1))) setCoordsFromPointWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(self->P_, 0)];
    }
  }
  else {
    [((GeogebraCommonKernelKernelNDAlgoIntersectND *) nil_chk(self->algoIntersect_)) update];
    [self updateTangentsWithGeogebraCommonKernelKernelNDGeoPointNDArray:self->tangentPoints_ withInt:0];
    self->equalLines_ = NO;
  }
  if ([self isIntersectionPointIncidentWithInt:1 withGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(self->c_, 1)]) {
    [self setTangentFromPolarWithInt:0 + 2 withGeogebraCommonKernelGeosGeoLine:self->polar2_];
    [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk(self->tangentPoints2_), 0))) setCoordsFromPointWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(self->P_), 1)];
    if (self->equalLines2_) {
      [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(IOSObjectArray_Get(nil_chk(self->tangents_), 1 + 2))) setUndefined];
      [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(self->tangentPoints2_, 1))) setUndefined];
    }
    else {
      [self setTangentFromPolarWithInt:1 + 2 withGeogebraCommonKernelGeosGeoLine:self->polar2_];
      [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(self->tangentPoints2_, 1))) setCoordsFromPointWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(self->P_, 1)];
    }
  }
  else {
    [((GeogebraCommonKernelKernelNDAlgoIntersectND *) nil_chk(self->algoIntersect2_)) update];
    [self updateTangentsWithGeogebraCommonKernelKernelNDGeoPointNDArray:self->tangentPoints2_ withInt:1];
    self->equalLines2_ = NO;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoCommonTangentsND)
