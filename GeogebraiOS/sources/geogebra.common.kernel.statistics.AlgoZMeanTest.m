//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoZMeanTest.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/statistics/AlgoZMeanTest.h"
#include "geogebra/common/util/StringUtil.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "org/apache/commons/math/distribution/NormalDistributionImpl.h"

@interface GeogebraCommonKernelStatisticsAlgoZMeanTest () {
 @public
  GeogebraCommonKernelGeosGeoNumeric *hypMean_, *mean_, *sd_, *n_;
  GeogebraCommonKernelGeosGeoList *list_;
  GeogebraCommonKernelGeosGeoText *tail_;
  GeogebraCommonKernelGeosGeoList *result_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoZMeanTest, hypMean_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoZMeanTest, mean_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoZMeanTest, sd_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoZMeanTest, n_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoZMeanTest, list_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoZMeanTest, tail_, GeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoZMeanTest, result_, GeogebraCommonKernelGeosGeoList *)

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoZMeanTest_compute(GeogebraCommonKernelStatisticsAlgoZMeanTest *self);

@implementation GeogebraCommonKernelStatisticsAlgoZMeanTest

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)mean
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)sd
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)n
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)hypMean
                     withGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)tail {
  GeogebraCommonKernelStatisticsAlgoZMeanTest_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_(self, cons, label, mean, sd, n, hypMean, tail);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)mean
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)sd
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)n
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)hypMean
                     withGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)tail {
  GeogebraCommonKernelStatisticsAlgoZMeanTest_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_(self, cons, mean, sd, n, hypMean, tail);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)sd
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)hypMean
                     withGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)tail {
  GeogebraCommonKernelStatisticsAlgoZMeanTest_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_(self, cons, label, list, sd, hypMean, tail);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_ZMeanTest();
}

- (void)setInputOutput {
  if (list_ == nil) {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:5 type:GeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, mean_);
    IOSObjectArray_Set(input_, 1, sd_);
    IOSObjectArray_Set(input_, 2, n_);
    IOSObjectArray_Set(input_, 3, hypMean_);
    IOSObjectArray_Set(input_, 4, tail_);
  }
  else {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:4 type:GeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, list_);
    IOSObjectArray_Set(input_, 1, sd_);
    IOSObjectArray_Set(input_, 2, hypMean_);
    IOSObjectArray_Set(input_, 3, tail_);
  }
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:result_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoList *)getResult {
  return result_;
}

- (void)compute {
  GeogebraCommonKernelStatisticsAlgoZMeanTest_compute(self);
}

- (void)dealloc {
  RELEASE_(hypMean_);
  RELEASE_(mean_);
  RELEASE_(sd_);
  RELEASE_(n_);
  RELEASE_(list_);
  RELEASE_(tail_);
  RELEASE_(result_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoText:", "AlgoZMeanTest", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoText:", "AlgoZMeanTest", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoText:", "AlgoZMeanTest", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "hypMean_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "mean_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "sd_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "n_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "list_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "tail_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoZMeanTest = { 2, "AlgoZMeanTest", "geogebra.common.kernel.statistics", NULL, 0x1, 7, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoZMeanTest;
}

@end

void GeogebraCommonKernelStatisticsAlgoZMeanTest_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_(GeogebraCommonKernelStatisticsAlgoZMeanTest *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoNumeric *mean, GeogebraCommonKernelGeosGeoNumeric *sd, GeogebraCommonKernelGeosGeoNumeric *n, GeogebraCommonKernelGeosGeoNumeric *hypMean, GeogebraCommonKernelGeosGeoText *tail) {
  GeogebraCommonKernelStatisticsAlgoZMeanTest_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_(self, cons, mean, sd, n, hypMean, tail);
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoZMeanTest *new_GeogebraCommonKernelStatisticsAlgoZMeanTest_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoNumeric *mean, GeogebraCommonKernelGeosGeoNumeric *sd, GeogebraCommonKernelGeosGeoNumeric *n, GeogebraCommonKernelGeosGeoNumeric *hypMean, GeogebraCommonKernelGeosGeoText *tail) {
  GeogebraCommonKernelStatisticsAlgoZMeanTest *self = [GeogebraCommonKernelStatisticsAlgoZMeanTest alloc];
  GeogebraCommonKernelStatisticsAlgoZMeanTest_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_(self, cons, label, mean, sd, n, hypMean, tail);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoZMeanTest_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_(GeogebraCommonKernelStatisticsAlgoZMeanTest *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoNumeric *mean, GeogebraCommonKernelGeosGeoNumeric *sd, GeogebraCommonKernelGeosGeoNumeric *n, GeogebraCommonKernelGeosGeoNumeric *hypMean, GeogebraCommonKernelGeosGeoText *tail) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoZMeanTest_set_hypMean_(self, hypMean);
  GeogebraCommonKernelStatisticsAlgoZMeanTest_set_tail_(self, tail);
  GeogebraCommonKernelStatisticsAlgoZMeanTest_set_mean_(self, mean);
  GeogebraCommonKernelStatisticsAlgoZMeanTest_set_sd_(self, sd);
  GeogebraCommonKernelStatisticsAlgoZMeanTest_set_n_(self, n);
  GeogebraCommonKernelStatisticsAlgoZMeanTest_setAndConsume_result_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoZMeanTest_compute(self);
}

GeogebraCommonKernelStatisticsAlgoZMeanTest *new_GeogebraCommonKernelStatisticsAlgoZMeanTest_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoNumeric *mean, GeogebraCommonKernelGeosGeoNumeric *sd, GeogebraCommonKernelGeosGeoNumeric *n, GeogebraCommonKernelGeosGeoNumeric *hypMean, GeogebraCommonKernelGeosGeoText *tail) {
  GeogebraCommonKernelStatisticsAlgoZMeanTest *self = [GeogebraCommonKernelStatisticsAlgoZMeanTest alloc];
  GeogebraCommonKernelStatisticsAlgoZMeanTest_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_(self, cons, mean, sd, n, hypMean, tail);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoZMeanTest_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_(GeogebraCommonKernelStatisticsAlgoZMeanTest *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *list, GeogebraCommonKernelGeosGeoNumeric *sd, GeogebraCommonKernelGeosGeoNumeric *hypMean, GeogebraCommonKernelGeosGeoText *tail) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoZMeanTest_set_hypMean_(self, hypMean);
  GeogebraCommonKernelStatisticsAlgoZMeanTest_set_tail_(self, tail);
  GeogebraCommonKernelStatisticsAlgoZMeanTest_set_list_(self, list);
  GeogebraCommonKernelStatisticsAlgoZMeanTest_set_sd_(self, sd);
  GeogebraCommonKernelStatisticsAlgoZMeanTest_setAndConsume_result_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoZMeanTest_compute(self);
  [self->result_ setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoZMeanTest *new_GeogebraCommonKernelStatisticsAlgoZMeanTest_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *list, GeogebraCommonKernelGeosGeoNumeric *sd, GeogebraCommonKernelGeosGeoNumeric *hypMean, GeogebraCommonKernelGeosGeoText *tail) {
  GeogebraCommonKernelStatisticsAlgoZMeanTest *self = [GeogebraCommonKernelStatisticsAlgoZMeanTest alloc];
  GeogebraCommonKernelStatisticsAlgoZMeanTest_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_(self, cons, label, list, sd, hypMean, tail);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoZMeanTest_compute(GeogebraCommonKernelStatisticsAlgoZMeanTest *self) {
  NSString *testType;
  if ([((NSString *) nil_chk([((GeogebraCommonKernelGeosGeoText *) nil_chk(self->tail_)) getTextString])) isEqual:@"<"]) {
    testType = @"left";
  }
  else if ([((NSString *) nil_chk([self->tail_ getTextString])) isEqual:@">"]) {
    testType = @"right";
  }
  else if (GeogebraCommonUtilStringUtil_isNotEqualWithNSString_([self->tail_ getTextString])) {
    testType = @"two";
  }
  else {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
    return;
  }
  jdouble mean1;
  jdouble n1;
  if (self->list_ == nil) {
    mean1 = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->mean_)) getDouble];
    n1 = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) getDouble];
  }
  else {
    mean1 = [self->list_ mean];
    n1 = [self->list_ size];
  }
  jdouble hyp = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->hypMean_)) getDouble];
  jdouble sd1 = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sd_)) getDouble];
  jdouble se = sd1 / JavaLangMath_sqrtWithDouble_(n1);
  jdouble testStatistic = (mean1 - hyp) / se;
  OrgApacheCommonsMathDistributionNormalDistributionImpl *normalDist = [new_OrgApacheCommonsMathDistributionNormalDistributionImpl_initWithDouble_withDouble_(0, 1) autorelease];
  jdouble P = 0;
  @try {
    P = [normalDist cumulativeProbabilityWithDouble:testStatistic];
  }
  @catch (JavaLangException *e) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
    return;
  }
  if ([@"right" isEqual:testType]) {
    P = 1 - P;
  }
  else if ([@"two" isEqual:testType]) {
    if (testStatistic < 0) {
      P = 2 * P;
    }
    else {
      P = 2 * (1 - P);
    }
  }
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) clear];
  [self->result_ addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, P) autorelease]];
  [self->result_ addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, testStatistic) autorelease]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoZMeanTest)
