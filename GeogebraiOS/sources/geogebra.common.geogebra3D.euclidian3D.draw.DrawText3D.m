//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidian3D/draw/DrawText3D.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GFont.h"
#include "geogebra/common/awt/GPoint.h"
#include "geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/Hits3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/Hitting.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawLabel3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawLabel3DForText.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawText3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DCurves.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DLists.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Renderer.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/App.h"
#include "java/lang/Math.h"

@interface GeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D ()

- (GeogebraCommonAwtGFont *)getFont;

@end

__attribute__((unused)) static GeogebraCommonAwtGFont *GeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D_getFont(GeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D *self);

@implementation GeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)a_view3d
                                       withGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)text {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoText_(self, a_view3d, text);
  return self;
}

- (GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *)newDrawLabel3DWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)view3D {
  return [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(view3D, self) autorelease];
}

- (void)updateForView {
}

- (jboolean)updateForItSelf {
  return YES;
}

- (void)drawGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
}

- (void)updateLabel {
  GeogebraCommonKernelGeosGeoText *text = (GeogebraCommonKernelGeosGeoText *) check_class_cast([self getGeoElement], [GeogebraCommonKernelGeosGeoText class]);
  if ([((GeogebraCommonKernelGeosGeoText *) nil_chk(text)) isLaTeX]) {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *) nil_chk(label_)) setIsVisibleWithBoolean:NO];
  }
  else {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *) nil_chk(label_)) updateWithNSString:[text getTextString] withGeogebraCommonAwtGFont:GeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D_getFont(self) withGeogebraCommonAwtGColor:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getBackgroundColor] withGeogebraCommonAwtGColor:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getObjectColor] withGeogebraCommonKernelMatrixCoords:[self getLabelPosition] withFloat:[self getLabelOffsetX] withFloat:-[self getLabelOffsetY]];
  }
}

- (void)updateLabelPosition {
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *) nil_chk(label_)) updatePositionWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:[((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getRenderer]];
}

- (GeogebraCommonAwtGFont *)getFont {
  return GeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D_getFont(self);
}

- (jboolean)isLabelVisible {
  return [self isVisible];
}

- (GeogebraCommonKernelMatrixCoords *)getLabelPosition {
  GeogebraCommonKernelGeosGeoText *text = (GeogebraCommonKernelGeosGeoText *) check_class_cast([self getGeoElement], [GeogebraCommonKernelGeosGeoText class]);
  if ([((GeogebraCommonKernelGeosGeoText *) nil_chk(text)) isAbsoluteScreenLocActive]) return [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_([text getAbsoluteScreenLocX], [text getAbsoluteScreenLocY], 0, 1) autorelease];
  id<GeogebraCommonKernelKernelNDGeoPointND> loc = [text getStartPoint];
  if (loc == nil) return [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(0, 0, 0, 1) autorelease];
  if (![((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(loc)) isDefined]) {
    return nil;
  }
  return [loc getInhomCoordsInD3];
}

- (jint)getPickOrder {
  return GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_PICK_ORDER_TEXT;
}

- (jboolean)hitWithGeogebraCommonGeogebra3DEuclidian3DHitting:(GeogebraCommonGeogebra3DEuclidian3DHitting *)hitting {
  if ([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *) nil_chk(label_)) hitWithGeogebraCommonAwtGPoint:((GeogebraCommonGeogebra3DEuclidian3DHitting *) nil_chk(hitting))->pos_]) {
    [self setZPickWithDouble:[label_ getDrawZ] withDouble:[label_ getDrawZ]];
    return YES;
  }
  return NO;
}

- (jboolean)hitLabelWithGeogebraCommonGeogebra3DEuclidian3DHitting:(GeogebraCommonGeogebra3DEuclidian3DHitting *)hitting
                     withGeogebraCommonGeogebra3DEuclidian3DHits3D:(GeogebraCommonGeogebra3DEuclidian3DHits3D *)hits {
  return NO;
}

- (void)addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *)lists {
  [self addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists withInt:GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_TEXTS];
}

- (void)removeFromDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *)lists {
  [self removeFromDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists withInt:GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_TEXTS];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withGeogebraCommonKernelGeosGeoText:", "DrawText3D", NULL, 0x1, NULL, NULL },
    { "newDrawLabel3DWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:", "newDrawLabel3D", "Lgeogebra.common.geogebra3D.euclidian3D.draw.DrawLabel3D;", 0x4, NULL, NULL },
    { "updateForView", NULL, "V", 0x4, NULL, NULL },
    { "updateForItSelf", NULL, "Z", 0x4, NULL, NULL },
    { "drawGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawGeometry", "V", 0x1, NULL, NULL },
    { "updateLabel", NULL, "V", 0x4, NULL, NULL },
    { "updateLabelPosition", NULL, "V", 0x4, NULL, NULL },
    { "getFont", NULL, "Lgeogebra.common.awt.GFont;", 0x2, NULL, NULL },
    { "isLabelVisible", NULL, "Z", 0x4, NULL, NULL },
    { "getLabelPosition", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getPickOrder", NULL, "I", 0x1, NULL, NULL },
    { "hitWithGeogebraCommonGeogebra3DEuclidian3DHitting:", "hit", "Z", 0x1, NULL, NULL },
    { "hitLabelWithGeogebraCommonGeogebra3DEuclidian3DHitting:withGeogebraCommonGeogebra3DEuclidian3DHits3D:", "hitLabel", "Z", 0x4, NULL, NULL },
    { "addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:", "addToDrawable3DLists", "V", 0x1, NULL, NULL },
    { "removeFromDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:", "removeFromDrawable3DLists", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D = { 2, "DrawText3D", "geogebra.common.geogebra3D.euclidian3D.draw", NULL, 0x1, 15, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoText_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3d, GeogebraCommonKernelGeosGeoText *text) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DCurves_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoElement_(self, a_view3d, text);
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText *) check_class_cast(self->label_, [GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText class])))) setGeoWithGeogebraCommonKernelGeosGeoText:text];
  [self setPickingTypeWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_POINT_OR_CURVE()];
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoText_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3d, GeogebraCommonKernelGeosGeoText *text) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D *self = [GeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D alloc];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoText_(self, a_view3d, text);
  return self;
}

GeogebraCommonAwtGFont *GeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D_getFont(GeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D *self) {
  GeogebraCommonKernelGeosGeoText *text = (GeogebraCommonKernelGeosGeoText *) check_class_cast([self getGeoElement], [GeogebraCommonKernelGeosGeoText class]);
  jint newFontSize = J2ObjCFpToInt(JavaLangMath_maxWithDouble_withDouble_(4, [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getFontSize] * [((GeogebraCommonKernelGeosGeoText *) nil_chk(text)) getFontSizeMultiplier]));
  jint newFontStyle = [text getFontStyle];
  jboolean newSerifFont = [text isSerifFont];
  GeogebraCommonAwtGFont *textFont = [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getApplication])) getFontCanDisplayWithNSString:[text getTextString] withBoolean:newSerifFont withInt:newFontStyle withInt:newFontSize];
  return textFont;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D)
