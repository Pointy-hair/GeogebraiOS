//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/cas/AlgoLimit.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/MyArbitraryConstant.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/cas/AlgoLimit.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "java/lang/Throwable.h"

@interface GeogebraCommonKernelCasAlgoLimit () {
 @public
  NSString *limitString_;
  GeogebraCommonKernelArithmeticMyArbitraryConstant *arbconst_;
}

- (void)init__WithNSString:(NSString *)label OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoLimit, limitString_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoLimit, arbconst_, GeogebraCommonKernelArithmeticMyArbitraryConstant *)

__attribute__((unused)) static void GeogebraCommonKernelCasAlgoLimit_init__WithNSString_(GeogebraCommonKernelCasAlgoLimit *self, NSString *label);

@implementation GeogebraCommonKernelCasAlgoLimit

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)num {
  GeogebraCommonKernelCasAlgoLimit_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, f, num);
  return self;
}

- (void)init__WithNSString:(NSString *)label {
  GeogebraCommonKernelCasAlgoLimit_init__WithNSString_(self, label);
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Limit();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, f_);
  IOSObjectArray_Set(input_, 1, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(num_)) toGeoElement]);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:outNum_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoNumeric *)getResult {
  return outNum_;
}

- (void)compute {
  if (![((GeogebraCommonKernelGeosGeoFunction *) nil_chk(f_)) isDefined] || ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(input_), 1))) isDefined]) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(outNum_)) setUndefined];
    return;
  }
  GeogebraCommonKernelCasAlgoLimit_set_limitString_(self, [f_ getLimitWithDouble:[((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(num_)) getDouble] withInt:[self getDirection]]);
  if (f_ == nil) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(outNum_)) setUndefined];
    return;
  }
  @try {
    NSString *numStr = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) evaluateCachedGeoGebraCASWithNSString:limitString_ withGeogebraCommonKernelArithmeticMyArbitraryConstant:arbconst_];
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(outNum_)) setValueWithDouble:[((id<GeogebraCommonKernelGeosGeoNumberValue>) nil_chk([((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernel_ getAlgebraProcessor])) evaluateToNumericWithNSString:numStr withBoolean:YES])) getDouble]];
  }
  @catch (JavaLangThrowable *e) {
    [((JavaLangThrowable *) nil_chk(e)) printStackTrace];
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(outNum_)) setUndefined];
    return;
  }
}

- (NSString *)getCasInput {
  return limitString_;
}

- (jint)getDirection {
  return 0;
}

- (void)handleCASoutputWithNSString:(NSString *)output
                            withInt:(jint)requestID {
  id<GeogebraCommonKernelArithmeticNumberValue> nv = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgebraProcessor])) evaluateToNumericWithNSString:output withBoolean:YES];
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(outNum_)) setValueWithDouble:[((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(nv)) getDouble]];
}

- (void)handleExceptionWithJavaLangThrowable:(JavaLangThrowable *)exception
                                     withInt:(jint)id_ {
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(outNum_)) setUndefined];
}

- (jboolean)useCacheing {
  return YES;
}

- (void)dealloc {
  RELEASE_(f_);
  RELEASE_(num_);
  RELEASE_(outNum_);
  RELEASE_(limitString_);
  RELEASE_(arbconst_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoLimit", NULL, 0x1, NULL, NULL },
    { "init__WithNSString:", "init", "V", 0x2, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getCasInput", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getDirection", NULL, "I", 0x4, NULL, NULL },
    { "handleCASoutputWithNSString:withInt:", "handleCASoutput", "V", 0x1, NULL, NULL },
    { "handleExceptionWithJavaLangThrowable:withInt:", "handleException", "V", 0x1, NULL, NULL },
    { "useCacheing", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "f_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "num_", NULL, 0x4, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "outNum_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "limitString_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "arbconst_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.MyArbitraryConstant;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCasAlgoLimit = { 2, "AlgoLimit", "geogebra.common.kernel.cas", NULL, 0x1, 11, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCasAlgoLimit;
}

@end

void GeogebraCommonKernelCasAlgoLimit_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelCasAlgoLimit *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoFunction *f, id<GeogebraCommonKernelArithmeticNumberValue> num) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelCasAlgoLimit_setAndConsume_arbconst_(self, new_GeogebraCommonKernelArithmeticMyArbitraryConstant_initWithGeogebraCommonKernelAlgosConstructionElement_(self));
  [((GeogebraCommonKernelConstruction *) nil_chk(cons)) addCASAlgoWithGeogebraCommonKernelAlgosAlgoElement:self];
  GeogebraCommonKernelCasAlgoLimit_set_f_(self, f);
  GeogebraCommonKernelCasAlgoLimit_set_num_(self, num);
  GeogebraCommonKernelCasAlgoLimit_init__WithNSString_(self, label);
}

GeogebraCommonKernelCasAlgoLimit *new_GeogebraCommonKernelCasAlgoLimit_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoFunction *f, id<GeogebraCommonKernelArithmeticNumberValue> num) {
  GeogebraCommonKernelCasAlgoLimit *self = [GeogebraCommonKernelCasAlgoLimit alloc];
  GeogebraCommonKernelCasAlgoLimit_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, f, num);
  return self;
}

void GeogebraCommonKernelCasAlgoLimit_init__WithNSString_(GeogebraCommonKernelCasAlgoLimit *self, NSString *label) {
  GeogebraCommonKernelCasAlgoLimit_setAndConsume_outNum_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(self->cons_));
  [self setInputOutput];
  [self compute];
  [self->outNum_ setLabelWithNSString:label];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCasAlgoLimit)
