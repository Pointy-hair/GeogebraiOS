//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/plot/GeneralPathClippedForCurvePlotter.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GPoint2D.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/EuclidianViewInterfaceSlim.h"
#include "geogebra/common/euclidian/GeneralPathClipped.h"
#include "geogebra/common/euclidian/plot/CurvePlotter.h"
#include "geogebra/common/euclidian/plot/GeneralPathClippedForCurvePlotter.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/MyPoint.h"
#include "geogebra/common/util/Cloner.h"

@interface GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter ()

- (void)drawToWithDouble:(jdouble)x
              withDouble:(jdouble)y
             withBoolean:(jboolean)lineTo;

- (void)cornerWithDouble:(jdouble)x0
              withDouble:(jdouble)y0;

@end

__attribute__((unused)) static void GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_drawToWithDouble_withDouble_withBoolean_(GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *self, jdouble x, jdouble y, jboolean lineTo);

__attribute__((unused)) static void GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_cornerWithDouble_withDouble_(GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *self, jdouble x0, jdouble y0);

@implementation GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter

- (instancetype)initWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:(id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim>)view {
  GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_initWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(self, view);
  return self;
}

- (void)lineToWithDoubleArray:(IOSDoubleArray *)pos {
  [self drawToWithDoubleArray:pos withBoolean:YES];
}

- (void)moveToWithDoubleArray:(IOSDoubleArray *)pos {
  [self drawToWithDoubleArray:pos withBoolean:NO];
}

- (void)drawToWithDoubleArray:(IOSDoubleArray *)pos
                  withBoolean:(jboolean)lineTo {
  IOSDoubleArray *p = GeogebraCommonUtilCloner_cloneWithDoubleArray_(pos);
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(((GeogebraCommonEuclidianEuclidianView *) check_class_cast(view_, [GeogebraCommonEuclidianEuclidianView class])))) toScreenCoordsWithDoubleArray:p];
  GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_drawToWithDouble_withDouble_withBoolean_(self, IOSDoubleArray_Get(nil_chk(p), 0), IOSDoubleArray_Get(p, 1), lineTo);
}

- (void)drawToWithDouble:(jdouble)x
              withDouble:(jdouble)y
             withBoolean:(jboolean)lineTo {
  GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_drawToWithDouble_withDouble_withBoolean_(self, x, y, lineTo);
}

- (void)corner {
  GeogebraCommonKernelMyPoint *fp = [self firstPoint];
  if (fp != nil) {
    GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_cornerWithDouble_withDouble_(self, fp->x_, fp->y_);
    [self closePath];
  }
}

- (void)cornerWithDoubleArray:(IOSDoubleArray *)pos {
  IOSDoubleArray *p = GeogebraCommonUtilCloner_cloneWithDoubleArray_(pos);
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(((GeogebraCommonEuclidianEuclidianView *) check_class_cast(view_, [GeogebraCommonEuclidianEuclidianView class])))) toScreenCoordsWithDoubleArray:p];
  GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_cornerWithDouble_withDouble_(self, IOSDoubleArray_Get(nil_chk(p), 0), IOSDoubleArray_Get(p, 1));
}

- (void)cornerWithDouble:(jdouble)x0
              withDouble:(jdouble)y0 {
  GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_cornerWithDouble_withDouble_(self, x0, y0);
}

- (void)firstPointWithDoubleArray:(IOSDoubleArray *)pos
withGeogebraCommonEuclidianPlotCurvePlotter_GapEnum:(GeogebraCommonEuclidianPlotCurvePlotter_GapEnum *)moveToAllowed {
  IOSDoubleArray *p = GeogebraCommonUtilCloner_cloneWithDoubleArray_(pos);
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(((GeogebraCommonEuclidianEuclidianView *) check_class_cast(view_, [GeogebraCommonEuclidianEuclidianView class])))) toScreenCoordsWithDoubleArray:p];
  jdouble x0 = IOSDoubleArray_Get(nil_chk(p), 0);
  jdouble y0 = IOSDoubleArray_Get(p, 1);
  if (moveToAllowed == GeogebraCommonEuclidianPlotCurvePlotter_GapEnum_get_MOVE_TO()) {
    GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_drawToWithDouble_withDouble_withBoolean_(self, x0, y0, NO);
  }
  else if (moveToAllowed == GeogebraCommonEuclidianPlotCurvePlotter_GapEnum_get_LINE_TO() || moveToAllowed == GeogebraCommonEuclidianPlotCurvePlotter_GapEnum_get_CORNER()) {
    GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_drawToWithDouble_withDouble_withBoolean_(self, x0, y0, YES);
  }
  else if (moveToAllowed == GeogebraCommonEuclidianPlotCurvePlotter_GapEnum_get_RESET_XMIN()) {
    jdouble d = [((GeogebraCommonAwtGPoint2D *) nil_chk([self getCurrentPoint])) getY];
    if (!GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(d, y0)) {
      GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_drawToWithDouble_withDouble_withBoolean_(self, -10, d, YES);
      GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_drawToWithDouble_withDouble_withBoolean_(self, -10, y0, YES);
    }
    GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_drawToWithDouble_withDouble_withBoolean_(self, x0, y0, YES);
  }
  else if (moveToAllowed == GeogebraCommonEuclidianPlotCurvePlotter_GapEnum_get_RESET_XMAX()) {
    jdouble d = [((GeogebraCommonAwtGPoint2D *) nil_chk([self getCurrentPoint])) getY];
    if (!GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(d, y0)) {
      GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_drawToWithDouble_withDouble_withBoolean_(self, [((id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim>) nil_chk(view_)) getWidth] + 10, d, YES);
      GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_drawToWithDouble_withDouble_withBoolean_(self, [view_ getWidth] + 10, y0, YES);
    }
    GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_drawToWithDouble_withDouble_withBoolean_(self, x0, y0, YES);
  }
  else if (moveToAllowed == GeogebraCommonEuclidianPlotCurvePlotter_GapEnum_get_RESET_YMIN()) {
    jdouble d = [((GeogebraCommonAwtGPoint2D *) nil_chk([self getCurrentPoint])) getX];
    if (!GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(d, x0)) {
      GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_drawToWithDouble_withDouble_withBoolean_(self, d, -10, YES);
      GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_drawToWithDouble_withDouble_withBoolean_(self, x0, -10, YES);
    }
    GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_drawToWithDouble_withDouble_withBoolean_(self, x0, y0, YES);
  }
  else if (moveToAllowed == GeogebraCommonEuclidianPlotCurvePlotter_GapEnum_get_RESET_YMAX()) {
    jdouble d = [((GeogebraCommonAwtGPoint2D *) nil_chk([self getCurrentPoint])) getX];
    if (!GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(d, x0)) {
      GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_drawToWithDouble_withDouble_withBoolean_(self, [((GeogebraCommonAwtGPoint2D *) nil_chk([self getCurrentPoint])) getX], [((id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim>) nil_chk(view_)) getHeight] + 10, YES);
      GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_drawToWithDouble_withDouble_withBoolean_(self, x0, [view_ getHeight] + 10, YES);
    }
    GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_drawToWithDouble_withDouble_withBoolean_(self, x0, y0, YES);
  }
}

- (IOSDoubleArray *)newDoubleArray {
  return [IOSDoubleArray arrayWithLength:2];
}

- (jboolean)copyCoordsWithGeogebraCommonKernelMyPoint:(GeogebraCommonKernelMyPoint *)point
                                      withDoubleArray:(IOSDoubleArray *)ret {
  if (!GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMyPoint *) nil_chk(point)) getZ])) {
    return NO;
  }
  *IOSDoubleArray_GetRef(nil_chk(ret), 0) = point->x_;
  *IOSDoubleArray_GetRef(ret, 1) = point->y_;
  return YES;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:", "GeneralPathClippedForCurvePlotter", NULL, 0x1, NULL, NULL },
    { "lineToWithDoubleArray:", "lineTo", "V", 0x1, NULL, NULL },
    { "moveToWithDoubleArray:", "moveTo", "V", 0x1, NULL, NULL },
    { "drawToWithDoubleArray:withBoolean:", "drawTo", "V", 0x1, NULL, NULL },
    { "drawToWithDouble:withDouble:withBoolean:", "drawTo", "V", 0x2, NULL, NULL },
    { "corner", NULL, "V", 0x1, NULL, NULL },
    { "cornerWithDoubleArray:", "corner", "V", 0x1, NULL, NULL },
    { "cornerWithDouble:withDouble:", "corner", "V", 0x2, NULL, NULL },
    { "firstPointWithDoubleArray:withGeogebraCommonEuclidianPlotCurvePlotter_GapEnum:", "firstPoint", "V", 0x1, NULL, NULL },
    { "newDoubleArray", NULL, "[D", 0x1, NULL, NULL },
    { "copyCoordsWithGeogebraCommonKernelMyPoint:withDoubleArray:", "copyCoords", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter = { 2, "GeneralPathClippedForCurvePlotter", "geogebra.common.euclidian.plot", NULL, 0x1, 11, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter;
}

@end

void GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_initWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *self, id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim> view) {
  GeogebraCommonEuclidianGeneralPathClipped_initWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(self, view);
}

GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *new_GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_initWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim> view) {
  GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *self = [GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter alloc];
  GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_initWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(self, view);
  return self;
}

void GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_drawToWithDouble_withDouble_withBoolean_(GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *self, jdouble x, jdouble y, jboolean lineTo) {
  GeogebraCommonAwtGPoint2D *point = [self getCurrentPoint];
  if (point == nil) {
    [self moveToWithDouble:x withDouble:y];
  }
  else if (!GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(x, [point getX], [((id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim>) nil_chk(self->view_)) getMinPixelDistance]) || !GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(y, [point getY], [self->view_ getMinPixelDistance])) {
    if (lineTo) {
      [self lineToWithDouble:x withDouble:y];
    }
    else {
      [self moveToWithDouble:x withDouble:y];
    }
  }
}

void GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_cornerWithDouble_withDouble_(GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *self, jdouble x0, jdouble y0) {
  jint w = [((id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim>) nil_chk(self->view_)) getWidth];
  jint h = [self->view_ getHeight];
  GeogebraCommonAwtGPoint2D *pt = [self getCurrentPoint];
  if (pt == nil) {
    return;
  }
  jdouble x = [((GeogebraCommonAwtGPoint2D *) nil_chk(pt)) getX];
  jdouble y = [pt getY];
  if ((x < 0 && x0 > w) || (x > w && x0 < 0)) {
    GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_drawToWithDouble_withDouble_withBoolean_(self, x, -10, YES);
    GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_drawToWithDouble_withDouble_withBoolean_(self, x0, -10, YES);
    return;
  }
  if ((y < 0 && y0 > h) || (y > h && y0 < 0)) {
    GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_drawToWithDouble_withDouble_withBoolean_(self, -10, y, YES);
    GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_drawToWithDouble_withDouble_withBoolean_(self, -10, y0, YES);
    return;
  }
  if ((x > w || x < 0) && (y0 < 0 || y0 > h)) {
    GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_drawToWithDouble_withDouble_withBoolean_(self, x, y0, YES);
    return;
  }
  if ((x0 > w || x0 < 0) && (y < 0 || y > h)) {
    GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_drawToWithDouble_withDouble_withBoolean_(self, x0, y, YES);
    return;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter)
