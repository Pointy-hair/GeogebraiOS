//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/com/vividsolutions/jts/precision/CommonBits.java
//


#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/precision/CommonBits.h"
#include "java/lang/Double.h"
#include "java/lang/Long.h"

@interface ComVividsolutionsJtsPrecisionCommonBits () {
 @public
  jboolean isFirst_;
  jint commonMantissaBitsCount_;
  jlong commonBits_;
  jlong commonSignExp_;
}

@end

@implementation ComVividsolutionsJtsPrecisionCommonBits

+ (jlong)signExpBitsWithLong:(jlong)num {
  return ComVividsolutionsJtsPrecisionCommonBits_signExpBitsWithLong_(num);
}

+ (jint)numCommonMostSigMantissaBitsWithLong:(jlong)num1
                                    withLong:(jlong)num2 {
  return ComVividsolutionsJtsPrecisionCommonBits_numCommonMostSigMantissaBitsWithLong_withLong_(num1, num2);
}

+ (jlong)zeroLowerBitsWithLong:(jlong)bits
                       withInt:(jint)nBits {
  return ComVividsolutionsJtsPrecisionCommonBits_zeroLowerBitsWithLong_withInt_(bits, nBits);
}

+ (jint)getBitWithLong:(jlong)bits
               withInt:(jint)i {
  return ComVividsolutionsJtsPrecisionCommonBits_getBitWithLong_withInt_(bits, i);
}

- (instancetype)init {
  ComVividsolutionsJtsPrecisionCommonBits_init(self);
  return self;
}

- (void)addWithDouble:(jdouble)num {
  jlong numBits = JavaLangDouble_doubleToLongBitsWithDouble_(num);
  if (isFirst_) {
    commonBits_ = numBits;
    commonSignExp_ = ComVividsolutionsJtsPrecisionCommonBits_signExpBitsWithLong_(commonBits_);
    isFirst_ = NO;
    return;
  }
  jlong numSignExp = ComVividsolutionsJtsPrecisionCommonBits_signExpBitsWithLong_(numBits);
  if (numSignExp != commonSignExp_) {
    commonBits_ = 0;
    return;
  }
  commonMantissaBitsCount_ = ComVividsolutionsJtsPrecisionCommonBits_numCommonMostSigMantissaBitsWithLong_withLong_(commonBits_, numBits);
  commonBits_ = ComVividsolutionsJtsPrecisionCommonBits_zeroLowerBitsWithLong_withInt_(commonBits_, 64 - (12 + commonMantissaBitsCount_));
}

- (jdouble)getCommon {
  return JavaLangDouble_longBitsToDoubleWithLong_(commonBits_);
}

- (NSString *)toStringWithLong:(jlong)bits {
  jdouble x = JavaLangDouble_longBitsToDoubleWithLong_(bits);
  NSString *numStr = JavaLangLong_toBinaryStringWithLong_(bits);
  NSString *padStr = JreStrcat("$$", @"0000000000000000000000000000000000000000000000000000000000000000", numStr);
  NSString *bitStr = [padStr substring:((jint) [padStr length]) - 64];
  NSString *str = JreStrcat("$$$$$$D$", [((NSString *) nil_chk(bitStr)) substring:0 endIndex:1], @"  ", [bitStr substring:1 endIndex:12], @"(exp) ", [bitStr substring:12], @" [ ", x, @" ]");
  return str;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "signExpBitsWithLong:", "signExpBits", "J", 0x9, NULL, NULL },
    { "numCommonMostSigMantissaBitsWithLong:withLong:", "numCommonMostSigMantissaBits", "I", 0x9, NULL, NULL },
    { "zeroLowerBitsWithLong:withInt:", "zeroLowerBits", "J", 0x9, NULL, NULL },
    { "getBitWithLong:withInt:", "getBit", "I", 0x9, NULL, NULL },
    { "init", "CommonBits", NULL, 0x1, NULL, NULL },
    { "addWithDouble:", "add", "V", 0x1, NULL, NULL },
    { "getCommon", NULL, "D", 0x1, NULL, NULL },
    { "toStringWithLong:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "isFirst_", NULL, 0x2, "Z", NULL, NULL,  },
    { "commonMantissaBitsCount_", NULL, 0x2, "I", NULL, NULL,  },
    { "commonBits_", NULL, 0x2, "J", NULL, NULL,  },
    { "commonSignExp_", NULL, 0x2, "J", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsPrecisionCommonBits = { 2, "CommonBits", "com.vividsolutions.jts.precision", NULL, 0x1, 8, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsPrecisionCommonBits;
}

@end

jlong ComVividsolutionsJtsPrecisionCommonBits_signExpBitsWithLong_(jlong num) {
  ComVividsolutionsJtsPrecisionCommonBits_initialize();
  return RShift64(num, 52);
}

jint ComVividsolutionsJtsPrecisionCommonBits_numCommonMostSigMantissaBitsWithLong_withLong_(jlong num1, jlong num2) {
  ComVividsolutionsJtsPrecisionCommonBits_initialize();
  jint count = 0;
  for (jint i = 52; i >= 0; i--) {
    if (ComVividsolutionsJtsPrecisionCommonBits_getBitWithLong_withInt_(num1, i) != ComVividsolutionsJtsPrecisionCommonBits_getBitWithLong_withInt_(num2, i)) return count;
    count++;
  }
  return 52;
}

jlong ComVividsolutionsJtsPrecisionCommonBits_zeroLowerBitsWithLong_withInt_(jlong bits, jint nBits) {
  ComVividsolutionsJtsPrecisionCommonBits_initialize();
  jlong invMask = (LShift64(1LL, nBits)) - 1LL;
  jlong mask = ~invMask;
  jlong zeroed = bits & mask;
  return zeroed;
}

jint ComVividsolutionsJtsPrecisionCommonBits_getBitWithLong_withInt_(jlong bits, jint i) {
  ComVividsolutionsJtsPrecisionCommonBits_initialize();
  jlong mask = (LShift64(1LL, i));
  return (bits & mask) != 0 ? 1 : 0;
}

void ComVividsolutionsJtsPrecisionCommonBits_init(ComVividsolutionsJtsPrecisionCommonBits *self) {
  NSObject_init(self);
  self->isFirst_ = YES;
  self->commonMantissaBitsCount_ = 53;
  self->commonBits_ = 0;
}

ComVividsolutionsJtsPrecisionCommonBits *new_ComVividsolutionsJtsPrecisionCommonBits_init() {
  ComVividsolutionsJtsPrecisionCommonBits *self = [ComVividsolutionsJtsPrecisionCommonBits alloc];
  ComVividsolutionsJtsPrecisionCommonBits_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsPrecisionCommonBits)
