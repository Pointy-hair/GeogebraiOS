//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/prover/ProverPureSymbolicMethod.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/SymbolicParameters.h"
#include "geogebra/common/kernel/algos/SymbolicParametersAlgo.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/prover/NoSymbolicParametersException.h"
#include "geogebra/common/kernel/prover/ProverPureSymbolicMethod.h"
#include "geogebra/common/kernel/prover/polynomial/Polynomial.h"
#include "geogebra/common/util/Prover.h"
#include "geogebra/common/util/debug/Log.h"
#include "java/util/HashSet.h"

@implementation GeogebraCommonKernelProverProverPureSymbolicMethod

+ (GeogebraCommonUtilProver_ProofResultEnum *)proveWithGeogebraCommonUtilProver:(GeogebraCommonUtilProver *)prover {
  return GeogebraCommonKernelProverProverPureSymbolicMethod_proveWithGeogebraCommonUtilProver_(prover);
}

- (instancetype)init {
  GeogebraCommonKernelProverProverPureSymbolicMethod_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "proveWithGeogebraCommonUtilProver:", "prove", "Lgeogebra.common.util.Prover$ProofResult;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelProverProverPureSymbolicMethod = { 2, "ProverPureSymbolicMethod", "geogebra.common.kernel.prover", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelProverProverPureSymbolicMethod;
}

@end

GeogebraCommonUtilProver_ProofResultEnum *GeogebraCommonKernelProverProverPureSymbolicMethod_proveWithGeogebraCommonUtilProver_(GeogebraCommonUtilProver *prover) {
  GeogebraCommonKernelProverProverPureSymbolicMethod_initialize();
  GeogebraCommonKernelGeosGeoElement *statement = [((GeogebraCommonUtilProver *) nil_chk(prover)) getStatement];
  if ([GeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:statement]) {
    id<GeogebraCommonKernelAlgosSymbolicParametersAlgo> statementSymbolic = (id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(statement, @protocol(GeogebraCommonKernelAlgosSymbolicParametersAlgo));
    GeogebraCommonKernelAlgosSymbolicParameters *parameters = [((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) nil_chk(statementSymbolic)) getSymbolicParameters];
    @try {
      [((GeogebraCommonKernelAlgosSymbolicParameters *) nil_chk(parameters)) getFreeVariables];
    }
    @catch (GeogebraCommonKernelProverNoSymbolicParametersException *e) {
      return GeogebraCommonUtilProver_ProofResultEnum_get_UNKNOWN();
    }
  }
  else if ([GeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(statement)) getParentAlgorithm]]) {
    id<GeogebraCommonKernelAlgosSymbolicParametersAlgo> statementSymbolic = (id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast([statement getParentAlgorithm], @protocol(GeogebraCommonKernelAlgosSymbolicParametersAlgo));
    @try {
      IOSObjectArray *poly = [((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) nil_chk(statementSymbolic)) getPolynomials];
      {
        IOSObjectArray *a__ = poly;
        GeogebraCommonKernelProverPolynomialPolynomial * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        GeogebraCommonKernelProverPolynomialPolynomial * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          GeogebraCommonKernelProverPolynomialPolynomial *polynomial = *b__++;
          GeogebraCommonUtilDebugLog_debugWithId_(polynomial);
          if (![((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(polynomial)) isZero]) {
            return GeogebraCommonUtilProver_ProofResultEnum_get_FALSE();
          }
        }
      }
      return GeogebraCommonUtilProver_ProofResultEnum_get_TRUE();
    }
    @catch (GeogebraCommonKernelProverNoSymbolicParametersException *e) {
      return GeogebraCommonUtilProver_ProofResultEnum_get_UNKNOWN();
    }
  }
  return GeogebraCommonUtilProver_ProofResultEnum_get_UNKNOWN();
}

void GeogebraCommonKernelProverProverPureSymbolicMethod_init(GeogebraCommonKernelProverProverPureSymbolicMethod *self) {
  NSObject_init(self);
}

GeogebraCommonKernelProverProverPureSymbolicMethod *new_GeogebraCommonKernelProverProverPureSymbolicMethod_init() {
  GeogebraCommonKernelProverProverPureSymbolicMethod *self = [GeogebraCommonKernelProverProverPureSymbolicMethod alloc];
  GeogebraCommonKernelProverProverPureSymbolicMethod_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelProverProverPureSymbolicMethod)
