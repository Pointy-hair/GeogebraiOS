//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoAxesQuadricND.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoAxesQuadricND.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoVec2D.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoQuadricND.h"
#include "geogebra/common/main/Localization.h"

@interface GeogebraCommonKernelAlgosAlgoAxesQuadricND () {
 @public
  IOSObjectArray *eigenvec_;
  GeogebraCommonKernelGeosGeoVec2D *b_;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
            withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)c;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoAxesQuadricND, eigenvec_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoAxesQuadricND, b_, GeogebraCommonKernelGeosGeoVec2D *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoAxesQuadricND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoQuadricND_(GeogebraCommonKernelAlgosAlgoAxesQuadricND *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelKernelNDGeoQuadricND *c);

@implementation GeogebraCommonKernelAlgosAlgoAxesQuadricND

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
            withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)c {
  GeogebraCommonKernelAlgosAlgoAxesQuadricND_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, label, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
            withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)c {
  GeogebraCommonKernelAlgosAlgoAxesQuadricND_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, labels, c);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Axes();
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
            withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)c {
  GeogebraCommonKernelAlgosAlgoAxesQuadricND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, c);
  return self;
}

- (void)createInput {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, c_);
  [self setOutputLengthWithInt:((IOSObjectArray *) nil_chk(axes_))->size_];
  for (jint i = 0; i < axes_->size_; i++) {
    [self setOutputWithInt:i withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(axes_, i), [GeogebraCommonKernelGeosGeoElement class])];
  }
  [self setDependencies];
}

- (IOSObjectArray *)getAxes {
  return axes_;
}

- (GeogebraCommonKernelKernelNDGeoQuadricND *)getConic {
  return c_;
}

- (void)compute {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(axes_))->size_; i++) {
    [self setAxisCoordsWithInt:i];
  }
}

- (void)setAxisCoordsWithInt:(jint)i {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"AxisOfA" withNSString:[((GeogebraCommonKernelKernelNDGeoQuadricND *) nil_chk(c_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(c_);
  RELEASE_(axes_);
  RELEASE_(eigenvec_);
  RELEASE_(b_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoQuadricND:", "AlgoAxesQuadricND", NULL, 0x4, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoQuadricND:", "AlgoAxesQuadricND", NULL, 0x4, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoQuadricND:", "AlgoAxesQuadricND", NULL, 0x2, NULL, NULL },
    { "createInput", NULL, "V", 0x404, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x1, NULL, NULL },
    { "getAxes", NULL, "[Lgeogebra.common.kernel.kernelND.GeoLineND;", 0x1, NULL, NULL },
    { "getConic", NULL, "Lgeogebra.common.kernel.kernelND.GeoQuadricND;", 0x0, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "setAxisCoordsWithInt:", "setAxisCoords", "V", 0x404, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "c_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoQuadricND;", NULL, NULL,  },
    { "axes_", NULL, 0x4, "[Lgeogebra.common.kernel.kernelND.GeoLineND;", NULL, NULL,  },
    { "eigenvec_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoVec2D;", NULL, NULL,  },
    { "b_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoVec2D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoAxesQuadricND = { 2, "AlgoAxesQuadricND", "geogebra.common.kernel.algos", NULL, 0x401, 11, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoAxesQuadricND;
}

@end

void GeogebraCommonKernelAlgosAlgoAxesQuadricND_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoQuadricND_(GeogebraCommonKernelAlgosAlgoAxesQuadricND *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelKernelNDGeoQuadricND *c) {
  GeogebraCommonKernelAlgosAlgoAxesQuadricND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, c);
  GeogebraCommonKernelGeosGeoElement_setLabelsWithNSString_withGeogebraCommonKernelGeosGeoElementArray_(label, (IOSObjectArray *) check_class_cast(self->axes_, [IOSObjectArray class]));
}

void GeogebraCommonKernelAlgosAlgoAxesQuadricND_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoQuadricND_(GeogebraCommonKernelAlgosAlgoAxesQuadricND *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, GeogebraCommonKernelKernelNDGeoQuadricND *c) {
  GeogebraCommonKernelAlgosAlgoAxesQuadricND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, c);
  GeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withGeogebraCommonKernelGeosGeoElementArray_(labels, (IOSObjectArray *) check_class_cast(self->axes_, [IOSObjectArray class]));
}

void GeogebraCommonKernelAlgosAlgoAxesQuadricND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoQuadricND_(GeogebraCommonKernelAlgosAlgoAxesQuadricND *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelKernelNDGeoQuadricND *c) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoAxesQuadricND_set_c_(self, c);
  [self createInput];
  [self setInputOutput];
  [self compute];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoAxesQuadricND)
