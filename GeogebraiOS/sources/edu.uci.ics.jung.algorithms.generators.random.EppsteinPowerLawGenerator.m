//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/edu/uci/ics/jung/algorithms/generators/random/EppsteinPowerLawGenerator.java
//


#include "J2ObjC_source.h"
#include "edu/uci/ics/jung/algorithms/generators/random/EppsteinPowerLawGenerator.h"
#include "edu/uci/ics/jung/graph/Graph.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/util/Random.h"
#include "org/apache/commons/collections15/Factory.h"

@interface EduUciIcsJungAlgorithmsGeneratorsRandomEppsteinPowerLawGenerator () {
 @public
  jint mNumVertices_;
  jint mNumEdges_;
  jint mNumIterations_;
  jdouble mMaxDegree_;
  JavaUtilRandom *mRandom_;
  id<OrgApacheCommonsCollections15Factory> graphFactory_;
  id<OrgApacheCommonsCollections15Factory> vertexFactory_;
  id<OrgApacheCommonsCollections15Factory> edgeFactory_;
}

@end

J2OBJC_FIELD_SETTER(EduUciIcsJungAlgorithmsGeneratorsRandomEppsteinPowerLawGenerator, mRandom_, JavaUtilRandom *)
J2OBJC_FIELD_SETTER(EduUciIcsJungAlgorithmsGeneratorsRandomEppsteinPowerLawGenerator, graphFactory_, id<OrgApacheCommonsCollections15Factory>)
J2OBJC_FIELD_SETTER(EduUciIcsJungAlgorithmsGeneratorsRandomEppsteinPowerLawGenerator, vertexFactory_, id<OrgApacheCommonsCollections15Factory>)
J2OBJC_FIELD_SETTER(EduUciIcsJungAlgorithmsGeneratorsRandomEppsteinPowerLawGenerator, edgeFactory_, id<OrgApacheCommonsCollections15Factory>)

@implementation EduUciIcsJungAlgorithmsGeneratorsRandomEppsteinPowerLawGenerator

- (instancetype)initWithOrgApacheCommonsCollections15Factory:(id<OrgApacheCommonsCollections15Factory>)graphFactory
                    withOrgApacheCommonsCollections15Factory:(id<OrgApacheCommonsCollections15Factory>)vertexFactory
                    withOrgApacheCommonsCollections15Factory:(id<OrgApacheCommonsCollections15Factory>)edgeFactory
                                                     withInt:(jint)numVertices
                                                     withInt:(jint)numEdges
                                                     withInt:(jint)r {
  EduUciIcsJungAlgorithmsGeneratorsRandomEppsteinPowerLawGenerator_initWithOrgApacheCommonsCollections15Factory_withOrgApacheCommonsCollections15Factory_withOrgApacheCommonsCollections15Factory_withInt_withInt_withInt_(self, graphFactory, vertexFactory, edgeFactory, numVertices, numEdges, r);
  return self;
}

- (id<EduUciIcsJungGraphGraph>)initializeGraph {
  id<EduUciIcsJungGraphGraph> graph = nil;
  graph = [((id<OrgApacheCommonsCollections15Factory>) nil_chk(graphFactory_)) create];
  for (jint i = 0; i < mNumVertices_; i++) {
    [((id<EduUciIcsJungGraphGraph>) nil_chk(graph)) addVertexWithId:[((id<OrgApacheCommonsCollections15Factory>) nil_chk(vertexFactory_)) create]];
  }
  id<JavaUtilList> vertices = [new_JavaUtilArrayList_initWithJavaUtilCollection_([((id<EduUciIcsJungGraphGraph>) nil_chk(graph)) getVertices]) autorelease];
  while ([graph getEdgeCount] < mNumEdges_) {
    id u = [vertices getWithInt:J2ObjCFpToInt(([((JavaUtilRandom *) nil_chk(mRandom_)) nextDouble] * mNumVertices_))];
    id v = [vertices getWithInt:J2ObjCFpToInt(([mRandom_ nextDouble] * mNumVertices_))];
    if (![graph isSuccessorWithId:v withId:u]) {
      [graph addEdgeWithId:[((id<OrgApacheCommonsCollections15Factory>) nil_chk(edgeFactory_)) create] withId:u withId:v];
    }
  }
  jdouble maxDegree = 0;
  for (id __strong v in nil_chk([graph getVertices])) {
    maxDegree = JavaLangMath_maxWithDouble_withDouble_([graph degreeWithId:v], maxDegree);
  }
  mMaxDegree_ = maxDegree;
  return graph;
}

- (id<EduUciIcsJungGraphGraph>)create {
  id<EduUciIcsJungGraphGraph> graph = [self initializeGraph];
  id<JavaUtilList> vertices = [new_JavaUtilArrayList_initWithJavaUtilCollection_([((id<EduUciIcsJungGraphGraph>) nil_chk(graph)) getVertices]) autorelease];
  for (jint rIdx = 0; rIdx < mNumIterations_; rIdx++) {
    id v = nil;
    jint degree = 0;
    do {
      v = [vertices getWithInt:J2ObjCFpToInt(([((JavaUtilRandom *) nil_chk(mRandom_)) nextDouble] * mNumVertices_))];
      degree = [graph degreeWithId:v];
    }
    while (degree == 0);
    id<JavaUtilList> edges = [new_JavaUtilArrayList_initWithJavaUtilCollection_([graph getIncidentEdgesWithId:v]) autorelease];
    id randomExistingEdge = [edges getWithInt:J2ObjCFpToInt(([((JavaUtilRandom *) nil_chk(mRandom_)) nextDouble] * degree))];
    id x = [vertices getWithInt:J2ObjCFpToInt(([mRandom_ nextDouble] * mNumVertices_))];
    id y = nil;
    do {
      y = [vertices getWithInt:J2ObjCFpToInt(([mRandom_ nextDouble] * mNumVertices_))];
    }
    while ([mRandom_ nextDouble] > (([graph degreeWithId:y] + 1) / mMaxDegree_));
    if (![graph isSuccessorWithId:y withId:x] && x != y) {
      [graph removeEdgeWithId:randomExistingEdge];
      [graph addEdgeWithId:[((id<OrgApacheCommonsCollections15Factory>) nil_chk(edgeFactory_)) create] withId:x withId:y];
    }
  }
  return graph;
}

- (void)setSeedWithLong:(jlong)seed {
  [((JavaUtilRandom *) nil_chk(mRandom_)) setSeedWithLong:seed];
}

- (void)dealloc {
  RELEASE_(mRandom_);
  RELEASE_(graphFactory_);
  RELEASE_(vertexFactory_);
  RELEASE_(edgeFactory_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheCommonsCollections15Factory:withOrgApacheCommonsCollections15Factory:withOrgApacheCommonsCollections15Factory:withInt:withInt:withInt:", "EppsteinPowerLawGenerator", NULL, 0x1, NULL, NULL },
    { "initializeGraph", NULL, "Ledu.uci.ics.jung.graph.Graph;", 0x4, NULL, NULL },
    { "create", NULL, "Ledu.uci.ics.jung.graph.Graph;", 0x1, NULL, NULL },
    { "setSeedWithLong:", "setSeed", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mNumVertices_", NULL, 0x2, "I", NULL, NULL,  },
    { "mNumEdges_", NULL, 0x2, "I", NULL, NULL,  },
    { "mNumIterations_", NULL, 0x2, "I", NULL, NULL,  },
    { "mMaxDegree_", NULL, 0x2, "D", NULL, NULL,  },
    { "mRandom_", NULL, 0x2, "Ljava.util.Random;", NULL, NULL,  },
    { "graphFactory_", NULL, 0x2, "Lorg.apache.commons.collections15.Factory;", NULL, "Lorg/apache/commons/collections15/Factory<Ledu/uci/ics/jung/graph/Graph<TV;TE;>;>;",  },
    { "vertexFactory_", NULL, 0x2, "Lorg.apache.commons.collections15.Factory;", NULL, "Lorg/apache/commons/collections15/Factory<TV;>;",  },
    { "edgeFactory_", NULL, 0x2, "Lorg.apache.commons.collections15.Factory;", NULL, "Lorg/apache/commons/collections15/Factory<TE;>;",  },
  };
  static const J2ObjcClassInfo _EduUciIcsJungAlgorithmsGeneratorsRandomEppsteinPowerLawGenerator = { 2, "EppsteinPowerLawGenerator", "edu.uci.ics.jung.algorithms.generators.random", NULL, 0x1, 4, methods, 8, fields, 0, NULL, 0, NULL, NULL, "<V:Ljava/lang/Object;E:Ljava/lang/Object;>Ljava/lang/Object;Ledu/uci/ics/jung/algorithms/generators/GraphGenerator<TV;TE;>;" };
  return &_EduUciIcsJungAlgorithmsGeneratorsRandomEppsteinPowerLawGenerator;
}

@end

void EduUciIcsJungAlgorithmsGeneratorsRandomEppsteinPowerLawGenerator_initWithOrgApacheCommonsCollections15Factory_withOrgApacheCommonsCollections15Factory_withOrgApacheCommonsCollections15Factory_withInt_withInt_withInt_(EduUciIcsJungAlgorithmsGeneratorsRandomEppsteinPowerLawGenerator *self, id<OrgApacheCommonsCollections15Factory> graphFactory, id<OrgApacheCommonsCollections15Factory> vertexFactory, id<OrgApacheCommonsCollections15Factory> edgeFactory, jint numVertices, jint numEdges, jint r) {
  NSObject_init(self);
  EduUciIcsJungAlgorithmsGeneratorsRandomEppsteinPowerLawGenerator_set_graphFactory_(self, graphFactory);
  EduUciIcsJungAlgorithmsGeneratorsRandomEppsteinPowerLawGenerator_set_vertexFactory_(self, vertexFactory);
  EduUciIcsJungAlgorithmsGeneratorsRandomEppsteinPowerLawGenerator_set_edgeFactory_(self, edgeFactory);
  self->mNumVertices_ = numVertices;
  self->mNumEdges_ = numEdges;
  self->mNumIterations_ = r;
  EduUciIcsJungAlgorithmsGeneratorsRandomEppsteinPowerLawGenerator_setAndConsume_mRandom_(self, new_JavaUtilRandom_init());
}

EduUciIcsJungAlgorithmsGeneratorsRandomEppsteinPowerLawGenerator *new_EduUciIcsJungAlgorithmsGeneratorsRandomEppsteinPowerLawGenerator_initWithOrgApacheCommonsCollections15Factory_withOrgApacheCommonsCollections15Factory_withOrgApacheCommonsCollections15Factory_withInt_withInt_withInt_(id<OrgApacheCommonsCollections15Factory> graphFactory, id<OrgApacheCommonsCollections15Factory> vertexFactory, id<OrgApacheCommonsCollections15Factory> edgeFactory, jint numVertices, jint numEdges, jint r) {
  EduUciIcsJungAlgorithmsGeneratorsRandomEppsteinPowerLawGenerator *self = [EduUciIcsJungAlgorithmsGeneratorsRandomEppsteinPowerLawGenerator alloc];
  EduUciIcsJungAlgorithmsGeneratorsRandomEppsteinPowerLawGenerator_initWithOrgApacheCommonsCollections15Factory_withOrgApacheCommonsCollections15Factory_withOrgApacheCommonsCollections15Factory_withInt_withInt_withInt_(self, graphFactory, vertexFactory, edgeFactory, numVertices, numEdges, r);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUciIcsJungAlgorithmsGeneratorsRandomEppsteinPowerLawGenerator)
