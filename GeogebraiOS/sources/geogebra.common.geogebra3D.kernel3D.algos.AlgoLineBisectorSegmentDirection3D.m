//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoLineBisectorSegmentDirection3D.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoElement3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoLineBisectorSegmentDirection3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoLine3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "geogebra/common/main/Localization.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoLineBisectorSegmentDirection3D () {
 @public
  id<GeogebraCommonKernelKernelNDGeoSegmentND> segment_;
  id<GeogebraCommonKernelKernelNDGeoDirectionND> direction_;
  GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *line_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoLineBisectorSegmentDirection3D, segment_, id<GeogebraCommonKernelKernelNDGeoSegmentND>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoLineBisectorSegmentDirection3D, direction_, id<GeogebraCommonKernelKernelNDGeoDirectionND>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoLineBisectorSegmentDirection3D, line_, GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoLineBisectorSegmentDirection3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
            withGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)segment
          withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)direction {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoLineBisectorSegmentDirection3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoSegmentND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, label, segment, direction);
  return self;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *)getLine {
  return line_;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_LineBisector();
}

- (void)compute {
  if (direction_ == [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getSpace]) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(line_)) setUndefined];
    return;
  }
  GeogebraCommonKernelMatrixCoords *d = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(segment_)) getDirectionInD3])) crossProductWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(direction_)) getDirectionInD3]];
  if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(d)) isZero]) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(line_)) setUndefined];
  }
  else {
    GeogebraCommonKernelMatrixCoords *midpoint = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([segment_ getStartInhomCoords])) addWithGeogebraCommonKernelMatrixCoords:[segment_ getEndInhomCoords]])) mulWithDouble:0.5];
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(line_)) setCoordWithGeogebraCommonKernelMatrixCoords:midpoint withGeogebraCommonKernelMatrixCoords:d];
  }
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if ([GeogebraCommonKernelKernelNDGeoCoordSys2D_class_() isInstance:direction_]) return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"LineBisectorOfAParallelToB" withNSString:[((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(segment_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(direction_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"LineBisectorOfAPerpendicularToB" withNSString:[((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(segment_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(direction_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(segment_);
  RELEASE_(direction_);
  RELEASE_(line_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoSegmentND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "AlgoLineBisectorSegmentDirection3D", NULL, 0x1, NULL, NULL },
    { "getLine", NULL, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoLine3D;", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "segment_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoSegmentND;", NULL, NULL,  },
    { "direction_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoDirectionND;", NULL, NULL,  },
    { "line_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoLine3D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoLineBisectorSegmentDirection3D = { 2, "AlgoLineBisectorSegmentDirection3D", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoLineBisectorSegmentDirection3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoLineBisectorSegmentDirection3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoSegmentND_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoLineBisectorSegmentDirection3D *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoSegmentND> segment, id<GeogebraCommonKernelKernelNDGeoDirectionND> direction) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoElement3D_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoLineBisectorSegmentDirection3D_set_segment_(self, segment);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoLineBisectorSegmentDirection3D_set_direction_(self, direction);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoLineBisectorSegmentDirection3D_setAndConsume_line_(self, new_GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutputWithGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast(segment, [GeogebraCommonKernelGeosGeoElement class]), (GeogebraCommonKernelGeosGeoElement *) check_class_cast(direction, [GeogebraCommonKernelGeosGeoElement class]) } count:2 type:GeogebraCommonKernelGeosGeoElement_class_()] withGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ self->line_ } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()]];
  [self compute];
  [self->line_ setLabelWithNSString:label];
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoLineBisectorSegmentDirection3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoLineBisectorSegmentDirection3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoSegmentND_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoSegmentND> segment, id<GeogebraCommonKernelKernelNDGeoDirectionND> direction) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoLineBisectorSegmentDirection3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoLineBisectorSegmentDirection3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoLineBisectorSegmentDirection3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoSegmentND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, label, segment, direction);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoLineBisectorSegmentDirection3D)
