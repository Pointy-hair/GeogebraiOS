//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/TransformMirror.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Transform.h"
#include "geogebra/common/kernel/TransformMirror.h"
#include "geogebra/common/kernel/algos/AlgoMirror.h"
#include "geogebra/common/kernel/algos/AlgoTransformation.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"

@implementation GeogebraCommonKernelTransformMirror

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)mirror {
  GeogebraCommonKernelTransformMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_(self, cons, mirror);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)mirrorPoint {
  GeogebraCommonKernelTransformMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_(self, cons, mirrorPoint);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                    withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)mirrorCircle {
  GeogebraCommonKernelTransformMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoConic_(self, cons, mirrorCircle);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)mirrorLine {
  GeogebraCommonKernelTransformMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoLine_(self, cons, mirrorLine);
  return self;
}

- (GeogebraCommonKernelAlgosAlgoTransformation *)getTransformAlgoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonKernelAlgosAlgoMirror *algo = nil;
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(mirror_)) isGeoLine]) {
    algo = [new_GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoLineND_(cons_, geo, (GeogebraCommonKernelGeosGeoLine *) check_class_cast(mirror_, [GeogebraCommonKernelGeosGeoLine class])) autorelease];
  }
  else if ([mirror_ isGeoPoint]) {
    algo = [new_GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, geo, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(mirror_, [GeogebraCommonKernelGeosGeoPoint class])) autorelease];
  }
  else {
    algo = [new_GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoConic_(cons_, geo, (GeogebraCommonKernelGeosGeoConic *) check_class_cast(mirror_, [GeogebraCommonKernelGeosGeoConic class])) autorelease];
  }
  return algo;
}

- (jboolean)isAffine {
  return ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(mirror_)) isGeoConic];
}

- (jboolean)changesOrientation {
  return [((GeogebraCommonKernelGeosGeoElement *) nil_chk(mirror_)) isGeoLine] || [mirror_ isGeoConic];
}

- (void)dealloc {
  RELEASE_(mirror_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoElement:", "TransformMirror", NULL, 0x4, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoPoint:", "TransformMirror", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoConic:", "TransformMirror", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoLine:", "TransformMirror", NULL, 0x1, NULL, NULL },
    { "getTransformAlgoWithGeogebraCommonKernelGeosGeoElement:", "getTransformAlgo", "Lgeogebra.common.kernel.algos.AlgoTransformation;", 0x4, NULL, NULL },
    { "isAffine", NULL, "Z", 0x1, NULL, NULL },
    { "changesOrientation", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mirror_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelTransformMirror = { 2, "TransformMirror", "geogebra.common.kernel", NULL, 0x1, 7, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelTransformMirror;
}

@end

void GeogebraCommonKernelTransformMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelTransformMirror *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoElement *mirror) {
  GeogebraCommonKernelTransform_init(self);
  GeogebraCommonKernelTransformMirror_set_mirror_(self, mirror);
  GeogebraCommonKernelTransform_set_cons_(self, cons);
}

GeogebraCommonKernelTransformMirror *new_GeogebraCommonKernelTransformMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoElement *mirror) {
  GeogebraCommonKernelTransformMirror *self = [GeogebraCommonKernelTransformMirror alloc];
  GeogebraCommonKernelTransformMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_(self, cons, mirror);
  return self;
}

void GeogebraCommonKernelTransformMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelTransformMirror *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoPoint *mirrorPoint) {
  GeogebraCommonKernelTransform_init(self);
  GeogebraCommonKernelTransformMirror_set_mirror_(self, mirrorPoint);
  GeogebraCommonKernelTransform_set_cons_(self, cons);
}

GeogebraCommonKernelTransformMirror *new_GeogebraCommonKernelTransformMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoPoint *mirrorPoint) {
  GeogebraCommonKernelTransformMirror *self = [GeogebraCommonKernelTransformMirror alloc];
  GeogebraCommonKernelTransformMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_(self, cons, mirrorPoint);
  return self;
}

void GeogebraCommonKernelTransformMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoConic_(GeogebraCommonKernelTransformMirror *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoConic *mirrorCircle) {
  GeogebraCommonKernelTransform_init(self);
  GeogebraCommonKernelTransformMirror_set_mirror_(self, mirrorCircle);
  GeogebraCommonKernelTransform_set_cons_(self, cons);
}

GeogebraCommonKernelTransformMirror *new_GeogebraCommonKernelTransformMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoConic_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoConic *mirrorCircle) {
  GeogebraCommonKernelTransformMirror *self = [GeogebraCommonKernelTransformMirror alloc];
  GeogebraCommonKernelTransformMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoConic_(self, cons, mirrorCircle);
  return self;
}

void GeogebraCommonKernelTransformMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelTransformMirror *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoLine *mirrorLine) {
  GeogebraCommonKernelTransform_init(self);
  GeogebraCommonKernelTransformMirror_set_mirror_(self, mirrorLine);
  GeogebraCommonKernelTransform_set_cons_(self, cons);
}

GeogebraCommonKernelTransformMirror *new_GeogebraCommonKernelTransformMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoLine *mirrorLine) {
  GeogebraCommonKernelTransformMirror *self = [GeogebraCommonKernelTransformMirror alloc];
  GeogebraCommonKernelTransformMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoLine_(self, cons, mirrorLine);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelTransformMirror)
