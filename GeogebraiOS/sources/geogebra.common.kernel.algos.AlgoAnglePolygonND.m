//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoAnglePolygonND.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/draw/DrawAngle.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoAngle.h"
#include "geogebra/common/kernel/algos/AlgoAnglePointsND.h"
#include "geogebra/common/kernel/algos/AlgoAnglePolygonND.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/algos/DrawInformationAlgo.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/Localization.h"

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoAnglePolygonND_compute(GeogebraCommonKernelAlgosAlgoAnglePolygonND *self);

@interface GeogebraCommonKernelAlgosAlgoAnglePolygonND_$1 : NSObject < GeogebraCommonKernelAlgosAlgoElement_elementFactory > {
 @public
  GeogebraCommonKernelAlgosAlgoAnglePolygonND *this$0_;
}

- (GeogebraCommonKernelGeosGeoAngle *)newElement OBJC_METHOD_FAMILY_NONE;

- (instancetype)initWithGeogebraCommonKernelAlgosAlgoAnglePolygonND:(GeogebraCommonKernelAlgosAlgoAnglePolygonND *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelAlgosAlgoAnglePolygonND_$1)

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoAnglePolygonND_$1, this$0_, GeogebraCommonKernelAlgosAlgoAnglePolygonND *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoAnglePolygonND_$1_initWithGeogebraCommonKernelAlgosAlgoAnglePolygonND_(GeogebraCommonKernelAlgosAlgoAnglePolygonND_$1 *self, GeogebraCommonKernelAlgosAlgoAnglePolygonND *outer$);

__attribute__((unused)) static GeogebraCommonKernelAlgosAlgoAnglePolygonND_$1 *new_GeogebraCommonKernelAlgosAlgoAnglePolygonND_$1_initWithGeogebraCommonKernelAlgosAlgoAnglePolygonND_(GeogebraCommonKernelAlgosAlgoAnglePolygonND *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelAlgosAlgoAnglePolygonND_$1)

@implementation GeogebraCommonKernelAlgosAlgoAnglePolygonND

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  GeogebraCommonKernelAlgosAlgoAnglePolygonND_initWithGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
                  withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)poly
          withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  GeogebraCommonKernelAlgosAlgoAnglePolygonND_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, labels, poly, orientation);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                  withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)p
          withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  GeogebraCommonKernelAlgosAlgoAnglePolygonND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, p, orientation);
  return self;
}

- (void)setPolyAndOrientationWithGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)p
                     withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  GeogebraCommonKernelAlgosAlgoAnglePolygonND_set_poly_(self, p);
}

- (GeogebraCommonKernelAlgosAlgoAnglePointsND *)newAlgoAnglePointsWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setLabelsWithNSStringArray:(IOSObjectArray *)labels {
  if (labels != nil && labels->size_ == 1 && IOSObjectArray_Get(labels, 0) != nil && ![((NSString *) nil_chk(IOSObjectArray_Get(labels, 0))) isEqual:@""]) {
    [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputAngles_)) setIndexLabelsWithNSString:IOSObjectArray_Get(labels, 0)];
  }
  else {
    [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputAngles_)) setLabelsWithNSStringArray:labels];
    [outputAngles_ setIndexLabelsWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([outputAngles_ getElementWithInt:0])) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  }
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, poly_);
  [self setDependencies];
}

- (IOSObjectArray *)getAngles {
  return [self getOutput];
}

- (GeogebraCommonKernelGeosGeoPolygon *)getPolygon {
  return poly_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoAnglePolygonND_compute(self);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"AngleOfA" withNSString:[((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (GeogebraCommonKernelAlgosAlgoElement_OutputHandler *)createOutputPoints {
  return [new_GeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosAlgoElement_elementFactory_(self, [new_GeogebraCommonKernelAlgosAlgoAnglePolygonND_$1_initWithGeogebraCommonKernelAlgosAlgoAnglePolygonND_(self) autorelease]) autorelease];
}

- (jboolean)updateDrawInfoWithDoubleArray:(IOSDoubleArray *)m
                          withDoubleArray:(IOSDoubleArray *)firstVec
 withGeogebraCommonEuclidianDrawDrawAngle:(GeogebraCommonEuclidianDrawDrawAngle *)drawable {
  return YES;
}

- (jboolean)getCoordsInD3WithGeogebraCommonKernelMatrixCoordsArray:(IOSObjectArray *)drawCoords {
  return YES;
}

- (void)dealloc {
  RELEASE_(poly_);
  RELEASE_(outputAngles_);
  RELEASE_(algoAngle_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:", "AlgoAnglePolygonND", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelGeosGeoPolygon:withGeogebraCommonKernelKernelNDGeoDirectionND:", "AlgoAnglePolygonND", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoPolygon:withGeogebraCommonKernelKernelNDGeoDirectionND:", "AlgoAnglePolygonND", NULL, 0x0, NULL, NULL },
    { "setPolyAndOrientationWithGeogebraCommonKernelGeosGeoPolygon:withGeogebraCommonKernelKernelNDGeoDirectionND:", "setPolyAndOrientation", "V", 0x4, NULL, NULL },
    { "newAlgoAnglePointsWithGeogebraCommonKernelConstruction:", "newAlgoAnglePoints", "Lgeogebra.common.kernel.algos.AlgoAnglePointsND;", 0x404, NULL, NULL },
    { "setLabelsWithNSStringArray:", "setLabels", "V", 0x4, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getAngles", NULL, "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getPolygon", NULL, "Lgeogebra.common.kernel.geos.GeoPolygon;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "createOutputPoints", NULL, "Lgeogebra.common.kernel.algos.AlgoElement$OutputHandler;", 0x4, NULL, NULL },
    { "updateDrawInfoWithDoubleArray:withDoubleArray:withGeogebraCommonEuclidianDrawDrawAngle:", "updateDrawInfo", "Z", 0x1, NULL, NULL },
    { "getCoordsInD3WithGeogebraCommonKernelMatrixCoordsArray:", "getCoordsInD3", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x19, "J", NULL, NULL, .constantValue.asLong = GeogebraCommonKernelAlgosAlgoAnglePolygonND_serialVersionUID },
    { "poly_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoPolygon;", NULL, NULL,  },
    { "outputAngles_", NULL, 0x4, "Lgeogebra.common.kernel.algos.AlgoElement$OutputHandler;", NULL, "Lgeogebra/common/kernel/algos/AlgoElement$OutputHandler<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "algoAngle_", NULL, 0x4, "Lgeogebra.common.kernel.algos.AlgoAnglePointsND;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoAnglePolygonND = { 2, "AlgoAnglePolygonND", "geogebra.common.kernel.algos", NULL, 0x401, 14, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoAnglePolygonND;
}

@end

void GeogebraCommonKernelAlgosAlgoAnglePolygonND_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelAlgosAlgoAnglePolygonND *self, GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonKernelAlgosAlgoAngle_initWithGeogebraCommonKernelConstruction_(self, cons);
}

void GeogebraCommonKernelAlgosAlgoAnglePolygonND_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonKernelAlgosAlgoAnglePolygonND *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoPolygon *poly, id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation) {
  GeogebraCommonKernelAlgosAlgoAnglePolygonND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, poly, orientation);
  [self setLabelsWithNSStringArray:labels];
  [self update];
}

void GeogebraCommonKernelAlgosAlgoAnglePolygonND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonKernelAlgosAlgoAnglePolygonND *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoPolygon *p, id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation) {
  GeogebraCommonKernelAlgosAlgoAngle_initWithGeogebraCommonKernelConstruction_(self, cons);
  [self setPolyAndOrientationWithGeogebraCommonKernelGeosGeoPolygon:p withGeogebraCommonKernelKernelNDGeoDirectionND:orientation];
  GeogebraCommonKernelAlgosAlgoAnglePolygonND_set_algoAngle_(self, [self newAlgoAnglePointsWithGeogebraCommonKernelConstruction:cons]);
  GeogebraCommonKernelAlgosAlgoAnglePolygonND_set_outputAngles_(self, [self createOutputPoints]);
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoAnglePolygonND_compute(self);
}

void GeogebraCommonKernelAlgosAlgoAnglePolygonND_compute(GeogebraCommonKernelAlgosAlgoAnglePolygonND *self) {
  jint length = ((IOSObjectArray *) nil_chk([((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(self->poly_)) getPoints]))->size_;
  [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputAngles_)) adjustOutputSizeWithInt:length > 0 ? length : 1];
  for (jint i = 0; i < length; i++) {
    [((GeogebraCommonKernelAlgosAlgoAnglePointsND *) nil_chk(self->algoAngle_)) setABCWithGeogebraCommonKernelKernelNDGeoPointND:[self->poly_ getPointNDWithInt:(i + 1) % length] withGeogebraCommonKernelKernelNDGeoPointND:[self->poly_ getPointNDWithInt:i] withGeogebraCommonKernelKernelNDGeoPointND:[self->poly_ getPointNDWithInt:(i + length - 1) % length]];
    [self->algoAngle_ compute];
    GeogebraCommonKernelGeosGeoAngle *angle = (GeogebraCommonKernelGeosGeoAngle *) check_class_cast([self->outputAngles_ getElementWithInt:i], [GeogebraCommonKernelGeosGeoAngle class]);
    [((GeogebraCommonKernelGeosGeoAngle *) nil_chk(angle)) setWithGeogebraCommonKernelGeosGeoElement:[self->algoAngle_ getAngle]];
    if (!angle->isDrawable__) {
      [angle setDrawableWithBoolean:YES];
    }
    [angle setDrawAlgorithmWithGeogebraCommonKernelAlgosDrawInformationAlgo:[self->algoAngle_ copy__]];
    [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:self->algoAngle_];
  }
  for (jint i = length; i < [self->outputAngles_ size]; i++) [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self->outputAngles_ getElementWithInt:i])) setUndefined];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoAnglePolygonND)

@implementation GeogebraCommonKernelAlgosAlgoAnglePolygonND_$1

- (GeogebraCommonKernelGeosGeoAngle *)newElement {
  GeogebraCommonKernelGeosGeoAngle *p = [this$0_ newGeoAngleWithGeogebraCommonKernelConstruction:this$0_->cons_];
  [((GeogebraCommonKernelGeosGeoAngle *) nil_chk(p)) setValueWithDouble:0];
  [p setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:this$0_];
  return p;
}

- (instancetype)initWithGeogebraCommonKernelAlgosAlgoAnglePolygonND:(GeogebraCommonKernelAlgosAlgoAnglePolygonND *)outer$ {
  GeogebraCommonKernelAlgosAlgoAnglePolygonND_$1_initWithGeogebraCommonKernelAlgosAlgoAnglePolygonND_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newElement", NULL, "Lgeogebra.common.kernel.geos.GeoAngle;", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelAlgosAlgoAnglePolygonND:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.kernel.algos.AlgoAnglePolygonND;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonKernelAlgosAlgoAnglePolygonND", "createOutputPoints" };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoAnglePolygonND_$1 = { 2, "", "geogebra.common.kernel.algos", "AlgoAnglePolygonND", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lgeogebra/common/kernel/algos/AlgoElement$elementFactory<Lgeogebra/common/kernel/geos/GeoElement;>;" };
  return &_GeogebraCommonKernelAlgosAlgoAnglePolygonND_$1;
}

@end

void GeogebraCommonKernelAlgosAlgoAnglePolygonND_$1_initWithGeogebraCommonKernelAlgosAlgoAnglePolygonND_(GeogebraCommonKernelAlgosAlgoAnglePolygonND_$1 *self, GeogebraCommonKernelAlgosAlgoAnglePolygonND *outer$) {
  GeogebraCommonKernelAlgosAlgoAnglePolygonND_$1_set_this$0_(self, outer$);
  NSObject_init(self);
}

GeogebraCommonKernelAlgosAlgoAnglePolygonND_$1 *new_GeogebraCommonKernelAlgosAlgoAnglePolygonND_$1_initWithGeogebraCommonKernelAlgosAlgoAnglePolygonND_(GeogebraCommonKernelAlgosAlgoAnglePolygonND *outer$) {
  GeogebraCommonKernelAlgosAlgoAnglePolygonND_$1 *self = [GeogebraCommonKernelAlgosAlgoAnglePolygonND_$1 alloc];
  GeogebraCommonKernelAlgosAlgoAnglePolygonND_$1_initWithGeogebraCommonKernelAlgosAlgoAnglePolygonND_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoAnglePolygonND_$1)
