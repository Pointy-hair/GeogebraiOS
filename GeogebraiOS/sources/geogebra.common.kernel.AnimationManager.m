//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/AnimationManager.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/kernel/AnimationManager.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/geos/Animatable.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/main/App.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/TreeSet.h"

@interface GeogebraCommonKernelAnimationManager () {
 @public
  jboolean needToShowAnimationButton__;
  JavaUtilTreeSet *tempSet_;
}

- (void)adaptFrameRateWithLong:(jlong)compTime;

- (JavaUtilTreeSet *)getTempSet;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAnimationManager, tempSet_, JavaUtilTreeSet *)

__attribute__((unused)) static void GeogebraCommonKernelAnimationManager_adaptFrameRateWithLong_(GeogebraCommonKernelAnimationManager *self, jlong compTime);

__attribute__((unused)) static JavaUtilTreeSet *GeogebraCommonKernelAnimationManager_getTempSet(GeogebraCommonKernelAnimationManager *self);

@implementation GeogebraCommonKernelAnimationManager

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel2 {
  GeogebraCommonKernelAnimationManager_initWithGeogebraCommonKernelKernel_(self, kernel2);
  return self;
}

- (jboolean)needToShowAnimationButton {
  return needToShowAnimationButton__;
}

- (void)updateNeedToShowAnimationButton {
  jint size = [((JavaUtilArrayList *) nil_chk(animatedGeos_)) size];
  if (size == 0) {
    needToShowAnimationButton__ = NO;
    return;
  }
  for (jint i = 0; i < size; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [animatedGeos_ getWithInt:i];
    GeogebraCommonKernelGeosGeoElement *animObj = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getAnimationSpeedObject];
    if (animObj == nil || (![animObj isLabelSet] && [animObj isIndependent])) {
      needToShowAnimationButton__ = YES;
      return;
    }
  }
  needToShowAnimationButton__ = NO;
}

- (void)addAnimatedGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  @synchronized(self) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isAnimating] && ![((JavaUtilArrayList *) nil_chk(animatedGeos_)) containsWithId:geo]) {
      [animatedGeos_ addWithId:geo];
      [self updateNeedToShowAnimationButton];
    }
  }
}

- (void)removeAnimatedGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  @synchronized(self) {
    if ([((JavaUtilArrayList *) nil_chk(animatedGeos_)) removeWithId:geo] && [animatedGeos_ size] == 0) {
      [self stopAnimation];
    }
    [self updateNeedToShowAnimationButton];
  }
}

- (void)startAnimation {
  @synchronized(self) {
    if (![self isRunning] && [((JavaUtilArrayList *) nil_chk(animatedGeos_)) size] > 0) {
      [self updateNeedToShowAnimationButton];
      [self startTimer];
    }
  }
}

- (void)stopAnimation {
  @synchronized(self) {
    if ([self isRunning]) {
      [self stopTimer];
      [self updateNeedToShowAnimationButton];
    }
  }
}

- (jboolean)isPaused {
  return ![self isRunning] && [((JavaUtilArrayList *) nil_chk(animatedGeos_)) size] > 0;
}

- (void)clearAnimatedGeos {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(animatedGeos_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [animatedGeos_ getWithInt:i];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setAnimatingWithBoolean:NO];
  }
  [animatedGeos_ clear];
  [self updateNeedToShowAnimationButton];
}

- (void)adaptFrameRateWithLong:(jlong)compTime {
  GeogebraCommonKernelAnimationManager_adaptFrameRateWithLong_(self, compTime);
}

- (JavaUtilTreeSet *)getTempSet {
  return GeogebraCommonKernelAnimationManager_getTempSet(self);
}

- (void)sliderStep {
  if ([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) isSaving]) return;
  jlong startTime = JavaLangSystem_currentTimeMillis();
  [((JavaUtilArrayList *) nil_chk(changedGeos_)) clear];
  jint size = [((JavaUtilArrayList *) nil_chk(animatedGeos_)) size];
  for (jint i = size - 1; i >= 0; i--) {
    id<GeogebraCommonKernelGeosAnimatable> anim = (id<GeogebraCommonKernelGeosAnimatable>) check_protocol_cast([animatedGeos_ getWithInt:i], @protocol(GeogebraCommonKernelGeosAnimatable));
    jboolean changed = [((id<GeogebraCommonKernelGeosAnimatable>) nil_chk(anim)) doAnimationStepWithDouble:frameRate_];
    if (changed) [changedGeos_ addWithId:anim];
  }
  if ([changedGeos_ size] > 0) {
    GeogebraCommonKernelGeosGeoElement_updateCascadeWithJavaUtilArrayList_withJavaUtilTreeSet_withBoolean_(changedGeos_, GeogebraCommonKernelAnimationManager_getTempSet(self), NO);
    [kernel_ notifyRepaint];
    jlong compTime = JavaLangSystem_currentTimeMillis() - startTime;
    if ([((GeogebraCommonMainApp *) nil_chk([kernel_ getApplication])) getEuclidianView1] != nil) {
      compTime += [((GeogebraCommonEuclidianEuclidianView *) nil_chk([((GeogebraCommonMainApp *) nil_chk([kernel_ getApplication])) getEuclidianView1])) getLastRepaintTime];
    }
    if ([((GeogebraCommonMainApp *) nil_chk([kernel_ getApplication])) hasEuclidianView2WithInt:1]) {
      compTime += [((GeogebraCommonEuclidianEuclidianView *) nil_chk([((GeogebraCommonMainApp *) nil_chk([kernel_ getApplication])) getEuclidianView2WithInt:1])) getLastRepaintTime];
    }
    GeogebraCommonKernelAnimationManager_adaptFrameRateWithLong_(self, compTime);
  }
}

- (jboolean)isRunning {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setTimerDelayWithInt:(jint)i {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)stopTimer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)startTimer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)dealloc {
  RELEASE_(kernel_);
  RELEASE_(animatedGeos_);
  RELEASE_(changedGeos_);
  RELEASE_(tempSet_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "AnimationManager", NULL, 0x1, NULL, NULL },
    { "needToShowAnimationButton", NULL, "Z", 0x11, NULL, NULL },
    { "updateNeedToShowAnimationButton", NULL, "V", 0x1, NULL, NULL },
    { "addAnimatedGeoWithGeogebraCommonKernelGeosGeoElement:", "addAnimatedGeo", "V", 0x31, NULL, NULL },
    { "removeAnimatedGeoWithGeogebraCommonKernelGeosGeoElement:", "removeAnimatedGeo", "V", 0x31, NULL, NULL },
    { "startAnimation", NULL, "V", 0x21, NULL, NULL },
    { "stopAnimation", NULL, "V", 0x21, NULL, NULL },
    { "isPaused", NULL, "Z", 0x1, NULL, NULL },
    { "clearAnimatedGeos", NULL, "V", 0x1, NULL, NULL },
    { "adaptFrameRateWithLong:", "adaptFrameRate", "V", 0x2, NULL, NULL },
    { "getTempSet", NULL, "Ljava.util.TreeSet;", 0x2, NULL, NULL },
    { "sliderStep", NULL, "V", 0x4, NULL, NULL },
    { "isRunning", NULL, "Z", 0x401, NULL, NULL },
    { "setTimerDelayWithInt:", "setTimerDelay", "V", 0x404, NULL, NULL },
    { "stopTimer", NULL, "V", 0x404, NULL, NULL },
    { "startTimer", NULL, "V", 0x404, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "STANDARD_ANIMATION_TIME_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelAnimationManager_STANDARD_ANIMATION_TIME },
    { "MAX_ANIMATION_FRAME_RATE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelAnimationManager_MAX_ANIMATION_FRAME_RATE },
    { "MIN_ANIMATION_FRAME_RATE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelAnimationManager_MIN_ANIMATION_FRAME_RATE },
    { "kernel_", NULL, 0x4, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "animatedGeos_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "changedGeos_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/Animatable;>;",  },
    { "frameRate_", NULL, 0x4, "D", NULL, NULL,  },
    { "needToShowAnimationButton__", "needToShowAnimationButton", 0x2, "Z", NULL, NULL,  },
    { "tempSet_", NULL, 0x2, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Lgeogebra/common/kernel/algos/AlgoElement;>;",  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAnimationManager = { 2, "AnimationManager", "geogebra.common.kernel", NULL, 0x401, 16, methods, 9, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAnimationManager;
}

@end

void GeogebraCommonKernelAnimationManager_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelAnimationManager *self, GeogebraCommonKernelKernel *kernel2) {
  NSObject_init(self);
  self->frameRate_ = GeogebraCommonKernelAnimationManager_MAX_ANIMATION_FRAME_RATE;
  GeogebraCommonKernelAnimationManager_set_kernel_(self, kernel2);
  GeogebraCommonKernelAnimationManager_setAndConsume_animatedGeos_(self, new_JavaUtilArrayList_init());
  GeogebraCommonKernelAnimationManager_setAndConsume_changedGeos_(self, new_JavaUtilArrayList_init());
}

void GeogebraCommonKernelAnimationManager_adaptFrameRateWithLong_(GeogebraCommonKernelAnimationManager *self, jlong compTime) {
  jdouble framesPossible = 800.0 / compTime;
  if (framesPossible < self->frameRate_) {
    self->frameRate_ = JavaLangMath_maxWithDouble_withDouble_(framesPossible, GeogebraCommonKernelAnimationManager_MIN_ANIMATION_FRAME_RATE);
    [self setTimerDelayWithInt:(jint) JavaLangMath_roundWithDouble_(1000.0 / self->frameRate_)];
  }
  else if (self->frameRate_ < GeogebraCommonKernelAnimationManager_MAX_ANIMATION_FRAME_RATE) {
    self->frameRate_ = JavaLangMath_minWithDouble_withDouble_(framesPossible, GeogebraCommonKernelAnimationManager_MAX_ANIMATION_FRAME_RATE);
    [self setTimerDelayWithInt:(jint) JavaLangMath_roundWithDouble_(1000.0 / self->frameRate_)];
  }
}

JavaUtilTreeSet *GeogebraCommonKernelAnimationManager_getTempSet(GeogebraCommonKernelAnimationManager *self) {
  if (self->tempSet_ == nil) {
    GeogebraCommonKernelAnimationManager_setAndConsume_tempSet_(self, new_JavaUtilTreeSet_init());
  }
  return self->tempSet_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAnimationManager)
