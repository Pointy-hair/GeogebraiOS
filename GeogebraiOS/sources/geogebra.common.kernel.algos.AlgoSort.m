//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoSort.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoSort.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/TreeSet.h"

@interface GeogebraCommonKernelAlgosAlgoSort () {
 @public
  GeogebraCommonKernelGeosGeoList *inputList_;
  GeogebraCommonKernelGeosGeoList *outputList_;
  jint size_;
  GeogebraCommonKernelGeosGeoList *valueList_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoSort, inputList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoSort, outputList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoSort, valueList_, GeogebraCommonKernelGeosGeoList *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoSort_compute(GeogebraCommonKernelAlgosAlgoSort *self);

@implementation GeogebraCommonKernelAlgosAlgoSort

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)inputList {
  GeogebraCommonKernelAlgosAlgoSort_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)valueList
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)inputList {
  GeogebraCommonKernelAlgosAlgoSort_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, cons, label, valueList, inputList);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)inputList
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)valueList {
  GeogebraCommonKernelAlgosAlgoSort_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, cons, inputList, valueList);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)inputList {
  GeogebraCommonKernelAlgosAlgoSort_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, inputList);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Sort();
}

- (void)setInputOutput {
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(outputList_)) setTypeStringForXMLWithNSString:[((GeogebraCommonKernelGeosGeoList *) nil_chk(inputList_)) getTypeStringForXML]];
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:valueList_ == nil ? 1 : 2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  if (valueList_ != nil) {
    IOSObjectArray_Set(input_, 0, valueList_);
    IOSObjectArray_Set(input_, 1, inputList_);
  }
  else {
    IOSObjectArray_Set(input_, 0, inputList_);
  }
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:outputList_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoList *)getResult {
  return outputList_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoSort_compute(self);
}

- (void)dealloc {
  RELEASE_(inputList_);
  RELEASE_(outputList_);
  RELEASE_(valueList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:", "AlgoSort", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:", "AlgoSort", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:", "AlgoSort", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoList:", "AlgoSort", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inputList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "outputList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "size_", NULL, 0x2, "I", NULL, NULL,  },
    { "valueList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoSort = { 2, "AlgoSort", "geogebra.common.kernel.algos", NULL, 0x1, 8, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoSort;
}

@end

void GeogebraCommonKernelAlgosAlgoSort_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoSort *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelAlgosAlgoSort_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, inputList);
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoSort *new_GeogebraCommonKernelAlgosAlgoSort_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelAlgosAlgoSort *self = [GeogebraCommonKernelAlgosAlgoSort alloc];
  GeogebraCommonKernelAlgosAlgoSort_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

void GeogebraCommonKernelAlgosAlgoSort_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoSort *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *valueList, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelAlgosAlgoSort_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, cons, inputList, valueList);
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoSort *new_GeogebraCommonKernelAlgosAlgoSort_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *valueList, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelAlgosAlgoSort *self = [GeogebraCommonKernelAlgosAlgoSort alloc];
  GeogebraCommonKernelAlgosAlgoSort_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, cons, label, valueList, inputList);
  return self;
}

void GeogebraCommonKernelAlgosAlgoSort_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoSort *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *inputList, GeogebraCommonKernelGeosGeoList *valueList) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoSort_set_inputList_(self, inputList);
  GeogebraCommonKernelAlgosAlgoSort_set_valueList_(self, valueList);
  GeogebraCommonKernelAlgosAlgoSort_setAndConsume_outputList_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoSort_compute(self);
}

GeogebraCommonKernelAlgosAlgoSort *new_GeogebraCommonKernelAlgosAlgoSort_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *inputList, GeogebraCommonKernelGeosGeoList *valueList) {
  GeogebraCommonKernelAlgosAlgoSort *self = [GeogebraCommonKernelAlgosAlgoSort alloc];
  GeogebraCommonKernelAlgosAlgoSort_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, cons, inputList, valueList);
  return self;
}

void GeogebraCommonKernelAlgosAlgoSort_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoSort *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelAlgosAlgoSort_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, cons, inputList, nil);
}

GeogebraCommonKernelAlgosAlgoSort *new_GeogebraCommonKernelAlgosAlgoSort_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelAlgosAlgoSort *self = [GeogebraCommonKernelAlgosAlgoSort alloc];
  GeogebraCommonKernelAlgosAlgoSort_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, inputList);
  return self;
}

void GeogebraCommonKernelAlgosAlgoSort_compute(GeogebraCommonKernelAlgosAlgoSort *self) {
  self->size_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->inputList_)) size];
  if (![self->inputList_ isDefined] || self->size_ == 0) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setUndefined];
    return;
  }
  if (self->valueList_ != nil && (![self->valueList_ isDefined] || [self->valueList_ size] != self->size_)) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setUndefined];
    return;
  }
  GeogebraCommonKernelGeosGeoElement *geo0 = [self->inputList_ getWithInt:0];
  IOSClass *geoClass = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo0)) getClass];
  JavaUtilTreeSet *sortedSet;
  if ([geo0 isGeoPoint]) {
    sortedSet = [new_JavaUtilTreeSet_initWithJavaUtilComparator_(GeogebraCommonKernelGeosGeoPoint_getComparatorX()) autorelease];
  }
  else if ([geo0 isGeoText]) {
    sortedSet = [new_JavaUtilTreeSet_initWithJavaUtilComparator_(GeogebraCommonKernelGeosGeoText_getComparator()) autorelease];
  }
  else if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo0]) {
    sortedSet = [new_JavaUtilTreeSet_initWithJavaUtilComparator_(GeogebraCommonKernelGeosGeoNumeric_getComparator()) autorelease];
  }
  else {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setUndefined];
    return;
  }
  for (jint i = 0; i < self->size_; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [self->inputList_ getWithInt:i];
    if ([[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getClass] isEqual:geoClass]) {
      [((JavaUtilTreeSet *) nil_chk(sortedSet)) addWithId:geo];
    }
    else {
      [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setUndefined];
      return;
    }
  }
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setDefinedWithBoolean:YES];
  [self->outputList_ clear];
  id<JavaUtilIterator> iterator = [((JavaUtilTreeSet *) nil_chk(sortedSet)) iterator];
  if (self->valueList_ == nil) {
    while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
      [self->outputList_ addWithGeogebraCommonKernelGeosGeoElement:([iterator next])];
    }
  }
  else {
    while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
      jint pos = [self->inputList_ findWithGeogebraCommonKernelGeosGeoElement:[iterator next]];
      [self->outputList_ addWithGeogebraCommonKernelGeosGeoElement:[self->valueList_ getWithInt:pos]];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoSort)
