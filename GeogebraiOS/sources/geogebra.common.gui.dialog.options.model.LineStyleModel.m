//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/dialog/options/model/LineStyleModel.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/gui/dialog/options/model/LineStyleModel.h"
#include "geogebra/common/gui/dialog/options/model/OptionsModel.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/plugin/EuclidianStyleConstants.h"
#include "java/lang/Integer.h"

@interface GeogebraCommonGuiDialogOptionsModelLineStyleModel () {
 @public
  id<GeogebraCommonGuiDialogOptionsModelLineStyleModel_ILineStyleListener> listener_;
  jboolean lineTypeEnabled_;
  jboolean lineOpacityEnabled_;
}

+ (IOSObjectArray *)getLineTypes;

- (jint)maxMinimumThickness;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogOptionsModelLineStyleModel, listener_, id<GeogebraCommonGuiDialogOptionsModelLineStyleModel_ILineStyleListener>)

static IOSObjectArray *GeogebraCommonGuiDialogOptionsModelLineStyleModel_lineStyleArray_ = nil;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGuiDialogOptionsModelLineStyleModel, lineStyleArray_, IOSObjectArray *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonGuiDialogOptionsModelLineStyleModel, lineStyleArray_, IOSObjectArray *)

__attribute__((unused)) static IOSObjectArray *GeogebraCommonGuiDialogOptionsModelLineStyleModel_getLineTypes();

__attribute__((unused)) static jint GeogebraCommonGuiDialogOptionsModelLineStyleModel_maxMinimumThickness(GeogebraCommonGuiDialogOptionsModelLineStyleModel *self);

@interface GeogebraCommonGuiDialogOptionsModelLineStyleModel_ILineStyleListener : NSObject
@end

@implementation GeogebraCommonGuiDialogOptionsModelLineStyleModel

+ (void)initStyleArray {
  GeogebraCommonGuiDialogOptionsModelLineStyleModel_initStyleArray();
}

- (instancetype)initWithGeogebraCommonGuiDialogOptionsModelLineStyleModel_ILineStyleListener:(id<GeogebraCommonGuiDialogOptionsModelLineStyleModel_ILineStyleListener>)listener {
  GeogebraCommonGuiDialogOptionsModelLineStyleModel_initWithGeogebraCommonGuiDialogOptionsModelLineStyleModel_ILineStyleListener_(self, listener);
  return self;
}

+ (IOSObjectArray *)getLineTypes {
  return GeogebraCommonGuiDialogOptionsModelLineStyleModel_getLineTypes();
}

+ (JavaLangInteger *)getStyleAtWithInt:(jint)i {
  return GeogebraCommonGuiDialogOptionsModelLineStyleModel_getStyleAtWithInt_(i);
}

+ (JavaLangInteger *)getStyleCount {
  return GeogebraCommonGuiDialogOptionsModelLineStyleModel_getStyleCount();
}

- (jint)maxMinimumThickness {
  return GeogebraCommonGuiDialogOptionsModelLineStyleModel_maxMinimumThickness(self);
}

- (void)updateProperties {
  GeogebraCommonKernelGeosGeoElement *temp, *geo0 = [self getGeoAtWithInt:0];
  if (listener_ != nil) {
    [listener_ setThicknessSliderValueWithInt:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo0)) getLineThickness]];
    [listener_ setThicknessSliderMinimumWithInt:GeogebraCommonGuiDialogOptionsModelLineStyleModel_maxMinimumThickness(self)];
    jint opacity = J2ObjCFpToInt((([geo0 getLineOpacity] / 255.0f) * 100));
    [listener_ setOpacitySliderValueWithInt:opacity];
    [listener_ setLineTypeVisibleWithBoolean:lineTypeEnabled_];
    [listener_ setLineOpacityVisibleWithBoolean:lineOpacityEnabled_];
  }
  if (lineTypeEnabled_) {
    jboolean equalStyle = YES;
    jint type0 = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo0)) getLineType];
    for (jint i = 1; i < [self getGeosLength]; i++) {
      temp = [self getGeoAtWithInt:i];
      if (type0 != [((GeogebraCommonKernelGeosGeoElement *) nil_chk(temp)) getLineType]) equalStyle = NO;
    }
    if (listener_ != nil) {
      [listener_ selectCommonLineStyleWithBoolean:equalStyle withInt:type0];
    }
  }
}

- (void)applyThicknessWithInt:(jint)value {
  for (jint i = 0; i < [self getGeosLength]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setLineThicknessWithInt:value];
    [geo updateVisualStyleRepaint];
  }
}

- (void)applyLineTypeWithInt:(jint)type {
  for (jint i = 0; i < [self getGeosLength]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setLineTypeWithInt:type];
    [geo updateVisualStyleRepaint];
  }
}

- (void)applyOpacityWithInt:(jint)value {
  for (jint i = 0; i < [self getGeosLength]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setLineOpacityWithInt:value];
    [geo updateVisualStyleRepaint];
  }
}

- (void)applyLineTypeFromIndexWithInt:(jint)index {
  [self applyLineTypeWithInt:[((JavaLangInteger *) nil_chk(IOSObjectArray_Get(nil_chk(GeogebraCommonGuiDialogOptionsModelLineStyleModel_lineStyleArray_), index))) intValue]];
}

- (jboolean)isValidAtWithInt:(jint)index {
  GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoAtWithInt:index])) getGeoElementForPropertiesDialog];
  return ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) showLineProperties] || [geo isNumberValue]) && ![geo isGeoBoolean] && !(([geo isKindOfClass:[GeogebraCommonKernelGeosGeoNumeric class]]) && [((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class])) isSlider]);
}

- (jboolean)checkGeos {
  jboolean geosOK = YES;
  lineTypeEnabled_ = YES;
  lineOpacityEnabled_ = YES;
  for (jint i = 0; i < [self getGeosLength]; i++) {
    if (![self isValidAtWithInt:i]) {
      geosOK = NO;
      break;
    }
    GeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
    if (([geo isKindOfClass:[GeogebraCommonKernelGeosGeoNumeric class]]) && [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class])))) isSlider]) {
      lineTypeEnabled_ = NO;
      lineOpacityEnabled_ = NO;
    }
  }
  return geosOK;
}

- (void)dealloc {
  RELEASE_(listener_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initStyleArray", NULL, "V", 0x9, NULL, NULL },
    { "initWithGeogebraCommonGuiDialogOptionsModelLineStyleModel_ILineStyleListener:", "LineStyleModel", NULL, 0x1, NULL, NULL },
    { "getLineTypes", NULL, "[Ljava.lang.Integer;", 0x1a, NULL, NULL },
    { "getStyleAtWithInt:", "getStyleAt", "Ljava.lang.Integer;", 0x19, NULL, NULL },
    { "getStyleCount", NULL, "Ljava.lang.Integer;", 0x19, NULL, NULL },
    { "maxMinimumThickness", NULL, "I", 0x2, NULL, NULL },
    { "updateProperties", NULL, "V", 0x1, NULL, NULL },
    { "applyThicknessWithInt:", "applyThickness", "V", 0x1, NULL, NULL },
    { "applyLineTypeWithInt:", "applyLineType", "V", 0x1, NULL, NULL },
    { "applyOpacityWithInt:", "applyOpacity", "V", 0x1, NULL, NULL },
    { "applyLineTypeFromIndexWithInt:", "applyLineTypeFromIndex", "V", 0x1, NULL, NULL },
    { "isValidAtWithInt:", "isValidAt", "Z", 0x1, NULL, NULL },
    { "checkGeos", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "listener_", NULL, 0x2, "Lgeogebra.common.gui.dialog.options.model.LineStyleModel$ILineStyleListener;", NULL, NULL,  },
    { "lineTypeEnabled_", NULL, 0x2, "Z", NULL, NULL,  },
    { "lineOpacityEnabled_", NULL, 0x2, "Z", NULL, NULL,  },
    { "lineStyleArray_", NULL, 0xa, "[Ljava.lang.Integer;", &GeogebraCommonGuiDialogOptionsModelLineStyleModel_lineStyleArray_, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.gui.dialog.options.model.LineStyleModel$ILineStyleListener;"};
  static const J2ObjcClassInfo _GeogebraCommonGuiDialogOptionsModelLineStyleModel = { 2, "LineStyleModel", "geogebra.common.gui.dialog.options.model", NULL, 0x1, 13, methods, 4, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonGuiDialogOptionsModelLineStyleModel;
}

@end

void GeogebraCommonGuiDialogOptionsModelLineStyleModel_initStyleArray() {
  GeogebraCommonGuiDialogOptionsModelLineStyleModel_initialize();
  if (GeogebraCommonGuiDialogOptionsModelLineStyleModel_lineStyleArray_ == nil) {
    JreStrongAssign(&GeogebraCommonGuiDialogOptionsModelLineStyleModel_lineStyleArray_, nil, GeogebraCommonGuiDialogOptionsModelLineStyleModel_getLineTypes());
  }
}

void GeogebraCommonGuiDialogOptionsModelLineStyleModel_initWithGeogebraCommonGuiDialogOptionsModelLineStyleModel_ILineStyleListener_(GeogebraCommonGuiDialogOptionsModelLineStyleModel *self, id<GeogebraCommonGuiDialogOptionsModelLineStyleModel_ILineStyleListener> listener) {
  GeogebraCommonGuiDialogOptionsModelOptionsModel_init(self);
  GeogebraCommonGuiDialogOptionsModelLineStyleModel_set_listener_(self, listener);
}

GeogebraCommonGuiDialogOptionsModelLineStyleModel *new_GeogebraCommonGuiDialogOptionsModelLineStyleModel_initWithGeogebraCommonGuiDialogOptionsModelLineStyleModel_ILineStyleListener_(id<GeogebraCommonGuiDialogOptionsModelLineStyleModel_ILineStyleListener> listener) {
  GeogebraCommonGuiDialogOptionsModelLineStyleModel *self = [GeogebraCommonGuiDialogOptionsModelLineStyleModel alloc];
  GeogebraCommonGuiDialogOptionsModelLineStyleModel_initWithGeogebraCommonGuiDialogOptionsModelLineStyleModel_ILineStyleListener_(self, listener);
  return self;
}

IOSObjectArray *GeogebraCommonGuiDialogOptionsModelLineStyleModel_getLineTypes() {
  GeogebraCommonGuiDialogOptionsModelLineStyleModel_initialize();
  IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [new_JavaLangInteger_initWithInt_(GeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_FULL) autorelease], [new_JavaLangInteger_initWithInt_(GeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DASHED_LONG) autorelease], [new_JavaLangInteger_initWithInt_(GeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DASHED_SHORT) autorelease], [new_JavaLangInteger_initWithInt_(GeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DOTTED) autorelease], [new_JavaLangInteger_initWithInt_(GeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DASHED_DOTTED) autorelease] } count:5 type:JavaLangInteger_class_()];
  return ret;
}

JavaLangInteger *GeogebraCommonGuiDialogOptionsModelLineStyleModel_getStyleAtWithInt_(jint i) {
  GeogebraCommonGuiDialogOptionsModelLineStyleModel_initialize();
  GeogebraCommonGuiDialogOptionsModelLineStyleModel_initStyleArray();
  return IOSObjectArray_Get(nil_chk(GeogebraCommonGuiDialogOptionsModelLineStyleModel_lineStyleArray_), i);
}

JavaLangInteger *GeogebraCommonGuiDialogOptionsModelLineStyleModel_getStyleCount() {
  GeogebraCommonGuiDialogOptionsModelLineStyleModel_initialize();
  GeogebraCommonGuiDialogOptionsModelLineStyleModel_initStyleArray();
  return JavaLangInteger_valueOfWithInt_(((IOSObjectArray *) nil_chk(GeogebraCommonGuiDialogOptionsModelLineStyleModel_lineStyleArray_))->size_);
}

jint GeogebraCommonGuiDialogOptionsModelLineStyleModel_maxMinimumThickness(GeogebraCommonGuiDialogOptionsModelLineStyleModel *self) {
  if (![self hasGeos]) {
    return 1;
  }
  for (jint i = 0; i < [self getGeosLength]; i++) {
    GeogebraCommonKernelGeosGeoElement *testGeo = [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoAtWithInt:i])) getGeoElementForPropertiesDialog];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(testGeo)) getMinimumLineThickness] == 1) {
      return 1;
    }
  }
  return 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiDialogOptionsModelLineStyleModel)

@implementation GeogebraCommonGuiDialogOptionsModelLineStyleModel_ILineStyleListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setThicknessSliderValueWithInt:", "setThicknessSliderValue", "V", 0x401, NULL, NULL },
    { "setThicknessSliderMinimumWithInt:", "setThicknessSliderMinimum", "V", 0x401, NULL, NULL },
    { "setOpacitySliderValueWithInt:", "setOpacitySliderValue", "V", 0x401, NULL, NULL },
    { "selectCommonLineStyleWithBoolean:withInt:", "selectCommonLineStyle", "V", 0x401, NULL, NULL },
    { "setLineTypeVisibleWithBoolean:", "setLineTypeVisible", "V", 0x401, NULL, NULL },
    { "setLineOpacityVisibleWithBoolean:", "setLineOpacityVisible", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiDialogOptionsModelLineStyleModel_ILineStyleListener = { 2, "ILineStyleListener", "geogebra.common.gui.dialog.options.model", "LineStyleModel", 0x609, 6, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiDialogOptionsModelLineStyleModel_ILineStyleListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(GeogebraCommonGuiDialogOptionsModelLineStyleModel_ILineStyleListener)
