//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricComputerCylinderOpen.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricComputerCylinder.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricComputerCylinderOpen.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DPart.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/Coords.h"

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricComputerCylinderOpen

- (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *)newQuadricWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart_initWithGeogebraCommonKernelConstruction_(c) autorelease];
}

- (void)setQuadricWithGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *)quadric
                                  withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)origin
                                  withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)direction
                                                            withDouble:(jdouble)number {
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(direction)) calcNorm];
  jdouble altitude = [direction getNorm];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) nil_chk(quadric)) setCylinderWithGeogebraCommonKernelMatrixCoords:origin withGeogebraCommonKernelMatrixCoords:[direction mulWithDouble:1 / altitude] withDouble:number];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) check_class_cast(quadric, [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart class])) setLimitsWithDouble:0 withDouble:altitude];
}

- (instancetype)init {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricComputerCylinderOpen_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newQuadricWithGeogebraCommonKernelConstruction:", "newQuadric", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3D;", 0x1, NULL, NULL },
    { "setQuadricWithGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withDouble:", "setQuadric", "V", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricComputerCylinderOpen = { 2, "AlgoQuadricComputerCylinderOpen", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricComputerCylinderOpen;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricComputerCylinderOpen_init(GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricComputerCylinderOpen *self) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricComputerCylinder_init(self);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricComputerCylinderOpen *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricComputerCylinderOpen_init() {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricComputerCylinderOpen *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricComputerCylinderOpen alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricComputerCylinderOpen_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricComputerCylinderOpen)
