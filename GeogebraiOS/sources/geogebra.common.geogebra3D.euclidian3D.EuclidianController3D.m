//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidian3D/EuclidianController3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GPoint.h"
#include "geogebra/common/euclidian/DrawableND.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/euclidian/EuclidianController.h"
#include "geogebra/common/euclidian/EuclidianControllerCompanion.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/Hits.h"
#include "geogebra/common/euclidian/Previewable.h"
#include "geogebra/common/euclidian/event/AbstractEvent.h"
#include "geogebra/common/euclidian/event/PointerEventType.h"
#include "geogebra/common/geogebra3D/euclidian3D/EuclidianController3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/EuclidianController3DCompanion.h"
#include "geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/Hits3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/TextDispatcher3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawConic3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawConicSection3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawExtrusionOrConify3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawIntersectionCurve3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawLine3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawPoint3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawPolygon3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawPolyhedron3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawSegment3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Renderer.h"
#include "geogebra/common/geogebra3D/euclidianFor3D/EuclidianControllerFor3DCompanion.h"
#include "geogebra/common/geogebra3D/kernel3D/ConstructionDefaults3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoDependentVector3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoDispatcher3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectCS1D2D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlanes.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoUnitVector3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoConic3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoConicSection.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoCoordSys1D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolyhedron.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DLimited.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DPart.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoVector3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Manager3DInterface.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/Region.h"
#include "geogebra/common/kernel/RegionParameters.h"
#include "geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoTranslate.h"
#include "geogebra/common/kernel/algos/AlgoVectorPoint.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/FromMeta.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/geos/Test.h"
#include "geogebra/common/kernel/geos/Transformable.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPlaneND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoQuadricND.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/DialogManager.h"
#include "geogebra/common/main/GuiManagerInterface.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/main/SelectionManager.h"
#include "geogebra/common/plugin/Operation.h"
#include "geogebra/common/util/AsyncOperation.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@interface GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D () {
 @public
  IOSDoubleArray *xMinMax_, *yMinMax_;
  GeogebraCommonAwtGPoint *mouseLocOld_;
  GeogebraCommonKernelMatrixCoords *positionOld_;
  jboolean freePointJustCreated_;
  jdouble animatedRotSpeed_;
  jlong timeOld_;
  jint xOld_;
  GeogebraCommonGeogebra3DEuclidian3DHits3D *goodHits_;
  JavaUtilArrayList *intersectionCurveList_;
  JavaUtilArrayList *selectedPolygons3D_;
  JavaUtilArrayList *selectedPlane_;
  GeogebraCommonKernelMatrixCoords *tmpCoords_;
  id<GeogebraCommonKernelKernelNDGeoPointND> singleIntersectionPoint_;
  GeogebraCommonGeogebra3DEuclidian3DTextDispatcher3D *textDispatcher_EuclidianController3D_;
  jboolean dialogOccurred_;
  IOSObjectArray *pyramidBasis_;
  jboolean polygonForPyramidBasis_;
  jint pointMoveMode_;
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve *resultedIntersectionCurve_;
  GeogebraCommonKernelGeosGeoElement *handledGeo_;
  GeogebraCommonKernelMatrixCoords *startPoint3D_;
  GeogebraCommonKernelMatrixCoords *startPoint3DxOy_;
  jdouble zRW_;
  GeogebraCommonKernelMatrixCoords *translateDirection_;
}

- (IOSDoubleArray *)getMinMaxWithDouble:(jdouble)min
                             withDouble:(jdouble)val
                             withDouble:(jdouble)max;

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)getNewPointFreeWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point;

- (void)switchPointMoveMode;

- (void)cancelSwitchPointMoveModeIfNeeded;

- (void)initPointMoveMode OBJC_METHOD_FAMILY_NONE;

+ (void)checkCoordCartesian3DWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point;

- (IOSObjectArray *)intersectionCurveWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits;

- (jboolean)createIntersectionCurvePlanePolygonWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)A
                                               withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)B;

- (jboolean)createIntersectionCurvePlaneQuadricWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)A
                                               withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)B;

- (jboolean)createIntersectionCurvePlaneQuadricLimitedWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)A
                                                      withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)B;

- (void)processIntersectionCurveWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)A
                                withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)B
                                withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)intersection
                 withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)d;

+ (GeogebraCommonKernelGeosGeoElement *)getMetaIfJustOneWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo;

- (void)decideIntersectionWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits;

- (void)addToGoodHitsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo;

+ (jboolean)isModeForMovingPointWithInt:(jint)mode;

+ (jboolean)isModeForCreatingPointWithInt:(jint)mode;

- (void)setTranslateFromPointStartWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point;

- (IOSObjectArray *)rotateAroundLineWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits;

- (IOSObjectArray *)mirrorAtPlaneWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, xMinMax_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, yMinMax_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, mouseLocOld_, GeogebraCommonAwtGPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, positionOld_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, goodHits_, GeogebraCommonGeogebra3DEuclidian3DHits3D *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, intersectionCurveList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, selectedPolygons3D_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, selectedPlane_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, tmpCoords_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, singleIntersectionPoint_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, textDispatcher_EuclidianController3D_, GeogebraCommonGeogebra3DEuclidian3DTextDispatcher3D *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, pyramidBasis_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, resultedIntersectionCurve_, GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, handledGeo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, startPoint3D_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, startPoint3DxOy_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, translateDirection_, GeogebraCommonKernelMatrixCoords *)

__attribute__((unused)) static IOSDoubleArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMinMaxWithDouble_withDouble_withDouble_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, jdouble min, jdouble val, jdouble max);

__attribute__((unused)) static GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getNewPointFreeWithGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, id<GeogebraCommonKernelKernelNDGeoPointND> point);

__attribute__((unused)) static jboolean GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_spherePointRadiusWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jboolean GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_coneTwoPointsRadiusWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jboolean GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_cylinderTwoPointsRadiusWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_archimedeanSolidWithGeogebraCommonEuclidianHits_withGeogebraCommonKernelCommandsCommandsEnum_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits, GeogebraCommonKernelCommandsCommandsEnum *name);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_polyhedronNetWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_orthogonalPlaneWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_circleAxisPointWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jboolean GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_circlePointRadiusDirectionWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jboolean GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_volumeWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_planeContainingWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits0);

__attribute__((unused)) static jboolean GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_viewInFrontOfWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_parallelPlaneWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_extrusionOrConifyWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_pyramidOrPrismWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_switchPointMoveMode(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_cancelSwitchPointMoveModeIfNeeded(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_initPointMoveMode(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_checkCoordCartesian3DWithGeogebraCommonKernelKernelNDGeoPointND_(id<GeogebraCommonKernelKernelNDGeoPointND> point);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_intersectionCurveWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jboolean GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_createIntersectionCurvePlanePolygonWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonKernelGeosGeoElement *A, GeogebraCommonKernelGeosGeoPolygon *B);

__attribute__((unused)) static jboolean GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_createIntersectionCurvePlaneQuadricWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonKernelGeosGeoElement *A, GeogebraCommonKernelGeosGeoElement *B);

__attribute__((unused)) static jboolean GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_createIntersectionCurvePlaneQuadricLimitedWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonKernelGeosGeoElement *A, GeogebraCommonKernelGeosGeoElement *B);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_processIntersectionCurveWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonKernelGeosGeoElement *A, GeogebraCommonKernelGeosGeoElement *B, GeogebraCommonKernelGeosGeoElement *intersection, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *d);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoElement *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMetaIfJustOneWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_decideIntersectionWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addToGoodHitsWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static jint GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedCS2DWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static jint GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selCS2D(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedCS2D(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self);

__attribute__((unused)) static jint GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedPlaneWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static jint GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selPlanes(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPlanes(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self);

__attribute__((unused)) static jint GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selQuadric(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self);

__attribute__((unused)) static jint GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedQuadricWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedQuadric(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self);

__attribute__((unused)) static jint GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selQuadricLimited(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self);

__attribute__((unused)) static jint GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedQuadricLimitedWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedQuadricLimited(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self);

__attribute__((unused)) static jint GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selPolyhedron(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self);

__attribute__((unused)) static jint GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedPolyhedronWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPolyhedron(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self);

__attribute__((unused)) static jboolean GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_isModeForMovingPointWithInt_(jint mode);

__attribute__((unused)) static jboolean GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_isModeForCreatingPointWithInt_(jint mode);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_updateStartPointWithGeogebraCommonKernelMatrixCoords_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonKernelMatrixCoords *p);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setTranslateFromPointStartWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonKernelGeosGeoElement *geo, id<GeogebraCommonKernelKernelNDGeoPointND> point);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_rotateAroundLineWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_mirrorAtPlaneWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits);

@implementation GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D

- (instancetype)initWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_initWithGeogebraCommonMainApp_(self, app);
  return self;
}

- (GeogebraCommonEuclidianEuclidianControllerCompanion *)newCompanion {
  return [new_GeogebraCommonGeogebra3DEuclidian3DEuclidianController3DCompanion_initWithGeogebraCommonEuclidianEuclidianController_(self) autorelease];
}

- (void)setView3DWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_view3D_(self, (GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) check_class_cast(view, [GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D class]));
}

- (IOSDoubleArray *)getMinMaxWithDouble:(jdouble)min
                             withDouble:(jdouble)val
                             withDouble:(jdouble)max {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMinMaxWithDouble_withDouble_withDouble_(self, min, val, max);
}

- (void)setMovedGeoPointWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonEuclidianEuclidianController_set_movedGeoPoint_(self, (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoPointND)));
  GeogebraCommonKernelMatrixCoords *coords = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(movedGeoPoint_)) getInhomCoordsInD3];
  jdouble size = [movedGeoPoint_ getPointSize] * GeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D_DRAW_POINT_FACTOR / [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getScale];
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_xMinMax_(self, GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMinMaxWithDouble_withDouble_withDouble_(self, [view3D_ getXmin] + size, [((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX], [view3D_ getXmax] - size));
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_yMinMax_(self, GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMinMaxWithDouble_withDouble_withDouble_(self, [view3D_ getYmin] + size, [coords getY], [view3D_ getYmax] - size));
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_zMinMax_(self, GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMinMaxWithDouble_withDouble_withDouble_(self, [view3D_ getZmin] + size, [coords getZ], [view3D_ getZmax] - size));
  [self updateMovedGeoPointStartValuesWithGeogebraCommonKernelMatrixCoords:coords];
  [view3D_ setDragCursor];
}

- (void)updateMovedGeoPointStartValuesWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)coords {
  if (![((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(movedGeoPoint_)) hasPath] && ![movedGeoPoint_ hasRegion]) {
    GeogebraCommonKernelMatrixCoordMatrix4x4_IdentityWithGeogebraCommonKernelMatrixCoordMatrix4x4_([self getCurrentPlane]);
    [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([self getCurrentPlane])) setWithGeogebraCommonKernelMatrixCoords:coords withInt:4];
  }
}

- (GeogebraCommonKernelMatrixCoordMatrix4x4 *)getCurrentPlane {
  if (currentPlane_ == nil) {
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_currentPlane_(self, GeogebraCommonKernelMatrixCoordMatrix4x4_Identity());
  }
  return currentPlane_;
}

- (void)setCurrentPlaneWithGeogebraCommonKernelMatrixCoordMatrix4x4:(GeogebraCommonKernelMatrixCoordMatrix4x4 *)plane {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_currentPlane_(self, plane);
}

- (void)movePointOnCurrentPlaneWithGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)point
                                                                      withBoolean:(jboolean)useOldMouse {
  if (mouseLoc_ == nil) return;
  GeogebraCommonKernelMatrixCoords *o;
  if (useOldMouse) {
    [((GeogebraCommonAwtGPoint *) nil_chk(mouseLocOld_)) setLocationWithInt:((GeogebraCommonAwtGPoint *) nil_chk(mouseLoc_))->x_ withInt:mouseLoc_->y_];
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_positionOld_(self, [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point)) getCoords])) copyVector]);
    o = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getPickFromScenePointWithGeogebraCommonKernelMatrixCoords:positionOld_ withInt:mouseLoc_->x_ - mouseLocOld_->x_ withInt:mouseLoc_->y_ - mouseLocOld_->y_];
  }
  else o = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getPickPointWithGeogebraCommonAwtGPoint:mouseLoc_];
  [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) toSceneCoords3DWithGeogebraCommonKernelMatrixCoords:o];
  [self addOffsetForTranslationWithGeogebraCommonKernelMatrixCoords:o];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(o)) projectPlaneThruVIfPossibleWithGeogebraCommonKernelMatrixCoordMatrix:[self getCurrentPlane] withGeogebraCommonKernelMatrixCoords:[view3D_ getViewDirection] withGeogebraCommonKernelMatrixCoords:tmpCoords_];
  [self checkXYMinMaxWithGeogebraCommonKernelMatrixCoords:tmpCoords_];
  [((GeogebraCommonGeogebra3DEuclidian3DEuclidianController3DCompanion *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DEuclidianController3DCompanion *) check_class_cast(companion_, [GeogebraCommonGeogebra3DEuclidian3DEuclidianController3DCompanion class])))) checkPointCapturingXYWithGeogebraCommonKernelMatrixCoords:tmpCoords_];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point)) setCoordsWithGeogebraCommonKernelMatrixCoords:tmpCoords_];
}

- (jboolean)checkXYMinMaxWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  if ([self getMoveMode] != GeogebraCommonEuclidianEuclidianController_MOVE_POINT) {
    return NO;
  }
  jboolean changed = NO;
  if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) getX] > IOSDoubleArray_Get(nil_chk(xMinMax_), 1)) {
    [v setXWithDouble:IOSDoubleArray_Get(xMinMax_, 1)];
    changed = YES;
  }
  else if ([v getX] < IOSDoubleArray_Get(xMinMax_, 0)) {
    [v setXWithDouble:IOSDoubleArray_Get(xMinMax_, 0)];
    changed = YES;
  }
  if ([v getY] > IOSDoubleArray_Get(nil_chk(yMinMax_), 1)) {
    [v setYWithDouble:IOSDoubleArray_Get(yMinMax_, 1)];
    changed = YES;
  }
  else if ([v getY] < IOSDoubleArray_Get(yMinMax_, 0)) {
    [v setYWithDouble:IOSDoubleArray_Get(yMinMax_, 0)];
    changed = YES;
  }
  return changed;
}

- (void)setMouseInformationWithGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)point {
  if (mouseLoc_ == nil) return;
  GeogebraCommonKernelMatrixCoords *o = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getPickPointWithGeogebraCommonAwtGPoint:mouseLoc_];
  [view3D_ toSceneCoords3DWithGeogebraCommonKernelMatrixCoords:o];
  [self addOffsetForTranslationWithGeogebraCommonKernelMatrixCoords:o];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point)) setWillingCoordsWithGeogebraCommonKernelMatrixCoords:o];
  [point setWillingDirectionWithGeogebraCommonKernelMatrixCoords:[view3D_ getViewDirection]];
}

- (void)addOffsetForTranslationWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)o {
  if (moveMode__ == GeogebraCommonEuclidianEuclidianController_MOVE_POINT_WITH_OFFSET) {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(o)) setAddWithGeogebraCommonKernelMatrixCoords:o withGeogebraCommonKernelMatrixCoords:translationVec3D_];
  }
}

- (void)moveTextAbsoluteLocation {
  GeogebraCommonKernelMatrixCoords *o = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getPickPointWithGeogebraCommonAwtGPoint:mouseLoc_];
  [view3D_ toSceneCoords3DWithGeogebraCommonKernelMatrixCoords:o];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(o)) projectPlaneThruVIfPossibleWithGeogebraCommonKernelMatrixCoordMatrix:GeogebraCommonKernelMatrixCoordMatrix4x4_get_IDENTITY_() withGeogebraCommonKernelMatrixCoords:[view3D_ getViewDirection] withGeogebraCommonKernelMatrixCoords:tmpCoords_];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(((GeogebraCommonKernelGeosGeoPoint *) check_class_cast([((GeogebraCommonKernelGeosGeoText *) nil_chk(movedGeoText_)) getStartPoint], [GeogebraCommonKernelGeosGeoPoint class])))) setCoordsWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords_)) getX] - [((GeogebraCommonKernelMatrixCoords *) nil_chk(startPoint3DxOy_)) getX] withDouble:[tmpCoords_ getY] - [startPoint3DxOy_ getY] withDouble:1.0];
}

- (GeogebraCommonEuclidianHits *)getRegionHitsWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getHitsWithGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_REGION3D() withGeogebraCommonEuclidianHits:tempArrayList_];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)getNewPointFreeWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getNewPointFreeWithGeogebraCommonKernelKernelNDGeoPointND_(self, point);
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getNewPointWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                                             withBoolean:(jboolean)onPathPossible
                                                                             withBoolean:(jboolean)inRegionPossible
                                                                             withBoolean:(jboolean)intersectPossible
                                                                             withBoolean:(jboolean)complex {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getCursor3D];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point3D;
  id<GeogebraCommonKernelKernelNDGeoPointND> ret;
  {
    id<GeogebraCommonKernelKernelNDGeoPointND> firstPoint;
    switch ([view3D_ getCursor3DType]) {
      case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_FREE:
      point3D = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getNewPointFreeWithGeogebraCommonKernelKernelNDGeoPointND_(self, point);
      ret = point3D;
      GeogebraCommonEuclidianEuclidianController_set_pointCreated_(self, point3D);
      break;
      case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_PATH:
      if (onPathPossible) {
        id<GeogebraCommonKernelPath> path = [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point)) getPath];
        if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([((id<GeogebraCommonKernelPath>) nil_chk(path)) toGeoElement])) isGeoElement3D] || ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([path toGeoElement])) isGeoList] && [((GeogebraCommonKernelGeosGeoList *) nil_chk(((GeogebraCommonKernelGeosGeoList *) check_class_cast([path toGeoElement], [GeogebraCommonKernelGeosGeoList class])))) containsGeoElement3D])) {
          point3D = (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) Point3DWithNSString:nil withGeogebraCommonKernelPath:path withBoolean:NO], [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
          [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point3D)) setWillingCoordsWithGeogebraCommonKernelMatrixCoords:[point getCoords]];
          [point3D doPath];
          [point3D setWillingCoordsUndefined];
          [point3D setWillingDirectionUndefined];
          ret = point3D;
          GeogebraCommonEuclidianEuclidianController_set_pointCreated_(self, point3D);
        }
        else {
          GeogebraCommonKernelMatrixCoords *coords = [point getCoordsInD2];
          GeogebraCommonEuclidianEuclidianController_set_pointCreated_(self, [self createNewPoint2DWithNSString:nil withBoolean:NO withGeogebraCommonKernelPath:path withDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] withDouble:[coords getY] withBoolean:NO withBoolean:NO]);
          return pointCreated_;
        }
      }
      else {
        GeogebraCommonEuclidianEuclidianController_set_pointCreated_(self, nil);
        return nil;
      }
      break;
      case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_REGION:
      if (inRegionPossible) {
        id<GeogebraCommonKernelRegion> region = [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point)) getRegion];
        if (region == [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getXOYPlane]) {
          point3D = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getNewPointFreeWithGeogebraCommonKernelKernelNDGeoPointND_(self, point);
          ret = point3D;
          GeogebraCommonEuclidianEuclidianController_set_pointCreated_(self, point3D);
        }
        else if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(region, [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) {
          GeogebraCommonKernelMatrixCoords *coords = [point getCoords];
          point3D = (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) Point3DInWithNSString:nil withGeogebraCommonKernelRegion:region withGeogebraCommonKernelMatrixCoords:coords withBoolean:YES withBoolean:NO], [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
          [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point3D)) doRegion];
          [point3D setWillingCoordsUndefined];
          [point3D setWillingDirectionUndefined];
          ret = point3D;
          GeogebraCommonEuclidianEuclidianController_set_pointCreated_(self, point3D);
        }
        else {
          GeogebraCommonKernelMatrixCoords *coords = [point getCoordsInD2];
          GeogebraCommonEuclidianEuclidianController_set_pointCreated_(self, [self createNewPoint2DWithNSString:nil withBoolean:NO withGeogebraCommonKernelRegion:region withDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] withDouble:[coords getY] withBoolean:NO withBoolean:NO]);
          return pointCreated_;
        }
      }
      else {
        GeogebraCommonEuclidianEuclidianController_set_pointCreated_(self, nil);
        return nil;
      }
      break;
      case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_DEPENDENT:
      if (intersectPossible) {
        id<GeogebraCommonKernelKernelNDGeoPointND> intersectionPoint = [view3D_ getIntersectionPoint];
        [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(intersectionPoint)) getParentAlgorithm])) addToConstructionList];
        [intersectionPoint setLabelWithNSString:nil];
        GeogebraCommonEuclidianEuclidianController_set_pointCreated_(self, intersectionPoint);
        if ([((GeogebraCommonKernelGeosGeoElement *) check_class_cast(intersectionPoint, [GeogebraCommonKernelGeosGeoElement class])) isGeoElement3D]) {
          point3D = (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(intersectionPoint, [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
        }
        else {
          return intersectionPoint;
        }
      }
      else {
        point3D = nil;
        GeogebraCommonEuclidianEuclidianController_set_pointCreated_(self, nil);
      }
      return point3D;
      case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_ALREADY:
      firstPoint = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([((GeogebraCommonEuclidianHits *) nil_chk(hits)) getFirstHitWithGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOPOINTND()], @protocol(GeogebraCommonKernelKernelNDGeoPointND));
      if (firstPoint == nil) firstPoint = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([self getMovedGeoPoint], @protocol(GeogebraCommonKernelKernelNDGeoPointND));
      return firstPoint;
      case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_NONE:
      default:
      GeogebraCommonEuclidianEuclidianController_set_pointCreated_(self, [super getNewPointWithGeogebraCommonEuclidianHits:hits withBoolean:onPathPossible withBoolean:inRegionPossible withBoolean:intersectPossible withBoolean:NO]);
      return pointCreated_;
    }
  }
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(ret, [GeogebraCommonKernelGeosGeoElement class])))) update];
  [self setMovedGeoPointWithGeogebraCommonKernelGeosGeoElement:point3D];
  [view3D_ setCursor3DTypeWithInt:GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_ALREADY];
  [view3D_ updateMatrixForCursor3D];
  return ret;
}

- (void)createNewPointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)sourcePoint {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point3D = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getCursor3D];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point3D)) setCoordsWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(sourcePoint)) getCoordsInD3] withBoolean:NO];
  [point3D setPathWithGeogebraCommonKernelPath:[sourcePoint getPath]];
  [point3D setRegionWithGeogebraCommonKernelRegion:[sourcePoint getRegion]];
  if ([((GeogebraCommonKernelGeosGeoElement *) check_class_cast(sourcePoint, [GeogebraCommonKernelGeosGeoElement class])) isIndependent] || ![((GeogebraCommonKernelGeosGeoElement *) check_class_cast(sourcePoint, [GeogebraCommonKernelGeosGeoElement class])) isGeoElement3D]) [point3D setMoveNormalDirectionWithGeogebraCommonKernelMatrixCoords:GeogebraCommonKernelMatrixCoords_get_VZ_()];
  else if ([sourcePoint hasRegion]) [point3D setMoveNormalDirectionWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelRegionParameters *) nil_chk([sourcePoint getRegionParameters])) getNormal]];
  [view3D_ setCursor3DTypeWithInt:GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_ALREADY];
  [point3D setMoveModeWithInt:[sourcePoint getMoveMode]];
  [point3D setPointSizeWithInt:[sourcePoint getPointSize]];
}

- (void)createNewPointIntersectionWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)intersectionPoint {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point3D = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getCursor3D];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point3D)) setCoordsWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(intersectionPoint)) getCoordsInD3])) getInhomCoords] withBoolean:NO];
  [view3D_ setCursor3DTypeWithInt:GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_DEPENDENT];
  [view3D_ setIntersectionPointWithGeogebraCommonKernelKernelNDGeoPointND:intersectionPoint];
}

- (jboolean)createNewPointInRegionPossibleWithGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)conic {
  return [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic)) getLastHitType] == GeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_FILLING();
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getSingleIntersectionPointWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty] || [hits size] < 2) return nil;
  if (mouseLoc_ == nil) return nil;
  GeogebraCommonKernelGeosGeoElement *a = [hits getWithInt:0];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(a)) isGeoLine]) {
    while ([hits size] >= 2) {
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([hits getWithInt:1])) isGeoPlane] && GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_getConfigLinePlaneWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoCoordSys2D_((id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(a, @protocol(GeogebraCommonKernelKernelNDGeoLineND)), ((id<GeogebraCommonKernelKernelNDGeoCoordSys2D>) check_protocol_cast([hits getWithInt:1], @protocol(GeogebraCommonKernelKernelNDGeoCoordSys2D)))) == GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum_get_CONTAINED()) [hits removeWithInt:1];
      else break;
    }
  }
  else if ([a isGeoConic]) {
    while ([hits size] >= 2) {
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([hits getWithInt:1])) isGeoPlane] && GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_getConfigPlanePlaneWithGeogebraCommonKernelMatrixCoordSys_withGeogebraCommonKernelMatrixCoordSys_(([((GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(a, [GeogebraCommonKernelKernelNDGeoConicND class])) getCoordSys]), ([((id<GeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(((id<GeogebraCommonKernelKernelNDGeoCoordSys2D>) check_protocol_cast([hits getWithInt:1], @protocol(GeogebraCommonKernelKernelNDGeoCoordSys2D))))) getCoordSys])) == GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_get_RESULTCATEGORY_CONTAINED_()) [hits removeWithInt:1];
      else break;
    }
  }
  else if ([a isGeoPolygon]) {
    while ([hits size] >= 2) {
      if ([GeogebraCommonKernelKernelNDGeoCoordSys2D_class_() isInstance:[hits getWithInt:1]] && GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_getConfigPlanePlaneWithGeogebraCommonKernelMatrixCoordSys_withGeogebraCommonKernelMatrixCoordSys_(([((GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(a, [GeogebraCommonKernelGeosGeoPolygon class])) getCoordSys]), ([((id<GeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(((id<GeogebraCommonKernelKernelNDGeoCoordSys2D>) check_protocol_cast([hits getWithInt:1], @protocol(GeogebraCommonKernelKernelNDGeoCoordSys2D))))) getCoordSys])) == GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_get_RESULTCATEGORY_CONTAINED_()) [hits removeWithInt:1];
      else break;
    }
  }
  if ([hits size] < 2) return nil;
  GeogebraCommonKernelGeosGeoElement *b = [hits getWithInt:1];
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_singleIntersectionPoint_(self, nil);
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) setSilentModeWithBoolean:YES];
  if (![a isGeoElement3D] && ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(b)) isGeoElement3D]) {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getToSceneMatrix])) mulWithGeogebraCommonKernelMatrixCoords:[view3D_ getPickPointWithGeogebraCommonAwtGPoint:mouseLoc_]])) projectPlaneThruVIfPossibleWithGeogebraCommonKernelMatrixCoordMatrix:GeogebraCommonKernelMatrixCoordMatrix4x4_get_IDENTITY_() withGeogebraCommonKernelMatrixCoords:[view3D_ getViewDirection] withGeogebraCommonKernelMatrixCoords:tmpCoords_];
    xRW_ = [((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords_)) getX];
    yRW_ = [tmpCoords_ getY];
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_singleIntersectionPoint_(self, [((GeogebraCommonGeogebra3DEuclidianFor3DEuclidianControllerFor3DCompanion *) nil_chk(((GeogebraCommonGeogebra3DEuclidianFor3DEuclidianControllerFor3DCompanion *) check_class_cast(companion_, [GeogebraCommonGeogebra3DEuclidianFor3DEuclidianControllerFor3DCompanion class])))) getSingleIntersectionPointFrom2DWithGeogebraCommonKernelGeosGeoElement:a withGeogebraCommonKernelGeosGeoElement:b withBoolean:NO]);
  }
  else if ((([a isGeoLine] || [GeogebraCommonKernelKernelNDGeoCoordSys2D_class_() isInstance:a]) && ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(b)) isGeoLine])) || ([a isGeoLine] && [GeogebraCommonKernelKernelNDGeoCoordSys2D_class_() isInstance:b])) {
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_singleIntersectionPoint_(self, (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) IntersectWithNSString:nil withGeogebraCommonKernelGeosGeoElement:a withGeogebraCommonKernelGeosGeoElement:b], [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]));
  }
  else if ([a isGeoLine]) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(b)) isGeoConic]) {
      GeogebraCommonKernelMatrixCoords *picked = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getPickPointWithGeogebraCommonAwtGPoint:mouseLoc_];
      GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_singleIntersectionPoint_(self, [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) IntersectLineConicSingleWithNSString:nil withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(a, @protocol(GeogebraCommonKernelKernelNDGeoLineND)) withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(b, [GeogebraCommonKernelKernelNDGeoConicND class]) withDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(picked)) getX] withDouble:[picked getY] withGeogebraCommonKernelMatrixCoordMatrix:[view3D_ getToScreenMatrix]]);
    }
    else if ([b isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]]) {
      GeogebraCommonKernelMatrixCoords *picked = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getPickPointWithGeogebraCommonAwtGPoint:mouseLoc_];
      GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_singleIntersectionPoint_(self, [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) IntersectLineQuadricSingleWithNSString:nil withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(a, @protocol(GeogebraCommonKernelKernelNDGeoLineND)) withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) check_class_cast(b, [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]) withDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(picked)) getX] withDouble:[picked getY] withGeogebraCommonKernelMatrixCoordMatrix4x4:[view3D_ getToScreenMatrix]]);
    }
  }
  else if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(b)) isGeoLine]) {
    if ([a isGeoConic]) {
      GeogebraCommonKernelMatrixCoords *picked = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getPickPointWithGeogebraCommonAwtGPoint:mouseLoc_];
      GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_singleIntersectionPoint_(self, [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) IntersectLineConicSingleWithNSString:nil withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(b, @protocol(GeogebraCommonKernelKernelNDGeoLineND)) withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(a, [GeogebraCommonKernelKernelNDGeoConicND class]) withDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(picked)) getX] withDouble:[picked getY] withGeogebraCommonKernelMatrixCoordMatrix:[view3D_ getToScreenMatrix]]);
    }
    else if ([a isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]]) {
      GeogebraCommonKernelMatrixCoords *picked = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getPickPointWithGeogebraCommonAwtGPoint:mouseLoc_];
      GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_singleIntersectionPoint_(self, [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) IntersectLineQuadricSingleWithNSString:nil withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(b, @protocol(GeogebraCommonKernelKernelNDGeoLineND)) withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) check_class_cast(a, [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]) withDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(picked)) getX] withDouble:[picked getY] withGeogebraCommonKernelMatrixCoordMatrix4x4:[view3D_ getToScreenMatrix]]);
    }
  }
  else if ([a isGeoConic] && [b isGeoConic]) {
    GeogebraCommonKernelMatrixCoords *picked = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getPickPointWithGeogebraCommonAwtGPoint:mouseLoc_];
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_singleIntersectionPoint_(self, [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) IntersectConicsSingleWithNSString:nil withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(a, [GeogebraCommonKernelKernelNDGeoConicND class]) withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(b, [GeogebraCommonKernelKernelNDGeoConicND class]) withDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(picked)) getX] withDouble:[picked getY] withGeogebraCommonKernelMatrixCoordMatrix:[view3D_ getToScreenMatrix]]);
  }
  [kernel_ setSilentModeWithBoolean:NO];
  if (singleIntersectionPoint_ == nil) return nil;
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(singleIntersectionPoint_)) isDefined]) {
    if ([((GeogebraCommonKernelGeosGeoElement *) check_class_cast(singleIntersectionPoint_, [GeogebraCommonKernelGeosGeoElement class])) isGeoElement3D]) {
      GeogebraCommonKernelMatrixCoords *picked = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getPickPointWithGeogebraCommonAwtGPoint:mouseLoc_];
      GeogebraCommonKernelMatrixCoords *toScreenCoords = [view3D_ projectOnScreenWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(singleIntersectionPoint_, [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])) getCoords])) getCoordsLast1]];
      if (JavaLangMath_absWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(picked)) getX] - [((GeogebraCommonKernelMatrixCoords *) nil_chk(toScreenCoords)) getX]) > 15 || JavaLangMath_absWithDouble_([picked getY] - [toScreenCoords getY]) > 15) {
        return nil;
      }
    }
    [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) setIntersectionThicknessWithGeogebraCommonKernelGeosGeoElement:a withGeogebraCommonKernelGeosGeoElement:b];
    [singleIntersectionPoint_ setCartesian3D];
    [singleIntersectionPoint_ update];
    return singleIntersectionPoint_;
  }
  return nil;
}

- (IOSObjectArray *)getSelectedPoints3D {
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(selectedPoints_)) size] type:GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_class_()];
  [self getSelectedPointsNDWithGeogebraCommonKernelKernelNDGeoPointNDArray:ret];
  return ret;
}

- (IOSObjectArray *)getSelectedLines3D {
  IOSObjectArray *lines = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(selectedLines_)) size] type:GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_class_()];
  [self getSelectedLinesNDWithGeogebraCommonKernelKernelNDGeoLineNDArray:lines];
  return lines;
}

- (void)circleOrSphereWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)num {
  IOSObjectArray *points = [self getSelectedPointsND];
  [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) SphereWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelArithmeticNumberValue:num];
}

- (jboolean)spherePointRadiusWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_spherePointRadiusWithGeogebraCommonEuclidianHits_(self, hits);
}

- (jboolean)coneTwoPointsRadiusWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_coneTwoPointsRadiusWithGeogebraCommonEuclidianHits_(self, hits);
}

- (jboolean)cylinderTwoPointsRadiusWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_cylinderTwoPointsRadiusWithGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)archimedeanSolidWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                       withGeogebraCommonKernelCommandsCommandsEnum:(GeogebraCommonKernelCommandsCommandsEnum *)name {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_archimedeanSolidWithGeogebraCommonEuclidianHits_withGeogebraCommonKernelCommandsCommandsEnum_(self, hits, name);
}

- (IOSObjectArray *)polyhedronNetWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_polyhedronNetWithGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)orthogonalPlaneWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_orthogonalPlaneWithGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)circleAxisPointWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_circleAxisPointWithGeogebraCommonEuclidianHits_(self, hits);
}

- (jboolean)circlePointRadiusDirectionWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_circlePointRadiusDirectionWithGeogebraCommonEuclidianHits_(self, hits);
}

- (GeogebraCommonGeogebra3DEuclidian3DTextDispatcher3D *)getTextDispatcher {
  if (textDispatcher_EuclidianController3D_ == nil) {
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_textDispatcher_EuclidianController3D_(self, new_GeogebraCommonGeogebra3DEuclidian3DTextDispatcher3D_initWithGeogebraCommonKernelKernel_withGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(kernel_, view3D_));
  }
  return textDispatcher_EuclidianController3D_;
}

- (jboolean)volumeWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_volumeWithGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)planeContainingWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits0 {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_planeContainingWithGeogebraCommonEuclidianHits_(self, hits0);
}

- (jboolean)viewInFrontOfWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_viewInFrontOfWithGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)parallelPlaneWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_parallelPlaneWithGeogebraCommonEuclidianHits_(self, hits);
}

- (void)setDialogOccurred {
  dialogOccurred_ = YES;
}

- (IOSObjectArray *)extrusionOrConifyWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_extrusionOrConifyWithGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)pyramidOrPrismWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_pyramidOrPrismWithGeogebraCommonEuclidianHits_(self, hits);
}

- (GeogebraCommonKernelGeosGeoElement *)getMovedGeoPoint {
  return (GeogebraCommonKernelGeosGeoElement *) check_class_cast(movedGeoPoint_, [GeogebraCommonKernelGeosGeoElement class]);
}

- (void)wrapMouseReleasedWithGeogebraCommonEuclidianEventAbstractEvent:(GeogebraCommonEuclidianEventAbstractEvent *)e {
  if (!draggingOccured_ && ![((GeogebraCommonMainApp *) nil_chk(app_)) isControlDownWithGeogebraCommonEuclidianEventAbstractEvent:e]) [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) switchMoveCursor];
  [super wrapMouseReleasedWithGeogebraCommonEuclidianEventAbstractEvent:e];
}

- (void)processReleaseForMovedGeoPointWithBoolean:(jboolean)rightClick {
  [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) check_class_cast(view_, [GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D class])))) updatePointDecorationsWithGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:nil];
  if (GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_isModeForMovingPointWithInt_(mode_)) {
    if (freePointJustCreated_) {
      freePointJustCreated_ = NO;
    }
    else {
      if (!draggingOccured_ && !rightClick && [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(movedGeoPoint_)) isIndependent]) {
        if (mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE && ![movedGeoPoint_ isGeoElement3D]) {
          GeogebraCommonKernelGeosGeoPoint *replaceable = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(movedGeoPoint_, [GeogebraCommonKernelGeosGeoPoint class]);
          GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction];
          jboolean oldMacroMode = [((GeogebraCommonKernelConstruction *) nil_chk(cons)) isSuppressLabelsActive];
          [cons setSuppressLabelCreationWithBoolean:YES];
          GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *newGeo = (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([kernel_ getManager3D])) Point3DWithNSString:nil withDouble:[replaceable getInhomX] withDouble:[replaceable getInhomY] withDouble:0 withBoolean:NO], [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
          [cons setSuppressLabelCreationWithBoolean:oldMacroMode];
          @try {
            [cons replaceWithGeogebraCommonKernelGeosGeoElement:replaceable withGeogebraCommonKernelGeosGeoElement:newGeo];
          }
          @catch (JavaLangException *e) {
            [((JavaLangException *) nil_chk(e)) printStackTrace];
          }
          @finally {
            NSString *newLabel = [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(newGeo)) isLabelSet] ? [newGeo getLabelSimple] : [replaceable getLabelSimple];
            GeogebraCommonKernelGeosGeoElement *geo = [kernel_ lookupLabelWithNSString:newLabel];
            [self setMovedGeoPointWithGeogebraCommonKernelGeosGeoElement:geo];
            GeogebraCommonGeogebra3DEuclidian3DHits3D *hits = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getHits3D];
            [((GeogebraCommonGeogebra3DEuclidian3DHits3D *) nil_chk(hits)) init__];
            [hits addWithId:geo];
            [((GeogebraCommonMainSelectionManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getSelectionManager])) clearSelectedGeosWithBoolean:NO withBoolean:NO];
            [((GeogebraCommonMainSelectionManager *) nil_chk([app_ getSelectionManager])) addSelectedGeoWithGeogebraCommonKernelGeosGeoElement:geo withBoolean:YES withBoolean:YES];
          }
        }
        GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_switchPointMoveMode(self);
        [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) check_class_cast(view_, [GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D class])))) getCursor3D])) setMoveModeWithInt:[movedGeoPoint_ getMoveMode]];
        [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) check_class_cast(view_, [GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D class])))) setDefaultCursorWillBeHitCursor];
      }
    }
  }
  if ([movedGeoPoint_ isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]]) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *movedGeoPoint3D = (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(movedGeoPoint_, [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(movedGeoPoint3D)) setWillingCoordsUndefined];
    [movedGeoPoint3D setWillingDirectionUndefined];
  }
  [super processReleaseForMovedGeoPointWithBoolean:rightClick];
}

- (void)switchPointMoveMode {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_switchPointMoveMode(self);
}

- (void)cancelSwitchPointMoveModeIfNeeded {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_cancelSwitchPointMoveModeIfNeeded(self);
}

- (void)initPointMoveMode {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_initPointMoveMode(self);
}

- (jint)getPointMoveMode {
  return pointMoveMode_;
}

- (void)updateInput3D {
}

- (void)wrapMousePressedWithGeogebraCommonEuclidianEventAbstractEvent:(GeogebraCommonEuclidianEventAbstractEvent *)e {
  mouseMoved_ = NO;
  [super wrapMousePressedWithGeogebraCommonEuclidianEventAbstractEvent:e];
}

- (void)processMouseMovedWithGeogebraCommonEuclidianEventAbstractEvent:(GeogebraCommonEuclidianEventAbstractEvent *)e {
  [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) setHits3DWithGeogebraCommonAwtGPoint:mouseLoc_];
  [self setMouseMovedEventWithGeogebraCommonEuclidianEventAbstractEvent:e];
  mouseMoved_ = YES;
  [view3D_ repaintView];
}

- (void)setMouseMovedEventWithGeogebraCommonEuclidianEventAbstractEvent:(GeogebraCommonEuclidianEventAbstractEvent *)e {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_mouseEvent_(self, e);
}

- (void)update {
  [self processMouseMoved];
}

- (void)processMouseMoved {
  if (mouseMoved_ && [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) hasMouse]) {
    [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) check_class_cast(view_, [GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D class])))) updateCursor3D];
    [super processMouseMovedWithGeogebraCommonEuclidianEventAbstractEvent:mouseEvent_];
    mouseMoved_ = NO;
  }
}

- (void)initNewModeWithInt:(jint)mode {
  [super initNewModeWithInt:mode];
}

- (id<GeogebraCommonEuclidianPreviewable>)switchPreviewableForInitNewModeWithInt:(jint)mode {
  id<GeogebraCommonEuclidianPreviewable> previewDrawable = nil;
  hideIntersection_ = NO;
  switch (mode) {
    case GeogebraCommonEuclidianEuclidianConstants_MODE_SPHERE_TWO_POINTS:
    previewDrawable = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) createPreviewSphereWithJavaUtilArrayList:selectedPoints_];
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_EXTRUSION:
    previewDrawable = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) createPreviewExtrusionWithJavaUtilArrayList:selectedPolygons_ withJavaUtilArrayList:selectedConicsND_];
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CONIFY:
    previewDrawable = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) createPreviewConifyWithJavaUtilArrayList:selectedPolygons_ withJavaUtilArrayList:selectedConicsND_];
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_PYRAMID:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_PRISM:
    previewDrawable = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) createPreviewPyramidOrPrismWithJavaUtilArrayList:selectedPoints_ withJavaUtilArrayList:selectedPolygons_ withInt:mode];
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECTION_CURVE:
    break;
    default:
    previewDrawable = [super switchPreviewableForInitNewModeWithInt:mode];
    break;
  }
  return previewDrawable;
}

- (jboolean)getSelectablesWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  GeogebraCommonEuclidianHits *top = [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHitsWithInt:1];
  [super getSelectablesWithGeogebraCommonEuclidianHits:top];
  id<GeogebraCommonKernelKernelNDGeoPointND> point = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([((GeogebraCommonEuclidianHits *) nil_chk(top)) getFirstHitWithGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOPOINTND()], @protocol(GeogebraCommonKernelKernelNDGeoPointND));
  if (point != nil) [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) updateCursor3DWithGeogebraCommonEuclidianHits:hits];
  return NO;
}

- (void)processModeLock {
}

- (jboolean)processRightPressFor3D {
  if ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) isRotAnimated]) {
    [view3D_ stopRotAnimation];
    viewRotationOccured_ = YES;
  }
  GeogebraCommonEuclidianEuclidianController_set_startLoc_(self, mouseLoc_);
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) rememberOrigins];
  [view_ setDefaultCursor];
  timeOld_ = JavaLangSystem_currentTimeMillis();
  xOld_ = ((GeogebraCommonAwtGPoint *) nil_chk(startLoc_))->x_;
  animatedRotSpeed_ = 0;
  return YES;
}

- (jboolean)processRotate3DView {
  jlong time = JavaLangSystem_currentTimeMillis();
  jint x = ((GeogebraCommonAwtGPoint *) nil_chk(mouseLoc_))->x_;
  animatedRotSpeed_ = (jdouble) (x - xOld_) / (time - timeOld_);
  timeOld_ = time;
  xOld_ = x;
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setCoordSystemFromMouseMoveWithInt:mouseLoc_->x_ - ((GeogebraCommonAwtGPoint *) nil_chk(startLoc_))->x_ withInt:mouseLoc_->y_ - startLoc_->y_ withInt:GeogebraCommonEuclidianEuclidianController_MOVE_ROTATE_VIEW];
  viewRotationOccured_ = YES;
  [view_ repaintView];
  return YES;
}

- (jboolean)processRightReleaseFor3DWithGeogebraCommonEuclidianEventPointerEventTypeEnum:(GeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  if (viewRotationOccured_) {
    viewRotationOccured_ = NO;
    [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
    [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) check_class_cast(view_, [GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D class])))) updateCursor3D];
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setHitCursor];
    [((GeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
    [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) check_class_cast(view_, [GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D class])) setRotContinueAnimationWithLong:JavaLangSystem_currentTimeMillis() - timeOld_ withDouble:animatedRotSpeed_];
    return YES;
  }
  return NO;
}

- (jboolean)switchModeForProcessModeWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                        withBoolean:(jboolean)isControlDown
                               withGeogebraCommonUtilAsyncOperation:(GeogebraCommonUtilAsyncOperation *)callback {
  jboolean changedKernel = NO;
  IOSObjectArray *ret = nil;
  switch (mode_) {
    case GeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECTION_CURVE:
    ret = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_intersectionCurveWithGeogebraCommonEuclidianHits_(self, hits);
    if (changedKernel) {
      [((JavaUtilArrayList *) nil_chk(intersectionCurveList_)) removeWithId:resultedIntersectionCurve_];
      [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) setPreviewWithGeogebraCommonEuclidianPreviewable:nil];
    }
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_PLANE_THREE_POINTS:
    ret = [self threePointsWithGeogebraCommonEuclidianHits:hits withInt:mode_];
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_PLANE:
    ret = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_planeContainingWithGeogebraCommonEuclidianHits_(self, hits);
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_ORTHOGONAL_PLANE:
    ret = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_orthogonalPlaneWithGeogebraCommonEuclidianHits_(self, hits);
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_PARALLEL_PLANE:
    ret = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_parallelPlaneWithGeogebraCommonEuclidianHits_(self, hits);
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_EXTRUSION:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CONIFY:
    ret = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_extrusionOrConifyWithGeogebraCommonEuclidianHits_(self, hits);
    if (![((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getRenderer])) useLogicalPicking] && ret != nil) {
      [((GeogebraCommonGeogebra3DEuclidian3DHits3D *) nil_chk([view3D_ getHits3D])) init__];
    }
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_TETRAHEDRON:
    ret = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_archimedeanSolidWithGeogebraCommonEuclidianHits_withGeogebraCommonKernelCommandsCommandsEnum_(self, hits, GeogebraCommonKernelCommandsCommandsEnum_get_Tetrahedron());
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CUBE:
    ret = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_archimedeanSolidWithGeogebraCommonEuclidianHits_withGeogebraCommonKernelCommandsCommandsEnum_(self, hits, GeogebraCommonKernelCommandsCommandsEnum_get_Cube());
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_PYRAMID:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_PRISM:
    ret = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_pyramidOrPrismWithGeogebraCommonEuclidianHits_(self, hits);
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_SPHERE_TWO_POINTS:
    ret = [self circleOrSphere2WithGeogebraCommonEuclidianHits:hits withInt:mode_];
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_SPHERE_POINT_RADIUS:
    changedKernel = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_spherePointRadiusWithGeogebraCommonEuclidianHits_(self, hits);
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CONE_TWO_POINTS_RADIUS:
    changedKernel = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_coneTwoPointsRadiusWithGeogebraCommonEuclidianHits_(self, hits);
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CYLINDER_TWO_POINTS_RADIUS:
    changedKernel = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_cylinderTwoPointsRadiusWithGeogebraCommonEuclidianHits_(self, hits);
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_NET:
    ret = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_polyhedronNetWithGeogebraCommonEuclidianHits_(self, hits);
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_VIEW_IN_FRONT_OF:
    changedKernel = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_viewInFrontOfWithGeogebraCommonEuclidianHits_(self, hits);
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_AXIS_POINT:
    ret = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_circleAxisPointWithGeogebraCommonEuclidianHits_(self, hits);
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_POINT_RADIUS_DIRECTION:
    changedKernel = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_circlePointRadiusDirectionWithGeogebraCommonEuclidianHits_(self, hits);
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_PLANE:
    ret = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_mirrorAtPlaneWithGeogebraCommonEuclidianHits_(self, [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits]);
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_ROTATE_AROUND_LINE:
    ret = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_rotateAroundLineWithGeogebraCommonEuclidianHits_(self, [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits]);
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_VOLUME:
    changedKernel = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_volumeWithGeogebraCommonEuclidianHits_(self, hits);
    break;
    default:
    return [super switchModeForProcessModeWithGeogebraCommonEuclidianHits:hits withBoolean:isControlDown withGeogebraCommonUtilAsyncOperation:callback];
  }
  return [self endOfSwitchModeForProcessModeWithGeogebraCommonKernelGeosGeoElementArray:ret withBoolean:changedKernel withGeogebraCommonUtilAsyncOperation:callback];
}

- (void)switchModeForRemovePolygonsWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  switch (mode_) {
    case GeogebraCommonEuclidianEuclidianConstants_MODE_PARALLEL_PLANE:
    [((GeogebraCommonEuclidianHits *) nil_chk(hits)) removePolygonsIfNotOnlyCS2D];
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_TETRAHEDRON:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CUBE:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_PYRAMID:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_PRISM:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_AREA:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_VOLUME:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_EXTRUSION:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_NET:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CONIFY:
    [((GeogebraCommonEuclidianHits *) nil_chk(hits)) removeAllPolygonsButOne];
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECTION_CURVE:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECT:
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_PLANE:
    break;
    default:
    [super switchModeForRemovePolygonsWithGeogebraCommonEuclidianHits:hits];
  }
}

- (IOSObjectArray *)switchModeForThreePointsWithInt:(jint)mode {
  {
    IOSObjectArray *points;
    GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *ret0;
    IOSObjectArray *ret;
    switch (mode) {
      case GeogebraCommonEuclidianEuclidianConstants_MODE_PLANE_THREE_POINTS:
      points = [self getSelectedPointsND];
      ret0 = (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) Plane3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 2)], [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]);
      ret = [IOSObjectArray arrayWithObjects:(id[]){ ret0 } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
      default:
      return [super switchModeForThreePointsWithInt:mode];
    }
  }
}

- (IOSObjectArray *)switchModeForCircleOrSphere2WithInt:(jint)mode {
  {
    IOSObjectArray *points;
    IOSObjectArray *ret;
    switch (mode) {
      case GeogebraCommonEuclidianEuclidianConstants_MODE_SPHERE_TWO_POINTS:
      points = [self getSelectedPointsND];
      ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      IOSObjectArray_Set(ret, 0, [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) SphereWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1)]);
      return ret;
      default:
      return [super switchModeForCircleOrSphere2WithInt:mode];
    }
  }
}

- (void)createNewPointForModePointWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                      withBoolean:(jboolean)complex {
  [self createNewPointWithGeogebraCommonEuclidianHits:hits withBoolean:YES withBoolean:YES withBoolean:YES withBoolean:YES withBoolean:NO];
}

- (void)createNewPointForModeOtherWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  [self createNewPointWithGeogebraCommonEuclidianHits:hits withBoolean:YES withBoolean:YES withBoolean:YES withBoolean:YES withBoolean:NO];
}

- (void)switchModeForMousePressedWithGeogebraCommonEuclidianEventAbstractEvent:(GeogebraCommonEuclidianEventAbstractEvent *)e {
  GeogebraCommonEuclidianHits *hits;
  GeogebraCommonEuclidianEventPointerEventTypeEnum *type = [((GeogebraCommonEuclidianEventAbstractEvent *) nil_chk(e)) getType];
  {
    jboolean createPointAnywhere;
    switch (mode_) {
      case GeogebraCommonEuclidianEuclidianConstants_MODE_PLANE_THREE_POINTS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_SPHERE_TWO_POINTS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_SPHERE_POINT_RADIUS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CONE_TWO_POINTS_RADIUS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CYLINDER_TWO_POINTS_RADIUS:
      [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      [((GeogebraCommonEuclidianHits *) nil_chk(hits)) removePolygons];
      [self createNewPointWithGeogebraCommonEuclidianHits:hits withBoolean:YES withBoolean:YES withBoolean:YES withBoolean:YES withBoolean:NO];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_ORTHOGONAL_PLANE:
      [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      [((GeogebraCommonEuclidianHits *) nil_chk(hits)) removePolygons];
      [self createNewPointWithGeogebraCommonEuclidianHits:hits withBoolean:NO withBoolean:NO withBoolean:YES];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_PLANE:
      [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_PARALLEL_PLANE:
      [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      [((GeogebraCommonEuclidianHits *) nil_chk(hits)) removePolygons];
      [self createNewPointWithGeogebraCommonEuclidianHits:hits withBoolean:YES withBoolean:NO withBoolean:NO withBoolean:YES withBoolean:NO];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_EXTRUSION:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CONIFY:
      [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      [((GeogebraCommonEuclidianHits *) nil_chk(hits)) removeAllPlanes];
      [self switchModeForRemovePolygonsWithGeogebraCommonEuclidianHits:hits];
      GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_extrusionOrConifyWithGeogebraCommonEuclidianHits_(self, hits);
      [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) updatePreviewable];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_TETRAHEDRON:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CUBE:
      [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      createPointAnywhere = NO;
      if (GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selCS2D(self) == 1 || [self selPoints] != 0) {
        createPointAnywhere = YES;
      }
      else {
        if ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getCursor3DType] == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_REGION) {
          if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([view3D_ getCursor3D])) getRegion] == [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getXOYPlane]) {
            createPointAnywhere = YES;
          }
        }
      }
      if (createPointAnywhere) {
        [self createNewPointWithGeogebraCommonEuclidianHits:hits withBoolean:YES withBoolean:YES withBoolean:YES withBoolean:YES withBoolean:NO];
      }
      else {
        [self createNewPointWithGeogebraCommonEuclidianHits:hits withBoolean:YES withBoolean:NO withBoolean:YES withBoolean:YES withBoolean:NO];
      }
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_PYRAMID:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_PRISM:
      [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      if ([self selPolygons] == 1 || [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getPolyCount] == 0) {
        [self createNewPointWithGeogebraCommonEuclidianHits:hits withBoolean:YES withBoolean:YES withBoolean:YES withBoolean:YES withBoolean:NO];
      }
      else {
        [self switchModeForRemovePolygonsWithGeogebraCommonEuclidianHits:hits];
        [self createNewPointWithGeogebraCommonEuclidianHits:hits withBoolean:YES withBoolean:NO withBoolean:NO withBoolean:YES withBoolean:NO];
      }
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_ROTATEVIEW:
      GeogebraCommonEuclidianEuclidianController_set_startLoc_(self, mouseLoc_);
      [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) rememberOrigins];
      moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_ROTATE_VIEW;
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_AXIS_POINT:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_POINT_RADIUS_DIRECTION:
      [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      [((GeogebraCommonEuclidianHits *) nil_chk(hits)) removePolygons];
      if ([hits size] == 0) [self createNewPointWithGeogebraCommonEuclidianHits:hits withBoolean:NO withBoolean:YES withBoolean:YES];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECTION_CURVE:
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_VOLUME:
      [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_NET:
      [self setViewHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      break;
      default:
      [super switchModeForMousePressedWithGeogebraCommonEuclidianEventAbstractEvent:e];
    }
  }
}

- (jboolean)switchModeForMouseReleasedWithInt:(jint)mode
              withGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                  withBoolean:(jboolean)changedKernel
                                  withBoolean:(jboolean)control
withGeogebraCommonEuclidianEventPointerEventTypeEnum:(GeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  switch (mode) {
    case GeogebraCommonEuclidianEuclidianConstants_MODE_PARALLEL_PLANE:
    return YES;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_EXTRUSION:
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawExtrusionOrConify3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DDrawDrawExtrusionOrConify3D *) check_class_cast([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getPreviewDrawable], [GeogebraCommonGeogebra3DEuclidian3DDrawDrawExtrusionOrConify3D class])))) createPolyhedron];
    return YES;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CONIFY:
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawExtrusionOrConify3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DDrawDrawExtrusionOrConify3D *) check_class_cast([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getPreviewDrawable], [GeogebraCommonGeogebra3DEuclidian3DDrawDrawExtrusionOrConify3D class])))) createPolyhedron];
    return YES;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_PYRAMID:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_PRISM:
    return YES;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_PLANE:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_ROTATE_AROUND_LINE:
    return YES;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_VIEW_IN_FRONT_OF:
    return YES;
    default:
    return [super switchModeForMouseReleasedWithInt:mode withGeogebraCommonEuclidianHits:hits withBoolean:changedKernel withBoolean:control withGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
  }
}

- (GeogebraCommonEuclidianHits *)addPointCreatedForMouseReleasedWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  [((GeogebraCommonEuclidianHits *) nil_chk(hits)) addWithId:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(pointCreated_, [GeogebraCommonKernelGeosGeoElement class])];
  return hits;
}

- (void)showDrawingPadPopupWithGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)mouseLoc1 {
  [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getGuiManager])) showDrawingPadPopup3DWithGeogebraCommonEuclidianEuclidianViewInterfaceCommon:view_ withGeogebraCommonAwtGPoint:mouseLoc1];
}

- (IOSObjectArray *)intersectWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) return nil;
  if ([hits containsGeoPoint]) {
    [hits clear];
    return nil;
  }
  [hits removePolygonsIfSidePresent];
  if (goodHits_ == nil) GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_goodHits_(self, new_GeogebraCommonGeogebra3DEuclidian3DHits3D_init());
  else [goodHits_ clear];
  id<GeogebraCommonKernelKernelNDGeoPointND> singlePoint = nil;
  if ([self selGeos] == 0) {
    if ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getCursor3DType] == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_DEPENDENT) {
      singlePoint = singleIntersectionPoint_;
    }
    else {
      singlePoint = [self getSingleIntersectionPointWithGeogebraCommonEuclidianHits:hits];
    }
    if (singlePoint != nil) {
      [hits clear];
      [hits addWithId:IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([((GeogebraCommonKernelGeosGeoElement *) check_class_cast(singlePoint, [GeogebraCommonKernelGeosGeoElement class])) getParentAlgorithm])) getInput]), 0)];
      [hits addWithId:IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([((GeogebraCommonKernelGeosGeoElement *) check_class_cast(singlePoint, [GeogebraCommonKernelGeosGeoElement class])) getParentAlgorithm])) getInput]), 1)];
    }
    else {
      [hits getHitsWithGeogebraCommonKernelGeosTestEnumArray:[IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelGeosTestEnum_get_GEOLINEND(), GeogebraCommonKernelGeosTestEnum_get_GEOCOORDSYS2D(), GeogebraCommonKernelGeosTestEnum_get_GEOQUADRICND() } count:3 type:GeogebraCommonKernelGeosTestEnum_class_()] withBoolean:NO withGeogebraCommonEuclidianHits:goodHits_];
      hits = [hits getHitsWithInt:1];
    }
  }
  else if ([self selGeos] == 1) {
    if (GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selCS2D(self) == 1 || GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selQuadric(self) == 1) {
      [hits getHitsWithGeogebraCommonKernelGeosTestEnumArray:[IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelGeosTestEnum_get_GEOCOORDSYS2D(), GeogebraCommonKernelGeosTestEnum_get_GEOQUADRIC3D() } count:2 type:GeogebraCommonKernelGeosTestEnum_class_()] withBoolean:YES withGeogebraCommonEuclidianHits:goodHits_];
    }
    else {
      [hits getHitsWithGeogebraCommonKernelGeosTestEnumArray:[IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelGeosTestEnum_get_GEOLINEND(), GeogebraCommonKernelGeosTestEnum_get_GEOCOORDSYS2D(), GeogebraCommonKernelGeosTestEnum_get_GEOQUADRICND() } count:3 type:GeogebraCommonKernelGeosTestEnum_class_()] withBoolean:NO withGeogebraCommonEuclidianHits:goodHits_];
    }
    GeogebraCommonKernelGeosGeoElement *selected = [((JavaUtilArrayList *) nil_chk(selectedGeos_)) getWithInt:0];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(selected)) isGeoLine]) {
      while ([((GeogebraCommonGeogebra3DEuclidian3DHits3D *) nil_chk(goodHits_)) size] >= 1) {
        if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([goodHits_ getWithInt:0])) isGeoPlane] && GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_getConfigLinePlaneWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoCoordSys2D_((id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(selected, @protocol(GeogebraCommonKernelKernelNDGeoLineND)), ((id<GeogebraCommonKernelKernelNDGeoCoordSys2D>) check_protocol_cast([goodHits_ getWithInt:0], @protocol(GeogebraCommonKernelKernelNDGeoCoordSys2D)))) == GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum_get_CONTAINED()) [goodHits_ removeWithInt:0];
        else break;
      }
    }
    else if ([selected isGeoConic]) {
      while ([((GeogebraCommonGeogebra3DEuclidian3DHits3D *) nil_chk(goodHits_)) size] >= 1) {
        if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([goodHits_ getWithInt:0])) isGeoPlane] && GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_getConfigPlanePlaneWithGeogebraCommonKernelMatrixCoordSys_withGeogebraCommonKernelMatrixCoordSys_(([((GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(selected, [GeogebraCommonKernelKernelNDGeoConicND class])) getCoordSys]), ([((id<GeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(((id<GeogebraCommonKernelKernelNDGeoCoordSys2D>) check_protocol_cast([goodHits_ getWithInt:0], @protocol(GeogebraCommonKernelKernelNDGeoCoordSys2D))))) getCoordSys])) == GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_get_RESULTCATEGORY_CONTAINED_()) [goodHits_ removeWithInt:0];
        else break;
      }
    }
    else if ([selected isGeoPolygon]) {
      while ([((GeogebraCommonGeogebra3DEuclidian3DHits3D *) nil_chk(goodHits_)) size] >= 1) {
        if ([GeogebraCommonKernelKernelNDGeoCoordSys2D_class_() isInstance:[goodHits_ getWithInt:0]] && GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_getConfigPlanePlaneWithGeogebraCommonKernelMatrixCoordSys_withGeogebraCommonKernelMatrixCoordSys_(([((GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(selected, [GeogebraCommonKernelGeosGeoPolygon class])) getCoordSys]), ([((id<GeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(((id<GeogebraCommonKernelKernelNDGeoCoordSys2D>) check_protocol_cast([goodHits_ getWithInt:0], @protocol(GeogebraCommonKernelKernelNDGeoCoordSys2D))))) getCoordSys])) == GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_get_RESULTCATEGORY_CONTAINED_()) [goodHits_ removeWithInt:0];
        else break;
      }
    }
    if ([((GeogebraCommonGeogebra3DEuclidian3DHits3D *) nil_chk(goodHits_)) size] == 0) {
      return nil;
    }
    [hits clear];
    [hits addWithId:selected];
    [hits addWithId:[goodHits_ getWithInt:0]];
  }
  [self addSelectedLineWithGeogebraCommonEuclidianHits:hits withInt:10 withBoolean:YES];
  [self addSelectedConicWithGeogebraCommonEuclidianHits:hits withInt:10 withBoolean:YES];
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedPlaneWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, YES);
  [self addSelectedPolygonWithGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:YES];
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedQuadricWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, YES);
  if ([self selLines] >= 2) {
    IOSObjectArray *lines = [self getSelectedLinesND];
    id<GeogebraCommonKernelKernelNDGeoPointND> point = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLinesWithNSString:nil withGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(lines), 0) withGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(lines, 1)];
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_checkCoordCartesian3DWithGeogebraCommonKernelKernelNDGeoPointND_(point);
    return [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  }
  else if ([self selLines] == 1) {
    if ([self selConics] >= 1) {
      id<GeogebraCommonKernelKernelNDGeoLineND> line = IOSObjectArray_Get(nil_chk([self getSelectedLinesND]), 0);
      GeogebraCommonKernelKernelNDGeoConicND *conic = IOSObjectArray_Get(nil_chk([self getSelectedConicsND]), 0);
      IOSObjectArray *ret = [IOSObjectArray arrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()];
      IOSObjectArray *points = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLineConicWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoLineND:line withGeogebraCommonKernelKernelNDGeoConicND:conic];
      for (jint i = 0; i < 2; i++) IOSObjectArray_Set(ret, i, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(points), i), [GeogebraCommonKernelGeosGeoElement class]));
      return ret;
    }
    else if (GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selQuadric(self) == 1) {
      id<GeogebraCommonKernelKernelNDGeoLineND> line = IOSObjectArray_Get(nil_chk([self getSelectedLinesND]), 0);
      GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *quadric = IOSObjectArray_Get(nil_chk(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedQuadric(self)), 0);
      IOSObjectArray *ret = [IOSObjectArray arrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()];
      IOSObjectArray *points = [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) IntersectLineQuadricWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoLineND:line withGeogebraCommonKernelKernelNDGeoQuadricND:quadric];
      for (jint i = 0; i < 2; i++) IOSObjectArray_Set(ret, i, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(points), i), [GeogebraCommonKernelGeosGeoElement class]));
      return ret;
    }
    else if ([self selPolygons] == 1) {
      return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) IntersectionPointWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:NSString_class_()] withGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk([self getSelectedLinesND]), 0) withGeogebraCommonKernelGeosGeoSurfaceFinite:IOSObjectArray_Get(nil_chk([self getSelectedPolygons]), 0)];
    }
    else if (GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selPlanes(self) == 1) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      IOSObjectArray_Set(ret, 0, [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) IntersectWithNSString:nil withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk([self getSelectedLinesND]), 0), [GeogebraCommonKernelGeosGeoElement class]) withGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(nil_chk(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPlanes(self)), 0)]);
      return ret;
    }
  }
  else if ([self selConics] >= 2) {
    IOSObjectArray *conics = [self getSelectedConicsND];
    IOSObjectArray *ret = [IOSObjectArray arrayWithLength:4 type:GeogebraCommonKernelGeosGeoElement_class_()];
    IOSObjectArray *points = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getAlgoDispatcher])) IntersectConicsWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(nil_chk(conics), 0) withGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(conics, 1)];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points))->size_; i++) {
      GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_checkCoordCartesian3DWithGeogebraCommonKernelKernelNDGeoPointND_(IOSObjectArray_Get(points, i));
      IOSObjectArray_Set(ret, i, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, i), [GeogebraCommonKernelGeosGeoElement class]));
    }
    return ret;
  }
  else if ([self selConics] >= 1 && GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selPlanes(self) == 1) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane = IOSObjectArray_Get(nil_chk(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPlanes(self)), 0);
    GeogebraCommonKernelKernelNDGeoConicND *conic = IOSObjectArray_Get(nil_chk([self getSelectedConicsND]), 0);
    IOSObjectArray *ret = [IOSObjectArray arrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()];
    IOSObjectArray *points = [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) IntersectPlaneConicWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoCoordSys2D:plane withGeogebraCommonKernelKernelNDGeoConicND:conic];
    for (jint i = 0; i < 2; i++) IOSObjectArray_Set(ret, i, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(points), i), [GeogebraCommonKernelGeosGeoElement class]));
    return ret;
  }
  else if ([self selPolygons] == 1 && GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selPlanes(self) == 1) {
    return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) IntersectionPointWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoPlaneND:IOSObjectArray_Get(nil_chk(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPlanes(self)), 0) withGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(nil_chk([self getSelectedPolygons]), 0)];
  }
  return nil;
}

+ (void)checkCoordCartesian3DWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_checkCoordCartesian3DWithGeogebraCommonKernelKernelNDGeoPointND_(point);
}

- (JavaUtilArrayList *)getIntersectionCurves {
  return intersectionCurveList_;
}

- (IOSObjectArray *)intersectionCurveWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_intersectionCurveWithGeogebraCommonEuclidianHits_(self, hits);
}

- (jboolean)createIntersectionCurveWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)A
                                   withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)B {
  jboolean intersectable = NO;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(intersectionCurveList_)) size]; ++i) {
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve *intersection = [intersectionCurveList_ getWithInt:i];
    if ((((GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve *) nil_chk(intersection))->geo1_ == GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMetaIfJustOneWithGeogebraCommonKernelGeosGeoElement_(A) && intersection->geo2_ == GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMetaIfJustOneWithGeogebraCommonKernelGeosGeoElement_(B)) || (intersection->geo1_ == GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMetaIfJustOneWithGeogebraCommonKernelGeosGeoElement_(B) && intersection->geo2_ == GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMetaIfJustOneWithGeogebraCommonKernelGeosGeoElement_(A))) {
      intersection->hitted_ = YES;
      [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(intersection->drawable_)) setWaitForUpdate];
      return YES;
    }
  }
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(A)) isGeoPlane] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(B)) isGeoPlane]) {
    IOSObjectArray *ret = [IOSObjectArray arrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    jboolean oldSilentMode = [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) isSilentMode];
    [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) setSilentModeWithBoolean:YES];
    IOSObjectArray_Set(ret, 0, [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) IntersectPlanesWithGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(A, @protocol(GeogebraCommonKernelKernelNDGeoPlaneND)) withGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(B, @protocol(GeogebraCommonKernelKernelNDGeoPlaneND))]);
    [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) setSilentModeWithBoolean:oldSilentMode];
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawLine3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelKernelNDGeoLineND_(view3D_, (id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(ret, 0), @protocol(GeogebraCommonKernelKernelNDGeoLineND))) autorelease];
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_processIntersectionCurveWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(self, A, B, IOSObjectArray_Get(ret, 0), d);
    intersectable = YES;
  }
  else if ([A isGeoPlane] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(B)) isGeoPolygon]) {
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_createIntersectionCurvePlanePolygonWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoPolygon_(self, A, (GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(B, [GeogebraCommonKernelGeosGeoPolygon class]));
  }
  else if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(B)) isGeoPlane] && [A isGeoPolygon]) {
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_createIntersectionCurvePlanePolygonWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoPolygon_(self, B, (GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(A, [GeogebraCommonKernelGeosGeoPolygon class]));
  }
  else if ([A isGeoPlane] && [B isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]]) {
    intersectable = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_createIntersectionCurvePlaneQuadricWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self, A, B);
  }
  else if ([B isGeoPlane] && [A isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]]) {
    intersectable = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_createIntersectionCurvePlaneQuadricWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self, B, A);
  }
  else if ([A isGeoPlane] && [B isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class]]) {
    intersectable = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_createIntersectionCurvePlaneQuadricLimitedWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self, A, B);
  }
  else if ([B isGeoPlane] && [A isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class]]) {
    intersectable = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_createIntersectionCurvePlaneQuadricLimitedWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self, B, A);
  }
  else if ([A isKindOfClass:[GeogebraCommonKernelKernelNDGeoQuadricND class]] && [B isKindOfClass:[GeogebraCommonKernelKernelNDGeoQuadricND class]]) {
    jboolean oldSilentMode = [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) isSilentMode];
    [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) setSilentModeWithBoolean:YES];
    GeogebraCommonKernelGeosGeoElement *ret = IOSObjectArray_Get(nil_chk([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getManager3D])) IntersectAsCircleWithGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *) check_class_cast(A, [GeogebraCommonKernelKernelNDGeoQuadricND class]) withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *) check_class_cast(B, [GeogebraCommonKernelKernelNDGeoQuadricND class])]), 0);
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelKernelNDGeoConicND_(view3D_, (GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) check_class_cast(ret, [GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D class])) autorelease];
    [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) setSilentModeWithBoolean:oldSilentMode];
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_processIntersectionCurveWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(self, A, B, ret, d);
    intersectable = YES;
  }
  return intersectable;
}

- (jboolean)createIntersectionCurvePlanePolygonWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)A
                                               withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)B {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_createIntersectionCurvePlanePolygonWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoPolygon_(self, A, B);
}

- (jboolean)createIntersectionCurvePlaneQuadricWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)A
                                               withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)B {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_createIntersectionCurvePlaneQuadricWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self, A, B);
}

- (jboolean)createIntersectionCurvePlaneQuadricLimitedWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)A
                                                      withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)B {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_createIntersectionCurvePlaneQuadricLimitedWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self, A, B);
}

- (void)processIntersectionCurveWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)A
                                withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)B
                                withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)intersection
                 withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)d {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_processIntersectionCurveWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(self, A, B, intersection, d);
}

+ (GeogebraCommonKernelGeosGeoElement *)getMetaIfJustOneWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMetaIfJustOneWithGeogebraCommonKernelGeosGeoElement_(geo);
}

- (void)decideIntersectionWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_decideIntersectionWithGeogebraCommonEuclidianHits_(self, hits);
}

- (void)addToGoodHitsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addToGoodHitsWithGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (void)transformCoords {
}

- (void)updatePastePreviewPosition {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *p = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getCursor3D];
  if (translationVec3D_ == nil) {
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_translationVec3D_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
  }
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(translationVec3D_)) setXWithDouble:[((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) getInhomX] - [self getStartPointX]];
  [translationVec3D_ setYWithDouble:[p getInhomY] - [self getStartPointY]];
  [translationVec3D_ setZWithDouble:[p getInhomZ] - [self getStartPointZ]];
  [self setStartPointLocationWithDouble:[p getInhomX] withDouble:[p getInhomY] withDouble:[p getInhomZ]];
  if (tmpCoordsL3_ == nil) {
    GeogebraCommonEuclidianEuclidianController_setAndConsume_tmpCoordsL3_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
  }
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoordsL3_)) setXWithDouble:[p getInhomX]];
  [tmpCoordsL3_ setYWithDouble:[p getInhomY]];
  [tmpCoordsL3_ setZWithDouble:[p getInhomZ]];
  GeogebraCommonKernelGeosGeoElement_moveObjectsWithJavaUtilArrayList_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonEuclidianEuclidianView_(pastePreviewSelected_, translationVec3D_, tmpCoordsL3_, [view3D_ getViewDirection], view3D_);
}

- (jdouble)getStartPointZ {
  return startPointZ_;
}

- (void)setStartPointLocationWithDouble:(jdouble)x
                             withDouble:(jdouble)y
                             withDouble:(jdouble)z {
  [self setStartPointLocationWithDouble:x withDouble:y];
  startPointZ_ = z;
}

- (jint)addSelectedCS1DWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                               withInt:(jint)max
                                           withBoolean:(jboolean)addMoreThanOneAllowed {
  return [self handleAddSelectedWithGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:selectedCS1D_ withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOCOORDSYS1D()];
}

- (jint)selCS1D {
  return [((JavaUtilArrayList *) nil_chk(selectedCS1D_)) size];
}

- (IOSObjectArray *)getSelectedCS1D {
  IOSObjectArray *lines = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(selectedCS1D_)) size] type:GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [selectedCS1D_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSObjectArray_Set(lines, i, [it next]);
    i++;
  }
  [self clearSelectionWithJavaUtilArrayList:selectedCS1D_];
  return lines;
}

- (jint)addSelectedCS2DWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                               withInt:(jint)max
                                           withBoolean:(jboolean)addMoreThanOneAllowed {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedCS2DWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (jint)selCS2D {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selCS2D(self);
}

- (IOSObjectArray *)getSelectedCS2D {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedCS2D(self);
}

- (jint)addSelectedPlaneWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                withInt:(jint)max
                                            withBoolean:(jboolean)addMoreThanOneAllowed {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedPlaneWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (jint)selPlanes {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selPlanes(self);
}

- (IOSObjectArray *)getSelectedPlanes {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPlanes(self);
}

- (jint)selQuadric {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selQuadric(self);
}

- (jint)addSelectedQuadricWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                  withInt:(jint)max
                                              withBoolean:(jboolean)addMoreThanOneAllowed {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedQuadricWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (IOSObjectArray *)getSelectedQuadric {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedQuadric(self);
}

- (jint)selQuadricLimited {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selQuadricLimited(self);
}

- (jint)addSelectedQuadricLimitedWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                         withInt:(jint)max
                                                     withBoolean:(jboolean)addMoreThanOneAllowed {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedQuadricLimitedWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (IOSObjectArray *)getSelectedQuadricLimited {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedQuadricLimited(self);
}

- (jint)selPolyhedron {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selPolyhedron(self);
}

- (jint)addSelectedPolyhedronWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                     withInt:(jint)max
                                                 withBoolean:(jboolean)addMoreThanOneAllowed {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedPolyhedronWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (IOSObjectArray *)getSelectedPolyhedron {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPolyhedron(self);
}

- (GeogebraCommonKernelGeosGeoElement *)chooseGeoWithJavaUtilArrayList:(JavaUtilArrayList *)geos
                                                           withBoolean:(jboolean)includeFixed {
  return [self chooseGeoWithJavaUtilArrayList:geos withBoolean:includeFixed withBoolean:NO];
}

- (GeogebraCommonKernelGeosGeoElement *)chooseGeoWithJavaUtilArrayList:(JavaUtilArrayList *)geos
                                                           withBoolean:(jboolean)includeFixed
                                                           withBoolean:(jboolean)includeConstants {
  if (![((JavaUtilArrayList *) nil_chk(geos)) isEmpty]) {
    if (!includeConstants && [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) ownsWithGeogebraCommonKernelGeosGeoElement:[geos getWithInt:0]]) return nil;
    GeogebraCommonKernelGeosGeoElement *geo = [geos getWithInt:0];
    if (!includeFixed && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isFixed]) return nil;
    return geo;
  }
  return nil;
}

+ (jboolean)isModeForMovingPointWithInt:(jint)mode {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_isModeForMovingPointWithInt_(mode);
}

+ (jboolean)isModeForCreatingPointWithInt:(jint)mode {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_isModeForCreatingPointWithInt_(mode);
}

- (jboolean)cursor3DVisibleForCurrentModeWithInt:(jint)cursorType {
  if (cursorType == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_ALREADY) {
    return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_isModeForMovingPointWithInt_(mode_);
  }
  else if (cursorType == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_DEPENDENT) {
    switch (mode_) {
      case GeogebraCommonEuclidianEuclidianConstants_MODE_POINT:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECT:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_JOIN:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_SEGMENT:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_RAY:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_THREE_POINTS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_SPHERE_POINT_RADIUS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_SPHERE_TWO_POINTS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CONE_TWO_POINTS_RADIUS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CYLINDER_TWO_POINTS_RADIUS:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_TETRAHEDRON:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CUBE:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_PYRAMID:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_PRISM:
      return YES;
      default:
      return NO;
    }
  }
  else {
    {
      GeogebraCommonEuclidianHits *hits;
      GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point;
      switch (mode_) {
        case GeogebraCommonEuclidianEuclidianConstants_MODE_POINT:
        case GeogebraCommonEuclidianEuclidianConstants_MODE_POINT_ON_OBJECT:
        case GeogebraCommonEuclidianEuclidianConstants_MODE_JOIN:
        case GeogebraCommonEuclidianEuclidianConstants_MODE_SEGMENT:
        case GeogebraCommonEuclidianEuclidianConstants_MODE_RAY:
        case GeogebraCommonEuclidianEuclidianConstants_MODE_VECTOR:
        case GeogebraCommonEuclidianEuclidianConstants_MODE_POLYGON:
        case GeogebraCommonEuclidianEuclidianConstants_MODE_POLYLINE:
        case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_THREE_POINTS:
        case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_ARC_THREE_POINTS:
        case GeogebraCommonEuclidianEuclidianConstants_MODE_PLANE_THREE_POINTS:
        case GeogebraCommonEuclidianEuclidianConstants_MODE_SPHERE_TWO_POINTS:
        case GeogebraCommonEuclidianEuclidianConstants_MODE_SPHERE_POINT_RADIUS:
        case GeogebraCommonEuclidianEuclidianConstants_MODE_CONE_TWO_POINTS_RADIUS:
        case GeogebraCommonEuclidianEuclidianConstants_MODE_CYLINDER_TWO_POINTS_RADIUS:
        case GeogebraCommonEuclidianEuclidianConstants_MODE_VIEW_IN_FRONT_OF:
        return YES;
        case GeogebraCommonEuclidianEuclidianConstants_MODE_VECTOR_FROM_POINT:
        hits = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getHits];
        if (![((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk([hits getWithInt:0])) isGeoVector]) {
          return NO;
        }
        return YES;
        case GeogebraCommonEuclidianEuclidianConstants_MODE_PYRAMID:
        case GeogebraCommonEuclidianEuclidianConstants_MODE_PRISM:
        return ([self selPolygons] == 1) || (!polygonForPyramidBasis_);
        case GeogebraCommonEuclidianEuclidianConstants_MODE_TETRAHEDRON:
        case GeogebraCommonEuclidianEuclidianConstants_MODE_CUBE:
        if (GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selCS2D(self) == 1 || [self selPoints] != 0) {
          return YES;
        }
        hits = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getHits];
        if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
          return YES;
        }
        point = [view3D_ getCursor3D];
        if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point)) hasPath]) {
          return YES;
        }
        if ([point hasRegion]) {
          if ([point getRegion] == [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getXOYPlane]) {
            return YES;
          }
        }
        return NO;
        default:
        return NO;
      }
    }
  }
}

- (void)setHandledGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_handledGeo_(self, geo);
  if (handledGeo_ == nil) return;
  [self setStartPointLocation];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(handledGeo_)) recordChangeableCoordParentNumbers];
}

- (jboolean)viewHasHitsForMouseDragged {
  if (moveMode__ == GeogebraCommonEuclidianEuclidianController_MOVE_POINT && [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getCursor3DType] == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_ALREADY) return [((GeogebraCommonEuclidianHits *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits])) containsGeoPoint];
  else return [super viewHasHitsForMouseDragged];
}

- (void)wrapMouseDraggedWithGeogebraCommonEuclidianEventAbstractEvent:(GeogebraCommonEuclidianEventAbstractEvent *)event
                                                          withBoolean:(jboolean)startCapture {
  if (handledGeo_ != nil) {
    [self setMouseLocationWithGeogebraCommonEuclidianEventAbstractEvent:event];
    [((GeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) release__];
    [self updateTranslationVector];
    [handledGeo_ moveFromChangeableCoordParentNumbersWithGeogebraCommonKernelMatrixCoords:translationVec3D_ withGeogebraCommonKernelMatrixCoords:startPoint3D_ withGeogebraCommonKernelMatrixCoords:[((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getViewDirection] withJavaUtilArrayList:nil withJavaUtilArrayList:nil withGeogebraCommonEuclidianEuclidianView:view3D_];
    [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
    return;
  }
  [self setMouseMovedEventWithGeogebraCommonEuclidianEventAbstractEvent:event];
  [super wrapMouseDraggedWithGeogebraCommonEuclidianEventAbstractEvent:event withBoolean:startCapture];
}

- (void)updateTranslationVector {
  GeogebraCommonKernelMatrixCoords *point = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getPickPointWithGeogebraCommonAwtGPoint:mouseLoc_];
  [view3D_ toSceneCoords3DWithGeogebraCommonKernelMatrixCoords:point];
  [self updateTranslationVectorWithGeogebraCommonKernelMatrixCoords:point];
}

- (void)updateTranslationVectorWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)point {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_translationVec3D_(self, [((GeogebraCommonKernelMatrixCoords *) nil_chk(point)) subWithGeogebraCommonKernelMatrixCoords:startPoint3D_]);
}

- (void)setStartPointLocation {
  [self udpateStartPoint];
  [super setStartPointLocation];
}

- (void)udpateStartPoint {
  if (mouseLoc_ == nil) return;
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_updateStartPointWithGeogebraCommonKernelMatrixCoords_(self, [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getPickPointWithGeogebraCommonAwtGPoint:mouseLoc_]);
}

- (void)updateStartPointWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)p {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_updateStartPointWithGeogebraCommonKernelMatrixCoords_(self, p);
}

- (void)setTranslateStartWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                    withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)vec {
  [super setTranslateStartWithGeogebraCommonKernelGeosGeoElement:geo withGeogebraCommonKernelKernelNDGeoVectorND:vec];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(startPoint3D_)) setWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getCursor3D])) getInhomCoordsInD3]];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(translationVec3D_)) setWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(vec)) getCoordsInD3]];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPlane]) {
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_translateDirection_(self, [geo getMainDirection]);
  }
  else {
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_translateDirection_(self, nil);
  }
}

- (void)setTranslateFromPointStartWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setTranslateFromPointStartWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoPointND_(self, geo, point);
}

- (GeogebraCommonKernelMatrixCoords *)getNormalTranslateDirection {
  if (translateDirection_ == nil) {
    return GeogebraCommonKernelMatrixCoords_get_VZ_();
  }
  return translateDirection_;
}

- (void)moveVector {
  GeogebraCommonKernelMatrixCoords *o = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getPickPointWithGeogebraCommonAwtGPoint:mouseLoc_];
  [view3D_ toSceneCoords3DWithGeogebraCommonKernelMatrixCoords:o];
  if (translateDirection_ == nil) {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(o)) projectPlaneThruVIfPossibleWithGeogebraCommonKernelMatrixCoords:GeogebraCommonKernelMatrixCoords_get_VX_() withGeogebraCommonKernelMatrixCoords:GeogebraCommonKernelMatrixCoords_get_VY_() withGeogebraCommonKernelMatrixCoords:GeogebraCommonKernelMatrixCoords_get_VZ_() withGeogebraCommonKernelMatrixCoords:startPoint3D_ withGeogebraCommonKernelMatrixCoords:[view3D_ getViewDirection] withGeogebraCommonKernelMatrixCoords:tmpCoords_];
  }
  else {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(startPoint3D_)) projectNearLineWithGeogebraCommonKernelMatrixCoords:o withGeogebraCommonKernelMatrixCoords:[view3D_ getViewDirection] withGeogebraCommonKernelMatrixCoords:translateDirection_ withGeogebraCommonKernelMatrixCoords:tmpCoords_];
  }
  id<GeogebraCommonKernelKernelNDGeoPointND> P = [((id<GeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(movedGeoVector_)) getStartPoint];
  if (P == nil) {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords_)) setSubWithGeogebraCommonKernelMatrixCoords:tmpCoords_ withGeogebraCommonKernelMatrixCoords:startPoint3D_];
  }
  else {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords_)) setSubWithGeogebraCommonKernelMatrixCoords:tmpCoords_ withGeogebraCommonKernelMatrixCoords:[P getInhomCoordsInD3]];
  }
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords_)) setAddWithGeogebraCommonKernelMatrixCoords:tmpCoords_ withGeogebraCommonKernelMatrixCoords:translationVec3D_];
  [((GeogebraCommonGeogebra3DEuclidian3DEuclidianController3DCompanion *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DEuclidianController3DCompanion *) check_class_cast(companion_, [GeogebraCommonGeogebra3DEuclidian3DEuclidianController3DCompanion class])))) checkPointCapturingXYThenZWithGeogebraCommonKernelMatrixCoords:tmpCoords_];
  if ([movedGeoVector_ isGeoElement3D]) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) check_class_cast(movedGeoVector_, [GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D class])) setCoordsWithGeogebraCommonKernelMatrixCoords:tmpCoords_];
  }
  else {
    [self moveVectorWithDouble:[tmpCoords_ getX] withDouble:[tmpCoords_ getY]];
  }
}

- (void)setStartPointLocationWithOriginWithDouble:(jdouble)x
                                       withDouble:(jdouble)y {
  [self udpateStartPoint];
  [startPoint3DxOy_ setXWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(startPoint3DxOy_)) getX] - x];
  [startPoint3DxOy_ setYWithDouble:[startPoint3DxOy_ getY] - y];
  [super setStartPointLocationWithOriginWithDouble:x withDouble:y];
}

- (void)calcRWcoords {
  GeogebraCommonKernelMatrixCoords *point = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getPickPointWithGeogebraCommonAwtGPoint:mouseLoc_];
  [view3D_ toSceneCoords3DWithGeogebraCommonKernelMatrixCoords:point];
  xRW_ = [((GeogebraCommonKernelMatrixCoords *) nil_chk(point)) getX];
  yRW_ = [point getY];
  zRW_ = [point getZ];
}

- (void)moveDependentWithBoolean:(jboolean)repaint {
  [self updateTranslationVector];
  GeogebraCommonKernelGeosGeoElement_moveObjectsWithJavaUtilArrayList_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonEuclidianEuclidianView_(translateableGeos_, translationVec3D_, startPoint3D_, [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getViewDirection], view3D_);
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
}

- (void)handleMovedElementMultiple {
}

- (void)handleMovedElementFreeWithGeogebraCommonEuclidianEventPointerEventTypeEnum:(GeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  if ([self handleMovedElementFreePoint]) {
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_translateDirection_(self, nil);
    return;
  }
  if ([self handleMovedElementFreePlane]) {
    return;
  }
  [self handleMovedElementFreeText];
}

- (jboolean)handleMovedElementFreePlane {
  return NO;
}

- (void)handleMovedElementDependent {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(movedGeoElement_)) isTranslateable]) {
    GeogebraCommonKernelAlgosAlgoElement *algo = [movedGeoElement_ getParentAlgorithm];
    if ([algo isKindOfClass:[GeogebraCommonKernelAlgosAlgoTranslate class]]) {
      IOSObjectArray *input = [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getInput];
      GeogebraCommonKernelGeosGeoElement *in = IOSObjectArray_Get(nil_chk(input), 1);
      if ([GeogebraCommonKernelKernelNDGeoVectorND_class_() isInstance:in]) {
        if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(in)) isIndependent]) {
          GeogebraCommonEuclidianEuclidianController_set_movedGeoVector_(self, (id<GeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast(IOSObjectArray_Get(input, 1), @protocol(GeogebraCommonKernelKernelNDGeoVectorND)));
          moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_VECTOR_NO_GRID;
          [self setTranslateStartWithGeogebraCommonKernelGeosGeoElement:movedGeoElement_ withGeogebraCommonKernelKernelNDGeoVectorND:movedGeoVector_];
        }
        else if ([[in getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoVectorPoint class]]) {
          GeogebraCommonKernelAlgosAlgoVectorPoint *algoVector = (GeogebraCommonKernelAlgosAlgoVectorPoint *) check_class_cast([in getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoVectorPoint class]);
          moveMode__ = GeogebraCommonEuclidianEuclidianController_MOVE_POINT_WITH_OFFSET;
          [self setMovedGeoPointWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast([((GeogebraCommonKernelAlgosAlgoVectorPoint *) nil_chk(algoVector)) getP], [GeogebraCommonKernelGeosGeoElement class])];
          GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setTranslateFromPointStartWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoPointND_(self, movedGeoElement_, movedGeoPoint_);
        }
      }
    }
  }
  else {
    GeogebraCommonEuclidianEuclidianController_set_translateableGeos_(self, nil);
    [self handleMovedElementDependentWithChangeableCoordParentNumbers];
    [self handleMovedElementDependentInitMode];
  }
}

- (void)movePointWithOffsetWithBoolean:(jboolean)repaint {
  [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(companion_)) movePointWithBoolean:repaint withGeogebraCommonEuclidianEventAbstractEvent:nil];
}

- (jint)addSelectedPolygon3DWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                    withInt:(jint)max
                                                withBoolean:(jboolean)addMoreThanOneAllowed {
  return [self handleAddSelectedWithGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:selectedPolygons3D_ withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOPOLYGON3D()];
}

- (IOSObjectArray *)getSelectedPolygons3D {
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(selectedPolygons3D_)) size] type:GeogebraCommonKernelGeosGeoPolygon_class_()];
  for (jint i = 0; i < [selectedPolygons3D_ size]; i++) {
    IOSObjectArray_Set(ret, i, [selectedPolygons3D_ getWithInt:i]);
  }
  [self clearSelectionWithJavaUtilArrayList:selectedPolygons3D_];
  return ret;
}

- (jint)selPolygons3D {
  return [((JavaUtilArrayList *) nil_chk(selectedPolygons3D_)) size];
}

- (IOSObjectArray *)orthogonalWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) return nil;
  jboolean hitPoint = ([self addSelectedPointWithGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO] != 0);
  if (!hitPoint) {
    if (GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selCS2D(self) == 0) [self addSelectedLineWithGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO];
    if ([self selLines] == 0) GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedCS2DWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if ([self selPoints] == 1) {
    if (GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selCS2D(self) == 1) {
      IOSObjectArray *points = [self getSelectedPointsND];
      IOSObjectArray *cs = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedCS2D(self);
      return [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) OrthogonalLine3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoCoordSys2D:IOSObjectArray_Get(nil_chk(cs), 0)], [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    }
    else if ([self selLines] == 1) {
      IOSObjectArray *points = [self getSelectedPointsND];
      IOSObjectArray *lines = [self getSelectedLinesND];
      return [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) OrthogonalLine3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoDirectionND:IOSObjectArray_Get(nil_chk(lines), 0) withGeogebraCommonKernelKernelNDGeoDirectionND:[((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getSpace]], [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    }
  }
  return nil;
}

- (IOSObjectArray *)rotateAroundLineWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_rotateAroundLineWithGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)rotateAroundLineWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geoRot
                                withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)phi
                                 withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getManager3D])) Rotate3DWithNSString:nil withGeogebraCommonKernelGeosGeoElement:geoRot withGeogebraCommonKernelGeosGeoNumberValue:phi withGeogebraCommonKernelKernelNDGeoLineND:line];
}

- (jboolean)viewOrientationForClockwiseWithBoolean:(jboolean)clockwise
         withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  if ([((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) getDirectionInD3])) dotproductWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getViewDirection]] > 0) return !clockwise;
  return clockwise;
}

- (IOSObjectArray *)mirrorAtPlaneWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_mirrorAtPlaneWithGeogebraCommonEuclidianHits_(self, hits);
}

- (void)showPopupMenuChooseGeoWithJavaUtilArrayList:(JavaUtilArrayList *)selectedGeos1
                    withGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  if ([((GeogebraCommonMainApp *) nil_chk(app_)) isUsingFullGui] && [app_ getGuiManager] != nil) {
    [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) showPopupChooseGeoWithJavaUtilArrayList:selectedGeos1 withJavaUtilArrayList:hits withGeogebraCommonEuclidianEuclidianViewInterfaceCommon:view3D_ withGeogebraCommonAwtGPoint:mouseLoc_];
  }
}

- (void)updateOwnDrawablesNow {
  for (GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve * __strong intersectionCurve in nil_chk(intersectionCurveList_)) [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve *) nil_chk(intersectionCurve))->drawable_)) update];
}

- (void)setModeWithInt:(jint)newMode {
  if (newMode != GeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECTION_CURVE) {
    [((JavaUtilArrayList *) nil_chk(intersectionCurveList_)) clear];
  }
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_pyramidBasis_(self, nil);
  [super setModeWithInt:newMode];
  if (!temporaryMode_) {
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_initPointMoveMode(self);
  }
}

- (void)setDragCursorIfMoveView {
}

- (void)processSelectionRectangleWithBoolean:(jboolean)alt
                                 withBoolean:(jboolean)isControlDown {
}

- (jint)addSelectedPlanesForAngleWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                                         withInt:(jint)count {
  if ([self selVectors] == 0) {
    if ([self selLines] == 0) {
      return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedPlaneWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
    }
    else if ([self selLines] == 1) {
      return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedPlaneWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    }
  }
  return count;
}

- (GeogebraCommonKernelGeosGeoAngle *)createAngle3D {
  if (GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selPlanes(self) == 2) {
    IOSObjectArray *planes = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPlanes(self);
    return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getManager3D])) Angle3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoPlaneND:IOSObjectArray_Get(nil_chk(planes), 0) withGeogebraCommonKernelKernelNDGeoPlaneND:IOSObjectArray_Get(planes, 1)];
  }
  if (GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selPlanes(self) == 1 && [self selLines] == 1) {
    IOSObjectArray *lines = [self getSelectedLinesND];
    IOSObjectArray *planes = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPlanes(self);
    [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getManager3D])) Angle3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(lines), 0) withGeogebraCommonKernelKernelNDGeoPlaneND:IOSObjectArray_Get(nil_chk(planes), 0)];
  }
  return nil;
}

- (jboolean)hasInput3D {
  return NO;
}

- (jboolean)useInputDepthForHitting {
  return NO;
}

- (GeogebraCommonKernelMatrixCoords *)getMouseLocRW {
  return [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getCursor3D])) getInhomCoordsInD3];
}

+ (NSString *)rotateObjectWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                                       withNSString:(NSString *)inputText
                                        withBoolean:(jboolean)clockwise
        withGeogebraCommonKernelGeosGeoPolygonArray:(IOSObjectArray *)polys
     withGeogebraCommonKernelKernelNDGeoLineNDArray:(IOSObjectArray *)lines
        withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)selGeos
withGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *)ec {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_rotateObjectWithGeogebraCommonMainApp_withNSString_withBoolean_withGeogebraCommonKernelGeosGeoPolygonArray_withGeogebraCommonKernelKernelNDGeoLineNDArray_withGeogebraCommonKernelGeosGeoElementArray_withGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_(app, inputText, clockwise, polys, lines, selGeos, ec);
}

- (void)clearSelected {
  [super clearSelected];
  [self clearSelectionWithJavaUtilArrayList:selectedCS1D_ withBoolean:NO];
  [self clearSelectionWithJavaUtilArrayList:selectedCS2D_ withBoolean:NO];
  [self clearSelectionWithJavaUtilArrayList:selectedPlane_ withBoolean:NO];
  [self clearSelectionWithJavaUtilArrayList:selectedPolygons3D_ withBoolean:NO];
  [self clearSelectionWithJavaUtilArrayList:selectedPolyhedron_ withBoolean:NO];
  [self clearSelectionWithJavaUtilArrayList:selectedQuadric_ withBoolean:NO];
  [self clearSelectionWithJavaUtilArrayList:selectedQuadricLimited_ withBoolean:NO];
}

- (IOSObjectArray *)polygon {
  if (polygonMode_ == GeogebraCommonEuclidianEuclidianController_POLYGON_NORMAL) {
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_cancelSwitchPointMoveModeIfNeeded(self);
  }
  return [super polygon];
}

- (id<GeogebraCommonKernelKernelNDGeoVectorND>)createVectorForTranslation {
  return [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoDispatcher3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DAlgosAlgoDispatcher3D *) check_class_cast([self getAlgoDispatcher], [GeogebraCommonGeogebra3DKernel3DAlgosAlgoDispatcher3D class])))) Vector3D];
}

- (id<GeogebraCommonKernelKernelNDGeoVectorND>)createVectorForTranslationWithNSString:(NSString *)label {
  return [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoDispatcher3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DAlgosAlgoDispatcher3D *) check_class_cast([self getAlgoDispatcher], [GeogebraCommonGeogebra3DKernel3DAlgosAlgoDispatcher3D class])))) Vector3DWithNSString:label];
}

- (void)dealloc {
  RELEASE_(xMinMax_);
  RELEASE_(yMinMax_);
  RELEASE_(zMinMax_);
  RELEASE_(currentPlane_);
  RELEASE_(view3D_);
  RELEASE_(mouseLocOld_);
  RELEASE_(positionOld_);
  RELEASE_(pickPoint_);
  RELEASE_(goodHits_);
  RELEASE_(intersectionCurveList_);
  RELEASE_(selectedCS2D_);
  RELEASE_(selectedPolygons3D_);
  RELEASE_(selectedPlane_);
  RELEASE_(tmpCoords_);
  RELEASE_(singleIntersectionPoint_);
  RELEASE_(textDispatcher_EuclidianController3D_);
  RELEASE_(pyramidBasis_);
  RELEASE_(mouseEvent_);
  RELEASE_(resultedIntersectionCurve_);
  RELEASE_(selectedCS1D_);
  RELEASE_(selectedQuadric_);
  RELEASE_(selectedQuadricLimited_);
  RELEASE_(selectedPolyhedron_);
  RELEASE_(handledGeo_);
  RELEASE_(startPoint3D_);
  RELEASE_(startPoint3DxOy_);
  RELEASE_(translationVec3D_);
  RELEASE_(translateDirection_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonMainApp:", "EuclidianController3D", NULL, 0x1, NULL, NULL },
    { "newCompanion", NULL, "Lgeogebra.common.euclidian.EuclidianControllerCompanion;", 0x4, NULL, NULL },
    { "setView3DWithGeogebraCommonEuclidianEuclidianView:", "setView3D", "V", 0x1, NULL, NULL },
    { "getMinMaxWithDouble:withDouble:withDouble:", "getMinMax", "[D", 0x2, NULL, NULL },
    { "setMovedGeoPointWithGeogebraCommonKernelGeosGeoElement:", "setMovedGeoPoint", "V", 0x1, NULL, NULL },
    { "updateMovedGeoPointStartValuesWithGeogebraCommonKernelMatrixCoords:", "updateMovedGeoPointStartValues", "V", 0x4, NULL, NULL },
    { "getCurrentPlane", NULL, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", 0x4, NULL, NULL },
    { "setCurrentPlaneWithGeogebraCommonKernelMatrixCoordMatrix4x4:", "setCurrentPlane", "V", 0x4, NULL, NULL },
    { "movePointOnCurrentPlaneWithGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:withBoolean:", "movePointOnCurrentPlane", "V", 0x4, NULL, NULL },
    { "checkXYMinMaxWithGeogebraCommonKernelMatrixCoords:", "checkXYMinMax", "Z", 0x4, NULL, NULL },
    { "setMouseInformationWithGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:", "setMouseInformation", "V", 0x4, NULL, NULL },
    { "addOffsetForTranslationWithGeogebraCommonKernelMatrixCoords:", "addOffsetForTranslation", "V", 0x1, NULL, NULL },
    { "moveTextAbsoluteLocation", NULL, "V", 0x4, NULL, NULL },
    { "getRegionHitsWithGeogebraCommonEuclidianHits:", "getRegionHits", "Lgeogebra.common.euclidian.Hits;", 0x4, NULL, NULL },
    { "getNewPointFreeWithGeogebraCommonKernelKernelNDGeoPointND:", "getNewPointFree", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x2, NULL, NULL },
    { "getNewPointWithGeogebraCommonEuclidianHits:withBoolean:withBoolean:withBoolean:withBoolean:", "getNewPoint", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "createNewPointWithGeogebraCommonKernelKernelNDGeoPointND:", "createNewPoint", "V", 0x4, NULL, NULL },
    { "createNewPointIntersectionWithGeogebraCommonKernelKernelNDGeoPointND:", "createNewPointIntersection", "V", 0x4, NULL, NULL },
    { "createNewPointInRegionPossibleWithGeogebraCommonKernelKernelNDGeoConicND:", "createNewPointInRegionPossible", "Z", 0x4, NULL, NULL },
    { "getSingleIntersectionPointWithGeogebraCommonEuclidianHits:", "getSingleIntersectionPoint", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "getSelectedPoints3D", NULL, "[Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x14, NULL, NULL },
    { "getSelectedLines3D", NULL, "[Lgeogebra.common.geogebra3D.kernel3D.geos.GeoCoordSys1D;", 0x14, NULL, NULL },
    { "circleOrSphereWithGeogebraCommonKernelArithmeticNumberValue:", "circleOrSphere", "V", 0x4, NULL, NULL },
    { "spherePointRadiusWithGeogebraCommonEuclidianHits:", "spherePointRadius", "Z", 0x14, NULL, NULL },
    { "coneTwoPointsRadiusWithGeogebraCommonEuclidianHits:", "coneTwoPointsRadius", "Z", 0x14, NULL, NULL },
    { "cylinderTwoPointsRadiusWithGeogebraCommonEuclidianHits:", "cylinderTwoPointsRadius", "Z", 0x14, NULL, NULL },
    { "archimedeanSolidWithGeogebraCommonEuclidianHits:withGeogebraCommonKernelCommandsCommandsEnum:", "archimedeanSolid", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "polyhedronNetWithGeogebraCommonEuclidianHits:", "polyhedronNet", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "orthogonalPlaneWithGeogebraCommonEuclidianHits:", "orthogonalPlane", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "circleAxisPointWithGeogebraCommonEuclidianHits:", "circleAxisPoint", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "circlePointRadiusDirectionWithGeogebraCommonEuclidianHits:", "circlePointRadiusDirection", "Z", 0x14, NULL, NULL },
    { "getTextDispatcher", NULL, "Lgeogebra.common.geogebra3D.euclidian3D.TextDispatcher3D;", 0x4, NULL, NULL },
    { "volumeWithGeogebraCommonEuclidianHits:", "volume", "Z", 0x14, NULL, NULL },
    { "planeContainingWithGeogebraCommonEuclidianHits:", "planeContaining", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "viewInFrontOfWithGeogebraCommonEuclidianHits:", "viewInFrontOf", "Z", 0x14, NULL, NULL },
    { "parallelPlaneWithGeogebraCommonEuclidianHits:", "parallelPlane", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "setDialogOccurred", NULL, "V", 0x1, NULL, NULL },
    { "extrusionOrConifyWithGeogebraCommonEuclidianHits:", "extrusionOrConify", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "pyramidOrPrismWithGeogebraCommonEuclidianHits:", "pyramidOrPrism", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "getMovedGeoPoint", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "wrapMouseReleasedWithGeogebraCommonEuclidianEventAbstractEvent:", "wrapMouseReleased", "V", 0x1, NULL, NULL },
    { "processReleaseForMovedGeoPointWithBoolean:", "processReleaseForMovedGeoPoint", "V", 0x4, NULL, NULL },
    { "switchPointMoveMode", NULL, "V", 0x2, NULL, NULL },
    { "cancelSwitchPointMoveModeIfNeeded", NULL, "V", 0x2, NULL, NULL },
    { "initPointMoveMode", NULL, "V", 0x2, NULL, NULL },
    { "getPointMoveMode", NULL, "I", 0x1, NULL, NULL },
    { "updateInput3D", NULL, "V", 0x1, NULL, NULL },
    { "wrapMousePressedWithGeogebraCommonEuclidianEventAbstractEvent:", "wrapMousePressed", "V", 0x1, NULL, NULL },
    { "processMouseMovedWithGeogebraCommonEuclidianEventAbstractEvent:", "processMouseMoved", "V", 0x4, NULL, NULL },
    { "setMouseMovedEventWithGeogebraCommonEuclidianEventAbstractEvent:", "setMouseMovedEvent", "V", 0x4, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "processMouseMoved", NULL, "V", 0x4, NULL, NULL },
    { "initNewModeWithInt:", "initNewMode", "V", 0x4, NULL, NULL },
    { "switchPreviewableForInitNewModeWithInt:", "switchPreviewableForInitNewMode", "Lgeogebra.common.euclidian.Previewable;", 0x4, NULL, NULL },
    { "getSelectablesWithGeogebraCommonEuclidianHits:", "getSelectables", "Z", 0x4, NULL, NULL },
    { "processModeLock", NULL, "V", 0x1, NULL, NULL },
    { "processRightPressFor3D", NULL, "Z", 0x4, NULL, NULL },
    { "processRotate3DView", NULL, "Z", 0x4, NULL, NULL },
    { "processRightReleaseFor3DWithGeogebraCommonEuclidianEventPointerEventTypeEnum:", "processRightReleaseFor3D", "Z", 0x4, NULL, NULL },
    { "switchModeForProcessModeWithGeogebraCommonEuclidianHits:withBoolean:withGeogebraCommonUtilAsyncOperation:", "switchModeForProcessMode", "Z", 0x4, NULL, NULL },
    { "switchModeForRemovePolygonsWithGeogebraCommonEuclidianHits:", "switchModeForRemovePolygons", "V", 0x4, NULL, NULL },
    { "switchModeForThreePointsWithInt:", "switchModeForThreePoints", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "switchModeForCircleOrSphere2WithInt:", "switchModeForCircleOrSphere2", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "createNewPointForModePointWithGeogebraCommonEuclidianHits:withBoolean:", "createNewPointForModePoint", "V", 0x4, NULL, NULL },
    { "createNewPointForModeOtherWithGeogebraCommonEuclidianHits:", "createNewPointForModeOther", "V", 0x4, NULL, NULL },
    { "switchModeForMousePressedWithGeogebraCommonEuclidianEventAbstractEvent:", "switchModeForMousePressed", "V", 0x4, NULL, NULL },
    { "switchModeForMouseReleasedWithInt:withGeogebraCommonEuclidianHits:withBoolean:withBoolean:withGeogebraCommonEuclidianEventPointerEventTypeEnum:", "switchModeForMouseReleased", "Z", 0x4, NULL, NULL },
    { "addPointCreatedForMouseReleasedWithGeogebraCommonEuclidianHits:", "addPointCreatedForMouseReleased", "Lgeogebra.common.euclidian.Hits;", 0x4, NULL, NULL },
    { "showDrawingPadPopupWithGeogebraCommonAwtGPoint:", "showDrawingPadPopup", "V", 0x1, NULL, NULL },
    { "intersectWithGeogebraCommonEuclidianHits:", "intersect", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "checkCoordCartesian3DWithGeogebraCommonKernelKernelNDGeoPointND:", "checkCoordCartesian3D", "V", 0xa, NULL, NULL },
    { "getIntersectionCurves", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "intersectionCurveWithGeogebraCommonEuclidianHits:", "intersectionCurve", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "createIntersectionCurveWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:", "createIntersectionCurve", "Z", 0x1, NULL, NULL },
    { "createIntersectionCurvePlanePolygonWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoPolygon:", "createIntersectionCurvePlanePolygon", "Z", 0x2, NULL, NULL },
    { "createIntersectionCurvePlaneQuadricWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:", "createIntersectionCurvePlaneQuadric", "Z", 0x2, NULL, NULL },
    { "createIntersectionCurvePlaneQuadricLimitedWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:", "createIntersectionCurvePlaneQuadricLimited", "Z", 0x2, NULL, NULL },
    { "processIntersectionCurveWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:", "processIntersectionCurve", "V", 0x2, NULL, NULL },
    { "getMetaIfJustOneWithGeogebraCommonKernelGeosGeoElement:", "getMetaIfJustOne", "Lgeogebra.common.kernel.geos.GeoElement;", 0xa, NULL, NULL },
    { "decideIntersectionWithGeogebraCommonEuclidianHits:", "decideIntersection", "V", 0x2, NULL, NULL },
    { "addToGoodHitsWithGeogebraCommonKernelGeosGeoElement:", "addToGoodHits", "V", 0x12, NULL, NULL },
    { "transformCoords", NULL, "V", 0x1, NULL, NULL },
    { "updatePastePreviewPosition", NULL, "V", 0x4, NULL, NULL },
    { "getStartPointZ", NULL, "D", 0x4, NULL, NULL },
    { "setStartPointLocationWithDouble:withDouble:withDouble:", "setStartPointLocation", "V", 0x4, NULL, NULL },
    { "addSelectedCS1DWithGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedCS1D", "I", 0x14, NULL, NULL },
    { "selCS1D", NULL, "I", 0x10, NULL, NULL },
    { "getSelectedCS1D", NULL, "[Lgeogebra.common.geogebra3D.kernel3D.geos.GeoCoordSys1D;", 0x14, NULL, NULL },
    { "addSelectedCS2DWithGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedCS2D", "I", 0x14, NULL, NULL },
    { "selCS2D", NULL, "I", 0x10, NULL, NULL },
    { "getSelectedCS2D", NULL, "[Lgeogebra.common.kernel.kernelND.GeoCoordSys2D;", 0x14, NULL, NULL },
    { "addSelectedPlaneWithGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedPlane", "I", 0x14, NULL, NULL },
    { "selPlanes", NULL, "I", 0x10, NULL, NULL },
    { "getSelectedPlanes", NULL, "[Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", 0x14, NULL, NULL },
    { "selQuadric", NULL, "I", 0x10, NULL, NULL },
    { "addSelectedQuadricWithGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedQuadric", "I", 0x14, NULL, NULL },
    { "getSelectedQuadric", NULL, "[Lgeogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3D;", 0x14, NULL, NULL },
    { "selQuadricLimited", NULL, "I", 0x10, NULL, NULL },
    { "addSelectedQuadricLimitedWithGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedQuadricLimited", "I", 0x14, NULL, NULL },
    { "getSelectedQuadricLimited", NULL, "[Lgeogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3DLimited;", 0x14, NULL, NULL },
    { "selPolyhedron", NULL, "I", 0x10, NULL, NULL },
    { "addSelectedPolyhedronWithGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedPolyhedron", "I", 0x14, NULL, NULL },
    { "getSelectedPolyhedron", NULL, "[Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPolyhedron;", 0x14, NULL, NULL },
    { "chooseGeoWithJavaUtilArrayList:withBoolean:", "chooseGeo", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "chooseGeoWithJavaUtilArrayList:withBoolean:withBoolean:", "chooseGeo", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "isModeForMovingPointWithInt:", "isModeForMovingPoint", "Z", 0xa, NULL, NULL },
    { "isModeForCreatingPointWithInt:", "isModeForCreatingPoint", "Z", 0xa, NULL, NULL },
    { "cursor3DVisibleForCurrentModeWithInt:", "cursor3DVisibleForCurrentMode", "Z", 0x1, NULL, NULL },
    { "setHandledGeoWithGeogebraCommonKernelGeosGeoElement:", "setHandledGeo", "V", 0x1, NULL, NULL },
    { "viewHasHitsForMouseDragged", NULL, "Z", 0x4, NULL, NULL },
    { "wrapMouseDraggedWithGeogebraCommonEuclidianEventAbstractEvent:withBoolean:", "wrapMouseDragged", "V", 0x1, NULL, NULL },
    { "updateTranslationVector", NULL, "V", 0x4, NULL, NULL },
    { "updateTranslationVectorWithGeogebraCommonKernelMatrixCoords:", "updateTranslationVector", "V", 0x4, NULL, NULL },
    { "setStartPointLocation", NULL, "V", 0x1, NULL, NULL },
    { "udpateStartPoint", NULL, "V", 0x4, NULL, NULL },
    { "updateStartPointWithGeogebraCommonKernelMatrixCoords:", "updateStartPoint", "V", 0x14, NULL, NULL },
    { "setTranslateStartWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelKernelNDGeoVectorND:", "setTranslateStart", "V", 0x4, NULL, NULL },
    { "setTranslateFromPointStartWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelKernelNDGeoPointND:", "setTranslateFromPointStart", "V", 0x2, NULL, NULL },
    { "getNormalTranslateDirection", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "moveVector", NULL, "V", 0x4, NULL, NULL },
    { "setStartPointLocationWithOriginWithDouble:withDouble:", "setStartPointLocationWithOrigin", "V", 0x1, NULL, NULL },
    { "calcRWcoords", NULL, "V", 0x4, NULL, NULL },
    { "moveDependentWithBoolean:", "moveDependent", "V", 0x4, NULL, NULL },
    { "handleMovedElementMultiple", NULL, "V", 0x4, NULL, NULL },
    { "handleMovedElementFreeWithGeogebraCommonEuclidianEventPointerEventTypeEnum:", "handleMovedElementFree", "V", 0x14, NULL, NULL },
    { "handleMovedElementFreePlane", NULL, "Z", 0x4, NULL, NULL },
    { "handleMovedElementDependent", NULL, "V", 0x14, NULL, NULL },
    { "movePointWithOffsetWithBoolean:", "movePointWithOffset", "V", 0x4, NULL, NULL },
    { "addSelectedPolygon3DWithGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedPolygon3D", "I", 0x14, NULL, NULL },
    { "getSelectedPolygons3D", NULL, "[Lgeogebra.common.kernel.geos.GeoPolygon;", 0x14, NULL, NULL },
    { "selPolygons3D", NULL, "I", 0x14, NULL, NULL },
    { "orthogonalWithGeogebraCommonEuclidianHits:", "orthogonal", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "rotateAroundLineWithGeogebraCommonEuclidianHits:", "rotateAroundLine", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x12, NULL, NULL },
    { "rotateAroundLineWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoNumberValue:withGeogebraCommonKernelKernelNDGeoLineND:", "rotateAroundLine", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "viewOrientationForClockwiseWithBoolean:withGeogebraCommonKernelKernelNDGeoLineND:", "viewOrientationForClockwise", "Z", 0x1, NULL, NULL },
    { "mirrorAtPlaneWithGeogebraCommonEuclidianHits:", "mirrorAtPlane", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x12, NULL, NULL },
    { "showPopupMenuChooseGeoWithJavaUtilArrayList:withGeogebraCommonEuclidianHits:", "showPopupMenuChooseGeo", "V", 0x4, NULL, NULL },
    { "updateOwnDrawablesNow", NULL, "V", 0x1, NULL, NULL },
    { "setModeWithInt:", "setMode", "V", 0x1, NULL, NULL },
    { "setDragCursorIfMoveView", NULL, "V", 0x4, NULL, NULL },
    { "processSelectionRectangleWithBoolean:withBoolean:", "processSelectionRectangle", "V", 0x14, NULL, NULL },
    { "addSelectedPlanesForAngleWithGeogebraCommonEuclidianHits:withInt:", "addSelectedPlanesForAngle", "I", 0x4, NULL, NULL },
    { "createAngle3D", NULL, "Lgeogebra.common.kernel.geos.GeoAngle;", 0x4, NULL, NULL },
    { "hasInput3D", NULL, "Z", 0x1, NULL, NULL },
    { "useInputDepthForHitting", NULL, "Z", 0x1, NULL, NULL },
    { "getMouseLocRW", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x4, NULL, NULL },
    { "rotateObjectWithGeogebraCommonMainApp:withNSString:withBoolean:withGeogebraCommonKernelGeosGeoPolygonArray:withGeogebraCommonKernelKernelNDGeoLineNDArray:withGeogebraCommonKernelGeosGeoElementArray:withGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D:", "rotateObject", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "clearSelected", NULL, "V", 0x1, NULL, NULL },
    { "polygon", NULL, "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "createVectorForTranslation", NULL, "Lgeogebra.common.kernel.kernelND.GeoVectorND;", 0x4, NULL, NULL },
    { "createVectorForTranslationWithNSString:", "createVectorForTranslation", "Lgeogebra.common.kernel.kernelND.GeoVectorND;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "xMinMax_", NULL, 0x2, "[D", NULL, NULL,  },
    { "yMinMax_", NULL, 0x2, "[D", NULL, NULL,  },
    { "zMinMax_", NULL, 0x0, "[D", NULL, NULL,  },
    { "currentPlane_", NULL, 0x4, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "view3D_", NULL, 0x4, "Lgeogebra.common.geogebra3D.euclidian3D.EuclidianView3D;", NULL, NULL,  },
    { "mouseLocOld_", NULL, 0x2, "Lgeogebra.common.awt.GPoint;", NULL, NULL,  },
    { "positionOld_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "pickPoint_", NULL, 0x4, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "freePointJustCreated_", NULL, 0x2, "Z", NULL, NULL,  },
    { "viewRotationOccured_", NULL, 0x4, "Z", NULL, NULL,  },
    { "ANGLE_TO_DEGREES_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_ANGLE_TO_DEGREES },
    { "ANGLE_MAX_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_ANGLE_MAX },
    { "animatedRotSpeed_", NULL, 0x2, "D", NULL, NULL,  },
    { "timeOld_", NULL, 0x2, "J", NULL, NULL,  },
    { "xOld_", NULL, 0x2, "I", NULL, NULL,  },
    { "goodHits_", NULL, 0x2, "Lgeogebra.common.geogebra3D.euclidian3D.Hits3D;", NULL, NULL,  },
    { "intersectionCurveList_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/geogebra3D/euclidian3D/EuclidianController3D$IntersectionCurve;>;",  },
    { "selectedCS2D_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/kernelND/GeoCoordSys2D;>;",  },
    { "selectedPolygons3D_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D;>;",  },
    { "selectedPlane_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D;>;",  },
    { "tmpCoords_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "singleIntersectionPoint_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "textDispatcher_EuclidianController3D_", "textDispatcher", 0x2, "Lgeogebra.common.geogebra3D.euclidian3D.TextDispatcher3D;", NULL, NULL,  },
    { "dialogOccurred_", NULL, 0x2, "Z", NULL, NULL,  },
    { "pyramidBasis_", NULL, 0x2, "[Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "polygonForPyramidBasis_", NULL, 0x2, "Z", NULL, NULL,  },
    { "pointMoveMode_", NULL, 0x2, "I", NULL, NULL,  },
    { "mouseMoved_", NULL, 0x4, "Z", NULL, NULL,  },
    { "mouseEvent_", NULL, 0x4, "Lgeogebra.common.euclidian.event.AbstractEvent;", NULL, NULL,  },
    { "resultedIntersectionCurve_", NULL, 0x2, "Lgeogebra.common.geogebra3D.euclidian3D.EuclidianController3D$IntersectionCurve;", NULL, NULL,  },
    { "startPointZ_", NULL, 0x4, "D", NULL, NULL,  },
    { "selectedCS1D_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/geogebra3D/kernel3D/geos/GeoCoordSys1D;>;",  },
    { "selectedQuadric_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3D;>;",  },
    { "selectedQuadricLimited_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DLimited;>;",  },
    { "selectedPolyhedron_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/geogebra3D/kernel3D/geos/GeoPolyhedron;>;",  },
    { "handledGeo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "startPoint3D_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "startPoint3DxOy_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "zRW_", NULL, 0x2, "D", NULL, NULL,  },
    { "translationVec3D_", NULL, 0x4, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "translateDirection_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.geogebra3D.euclidian3D.EuclidianController3D$IntersectionCurve;"};
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D = { 2, "EuclidianController3D", "geogebra.common.geogebra3D.euclidian3D", NULL, 0x401, 151, methods, 41, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_initWithGeogebraCommonMainApp_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonMainApp *app) {
  GeogebraCommonEuclidianEuclidianController_initWithGeogebraCommonMainApp_(self, app);
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_currentPlane_(self, nil);
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_mouseLocOld_(self, new_GeogebraCommonAwtGPoint_init());
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_positionOld_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
  self->freePointJustCreated_ = NO;
  self->viewRotationOccured_ = NO;
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_intersectionCurveList_(self, new_JavaUtilArrayList_init());
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_selectedCS2D_(self, new_JavaUtilArrayList_init());
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_selectedPolygons3D_(self, new_JavaUtilArrayList_init());
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_selectedPlane_(self, new_JavaUtilArrayList_init());
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_tmpCoords_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
  self->dialogOccurred_ = NO;
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_pyramidBasis_(self, nil);
  self->polygonForPyramidBasis_ = NO;
  self->pointMoveMode_ = GeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_XY;
  self->mouseMoved_ = NO;
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_mouseEvent_(self, nil);
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_selectedCS1D_(self, new_JavaUtilArrayList_init());
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_selectedQuadric_(self, new_JavaUtilArrayList_init());
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_selectedQuadricLimited_(self, new_JavaUtilArrayList_init());
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_selectedPolyhedron_(self, new_JavaUtilArrayList_init());
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_startPoint3D_(self, new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(0, 0, 0, 1));
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_startPoint3DxOy_(self, new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(0, 0, 0, 1));
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_translationVec3D_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_xMinMax_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_yMinMax_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_zMinMax_(self, [IOSDoubleArray newArrayWithLength:2]);
}

IOSDoubleArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMinMaxWithDouble_withDouble_withDouble_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, jdouble min, jdouble val, jdouble max) {
  if (val < min) min = val;
  else if (val > max) max = val;
  return [IOSDoubleArray arrayWithDoubles:(jdouble[]){ min, max } count:2];
}

GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getNewPointFreeWithGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, id<GeogebraCommonKernelKernelNDGeoPointND> point) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point3D = (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) Point3DWithNSString:nil withDouble:0 withDouble:0 withDouble:0 withBoolean:NO], [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point3D)) setCoordsWithGeogebraCommonKernelKernelNDGeoPointND:point];
  [point3D updateCoords];
  [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(self->view3D_)) setCursor3DTypeWithInt:GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_ALREADY];
  [self->view3D_ updateMatrixForCursor3D];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *cursor = [self->view3D_ getCursor3D];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(cursor)) setRegionWithGeogebraCommonKernelRegion:nil];
  [cursor setPathWithGeogebraCommonKernelPath:nil];
  [cursor setMoveModeWithInt:[point3D getMoveMode]];
  if (GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_isModeForCreatingPointWithInt_(self->mode_)) {
    self->freePointJustCreated_ = YES;
  }
  return point3D;
}

jboolean GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_spherePointRadiusWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) return NO;
  [self addSelectedPointWithGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO];
  if ([self selPoints] == 1) {
    [((GeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showNumberInputDialogSpherePointRadiusWithNSString:[((GeogebraCommonMainApp *) nil_chk(self->app_)) getMenuWithNSString:[((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getModeTextWithInt:self->mode_]] withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk([self getSelectedPointsND]), 0)];
    return YES;
  }
  return NO;
}

jboolean GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_coneTwoPointsRadiusWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) return NO;
  [self addSelectedPointWithGeogebraCommonEuclidianHits:hits withInt:2 withBoolean:NO];
  if ([self selPoints] == 2) {
    IOSObjectArray *points = [self getSelectedPointsND];
    [((GeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showNumberInputDialogConeTwoPointsRadiusWithNSString:[((GeogebraCommonMainApp *) nil_chk(self->app_)) getMenuWithNSString:[((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getModeTextWithInt:self->mode_]] withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1)];
    return YES;
  }
  return NO;
}

jboolean GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_cylinderTwoPointsRadiusWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) return NO;
  [self addSelectedPointWithGeogebraCommonEuclidianHits:hits withInt:2 withBoolean:NO];
  if ([self selPoints] == 2) {
    IOSObjectArray *points = [self getSelectedPointsND];
    [((GeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showNumberInputDialogCylinderTwoPointsRadiusWithNSString:[((GeogebraCommonMainApp *) nil_chk(self->app_)) getMenuWithNSString:[((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getModeTextWithInt:self->mode_]] withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1)];
    return YES;
  }
  return NO;
}

IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_archimedeanSolidWithGeogebraCommonEuclidianHits_withGeogebraCommonKernelCommandsCommandsEnum_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits, GeogebraCommonKernelCommandsCommandsEnum *name) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) return nil;
  if ([self addSelectedPointWithGeogebraCommonEuclidianHits:hits withInt:2 withBoolean:NO] == 0 && [self selPoints] == 0 && [self selDirections] == 0) {
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedCS2DWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if ([self selPoints] == 2) {
    IOSObjectArray *points = [self getSelectedPointsND];
    id<GeogebraCommonKernelKernelNDGeoDirectionND> direction;
    if (GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selCS2D(self) == 1) {
      direction = IOSObjectArray_Get(nil_chk(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedCS2D(self)), 0);
      GeogebraCommonKernelMatrixCoords *v = [((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(direction)) getDirectionInD3];
      if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) dotproductWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(self->view3D_)) getViewDirection]] > 0) {
        GeogebraCommonKernelArithmeticMyDouble *a = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_(self->kernel_) autorelease];
        [a setWithDouble:-1];
        GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *orientation = (GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) check_class_cast([([new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoDirectionND_([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction], direction) autorelease]) getVector], [GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D class]);
        GeogebraCommonKernelArithmeticExpressionNode *en = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, a, GeogebraCommonPluginOperationEnum_get_MULTIPLY(), orientation) autorelease];
        direction = [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoDependentVector3D *) [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoDependentVector3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_([self->kernel_ getConstruction], en) autorelease]) getVector3D];
      }
      return [IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(nil_chk([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) ArchimedeanSolidWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1) withGeogebraCommonKernelKernelNDGeoDirectionND:direction withGeogebraCommonKernelCommandsCommandsEnum:name]), 0) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    }
    return [IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(nil_chk([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) ArchimedeanSolidWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1) withGeogebraCommonKernelCommandsCommandsEnum:name]), 0) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  }
  return nil;
}

IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_polyhedronNetWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) return nil;
  [self addSelectedGeoWithGeogebraCommonEuclidianHits:[hits getPolyhedronsIncludingMetaHits] withInt:1 withBoolean:NO];
  if ([self selGeos] == 1) {
    GeogebraCommonKernelGeosGeoElement *polyhedron = IOSObjectArray_Get(nil_chk([self getSelectedGeos]), 0);
    GeogebraCommonKernelGeosGeoNumeric *slider = GeogebraCommonKernelGeosGeoNumeric_setSliderFromDefaultWithGeogebraCommonKernelGeosGeoNumeric_withBoolean_([new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction]) autorelease], NO);
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(slider)) setIntervalMinWithDouble:0];
    [slider setIntervalMaxWithDouble:1];
    [slider setAnimationStepWithDouble:0.01];
    [slider setLabelWithNSString:nil];
    [slider setValueWithDouble:1];
    [slider update];
    return [IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(nil_chk([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([self->kernel_ getManager3D])) PolyhedronNetWithNSStringArray:nil withGeogebraCommonKernelGeosGeoElement:polyhedron withGeogebraCommonKernelArithmeticNumberValue:slider withGeogebraCommonKernelGeosGeoPolygon:nil withGeogebraCommonKernelKernelNDGeoSegmentNDArray:nil]), 0) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  }
  return nil;
}

IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_orthogonalPlaneWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) return nil;
  jboolean hitPoint = ([self addSelectedPointWithGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO] != 0);
  if (!hitPoint) {
    if ([self selLines] == 0) {
      [self addSelectedVectorWithGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO];
    }
    if ([self selVectors] == 0) {
      [self addSelectedLineWithGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO];
    }
  }
  if ([self selPoints] == 1) {
    if ([self selVectors] == 1) {
      IOSObjectArray *points = [self getSelectedPointsND];
      IOSObjectArray *vectors = [self getSelectedVectorsND];
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      IOSObjectArray_Set(ret, 0, (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) OrthogonalPlane3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoVectorND:IOSObjectArray_Get(nil_chk(vectors), 0)], [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]));
      return ret;
    }
    else if ([self selLines] == 1) {
      IOSObjectArray *points = [self getSelectedPointsND];
      IOSObjectArray *lines = [self getSelectedLinesND];
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      IOSObjectArray_Set(ret, 0, (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) OrthogonalPlane3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(lines), 0)], [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]));
      return ret;
    }
  }
  return nil;
}

IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_circleAxisPointWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) return nil;
  if ([self addSelectedPointWithGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO] == 0) {
    [self addSelectedLineWithGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO];
  }
  if ([self selPoints] == 1 && [self selLines] == 1) {
    return [IOSObjectArray arrayWithObjects:(id[]){ [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) Circle3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk([self getSelectedLinesND]), 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk([self getSelectedPointsND]), 0)] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  }
  return nil;
}

jboolean GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_circlePointRadiusDirectionWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) return NO;
  if ([self addSelectedPointWithGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO] == 0) [self addSelectedDirectionWithGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO];
  if ([self selPoints] == 1 && [self selDirections] == 1) {
    [((GeogebraCommonMainDialogManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getDialogManager])) showNumberInputDialogCirclePointDirectionRadiusWithNSString:[self->app_ getMenuWithNSString:[((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getModeTextWithInt:self->mode_]] withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk([self getSelectedPointsND]), 0) withGeogebraCommonKernelKernelNDGeoDirectionND:IOSObjectArray_Get(nil_chk([self getSelectedDirections]), 0)];
    return YES;
  }
  return NO;
}

jboolean GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_volumeWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) return NO;
  [self addSelectedGeoWithGeogebraCommonEuclidianHits:[hits getFiniteVolumeIncludingMetaHits] withInt:1 withBoolean:NO];
  if ([self selGeos] == 1) {
    GeogebraCommonKernelGeosGeoElement *hasVolume = IOSObjectArray_Get(nil_chk([self getSelectedGeos]), 0);
    [((GeogebraCommonGeogebra3DEuclidian3DTextDispatcher3D *) nil_chk([self getTextDispatcher])) createVolumeTextWithGeogebraCommonKernelGeosGeoElement:hasVolume withGeogebraCommonAwtGPoint:self->mouseLoc_];
    return YES;
  }
  return NO;
}

IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_planeContainingWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits0) {
  GeogebraCommonEuclidianHits *hits = [((GeogebraCommonEuclidianHits *) nil_chk(hits0)) keepFirstsWithGeogebraCommonKernelGeosTestEnumArray:[IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelGeosTestEnum_get_GEOPOINTND(), GeogebraCommonKernelGeosTestEnum_get_GEOLINEND(), GeogebraCommonKernelGeosTestEnum_get_GEOCOORDSYS2DNOTPLANE() } count:3 type:GeogebraCommonKernelGeosTestEnum_class_()]];
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) return nil;
  if ([self selPoints] == 0 && [self selLines] == 0) {
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedCS2DWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if (GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selCS2D(self) == 1) {
    IOSObjectArray *cs = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedCS2D(self);
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) Plane3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoCoordSys2D:IOSObjectArray_Get(nil_chk(cs), 0)], [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  [self addSelectedPointWithGeogebraCommonEuclidianHits:hits withInt:3 withBoolean:NO];
  if ([self selPoints] == 3) {
    IOSObjectArray *points = [self getSelectedPointsND];
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) Plane3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 2)] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  else if ([self selPoints] == 1) {
    [self addSelectedLineWithGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO];
    if ([self selLines] == 1) {
      IOSObjectArray *points = [self getSelectedPointsND];
      IOSObjectArray *lines = [self getSelectedLinesND];
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) Plane3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(lines), 0)], [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
  }
  else if ([self selPoints] == 0) {
    [self addSelectedLineWithGeogebraCommonEuclidianHits:hits withInt:2 withBoolean:NO];
    if ([self selLines] == 2) {
      IOSObjectArray *lines = [self getSelectedLinesND];
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) Plane3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(lines), 0) withGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(lines, 1)] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
  }
  return nil;
}

jboolean GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_viewInFrontOfWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) return NO;
  [self addSelectedGeoWithGeogebraCommonEuclidianHits:[hits getTopHits] withInt:1 withBoolean:NO];
  if ([self selGeos] == 1) {
    GeogebraCommonKernelGeosGeoElement *geo = IOSObjectArray_Get(nil_chk([self getSelectedGeos]), 0);
    GeogebraCommonKernelMatrixCoords *vn = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getMainDirection];
    if (vn != nil) {
      if ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(self->view3D_)) hasMouse]) [self->view3D_ setRotAnimationWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self->view3D_ getCursor3D])) getDrawingMatrix])) getVz]];
      else {
        [self->view3D_ setClosestRotAnimationWithGeogebraCommonKernelMatrixCoords:vn];
      }
    }
  }
  return NO;
}

IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_parallelPlaneWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) return nil;
  jboolean hitPoint = ([self addSelectedPointWithGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO] != 0);
  if (!hitPoint) {
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedCS2DWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if ([self selPoints] == 1) {
    if (GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selCS2D(self) == 1) {
      IOSObjectArray *points = [self getSelectedPointsND];
      IOSObjectArray *cs = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedCS2D(self);
      return [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) Plane3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoCoordSys2D:IOSObjectArray_Get(nil_chk(cs), 0)], [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    }
  }
  return nil;
}

IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_extrusionOrConifyWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits) {
  if (self->dialogOccurred_) {
    self->dialogOccurred_ = NO;
    return nil;
  }
  if (![((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    jint basisAdded = [self selPolygons] + [self selConics];
    if (basisAdded == 0) {
      basisAdded += [self addSelectedPolygonWithGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO];
      if (basisAdded == 0) {
        basisAdded += [self addSelectedConicWithGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO];
        if (basisAdded == 0) {
          [self addSelectedNumberValueWithGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO];
        }
      }
    }
  }
  if ([self selNumberValues] == 1) {
    if ([self selPolygons] == 1) {
      IOSObjectArray *basis = [self getSelectedPolygons];
      IOSObjectArray *height = [self getSelectedNumberValues];
      if (self->mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_EXTRUSION) {
        return [IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(nil_chk([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) PrismWithNSStringArray:nil withGeogebraCommonKernelGeosGeoPolygon:IOSObjectArray_Get(nil_chk(basis), 0) withGeogebraCommonKernelArithmeticNumberValue:IOSObjectArray_Get(nil_chk(height), 0)]), 0) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      }
      return [IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(nil_chk([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) PyramidWithNSStringArray:nil withGeogebraCommonKernelGeosGeoPolygon:IOSObjectArray_Get(nil_chk(basis), 0) withGeogebraCommonKernelArithmeticNumberValue:IOSObjectArray_Get(nil_chk(height), 0)]), 0) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    }
    else if ([self selConics] == 1) {
      IOSObjectArray *basis = [self getSelectedConicsND];
      IOSObjectArray *height = [self getSelectedNumberValues];
      if (self->mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_EXTRUSION) {
        return [IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(nil_chk([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) CylinderLimitedWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(nil_chk(basis), 0) withGeogebraCommonKernelArithmeticNumberValue:IOSObjectArray_Get(nil_chk(height), 0)]), 0) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      }
      return [IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(nil_chk([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) ConeLimitedWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(nil_chk(basis), 0) withGeogebraCommonKernelArithmeticNumberValue:IOSObjectArray_Get(nil_chk(height), 0)]), 0) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    }
  }
  return nil;
}

IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_pyramidOrPrismWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits) {
  self->polygonForPyramidBasis_ = NO;
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) return nil;
  if (self->draggingOccuredBeforeRelease_ && (self->pyramidBasis_ == nil) && [self selPoints] == 0 && [self selPolygons] == 0) {
    return nil;
  }
  if (self->pyramidBasis_ == nil) {
    if ([self selPolygons] == 0) {
      if ([self selPoints] > 2) {
        jboolean finished = !self->selectionPreview_ && [hits containsWithId:[((JavaUtilArrayList *) nil_chk(self->selectedPoints_)) getWithInt:0]];
        if (finished) {
          [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D *) check_class_cast([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(self->view3D_)) getPreviewDrawable], [GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D class])))) previewBasisIsFinished];
          GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_pyramidBasis_(self, [self getSelectedPointsND]);
          GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_cancelSwitchPointMoveModeIfNeeded(self);
          return nil;
        }
      }
      if ([self addSelectedPointWithGeogebraCommonEuclidianHits:hits withInt:GeogebraCommonKernelGeosGeoPolygon_POLYGON_MAX_POINTS withBoolean:NO] != 0 || (!self->selectionPreview_ && ![((JavaUtilArrayList *) nil_chk(self->selectedPoints_)) isEmpty] && [hits containsWithId:[self->selectedPoints_ getWithInt:0]])) {
        return nil;
      }
    }
    jboolean selectionOccured = NO;
    if ([self selPoints] < 2) {
      if ([self addSelectedPolygonWithGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO] == 1) {
        self->polygonForPyramidBasis_ = YES;
        selectionOccured = YES;
      }
    }
    if (!selectionOccured) {
      [self addSelectedPointWithGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO];
    }
    if ([self selPoints] == 1 && [self selPolygons] == 1) {
      IOSObjectArray *basis = [self getSelectedPolygons];
      IOSObjectArray *points = [self getSelectedPointsND];
      [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(self->view3D_)) disposePreview];
      switch (self->mode_) {
        case GeogebraCommonEuclidianEuclidianConstants_MODE_PYRAMID:
        return [IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(nil_chk([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) PyramidWithNSStringArray:nil withGeogebraCommonKernelGeosGeoPolygon:IOSObjectArray_Get(nil_chk(basis), 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0)]), 0) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        case GeogebraCommonEuclidianEuclidianConstants_MODE_PRISM:
        return [IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(nil_chk([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) PrismWithNSStringArray:nil withGeogebraCommonKernelGeosGeoPolygon:IOSObjectArray_Get(nil_chk(basis), 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0)]), 0) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      }
    }
  }
  else {
    [self addSelectedPointWithGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO];
    if ([self selPoints] == 1) {
      IOSObjectArray *points = [IOSObjectArray arrayWithLength:self->pyramidBasis_->size_ + 1 type:GeogebraCommonKernelKernelNDGeoPointND_class_()];
      for (jint i = 0; i < self->pyramidBasis_->size_; i++) IOSObjectArray_Set(points, i, IOSObjectArray_Get(self->pyramidBasis_, i));
      IOSObjectArray_Set(points, self->pyramidBasis_->size_, IOSObjectArray_Get(nil_chk([self getSelectedPointsND]), 0));
      [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(self->view3D_)) disposePreview];
      switch (self->mode_) {
        case GeogebraCommonEuclidianEuclidianConstants_MODE_PYRAMID:
        GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_pyramidBasis_(self, nil);
        return [IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(nil_chk([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) PyramidWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoPointNDArray:points]), 0) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        case GeogebraCommonEuclidianEuclidianConstants_MODE_PRISM:
        GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_pyramidBasis_(self, nil);
        return [IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(nil_chk([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) PrismWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoPointNDArray:points]), 0) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      }
    }
    return nil;
  }
  return nil;
}

void GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_switchPointMoveMode(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self) {
  if (self->pointMoveMode_ == GeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_XY) {
    self->pointMoveMode_ = GeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_Z;
  }
  else {
    self->pointMoveMode_ = GeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_XY;
  }
}

void GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_cancelSwitchPointMoveModeIfNeeded(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self) {
  if (!self->draggingOccuredBeforeRelease_ && self->movedGeoPoint_ != nil && [self->movedGeoPoint_ isIndependent]) {
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_switchPointMoveMode(self);
  }
}

void GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_initPointMoveMode(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self) {
  if (self->mode_ == GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE) {
    self->pointMoveMode_ = GeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_XY;
  }
  else {
    self->pointMoveMode_ = GeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_Z;
  }
}

void GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_checkCoordCartesian3DWithGeogebraCommonKernelKernelNDGeoPointND_(id<GeogebraCommonKernelKernelNDGeoPointND> point) {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_initialize();
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getMode] != GeogebraCommonKernelKernel_COORD_CARTESIAN_3D) {
    [point setCartesian3D];
    [point updateRepaint];
  }
}

IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_intersectionCurveWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits) {
  if (hits == nil) {
    GeogebraCommonEuclidianEuclidianController_set_resultedGeo_(self, nil);
    return nil;
  }
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    GeogebraCommonEuclidianEuclidianController_set_resultedGeo_(self, nil);
    return nil;
  }
  if (self->mouseMoved_ && [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(self->view3D_)) hasMouse2D]) {
    for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(self->intersectionCurveList_)) size]; ++i) {
      ((GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve *) nil_chk([self->intersectionCurveList_ getWithInt:i]))->hitted_ = NO;
    }
    for (jint i = 0; i < [hits size]; ++i) {
      for (jint j = i + 1; j < [hits size]; ++j) {
        [self createIntersectionCurveWithGeogebraCommonKernelGeosGeoElement:[hits getWithInt:i] withGeogebraCommonKernelGeosGeoElement:[hits getWithInt:j]];
      }
    }
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk([self->view3D_ getRenderer])) pickIntersectionCurves];
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_decideIntersectionWithGeogebraCommonEuclidianHits_(self, hits);
  }
  if (self->goodHits_ != nil) {
    [self addSelectedPolygonWithGeogebraCommonEuclidianHits:self->goodHits_ withInt:1 withBoolean:NO];
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedPlaneWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, self->goodHits_, 2, YES);
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedQuadricWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, self->goodHits_, 2, YES);
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedPolyhedronWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, self->goodHits_, 1, NO);
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedQuadricLimitedWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, self->goodHits_, 1, NO);
  }
  else {
    GeogebraCommonEuclidianHits *firstSurface = [hits getFirstSurfaceBeforeWithJavaUtilArrayList:self->selectedGeos_];
    [self addSelectedPolygonWithGeogebraCommonEuclidianHits:firstSurface withInt:1 withBoolean:NO];
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedPlaneWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, firstSurface, 2, NO);
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedQuadricWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, firstSurface, 2, NO);
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedPolyhedronWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, firstSurface, 1, NO);
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedQuadricLimitedWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, firstSurface, 1, NO);
  }
  if (GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selPlanes(self) == 1) {
    if (GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selQuadric(self) >= 1) {
      id<GeogebraCommonKernelKernelNDGeoPlaneND> plane = IOSObjectArray_Get(nil_chk(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPlanes(self)), 0);
      GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *quad = IOSObjectArray_Get(nil_chk(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedQuadric(self)), 0);
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) IntersectWithNSString:nil withGeogebraCommonKernelKernelNDGeoPlaneND:plane withGeogebraCommonKernelKernelNDGeoQuadricND:quad] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ret, 0))) isDefined]) {
        return ret;
      }
      return nil;
    }
    else if (GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selPolyhedron(self) == 1) {
      IOSObjectArray *ret = [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) IntersectRegionWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:NSString_class_()] withGeogebraCommonKernelKernelNDGeoPlaneND:IOSObjectArray_Get(nil_chk(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPlanes(self)), 0) withGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(nil_chk(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPolyhedron(self)), 0) withIntArray:nil];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(ret), 0))) isDefined]) {
        return ret;
      }
      return nil;
    }
    else if (GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selQuadricLimited(self) == 1) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      IOSObjectArray_Set(ret, 0, [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) IntersectQuadricLimitedWithNSString:nil withGeogebraCommonKernelKernelNDGeoPlaneND:IOSObjectArray_Get(nil_chk(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPlanes(self)), 0) withGeogebraCommonKernelKernelNDGeoQuadricND:IOSObjectArray_Get(nil_chk(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedQuadricLimited(self)), 0)]);
      if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ret, 0))) isDefined]) {
        return nil;
      }
      [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([self->kernel_ getManager3D])) CornerWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonGeogebra3DKernel3DGeosGeoConicSection *) check_class_cast(IOSObjectArray_Get(ret, 0), [GeogebraCommonGeogebra3DKernel3DGeosGeoConicSection class])];
      return ret;
    }
    else if ([self selPolygons] == 1) {
      id<GeogebraCommonKernelKernelNDGeoPlaneND> plane = IOSObjectArray_Get(nil_chk(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPlanes(self)), 0);
      GeogebraCommonKernelGeosGeoPolygon *poly = IOSObjectArray_Get(nil_chk([self getSelectedPolygons]), 0);
      IOSObjectArray *ret = [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) IntersectPathWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:NSString_class_()] withGeogebraCommonKernelKernelNDGeoPlaneND:plane withGeogebraCommonKernelGeosGeoElement:poly];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(ret), 0))) isDefined]) {
        [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) IntersectionPointWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:NSString_class_()] withGeogebraCommonKernelKernelNDGeoPlaneND:plane withGeogebraCommonKernelGeosGeoElement:poly];
        return ret;
      }
      return nil;
    }
  }
  else if (GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selQuadric(self) >= 2) {
    IOSObjectArray *quads = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedQuadric(self);
    IOSObjectArray *ret = [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) IntersectAsCircleWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoQuadricND:IOSObjectArray_Get(nil_chk(quads), 0) withGeogebraCommonKernelKernelNDGeoQuadricND:IOSObjectArray_Get(quads, 1)];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(ret), 0))) isDefined]) {
      return ret;
    }
    return nil;
  }
  else if (GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selPlanes(self) >= 2) {
    IOSObjectArray *planes = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPlanes(self);
    return [IOSObjectArray arrayWithObjects:(id[]){ [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) IntersectPlanesWithNSString:nil withGeogebraCommonKernelKernelNDGeoPlaneND:IOSObjectArray_Get(nil_chk(planes), 0) withGeogebraCommonKernelKernelNDGeoPlaneND:IOSObjectArray_Get(planes, 1)] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  }
  return nil;
}

jboolean GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_createIntersectionCurvePlanePolygonWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonKernelGeosGeoElement *A, GeogebraCommonKernelGeosGeoPolygon *B) {
  if ([((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(B)) getMetasLength] == 1) {
    jboolean oldSilentMode = [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) isSilentMode];
    [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) setSilentModeWithBoolean:YES];
    GeogebraCommonKernelGeosGeoElement *polyhedron = IOSObjectArray_Get(nil_chk([B getMetas]), 0);
    IOSObjectArray *ret = [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) IntersectRegionWithGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(A, @protocol(GeogebraCommonKernelKernelNDGeoPlaneND)) withGeogebraCommonKernelGeosGeoElement:polyhedron];
    jboolean goAhead = YES;
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawIntersectionCurve3D *drawPolygons = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawIntersectionCurve3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoElement_(self->view3D_, IOSObjectArray_Get(nil_chk(ret), 0)) autorelease];
    for (jint i = 0; i < ret->size_ && goAhead; i++) {
      GeogebraCommonKernelGeosGeoElement *geo = IOSObjectArray_Get(ret, i);
      if ([geo isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D class]]) {
        GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D *d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoPolygon_(self->view3D_, (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) check_class_cast(geo, [GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D class])) autorelease];
        [drawPolygons addWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:d];
        GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_processIntersectionCurveWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(self, A, polyhedron, geo, drawPolygons);
      }
      else {
        goAhead = NO;
      }
    }
    [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) setSilentModeWithBoolean:oldSilentMode];
    return YES;
  }
  jboolean oldSilentMode = [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) isSilentMode];
  [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) setSilentModeWithBoolean:YES];
  IOSObjectArray *ret = [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) IntersectPathWithGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(A, @protocol(GeogebraCommonKernelKernelNDGeoPlaneND)) withGeogebraCommonKernelGeosGeoPolygon:B];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawIntersectionCurve3D *drawSegments = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawIntersectionCurve3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoElement_(self->view3D_, IOSObjectArray_Get(nil_chk(ret), 0)) autorelease];
  {
    IOSObjectArray *a__ = ret;
    GeogebraCommonKernelGeosGeoElement * const *b__ = a__->buffer_;
    GeogebraCommonKernelGeosGeoElement * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      GeogebraCommonKernelGeosGeoElement *geo = *b__++;
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawSegment3D *d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawSegment3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelKernelNDGeoSegmentND_(self->view3D_, (id<GeogebraCommonKernelKernelNDGeoSegmentND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoSegmentND))) autorelease];
      [drawSegments addWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:d];
      GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_processIntersectionCurveWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(self, A, B, geo, drawSegments);
    }
  }
  [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) setSilentModeWithBoolean:oldSilentMode];
  return YES;
}

jboolean GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_createIntersectionCurvePlaneQuadricWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonKernelGeosGeoElement *A, GeogebraCommonKernelGeosGeoElement *B) {
  jboolean oldSilentMode = [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) isSilentMode];
  [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) setSilentModeWithBoolean:YES];
  GeogebraCommonKernelGeosGeoElement *ret;
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *d;
  GeogebraCommonKernelKernelNDGeoQuadricND *quad;
  if ([B isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart class]]) {
    quad = (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) check_class_cast(IOSObjectArray_Get(nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) check_class_cast(B, [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart class])))) getMetas]), 0), [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class]);
    if (quad != nil) {
      ret = [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) IntersectQuadricLimitedWithGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(A, @protocol(GeogebraCommonKernelKernelNDGeoPlaneND)) withGeogebraCommonKernelKernelNDGeoQuadricND:quad];
      d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawConicSection3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoConicSection_(self->view3D_, (GeogebraCommonGeogebra3DKernel3DGeosGeoConicSection *) check_class_cast(ret, [GeogebraCommonGeogebra3DKernel3DGeosGeoConicSection class])) autorelease];
    }
    else {
      quad = (GeogebraCommonKernelKernelNDGeoQuadricND *) check_class_cast(B, [GeogebraCommonKernelKernelNDGeoQuadricND class]);
      ret = [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) IntersectWithGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(A, @protocol(GeogebraCommonKernelKernelNDGeoPlaneND)) withGeogebraCommonKernelKernelNDGeoQuadricND:quad];
      d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelKernelNDGeoConicND_(self->view3D_, (GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(ret, [GeogebraCommonKernelKernelNDGeoConicND class])) autorelease];
    }
  }
  else {
    quad = (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) check_class_cast(B, [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]);
    ret = [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) IntersectWithGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(A, @protocol(GeogebraCommonKernelKernelNDGeoPlaneND)) withGeogebraCommonKernelKernelNDGeoQuadricND:quad];
    d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelKernelNDGeoConicND_(self->view3D_, (GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(ret, [GeogebraCommonKernelKernelNDGeoConicND class])) autorelease];
  }
  [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) setSilentModeWithBoolean:oldSilentMode];
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_processIntersectionCurveWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(self, A, quad, ret, d);
  return YES;
}

jboolean GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_createIntersectionCurvePlaneQuadricLimitedWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonKernelGeosGeoElement *A, GeogebraCommonKernelGeosGeoElement *B) {
  jboolean oldSilentMode = [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) isSilentMode];
  [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) setSilentModeWithBoolean:YES];
  GeogebraCommonKernelGeosGeoElement *ret = [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) IntersectQuadricLimitedWithGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(A, @protocol(GeogebraCommonKernelKernelNDGeoPlaneND)) withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) check_class_cast(B, [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class])];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawConicSection3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoConicSection_(self->view3D_, (GeogebraCommonGeogebra3DKernel3DGeosGeoConicSection *) check_class_cast(ret, [GeogebraCommonGeogebra3DKernel3DGeosGeoConicSection class])) autorelease];
  [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) setSilentModeWithBoolean:oldSilentMode];
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_processIntersectionCurveWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(self, A, B, ret, d);
  return YES;
}

void GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_processIntersectionCurveWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonKernelGeosGeoElement *A, GeogebraCommonKernelGeosGeoElement *B, GeogebraCommonKernelGeosGeoElement *intersection, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *d) {
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(intersection)) setLineThicknessWithInt:3];
  [intersection setIsPickableWithBoolean:NO];
  [intersection setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_get_colIntersectionCurve_()];
  [((JavaUtilArrayList *) nil_chk(self->intersectionCurveList_)) addWithId:[new_GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(self, A, B, intersection, YES, d) autorelease]];
}

GeogebraCommonKernelGeosGeoElement *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMetaIfJustOneWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelGeosGeoElement *geo) {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_initialize();
  if ([GeogebraCommonKernelGeosFromMeta_class_() isInstance:geo]) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getMetasLength] == 1) {
      return IOSObjectArray_Get(nil_chk([((id<GeogebraCommonKernelGeosFromMeta>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosFromMeta))) getMetas]), 0);
    }
  }
  return geo;
}

void GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_decideIntersectionWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits) {
  GeogebraCommonEuclidianEuclidianController_set_resultedGeo_(self, nil);
  jdouble zNear = JavaLangDouble_NEGATIVE_INFINITY;
  for (GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve * __strong intersectionCurve in nil_chk(self->intersectionCurveList_)) {
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *d = ((GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve *) nil_chk(intersectionCurve))->drawable_;
    if ([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(d)) getZPickNear] > zNear) {
      GeogebraCommonEuclidianEuclidianController_set_resultedGeo_(self, [d getGeoElement]);
      GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_resultedIntersectionCurve_(self, intersectionCurve);
      zNear = [d getZPickNear];
    }
  }
  if (self->resultedGeo_ == nil) {
    self->hideIntersection_ = YES;
    [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(self->view3D_)) setPreviewWithGeogebraCommonEuclidianPreviewable:nil];
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_goodHits_(self, nil);
    return;
  }
  jint i = 0;
  jboolean checking = YES;
  while (checking && i < [((GeogebraCommonEuclidianHits *) nil_chk(hits)) size]) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonEuclidianHits *) nil_chk(hits)) getWithInt:i];
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *d = (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) check_class_cast([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(self->view3D_)) getDrawableNDWithGeogebraCommonKernelGeosGeoElement:geo], [GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D class]);
    if (d != nil) {
      if ([d getZPickNear] < zNear) {
        checking = NO;
      }
      else if ([d getZPickNear] > zNear + 1 && (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isRegion] || [geo getAlphaValue] > GeogebraCommonEuclidianEuclidianController_MAX_TRANSPARENT_ALPHA_VALUE)) {
        checking = NO;
        GeogebraCommonEuclidianEuclidianController_set_resultedGeo_(self, nil);
      }
    }
    i++;
  }
  if (self->resultedGeo_ == nil) {
    self->hideIntersection_ = YES;
    [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(self->view3D_)) setPreviewWithGeogebraCommonEuclidianPreviewable:nil];
    return;
  }
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) size] == 0) {
    self->hideIntersection_ = YES;
    return;
  }
  if (self->goodHits_ == nil) GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_goodHits_(self, new_GeogebraCommonGeogebra3DEuclidian3DHits3D_init());
  else [self->goodHits_ clear];
  if ([hits size] < 2 || (!(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMetaIfJustOneWithGeogebraCommonKernelGeosGeoElement_([hits getWithInt:0]) == ((GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve *) nil_chk(self->resultedIntersectionCurve_))->geo1_ && GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMetaIfJustOneWithGeogebraCommonKernelGeosGeoElement_([hits getWithInt:1]) == self->resultedIntersectionCurve_->geo2_) && !(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMetaIfJustOneWithGeogebraCommonKernelGeosGeoElement_([hits getWithInt:0]) == self->resultedIntersectionCurve_->geo2_ && GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMetaIfJustOneWithGeogebraCommonKernelGeosGeoElement_([hits getWithInt:1]) == self->resultedIntersectionCurve_->geo1_))) {
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addToGoodHitsWithGeogebraCommonKernelGeosGeoElement_(self, [hits getWithInt:0]);
    self->hideIntersection_ = YES;
    return;
  }
  self->hideIntersection_ = NO;
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addToGoodHitsWithGeogebraCommonKernelGeosGeoElement_(self, [hits getWithInt:0]);
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addToGoodHitsWithGeogebraCommonKernelGeosGeoElement_(self, [hits getWithInt:1]);
  [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(self->view3D_)) setPreviewWithGeogebraCommonEuclidianPreviewable:(id<GeogebraCommonEuclidianPreviewable>) check_protocol_cast(((GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve *) nil_chk(self->resultedIntersectionCurve_))->drawable_, @protocol(GeogebraCommonEuclidianPreviewable))];
}

void GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addToGoodHitsWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonKernelGeosGeoElement *geo) {
  [((GeogebraCommonGeogebra3DEuclidian3DHits3D *) nil_chk(self->goodHits_)) addWithId:GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMetaIfJustOneWithGeogebraCommonKernelGeosGeoElement_(geo)];
}

jint GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedCS2DWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedCS2D_ withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOCOORDSYS2D()];
}

jint GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selCS2D(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedCS2D_)) size];
}

IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedCS2D(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self) {
  IOSObjectArray *planes = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedCS2D_)) size] type:GeogebraCommonKernelKernelNDGeoCoordSys2D_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [self->selectedCS2D_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSObjectArray_Set(planes, i, [it next]);
    i++;
  }
  [self clearSelectionWithJavaUtilArrayList:self->selectedCS2D_];
  return planes;
}

jint GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedPlaneWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedPlane_ withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOPLANEND()];
}

jint GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selPlanes(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedPlane_)) size];
}

IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPlanes(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self) {
  IOSObjectArray *planes = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedPlane_)) size] type:GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [self->selectedPlane_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSObjectArray_Set(planes, i, [it next]);
    i++;
  }
  [self clearSelectionWithJavaUtilArrayList:self->selectedPlane_];
  return planes;
}

jint GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selQuadric(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedQuadric_)) size];
}

jint GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedQuadricWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedQuadric_ withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOQUADRIC3D()];
}

IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedQuadric(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self) {
  IOSObjectArray *quads = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedQuadric_)) size] type:GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [self->selectedQuadric_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSObjectArray_Set(quads, i, [it next]);
    i++;
  }
  [self clearSelectionWithJavaUtilArrayList:self->selectedQuadric_];
  return quads;
}

jint GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selQuadricLimited(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedQuadricLimited_)) size];
}

jint GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedQuadricLimitedWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedQuadricLimited_ withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOQUADRIC3DLIMITED()];
}

IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedQuadricLimited(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self) {
  IOSObjectArray *quads = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedQuadricLimited_)) size] type:GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [self->selectedQuadricLimited_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSObjectArray_Set(quads, i, [it next]);
    i++;
  }
  [self clearSelectionWithJavaUtilArrayList:self->selectedQuadricLimited_];
  return quads;
}

jint GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selPolyhedron(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedPolyhedron_)) size];
}

jint GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedPolyhedronWithGeogebraCommonEuclidianHits_withInt_withBoolean_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedPolyhedron_ withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_GEOPOLYHEDRON()];
}

IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPolyhedron(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self) {
  IOSObjectArray *polyh = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedPolyhedron_)) size] type:GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [self->selectedPolyhedron_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSObjectArray_Set(polyh, i, [it next]);
    i++;
  }
  [self clearSelectionWithJavaUtilArrayList:self->selectedPolyhedron_];
  return polyh;
}

jboolean GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_isModeForMovingPointWithInt_(jint mode) {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_initialize();
  switch (mode) {
    case GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_ATTACH_DETACH:
    return YES;
    default:
    return GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_isModeForCreatingPointWithInt_(mode);
  }
}

jboolean GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_isModeForCreatingPointWithInt_(jint mode) {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_initialize();
  switch (mode) {
    case GeogebraCommonEuclidianEuclidianConstants_MODE_POINT:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_POINT_ON_OBJECT:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_JOIN:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_SEGMENT:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_RAY:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_VECTOR:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_POLYGON:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_POLYLINE:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_THREE_POINTS:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_ARC_THREE_POINTS:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_PLANE_THREE_POINTS:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_SPHERE_TWO_POINTS:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_SPHERE_POINT_RADIUS:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CONE_TWO_POINTS_RADIUS:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CYLINDER_TWO_POINTS_RADIUS:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_PYRAMID:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_PRISM:
    return YES;
    default:
    return NO;
  }
}

void GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_updateStartPointWithGeogebraCommonKernelMatrixCoords_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonKernelMatrixCoords *p) {
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->startPoint3D_)) setWithGeogebraCommonKernelMatrixCoords:p];
  [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(self->view3D_)) toSceneCoords3DWithGeogebraCommonKernelMatrixCoords:self->startPoint3D_];
  [self->startPoint3D_ projectPlaneThruVIfPossibleWithGeogebraCommonKernelMatrixCoordMatrix:GeogebraCommonKernelMatrixCoordMatrix4x4_get_IDENTITY_() withGeogebraCommonKernelMatrixCoords:[self->view3D_ getViewDirection] withGeogebraCommonKernelMatrixCoords:self->startPoint3DxOy_];
}

void GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setTranslateFromPointStartWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonKernelGeosGeoElement *geo, id<GeogebraCommonKernelKernelNDGeoPointND> point) {
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->startPoint3D_)) setWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(self->view3D_)) getCursor3D])) getInhomCoordsInD3]];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->translationVec3D_)) setSubWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getInhomCoordsInD3] withGeogebraCommonKernelMatrixCoords:self->startPoint3D_];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPlane]) {
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_translateDirection_(self, [geo getMainDirection]);
    if ([point isGeoElement3D]) {
      [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(point, [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])) setMoveModeWithInt:GeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_Z];
    }
  }
  else {
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_translateDirection_(self, nil);
    if ([point isGeoElement3D]) {
      [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(point, [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])) setMoveModeWithInt:GeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_TOOL_DEFAULT];
    }
  }
}

IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_rotateAroundLineWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jint count = 0;
  if ([self selGeos] == 0) {
    GeogebraCommonEuclidianHits *rotAbles = [hits getHitsWithGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_TRANSFORMABLE() withGeogebraCommonEuclidianHits:self->tempArrayList_];
    count = [self addSelectedGeoWithGeogebraCommonEuclidianHits:rotAbles withInt:1 withBoolean:NO];
  }
  if (count == 0) {
    count = [self addSelectedPolygonWithGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO];
  }
  if (count == 0) {
    [self addSelectedLineWithGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO];
  }
  if (([self selLines] == 1) && ([self selGeos] > 0)) {
    IOSObjectArray *selGeos = [self getSelectedGeos];
    [((GeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showNumberInputDialogRotateWithNSString:[((GeogebraCommonMainLocalization *) nil_chk(self->l10n_)) getMenuWithNSString:[((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getModeTextWithInt:self->mode_]] withGeogebraCommonKernelGeosGeoPolygonArray:[self getSelectedPolygons] withGeogebraCommonKernelKernelNDGeoLineNDArray:[self getSelectedLinesND] withGeogebraCommonKernelGeosGeoElementArray:selGeos withGeogebraCommonEuclidianEuclidianController:self];
    return nil;
  }
  return nil;
}

IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_mirrorAtPlaneWithGeogebraCommonEuclidianHits_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, GeogebraCommonEuclidianHits *hits) {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jint count = 0;
  if ([self selGeos] == 0) {
    GeogebraCommonEuclidianHits *mirAbles = [hits getHitsWithGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_TRANSFORMABLE() withGeogebraCommonEuclidianHits:self->tempArrayList_];
    count = [self addSelectedGeoWithGeogebraCommonEuclidianHits:mirAbles withInt:1 withBoolean:NO];
  }
  if (count == 0) {
    GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedCS2DWithGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if (GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selCS2D(self) == 1) {
    if ([self selGeos] > 0) {
      IOSObjectArray *geos = [self getSelectedGeos];
      id<GeogebraCommonKernelKernelNDGeoCoordSys2D> plane = IOSObjectArray_Get(nil_chk(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedCS2D(self)), 0);
      id<GeogebraCommonKernelKernelNDGeoCoordSys2D> mirror = plane;
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(plane, [GeogebraCommonKernelGeosGeoElement class])))) isGeoConic]) {
        plane = [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) Plane3DWithGeogebraCommonKernelKernelNDGeoCoordSys2D:mirror];
      }
      JavaUtilArrayList *ret = [new_JavaUtilArrayList_init() autorelease];
      [self checkZooming];
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(geos))->size_; i++) {
        if (IOSObjectArray_Get(geos, i) != mirror) {
          if ([GeogebraCommonKernelGeosTransformable_class_() isInstance:IOSObjectArray_Get(geos, i)]) {
            [ret addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) Mirror3DWithNSString:nil withGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(geos, i) withGeogebraCommonKernelKernelNDGeoCoordSys2D:plane])];
          }
          else if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, i))) isGeoPolygon]) {
            [ret addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) Mirror3DWithNSString:nil withGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(geos, i) withGeogebraCommonKernelKernelNDGeoCoordSys2D:plane])];
          }
        }
      }
      IOSObjectArray *retex = [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return [ret toArrayWithNSObjectArray:retex];
    }
  }
  return nil;
}

NSString *GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_rotateObjectWithGeogebraCommonMainApp_withNSString_withBoolean_withGeogebraCommonKernelGeosGeoPolygonArray_withGeogebraCommonKernelKernelNDGeoLineNDArray_withGeogebraCommonKernelGeosGeoElementArray_withGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_(GeogebraCommonMainApp *app, NSString *inputText, jboolean clockwise, IOSObjectArray *polys, IOSObjectArray *lines, IOSObjectArray *selGeos, GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *ec) {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_initialize();
  NSString *defaultRotateAngle = @"45\u00b0";
  NSString *angleText = inputText;
  GeogebraCommonKernelKernel *kernel = [((GeogebraCommonMainApp *) nil_chk(app)) getKernel];
  GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk(kernel)) getConstruction];
  jboolean oldVal = [((GeogebraCommonKernelConstruction *) nil_chk(cons)) isSuppressLabelsActive];
  [cons setSuppressLabelCreationWithBoolean:YES];
  if ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) nil_chk(ec)) viewOrientationForClockwiseWithBoolean:clockwise withGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(lines), 0)]) {
    inputText = JreStrcat("$$C", @"-(", inputText, ')');
  }
  IOSObjectArray *result = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernel getAlgebraProcessor])) processAlgebraCommandWithNSString:inputText withBoolean:NO];
  [cons setSuppressLabelCreationWithBoolean:oldVal];
  jboolean success = result != nil && [GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(result, 0)];
  if (success) {
    id<GeogebraCommonKernelGeosGeoNumberValue> num = (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(nil_chk(result), 0), @protocol(GeogebraCommonKernelGeosGeoNumberValue));
    if ([((NSString *) nil_chk(angleText)) hasSuffix:@"\u00b0"]) defaultRotateAngle = angleText;
    if (((IOSObjectArray *) nil_chk(polys))->size_ == 1) {
      IOSObjectArray *geos = [ec rotateAroundLineWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(polys, 0) withGeogebraCommonKernelGeosGeoNumberValue:num withGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(lines, 0)];
      if (geos != nil) {
        [app storeUndoInfo];
        [ec memorizeJustCreatedGeosWithGeogebraCommonKernelGeosGeoElementArray:geos];
      }
      return defaultRotateAngle;
    }
    JavaUtilArrayList *ret = [new_JavaUtilArrayList_init() autorelease];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(selGeos))->size_; i++) {
      if (IOSObjectArray_Get(selGeos, i) != IOSObjectArray_Get(lines, 0)) {
        if ([GeogebraCommonKernelGeosTransformable_class_() isInstance:IOSObjectArray_Get(selGeos, i)]) {
          [ret addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([ec rotateAroundLineWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(selGeos, i) withGeogebraCommonKernelGeosGeoNumberValue:num withGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(lines, 0)])];
        }
        else if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(selGeos, i))) isGeoPolygon]) {
          [ret addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([ec rotateAroundLineWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(selGeos, i) withGeogebraCommonKernelGeosGeoNumberValue:num withGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(lines, 0)])];
        }
      }
    }
    if (![ret isEmpty]) {
      [app storeUndoInfo];
      [ec memorizeJustCreatedGeosWithJavaUtilArrayList:ret];
    }
  }
  return defaultRotateAngle;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D)

@implementation GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *)outer$
                                          withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo1
                                          withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo2
                                          withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)result
                                                                     withBoolean:(jboolean)hitted
                           withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)drawable {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(self, outer$, geo1, geo2, result, hitted, drawable);
  return self;
}

- (void)dealloc {
  RELEASE_(geo1_);
  RELEASE_(geo2_);
  RELEASE_(result_);
  RELEASE_(drawable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:withBoolean:withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:", "IntersectionCurve", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geo1_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "geo2_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "result_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "drawable_", NULL, 0x1, "Lgeogebra.common.geogebra3D.euclidian3D.draw.Drawable3D;", NULL, NULL,  },
    { "hitted_", NULL, 0x4, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve = { 2, "IntersectionCurve", "geogebra.common.geogebra3D.euclidian3D", "EuclidianController3D", 0x1, 1, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *outer$, GeogebraCommonKernelGeosGeoElement *geo1, GeogebraCommonKernelGeosGeoElement *geo2, GeogebraCommonKernelGeosGeoElement *result, jboolean hitted, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *drawable) {
  NSObject_init(self);
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve_set_geo1_(self, geo1);
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve_set_geo2_(self, geo2);
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve_set_result_(self, result);
  self->hitted_ = hitted;
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve_set_drawable_(self, drawable);
}

GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve *new_GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *outer$, GeogebraCommonKernelGeosGeoElement *geo1, GeogebraCommonKernelGeosGeoElement *geo2, GeogebraCommonKernelGeosGeoElement *result, jboolean hitted, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *drawable) {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve *self = [GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve alloc];
  GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(self, outer$, geo1, geo2, result, hitted, drawable);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve)
