//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/Arrays.h"
#include "org/apache/commons/math/DimensionMismatchException.h"
#include "org/apache/commons/math/stat/descriptive/moment/Mean.h"
#include "org/apache/commons/math/stat/descriptive/moment/VectorialMean.h"

#define OrgApacheCommonsMathStatDescriptiveMomentVectorialMean_serialVersionUID 8223009086481006892LL

@interface OrgApacheCommonsMathStatDescriptiveMomentVectorialMean () {
 @public
  IOSObjectArray *means_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathStatDescriptiveMomentVectorialMean, means_, IOSObjectArray *)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathStatDescriptiveMomentVectorialMean, serialVersionUID, jlong)

@implementation OrgApacheCommonsMathStatDescriptiveMomentVectorialMean

- (instancetype)initWithInt:(jint)dimension {
  OrgApacheCommonsMathStatDescriptiveMomentVectorialMean_initWithInt_(self, dimension);
  return self;
}

- (void)incrementWithDoubleArray:(IOSDoubleArray *)v {
  if (((IOSDoubleArray *) nil_chk(v))->size_ != ((IOSObjectArray *) nil_chk(means_))->size_) {
    @throw [new_OrgApacheCommonsMathDimensionMismatchException_initWithInt_withInt_(v->size_, means_->size_) autorelease];
  }
  for (jint i = 0; i < v->size_; ++i) {
    [((OrgApacheCommonsMathStatDescriptiveMomentMean *) nil_chk(IOSObjectArray_Get(means_, i))) incrementWithDouble:IOSDoubleArray_Get(v, i)];
  }
}

- (IOSDoubleArray *)getResult {
  IOSDoubleArray *result = [IOSDoubleArray arrayWithLength:((IOSObjectArray *) nil_chk(means_))->size_];
  for (jint i = 0; i < result->size_; ++i) {
    *IOSDoubleArray_GetRef(result, i) = [((OrgApacheCommonsMathStatDescriptiveMomentMean *) nil_chk(IOSObjectArray_Get(means_, i))) getResult];
  }
  return result;
}

- (jlong)getN {
  return (((IOSObjectArray *) nil_chk(means_))->size_ == 0) ? 0 : [((OrgApacheCommonsMathStatDescriptiveMomentMean *) nil_chk(IOSObjectArray_Get(means_, 0))) getN];
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  result = prime * result + JavaUtilArrays_hashCodeWithNSObjectArray_(means_);
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) return YES;
  if (!([obj isKindOfClass:[OrgApacheCommonsMathStatDescriptiveMomentVectorialMean class]])) return NO;
  OrgApacheCommonsMathStatDescriptiveMomentVectorialMean *other = (OrgApacheCommonsMathStatDescriptiveMomentVectorialMean *) check_class_cast(obj, [OrgApacheCommonsMathStatDescriptiveMomentVectorialMean class]);
  if (!JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_(means_, ((OrgApacheCommonsMathStatDescriptiveMomentVectorialMean *) nil_chk(other))->means_)) return NO;
  return YES;
}

- (void)dealloc {
  RELEASE_(means_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "VectorialMean", NULL, 0x1, NULL, NULL },
    { "incrementWithDoubleArray:", "increment", "V", 0x1, "Lorg.apache.commons.math.DimensionMismatchException;", NULL },
    { "getResult", NULL, "[D", 0x1, NULL, NULL },
    { "getN", NULL, "J", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathStatDescriptiveMomentVectorialMean_serialVersionUID },
    { "means_", NULL, 0x12, "[Lorg.apache.commons.math.stat.descriptive.moment.Mean;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathStatDescriptiveMomentVectorialMean = { 2, "VectorialMean", "org.apache.commons.math.stat.descriptive.moment", NULL, 0x1, 6, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathStatDescriptiveMomentVectorialMean;
}

@end

void OrgApacheCommonsMathStatDescriptiveMomentVectorialMean_initWithInt_(OrgApacheCommonsMathStatDescriptiveMomentVectorialMean *self, jint dimension) {
  NSObject_init(self);
  OrgApacheCommonsMathStatDescriptiveMomentVectorialMean_setAndConsume_means_(self, [IOSObjectArray newArrayWithLength:dimension type:OrgApacheCommonsMathStatDescriptiveMomentMean_class_()]);
  for (jint i = 0; i < dimension; ++i) {
    IOSObjectArray_SetAndConsume(self->means_, i, new_OrgApacheCommonsMathStatDescriptiveMomentMean_init());
  }
}

OrgApacheCommonsMathStatDescriptiveMomentVectorialMean *new_OrgApacheCommonsMathStatDescriptiveMomentVectorialMean_initWithInt_(jint dimension) {
  OrgApacheCommonsMathStatDescriptiveMomentVectorialMean *self = [OrgApacheCommonsMathStatDescriptiveMomentVectorialMean alloc];
  OrgApacheCommonsMathStatDescriptiveMomentVectorialMean_initWithInt_(self, dimension);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathStatDescriptiveMomentVectorialMean)
