//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/com/vividsolutions/jts/operation/polygonize/Polygonizer.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/geom/Geometry.h"
#include "com/vividsolutions/jts/geom/GeometryComponentFilter.h"
#include "com/vividsolutions/jts/geom/GeometryFactory.h"
#include "com/vividsolutions/jts/geom/LineString.h"
#include "com/vividsolutions/jts/geom/LinearRing.h"
#include "com/vividsolutions/jts/geom/Polygon.h"
#include "com/vividsolutions/jts/operation/polygonize/EdgeRing.h"
#include "com/vividsolutions/jts/operation/polygonize/PolygonizeGraph.h"
#include "com/vividsolutions/jts/operation/polygonize/Polygonizer.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@class ComVividsolutionsJtsOperationPolygonizePolygonizer_LineStringAdder;

@interface ComVividsolutionsJtsOperationPolygonizePolygonizer () {
 @public
  ComVividsolutionsJtsOperationPolygonizePolygonizer_LineStringAdder *lineStringAdder_;
}

- (void)addWithComVividsolutionsJtsGeomLineString:(ComVividsolutionsJtsGeomLineString *)line;

- (void)polygonize;

- (void)findValidRingsWithJavaUtilList:(id<JavaUtilList>)edgeRingList
                      withJavaUtilList:(id<JavaUtilList>)validEdgeRingList
                      withJavaUtilList:(id<JavaUtilList>)invalidRingList;

- (void)findShellsAndHolesWithJavaUtilList:(id<JavaUtilList>)edgeRingList;

+ (void)assignHolesToShellsWithJavaUtilList:(id<JavaUtilList>)holeList
                           withJavaUtilList:(id<JavaUtilList>)shellList;

+ (void)assignHoleToShellWithComVividsolutionsJtsOperationPolygonizeEdgeRing:(ComVividsolutionsJtsOperationPolygonizeEdgeRing *)holeER
                                                            withJavaUtilList:(id<JavaUtilList>)shellList;

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationPolygonizePolygonizer, lineStringAdder_, ComVividsolutionsJtsOperationPolygonizePolygonizer_LineStringAdder *)

__attribute__((unused)) static void ComVividsolutionsJtsOperationPolygonizePolygonizer_addWithComVividsolutionsJtsGeomLineString_(ComVividsolutionsJtsOperationPolygonizePolygonizer *self, ComVividsolutionsJtsGeomLineString *line);

__attribute__((unused)) static void ComVividsolutionsJtsOperationPolygonizePolygonizer_polygonize(ComVividsolutionsJtsOperationPolygonizePolygonizer *self);

__attribute__((unused)) static void ComVividsolutionsJtsOperationPolygonizePolygonizer_findValidRingsWithJavaUtilList_withJavaUtilList_withJavaUtilList_(ComVividsolutionsJtsOperationPolygonizePolygonizer *self, id<JavaUtilList> edgeRingList, id<JavaUtilList> validEdgeRingList, id<JavaUtilList> invalidRingList);

__attribute__((unused)) static void ComVividsolutionsJtsOperationPolygonizePolygonizer_findShellsAndHolesWithJavaUtilList_(ComVividsolutionsJtsOperationPolygonizePolygonizer *self, id<JavaUtilList> edgeRingList);

__attribute__((unused)) static void ComVividsolutionsJtsOperationPolygonizePolygonizer_assignHolesToShellsWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> holeList, id<JavaUtilList> shellList);

__attribute__((unused)) static void ComVividsolutionsJtsOperationPolygonizePolygonizer_assignHoleToShellWithComVividsolutionsJtsOperationPolygonizeEdgeRing_withJavaUtilList_(ComVividsolutionsJtsOperationPolygonizeEdgeRing *holeER, id<JavaUtilList> shellList);

@interface ComVividsolutionsJtsOperationPolygonizePolygonizer_LineStringAdder : NSObject < ComVividsolutionsJtsGeomGeometryComponentFilter > {
 @public
  ComVividsolutionsJtsOperationPolygonizePolygonizer *this$0_;
}

- (void)filterWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g;

- (instancetype)initWithComVividsolutionsJtsOperationPolygonizePolygonizer:(ComVividsolutionsJtsOperationPolygonizePolygonizer *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ComVividsolutionsJtsOperationPolygonizePolygonizer_LineStringAdder)

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationPolygonizePolygonizer_LineStringAdder, this$0_, ComVividsolutionsJtsOperationPolygonizePolygonizer *)

__attribute__((unused)) static void ComVividsolutionsJtsOperationPolygonizePolygonizer_LineStringAdder_initWithComVividsolutionsJtsOperationPolygonizePolygonizer_(ComVividsolutionsJtsOperationPolygonizePolygonizer_LineStringAdder *self, ComVividsolutionsJtsOperationPolygonizePolygonizer *outer$);

__attribute__((unused)) static ComVividsolutionsJtsOperationPolygonizePolygonizer_LineStringAdder *new_ComVividsolutionsJtsOperationPolygonizePolygonizer_LineStringAdder_initWithComVividsolutionsJtsOperationPolygonizePolygonizer_(ComVividsolutionsJtsOperationPolygonizePolygonizer *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ComVividsolutionsJtsOperationPolygonizePolygonizer_LineStringAdder)

@implementation ComVividsolutionsJtsOperationPolygonizePolygonizer

- (instancetype)init {
  ComVividsolutionsJtsOperationPolygonizePolygonizer_init(self);
  return self;
}

- (void)addWithJavaUtilCollection:(id<JavaUtilCollection>)geomList {
  for (id<JavaUtilIterator> i = [((id<JavaUtilCollection>) nil_chk(geomList)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsGeomGeometry *geometry = (ComVividsolutionsJtsGeomGeometry *) check_class_cast([i next], [ComVividsolutionsJtsGeomGeometry class]);
    [self addWithComVividsolutionsJtsGeomGeometry:geometry];
  }
}

- (void)addWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  [((ComVividsolutionsJtsGeomGeometry *) nil_chk(g)) applyWithComVividsolutionsJtsGeomGeometryComponentFilter:lineStringAdder_];
}

- (void)addWithComVividsolutionsJtsGeomLineString:(ComVividsolutionsJtsGeomLineString *)line {
  ComVividsolutionsJtsOperationPolygonizePolygonizer_addWithComVividsolutionsJtsGeomLineString_(self, line);
}

- (id<JavaUtilCollection>)getPolygons {
  ComVividsolutionsJtsOperationPolygonizePolygonizer_polygonize(self);
  return polyList_;
}

- (id<JavaUtilCollection>)getDangles {
  ComVividsolutionsJtsOperationPolygonizePolygonizer_polygonize(self);
  return dangles_;
}

- (id<JavaUtilCollection>)getCutEdges {
  ComVividsolutionsJtsOperationPolygonizePolygonizer_polygonize(self);
  return cutEdges_;
}

- (id<JavaUtilCollection>)getInvalidRingLines {
  ComVividsolutionsJtsOperationPolygonizePolygonizer_polygonize(self);
  return invalidRingLines_;
}

- (void)polygonize {
  ComVividsolutionsJtsOperationPolygonizePolygonizer_polygonize(self);
}

- (void)findValidRingsWithJavaUtilList:(id<JavaUtilList>)edgeRingList
                      withJavaUtilList:(id<JavaUtilList>)validEdgeRingList
                      withJavaUtilList:(id<JavaUtilList>)invalidRingList {
  ComVividsolutionsJtsOperationPolygonizePolygonizer_findValidRingsWithJavaUtilList_withJavaUtilList_withJavaUtilList_(self, edgeRingList, validEdgeRingList, invalidRingList);
}

- (void)findShellsAndHolesWithJavaUtilList:(id<JavaUtilList>)edgeRingList {
  ComVividsolutionsJtsOperationPolygonizePolygonizer_findShellsAndHolesWithJavaUtilList_(self, edgeRingList);
}

+ (void)assignHolesToShellsWithJavaUtilList:(id<JavaUtilList>)holeList
                           withJavaUtilList:(id<JavaUtilList>)shellList {
  ComVividsolutionsJtsOperationPolygonizePolygonizer_assignHolesToShellsWithJavaUtilList_withJavaUtilList_(holeList, shellList);
}

+ (void)assignHoleToShellWithComVividsolutionsJtsOperationPolygonizeEdgeRing:(ComVividsolutionsJtsOperationPolygonizeEdgeRing *)holeER
                                                            withJavaUtilList:(id<JavaUtilList>)shellList {
  ComVividsolutionsJtsOperationPolygonizePolygonizer_assignHoleToShellWithComVividsolutionsJtsOperationPolygonizeEdgeRing_withJavaUtilList_(holeER, shellList);
}

- (void)dealloc {
  RELEASE_(lineStringAdder_);
  RELEASE_(graph_);
  RELEASE_(dangles_);
  RELEASE_(cutEdges_);
  RELEASE_(invalidRingLines_);
  RELEASE_(holeList_);
  RELEASE_(shellList_);
  RELEASE_(polyList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Polygonizer", NULL, 0x1, NULL, NULL },
    { "addWithJavaUtilCollection:", "add", "V", 0x1, NULL, NULL },
    { "addWithComVividsolutionsJtsGeomGeometry:", "add", "V", 0x1, NULL, NULL },
    { "addWithComVividsolutionsJtsGeomLineString:", "add", "V", 0x2, NULL, NULL },
    { "getPolygons", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "getDangles", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "getCutEdges", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "getInvalidRingLines", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "polygonize", NULL, "V", 0x2, NULL, NULL },
    { "findValidRingsWithJavaUtilList:withJavaUtilList:withJavaUtilList:", "findValidRings", "V", 0x2, NULL, NULL },
    { "findShellsAndHolesWithJavaUtilList:", "findShellsAndHoles", "V", 0x2, NULL, NULL },
    { "assignHolesToShellsWithJavaUtilList:withJavaUtilList:", "assignHolesToShells", "V", 0xa, NULL, NULL },
    { "assignHoleToShellWithComVividsolutionsJtsOperationPolygonizeEdgeRing:withJavaUtilList:", "assignHoleToShell", "V", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "lineStringAdder_", NULL, 0x2, "Lcom.vividsolutions.jts.operation.polygonize.Polygonizer$LineStringAdder;", NULL, NULL,  },
    { "graph_", NULL, 0x4, "Lcom.vividsolutions.jts.operation.polygonize.PolygonizeGraph;", NULL, NULL,  },
    { "dangles_", NULL, 0x4, "Ljava.util.Collection;", NULL, NULL,  },
    { "cutEdges_", NULL, 0x4, "Ljava.util.List;", NULL, NULL,  },
    { "invalidRingLines_", NULL, 0x4, "Ljava.util.List;", NULL, NULL,  },
    { "holeList_", NULL, 0x4, "Ljava.util.List;", NULL, NULL,  },
    { "shellList_", NULL, 0x4, "Ljava.util.List;", NULL, NULL,  },
    { "polyList_", NULL, 0x4, "Ljava.util.List;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lcom.vividsolutions.jts.operation.polygonize.Polygonizer$LineStringAdder;"};
  static const J2ObjcClassInfo _ComVividsolutionsJtsOperationPolygonizePolygonizer = { 2, "Polygonizer", "com.vividsolutions.jts.operation.polygonize", NULL, 0x1, 13, methods, 8, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_ComVividsolutionsJtsOperationPolygonizePolygonizer;
}

@end

void ComVividsolutionsJtsOperationPolygonizePolygonizer_init(ComVividsolutionsJtsOperationPolygonizePolygonizer *self) {
  NSObject_init(self);
  ComVividsolutionsJtsOperationPolygonizePolygonizer_setAndConsume_lineStringAdder_(self, new_ComVividsolutionsJtsOperationPolygonizePolygonizer_LineStringAdder_initWithComVividsolutionsJtsOperationPolygonizePolygonizer_(self));
  ComVividsolutionsJtsOperationPolygonizePolygonizer_setAndConsume_dangles_(self, new_JavaUtilArrayList_init());
  ComVividsolutionsJtsOperationPolygonizePolygonizer_setAndConsume_cutEdges_(self, new_JavaUtilArrayList_init());
  ComVividsolutionsJtsOperationPolygonizePolygonizer_setAndConsume_invalidRingLines_(self, new_JavaUtilArrayList_init());
  ComVividsolutionsJtsOperationPolygonizePolygonizer_set_holeList_(self, nil);
  ComVividsolutionsJtsOperationPolygonizePolygonizer_set_shellList_(self, nil);
  ComVividsolutionsJtsOperationPolygonizePolygonizer_set_polyList_(self, nil);
}

ComVividsolutionsJtsOperationPolygonizePolygonizer *new_ComVividsolutionsJtsOperationPolygonizePolygonizer_init() {
  ComVividsolutionsJtsOperationPolygonizePolygonizer *self = [ComVividsolutionsJtsOperationPolygonizePolygonizer alloc];
  ComVividsolutionsJtsOperationPolygonizePolygonizer_init(self);
  return self;
}

void ComVividsolutionsJtsOperationPolygonizePolygonizer_addWithComVividsolutionsJtsGeomLineString_(ComVividsolutionsJtsOperationPolygonizePolygonizer *self, ComVividsolutionsJtsGeomLineString *line) {
  if (self->graph_ == nil) ComVividsolutionsJtsOperationPolygonizePolygonizer_setAndConsume_graph_(self, new_ComVividsolutionsJtsOperationPolygonizePolygonizeGraph_initWithComVividsolutionsJtsGeomGeometryFactory_([((ComVividsolutionsJtsGeomLineString *) nil_chk(line)) getFactory]));
  [((ComVividsolutionsJtsOperationPolygonizePolygonizeGraph *) nil_chk(self->graph_)) addEdgeWithComVividsolutionsJtsGeomLineString:line];
}

void ComVividsolutionsJtsOperationPolygonizePolygonizer_polygonize(ComVividsolutionsJtsOperationPolygonizePolygonizer *self) {
  if (self->polyList_ != nil) return;
  ComVividsolutionsJtsOperationPolygonizePolygonizer_setAndConsume_polyList_(self, new_JavaUtilArrayList_init());
  if (self->graph_ == nil) return;
  ComVividsolutionsJtsOperationPolygonizePolygonizer_set_dangles_(self, [((ComVividsolutionsJtsOperationPolygonizePolygonizeGraph *) nil_chk(self->graph_)) deleteDangles]);
  ComVividsolutionsJtsOperationPolygonizePolygonizer_set_cutEdges_(self, [self->graph_ deleteCutEdges]);
  id<JavaUtilList> edgeRingList = [self->graph_ getEdgeRings];
  id<JavaUtilList> validEdgeRingList = [new_JavaUtilArrayList_init() autorelease];
  ComVividsolutionsJtsOperationPolygonizePolygonizer_setAndConsume_invalidRingLines_(self, new_JavaUtilArrayList_init());
  ComVividsolutionsJtsOperationPolygonizePolygonizer_findValidRingsWithJavaUtilList_withJavaUtilList_withJavaUtilList_(self, edgeRingList, validEdgeRingList, self->invalidRingLines_);
  ComVividsolutionsJtsOperationPolygonizePolygonizer_findShellsAndHolesWithJavaUtilList_(self, validEdgeRingList);
  ComVividsolutionsJtsOperationPolygonizePolygonizer_assignHolesToShellsWithJavaUtilList_withJavaUtilList_(self->holeList_, self->shellList_);
  ComVividsolutionsJtsOperationPolygonizePolygonizer_setAndConsume_polyList_(self, new_JavaUtilArrayList_init());
  for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk(self->shellList_)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsOperationPolygonizeEdgeRing *er = (ComVividsolutionsJtsOperationPolygonizeEdgeRing *) check_class_cast([i next], [ComVividsolutionsJtsOperationPolygonizeEdgeRing class]);
    [self->polyList_ addWithId:[((ComVividsolutionsJtsOperationPolygonizeEdgeRing *) nil_chk(er)) getPolygon]];
  }
}

void ComVividsolutionsJtsOperationPolygonizePolygonizer_findValidRingsWithJavaUtilList_withJavaUtilList_withJavaUtilList_(ComVividsolutionsJtsOperationPolygonizePolygonizer *self, id<JavaUtilList> edgeRingList, id<JavaUtilList> validEdgeRingList, id<JavaUtilList> invalidRingList) {
  for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk(edgeRingList)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsOperationPolygonizeEdgeRing *er = (ComVividsolutionsJtsOperationPolygonizeEdgeRing *) check_class_cast([i next], [ComVividsolutionsJtsOperationPolygonizeEdgeRing class]);
    if ([((ComVividsolutionsJtsOperationPolygonizeEdgeRing *) nil_chk(er)) isValid]) [((id<JavaUtilList>) nil_chk(validEdgeRingList)) addWithId:er];
    else [((id<JavaUtilList>) nil_chk(invalidRingList)) addWithId:[er getLineString]];
  }
}

void ComVividsolutionsJtsOperationPolygonizePolygonizer_findShellsAndHolesWithJavaUtilList_(ComVividsolutionsJtsOperationPolygonizePolygonizer *self, id<JavaUtilList> edgeRingList) {
  ComVividsolutionsJtsOperationPolygonizePolygonizer_setAndConsume_holeList_(self, new_JavaUtilArrayList_init());
  ComVividsolutionsJtsOperationPolygonizePolygonizer_setAndConsume_shellList_(self, new_JavaUtilArrayList_init());
  for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk(edgeRingList)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsOperationPolygonizeEdgeRing *er = (ComVividsolutionsJtsOperationPolygonizeEdgeRing *) check_class_cast([i next], [ComVividsolutionsJtsOperationPolygonizeEdgeRing class]);
    if ([((ComVividsolutionsJtsOperationPolygonizeEdgeRing *) nil_chk(er)) isHole]) [self->holeList_ addWithId:er];
    else [self->shellList_ addWithId:er];
  }
}

void ComVividsolutionsJtsOperationPolygonizePolygonizer_assignHolesToShellsWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> holeList, id<JavaUtilList> shellList) {
  ComVividsolutionsJtsOperationPolygonizePolygonizer_initialize();
  for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk(holeList)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsOperationPolygonizeEdgeRing *holeER = (ComVividsolutionsJtsOperationPolygonizeEdgeRing *) check_class_cast([i next], [ComVividsolutionsJtsOperationPolygonizeEdgeRing class]);
    ComVividsolutionsJtsOperationPolygonizePolygonizer_assignHoleToShellWithComVividsolutionsJtsOperationPolygonizeEdgeRing_withJavaUtilList_(holeER, shellList);
  }
}

void ComVividsolutionsJtsOperationPolygonizePolygonizer_assignHoleToShellWithComVividsolutionsJtsOperationPolygonizeEdgeRing_withJavaUtilList_(ComVividsolutionsJtsOperationPolygonizeEdgeRing *holeER, id<JavaUtilList> shellList) {
  ComVividsolutionsJtsOperationPolygonizePolygonizer_initialize();
  ComVividsolutionsJtsOperationPolygonizeEdgeRing *shell = ComVividsolutionsJtsOperationPolygonizeEdgeRing_findEdgeRingContainingWithComVividsolutionsJtsOperationPolygonizeEdgeRing_withJavaUtilList_(holeER, shellList);
  if (shell != nil) [shell addHoleWithComVividsolutionsJtsGeomLinearRing:[((ComVividsolutionsJtsOperationPolygonizeEdgeRing *) nil_chk(holeER)) getRing]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsOperationPolygonizePolygonizer)

@implementation ComVividsolutionsJtsOperationPolygonizePolygonizer_LineStringAdder

- (void)filterWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  if ([g isKindOfClass:[ComVividsolutionsJtsGeomLineString class]]) ComVividsolutionsJtsOperationPolygonizePolygonizer_addWithComVividsolutionsJtsGeomLineString_(this$0_, (ComVividsolutionsJtsGeomLineString *) check_class_cast(g, [ComVividsolutionsJtsGeomLineString class]));
}

- (instancetype)initWithComVividsolutionsJtsOperationPolygonizePolygonizer:(ComVividsolutionsJtsOperationPolygonizePolygonizer *)outer$ {
  ComVividsolutionsJtsOperationPolygonizePolygonizer_LineStringAdder_initWithComVividsolutionsJtsOperationPolygonizePolygonizer_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "filterWithComVividsolutionsJtsGeomGeometry:", "filter", "V", 0x1, NULL, NULL },
    { "initWithComVividsolutionsJtsOperationPolygonizePolygonizer:", "init", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.vividsolutions.jts.operation.polygonize.Polygonizer;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsOperationPolygonizePolygonizer_LineStringAdder = { 2, "LineStringAdder", "com.vividsolutions.jts.operation.polygonize", "Polygonizer", 0x2, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsOperationPolygonizePolygonizer_LineStringAdder;
}

@end

void ComVividsolutionsJtsOperationPolygonizePolygonizer_LineStringAdder_initWithComVividsolutionsJtsOperationPolygonizePolygonizer_(ComVividsolutionsJtsOperationPolygonizePolygonizer_LineStringAdder *self, ComVividsolutionsJtsOperationPolygonizePolygonizer *outer$) {
  ComVividsolutionsJtsOperationPolygonizePolygonizer_LineStringAdder_set_this$0_(self, outer$);
  NSObject_init(self);
}

ComVividsolutionsJtsOperationPolygonizePolygonizer_LineStringAdder *new_ComVividsolutionsJtsOperationPolygonizePolygonizer_LineStringAdder_initWithComVividsolutionsJtsOperationPolygonizePolygonizer_(ComVividsolutionsJtsOperationPolygonizePolygonizer *outer$) {
  ComVividsolutionsJtsOperationPolygonizePolygonizer_LineStringAdder *self = [ComVividsolutionsJtsOperationPolygonizePolygonizer_LineStringAdder alloc];
  ComVividsolutionsJtsOperationPolygonizePolygonizer_LineStringAdder_initWithComVividsolutionsJtsOperationPolygonizePolygonizer_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsOperationPolygonizePolygonizer_LineStringAdder)
