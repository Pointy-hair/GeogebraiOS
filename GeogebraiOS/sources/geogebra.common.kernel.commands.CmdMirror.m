//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/commands/CmdMirror.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CmdMirror.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoPoly.h"
#include "geogebra/common/kernel/geos/Transformable.h"
#include "geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "geogebra/common/main/MyError.h"

@implementation GeogebraCommonKernelCommandsCmdMirror

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelCommandsCmdMirror_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  NSString *label = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel];
  jint n = [c getArgumentNumber];
  IOSBooleanArray *ok = [IOSBooleanArray arrayWithLength:n];
  IOSObjectArray *arg;
  {
    IOSObjectArray *ret;
    switch (n) {
      case 2:
      arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
      ret = [self process2WithNSString:label withGeogebraCommonKernelGeosGeoElementArray:arg withBooleanArray:ok];
      if (ret != nil) {
        return ret;
      }
      if (!IOSBooleanArray_Get(ok, 0)) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(nil_chk(arg), 0)];
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(nil_chk(arg), 1)];
      default:
      @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
    }
  }
}

- (IOSObjectArray *)process2WithNSString:(NSString *)label
withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)arg
                        withBooleanArray:(IOSBooleanArray *)ok {
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 1))) isGeoConic]) {
    GeogebraCommonKernelGeosGeoConic *conic1 = (GeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoConic class]);
    if (([((GeogebraCommonKernelGeosGeoConic *) nil_chk(conic1)) getType] == GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoConic]) || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoPoint] || [IOSObjectArray_Get(arg, 0) isKindOfClass:[GeogebraCommonKernelGeosGeoCurveCartesian class]] || [IOSObjectArray_Get(arg, 0) isKindOfClass:[GeogebraCommonKernelGeosGeoLine class]] || [GeogebraCommonKernelGeosGeoPoly_class_() isInstance:IOSObjectArray_Get(arg, 0)] || [IOSObjectArray_Get(arg, 0) isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]] || [IOSObjectArray_Get(arg, 0) isKindOfClass:[GeogebraCommonKernelGeosGeoList class]] || [IOSObjectArray_Get(arg, 0) isKindOfClass:[GeogebraCommonKernelImplicitGeoImplicitPoly class]]) {
      ret = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) MirrorWithNSString:label withGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(arg, 0) withGeogebraCommonKernelGeosGeoConic:conic1];
      return ret;
    }
  }
  if ([GeogebraCommonKernelGeosTransformable_class_() isInstance:IOSObjectArray_Get(arg, 0)]) {
    *IOSBooleanArray_GetRef(nil_chk(ok), 0) = YES;
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPoint]) {
      GeogebraCommonKernelGeosGeoPoint *Q = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoPoint class]);
      ret = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) MirrorWithNSString:label withGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(arg, 0) withGeogebraCommonKernelGeosGeoPoint:Q];
      return ret;
    }
    else if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine]) {
      GeogebraCommonKernelGeosGeoLine *line = (GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoLine class]);
      ret = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) MirrorWithNSString:label withGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(arg, 0) withGeogebraCommonKernelGeosGeoLine:line];
      return ret;
    }
  }
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdMirror", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;", NULL },
    { "process2WithNSString:withGeogebraCommonKernelGeosGeoElementArray:withBooleanArray:", "process2", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCommandsCmdMirror = { 2, "CmdMirror", "geogebra.common.kernel.commands", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCommandsCmdMirror;
}

@end

void GeogebraCommonKernelCommandsCmdMirror_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelCommandsCmdMirror *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelCommandsCmdMirror *new_GeogebraCommonKernelCommandsCmdMirror_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdMirror *self = [GeogebraCommonKernelCommandsCmdMirror alloc];
  GeogebraCommonKernelCommandsCmdMirror_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCommandsCmdMirror)
