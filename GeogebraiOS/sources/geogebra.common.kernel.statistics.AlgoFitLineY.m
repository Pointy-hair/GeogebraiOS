//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoFitLineY.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/statistics/AlgoFitLineY.h"

@interface GeogebraCommonKernelStatisticsAlgoFitLineY () {
 @public
  GeogebraCommonKernelGeosGeoList *geoList_;
  GeogebraCommonKernelGeosGeoLine *g_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFitLineY, geoList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFitLineY, g_, GeogebraCommonKernelGeosGeoLine *)

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoFitLineY_compute(GeogebraCommonKernelStatisticsAlgoFitLineY *self);

@implementation GeogebraCommonKernelStatisticsAlgoFitLineY

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList {
  GeogebraCommonKernelStatisticsAlgoFitLineY_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, geoList);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList {
  GeogebraCommonKernelStatisticsAlgoFitLineY_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, geoList);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_FitLineY();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_FITLINE;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, geoList_);
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:g_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoLine *)getFitLineY {
  return g_;
}

- (void)compute {
  GeogebraCommonKernelStatisticsAlgoFitLineY_compute(self);
}

- (void)dealloc {
  RELEASE_(geoList_);
  RELEASE_(g_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:", "AlgoFitLineY", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoList:", "AlgoFitLineY", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getFitLineY", NULL, "Lgeogebra.common.kernel.geos.GeoLine;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geoList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "g_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoFitLineY = { 2, "AlgoFitLineY", "geogebra.common.kernel.statistics", NULL, 0x1, 7, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoFitLineY;
}

@end

void GeogebraCommonKernelStatisticsAlgoFitLineY_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelStatisticsAlgoFitLineY *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelStatisticsAlgoFitLineY_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, geoList);
  [((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->g_)) setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoFitLineY *new_GeogebraCommonKernelStatisticsAlgoFitLineY_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelStatisticsAlgoFitLineY *self = [GeogebraCommonKernelStatisticsAlgoFitLineY alloc];
  GeogebraCommonKernelStatisticsAlgoFitLineY_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, geoList);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoFitLineY_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelStatisticsAlgoFitLineY *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoFitLineY_set_geoList_(self, geoList);
  GeogebraCommonKernelStatisticsAlgoFitLineY_setAndConsume_g_(self, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons));
  [self->g_ setToExplicit];
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoFitLineY_compute(self);
}

GeogebraCommonKernelStatisticsAlgoFitLineY *new_GeogebraCommonKernelStatisticsAlgoFitLineY_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelStatisticsAlgoFitLineY *self = [GeogebraCommonKernelStatisticsAlgoFitLineY alloc];
  GeogebraCommonKernelStatisticsAlgoFitLineY_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, geoList);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoFitLineY_compute(GeogebraCommonKernelStatisticsAlgoFitLineY *self) {
  jint size = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList_)) size];
  if (![self->geoList_ isDefined] || size <= 1) {
    [((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->g_)) setUndefined];
    return;
  }
  jdouble sigmax = 0;
  jdouble sigmay = 0;
  jdouble sigmaxx = 0;
  jdouble sigmaxy = 0;
  for (jint i = 0; i < size; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [self->geoList_ getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint]) {
      jdouble x;
      jdouble y;
      if ([geo isGeoElement3D]) {
        GeogebraCommonKernelMatrixCoords *coords = [((id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoPointND))) getInhomCoordsInD3];
        if (!GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getZ])) {
          [((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->g_)) setUndefined];
          return;
        }
        x = [coords getX];
        y = [coords getY];
      }
      else {
        IOSDoubleArray *xy = [IOSDoubleArray arrayWithLength:2];
        [((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPoint class])) getInhomCoordsWithDoubleArray:xy];
        x = IOSDoubleArray_Get(xy, 0);
        y = IOSDoubleArray_Get(xy, 1);
      }
      sigmax += x;
      sigmay += y;
      sigmaxx += x * x;
      sigmaxy += x * y;
    }
    else {
      [((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->g_)) setUndefined];
      return;
    }
  }
  ((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->g_))->x_ = size * sigmax * sigmay - size * size * sigmaxy;
  self->g_->y_ = size * size * sigmaxx - size * sigmax * sigmax;
  self->g_->z_ = size * sigmax * sigmaxy - size * sigmaxx * sigmay;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoFitLineY)
