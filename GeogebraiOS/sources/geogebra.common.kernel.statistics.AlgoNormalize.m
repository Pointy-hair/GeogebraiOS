//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoNormalize.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/GetCommand.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/statistics/AlgoNormalize.h"
#include "java/lang/Math.h"

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoNormalize_compute(GeogebraCommonKernelStatisticsAlgoNormalize *self);

@implementation GeogebraCommonKernelStatisticsAlgoNormalize

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)oldList {
  GeogebraCommonKernelStatisticsAlgoNormalize_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, oldList);
  return self;
}

- (GeogebraCommonKernelGeosGeoList *)getResult {
  return normalizedList_;
}

- (id<GeogebraCommonKernelAlgosGetCommand>)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Normalize();
}

- (void)compute {
  GeogebraCommonKernelStatisticsAlgoNormalize_compute(self);
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, [((GeogebraCommonKernelGeosGeoList *) nil_chk(oldList_)) toGeoElement]);
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:normalizedList_];
  [self setDependencies];
}

- (void)dealloc {
  RELEASE_(oldList_);
  RELEASE_(normalizedList_);
  RELEASE_(cons_AlgoNormalize_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:", "AlgoNormalize", NULL, 0x1, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.algos.GetCommand;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "oldList_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "normalizedList_", NULL, 0x1, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "cons_AlgoNormalize_", "cons", 0x4, "Lgeogebra.common.kernel.Construction;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoNormalize = { 2, "AlgoNormalize", "geogebra.common.kernel.statistics", NULL, 0x1, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoNormalize;
}

@end

void GeogebraCommonKernelStatisticsAlgoNormalize_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelStatisticsAlgoNormalize *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *oldList) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoNormalize_set_oldList_(self, oldList);
  GeogebraCommonKernelStatisticsAlgoNormalize_set_cons_AlgoNormalize_(self, cons);
  GeogebraCommonKernelStatisticsAlgoNormalize_setAndConsume_normalizedList_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoNormalize_compute(self);
  [self->normalizedList_ setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoNormalize *new_GeogebraCommonKernelStatisticsAlgoNormalize_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *oldList) {
  GeogebraCommonKernelStatisticsAlgoNormalize *self = [GeogebraCommonKernelStatisticsAlgoNormalize alloc];
  GeogebraCommonKernelStatisticsAlgoNormalize_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, oldList);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoNormalize_compute(GeogebraCommonKernelStatisticsAlgoNormalize *self) {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(self->input_), 0))) isDefined]) {
    jdouble maxV = 0;
    jdouble minV = 0;
    jint size = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->oldList_)) size];
    IOSDoubleArray *normalized = [IOSDoubleArray arrayWithLength:size];
    for (jint i = 0; i < size; i++) {
      GeogebraCommonKernelGeosGeoElement *geo = [self->oldList_ getWithInt:i];
      if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo]) {
        jdouble v = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
        *IOSDoubleArray_GetRef(normalized, i) = v;
        if (i == 0) {
          maxV = v;
          minV = v;
        }
        else {
          maxV = JavaLangMath_maxWithDouble_withDouble_(maxV, v);
          minV = JavaLangMath_minWithDouble_withDouble_(minV, v);
        }
      }
      else {
        [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->normalizedList_)) setUndefined];
        return;
      }
    }
    {
      IOSDoubleArray *a__ = normalized;
      jdouble const *b__ = a__->buffer_;
      jdouble const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jdouble e = *b__++;
        if (maxV - minV == 0) e = 0;
        else e = (e - minV) / (maxV - minV);
        [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->normalizedList_)) addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_AlgoNormalize_, e) autorelease]];
      }
    }
  }
  else {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->normalizedList_)) setUndefined];
    return;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoNormalize)
