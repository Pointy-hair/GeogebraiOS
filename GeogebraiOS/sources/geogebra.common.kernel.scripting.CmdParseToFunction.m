//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/scripting/CmdParseToFunction.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoDependentGeoCopy.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/scripting/CmdParseToFunction.h"
#include "geogebra/common/main/MyError.h"
#include "java/lang/Exception.h"

@implementation GeogebraCommonKernelScriptingCmdParseToFunction

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelScriptingCmdParseToFunction_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSObjectArray *arg;
  jboolean ok;
  switch (n) {
    case 2:
    arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
    if ((ok = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoFunction] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoFunctionNVar])) && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoText]) {
      GeogebraCommonKernelGeosGeoElement *fun = IOSObjectArray_Get(arg, 0);
      if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(fun)) isLabelSet]) {
        GeogebraCommonKernelAlgosAlgoElement *algo = [fun getParentAlgorithm];
        if ([algo isKindOfClass:[GeogebraCommonKernelAlgosAlgoDependentGeoCopy class]]) {
          fun = [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getInputWithInt:0];
        }
      }
      NSString *str = [((GeogebraCommonKernelGeosGeoText *) nil_chk(((GeogebraCommonKernelGeosGeoText *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoText class])))) getTextString];
      @try {
        GeogebraCommonKernelGeosGeoElement *parsed = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoFunction] ? [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getAlgebraProcessor])) evaluateToFunctionWithNSString:str withBoolean:YES] : [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getAlgebraProcessor])) evaluateToFunctionNVarWithNSString:str withBoolean:YES];
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(fun)) setWithGeogebraCommonKernelGeosGeoElement:parsed];
        [fun updateCascade];
      }
      @catch (JavaLangException *e) {
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(fun)) setWithGeogebraCommonKernelGeosGeoElement:[((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getAlgebraProcessor])) evaluateToFunctionWithNSString:@"?" withBoolean:YES]];
        [fun updateCascade];
      }
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ fun } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else if (!ok) {
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
    }
    else {
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 1)];
    }
    default:
    @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdParseToFunction", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, "Lgeogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelScriptingCmdParseToFunction = { 2, "CmdParseToFunction", "geogebra.common.kernel.scripting", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelScriptingCmdParseToFunction;
}

@end

void GeogebraCommonKernelScriptingCmdParseToFunction_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelScriptingCmdParseToFunction *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelScriptingCmdParseToFunction *new_GeogebraCommonKernelScriptingCmdParseToFunction_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelScriptingCmdParseToFunction *self = [GeogebraCommonKernelScriptingCmdParseToFunction alloc];
  GeogebraCommonKernelScriptingCmdParseToFunction_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelScriptingCmdParseToFunction)
