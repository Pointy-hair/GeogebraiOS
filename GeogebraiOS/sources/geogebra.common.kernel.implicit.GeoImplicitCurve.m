//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/implicit/GeoImplicitCurve.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/MyPoint.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/Equation.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/Traversing.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLocus.h"
#include "geogebra/common/kernel/implicit/GeoImplicitCurve.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "geogebra/common/plugin/Operation.h"
#include "java/lang/Double.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@class GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum;

@interface GeogebraCommonKernelImplicitGeoImplicitCurve () {
 @public
  GeogebraCommonKernelArithmeticFunctionNVar *expression_;
  GeogebraCommonKernelGeosGeoLocus *locus_;
  jint gridWidth_;
  jint gridHeight_;
  IOSDoubleArray *evalArray_;
  IOSObjectArray *grid_;
  IOSObjectArray *evald_;
  jdouble rectX_;
  jdouble rectY_;
  jdouble rectW_;
  jdouble rectH_;
  IOSDoubleArray *rwCoords_;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c;

- (void)fromEquationWithGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equation;

- (void)fromFunctionWithGeogebraCommonKernelArithmeticFunctionNVar:(GeogebraCommonKernelArithmeticFunctionNVar *)function;

- (IOSObjectArray *)getPointsForGridWithInt:(jint)i
                                    withInt:(jint)j;

- (jdouble)fWithDoubleArray:(IOSDoubleArray *)vals;

- (GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum *)getGridTypeWithInt:(jint)i
                                                                              withInt:(jint)j;

- (jint)mySignFunWithDouble:(jdouble)val;

- (jint)signAbsSumWithDoubleArray:(IOSDoubleArray *)args;

- (jdouble)getRealWorldYWithInt:(jint)i;

- (jdouble)getRealWorldXWithInt:(jint)j;

- (IOSDoubleArray *)getRealWorldCoordinatesWithInt:(jint)i
                                           withInt:(jint)j;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelImplicitGeoImplicitCurve, expression_, GeogebraCommonKernelArithmeticFunctionNVar *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelImplicitGeoImplicitCurve, locus_, GeogebraCommonKernelGeosGeoLocus *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelImplicitGeoImplicitCurve, evalArray_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelImplicitGeoImplicitCurve, grid_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelImplicitGeoImplicitCurve, evald_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelImplicitGeoImplicitCurve, rwCoords_, IOSDoubleArray *)

__attribute__((unused)) static void GeogebraCommonKernelImplicitGeoImplicitCurve_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelImplicitGeoImplicitCurve *self, GeogebraCommonKernelConstruction *c);

__attribute__((unused)) static GeogebraCommonKernelImplicitGeoImplicitCurve *new_GeogebraCommonKernelImplicitGeoImplicitCurve_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *c) NS_RETURNS_RETAINED;

__attribute__((unused)) static void GeogebraCommonKernelImplicitGeoImplicitCurve_fromEquationWithGeogebraCommonKernelArithmeticEquation_(GeogebraCommonKernelImplicitGeoImplicitCurve *self, GeogebraCommonKernelArithmeticEquation *equation);

__attribute__((unused)) static void GeogebraCommonKernelImplicitGeoImplicitCurve_fromFunctionWithGeogebraCommonKernelArithmeticFunctionNVar_(GeogebraCommonKernelImplicitGeoImplicitCurve *self, GeogebraCommonKernelArithmeticFunctionNVar *function);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonKernelImplicitGeoImplicitCurve_getPointsForGridWithInt_withInt_(GeogebraCommonKernelImplicitGeoImplicitCurve *self, jint i, jint j);

__attribute__((unused)) static GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum *GeogebraCommonKernelImplicitGeoImplicitCurve_getGridTypeWithInt_withInt_(GeogebraCommonKernelImplicitGeoImplicitCurve *self, jint i, jint j);

__attribute__((unused)) static jint GeogebraCommonKernelImplicitGeoImplicitCurve_mySignFunWithDouble_(GeogebraCommonKernelImplicitGeoImplicitCurve *self, jdouble val);

__attribute__((unused)) static jdouble GeogebraCommonKernelImplicitGeoImplicitCurve_getRealWorldYWithInt_(GeogebraCommonKernelImplicitGeoImplicitCurve *self, jint i);

__attribute__((unused)) static jdouble GeogebraCommonKernelImplicitGeoImplicitCurve_getRealWorldXWithInt_(GeogebraCommonKernelImplicitGeoImplicitCurve *self, jint j);

__attribute__((unused)) static IOSDoubleArray *GeogebraCommonKernelImplicitGeoImplicitCurve_getRealWorldCoordinatesWithInt_withInt_(GeogebraCommonKernelImplicitGeoImplicitCurve *self, jint i, jint j);

typedef NS_ENUM(NSUInteger, GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnum) {
  GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnum_T0000 = 0,
  GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnum_T1000 = 1,
  GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnum_T0100 = 2,
  GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnum_T0010 = 3,
  GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnum_T0001 = 4,
  GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnum_T1001 = 5,
  GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnum_T1100 = 6,
  GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnum_T1010 = 7,
  GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnum_T0101 = 8,
};

@interface GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum : JavaLangEnum < NSCopying >

+ (IOSObjectArray *)values;
FOUNDATION_EXPORT IOSObjectArray *GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_values();

+ (GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum *)valueOfWithNSString:(NSString *)name;
FOUNDATION_EXPORT GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum *GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_valueOfWithNSString_(NSString *name);

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum)

FOUNDATION_EXPORT GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum *GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_values_[];

#define GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_T0000 GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_values_[GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnum_T0000]
J2OBJC_ENUM_CONSTANT_GETTER(GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum, T0000)

#define GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_T1000 GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_values_[GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnum_T1000]
J2OBJC_ENUM_CONSTANT_GETTER(GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum, T1000)

#define GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_T0100 GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_values_[GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnum_T0100]
J2OBJC_ENUM_CONSTANT_GETTER(GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum, T0100)

#define GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_T0010 GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_values_[GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnum_T0010]
J2OBJC_ENUM_CONSTANT_GETTER(GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum, T0010)

#define GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_T0001 GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_values_[GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnum_T0001]
J2OBJC_ENUM_CONSTANT_GETTER(GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum, T0001)

#define GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_T1001 GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_values_[GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnum_T1001]
J2OBJC_ENUM_CONSTANT_GETTER(GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum, T1001)

#define GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_T1100 GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_values_[GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnum_T1100]
J2OBJC_ENUM_CONSTANT_GETTER(GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum, T1100)

#define GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_T1010 GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_values_[GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnum_T1010]
J2OBJC_ENUM_CONSTANT_GETTER(GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum, T1010)

#define GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_T0101 GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_values_[GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnum_T0101]
J2OBJC_ENUM_CONSTANT_GETTER(GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum, T0101)

__attribute__((unused)) static void GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_initWithNSString_withInt_(GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum *new_GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum)

@implementation GeogebraCommonKernelImplicitGeoImplicitCurve

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonKernelImplicitGeoImplicitCurve_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equation {
  GeogebraCommonKernelImplicitGeoImplicitCurve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticEquation_(self, c, label, equation);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                            withNSString:(NSString *)label
          withGeogebraCommonKernelArithmeticFunctionNVar:(GeogebraCommonKernelArithmeticFunctionNVar *)function {
  GeogebraCommonKernelImplicitGeoImplicitCurve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunctionNVar_(self, c, label, function);
  return self;
}

- (void)fromEquationWithGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equation {
  GeogebraCommonKernelImplicitGeoImplicitCurve_fromEquationWithGeogebraCommonKernelArithmeticEquation_(self, equation);
}

- (void)fromFunctionWithGeogebraCommonKernelArithmeticFunctionNVar:(GeogebraCommonKernelArithmeticFunctionNVar *)function {
  GeogebraCommonKernelImplicitGeoImplicitCurve_fromFunctionWithGeogebraCommonKernelArithmeticFunctionNVar_(self, function);
}

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return GeogebraCommonPluginGeoClassEnum_get_IMPLICIT_CURVE();
}

- (GeogebraCommonKernelGeosGeoElement *)copy__ {
  return nil;
}

- (void)setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
}

- (jboolean)isDefined {
  return expression_ != nil;
}

- (void)setUndefined {
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return nil;
}

- (jboolean)showInAlgebraView {
  return YES;
}

- (jboolean)showInEuclidianView {
  return YES;
}

- (jboolean)isEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return NO;
}

- (jdouble)evaluateImplicitCurveWithDouble:(jdouble)x
                                withDouble:(jdouble)y {
  *IOSDoubleArray_GetRef(nil_chk(evalArray_), 0) = x;
  *IOSDoubleArray_GetRef(evalArray_, 1) = y;
  return [self evaluateImplicitCurveWithDoubleArray:evalArray_];
}

- (jdouble)evaluateImplicitCurveWithDoubleArray:(IOSDoubleArray *)values {
  return [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(expression_)) evaluateWithDoubleArray:values];
}

- (GeogebraCommonKernelGeosGeoLocus *)getLocus {
  return locus_;
}

- (void)updatePath {
  IOSDoubleArray *viewBounds = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getViewBoundsForGeoWithGeogebraCommonKernelGeosGeoElement:self];
  if (IOSDoubleArray_Get(nil_chk(viewBounds), 0) == JavaLangDouble_POSITIVE_INFINITY) {
    viewBounds = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ -10, 10, -10, 10, 10, 10 } count:6];
  }
  gridWidth_ = 60;
  gridHeight_ = 60;
  [self updatePathWithDouble:IOSDoubleArray_Get(viewBounds, 0) withDouble:IOSDoubleArray_Get(viewBounds, 3) withDouble:IOSDoubleArray_Get(viewBounds, 1) - IOSDoubleArray_Get(viewBounds, 0) withDouble:IOSDoubleArray_Get(viewBounds, 3) - IOSDoubleArray_Get(viewBounds, 2) withDouble:IOSDoubleArray_Get(viewBounds, 4) withDouble:IOSDoubleArray_Get(viewBounds, 5)];
}

- (void)updatePathWithDouble:(jdouble)rectX
                  withDouble:(jdouble)rectY
                  withDouble:(jdouble)rectW
                  withDouble:(jdouble)rectH
                  withDouble:(jdouble)xScale
                  withDouble:(jdouble)yScale {
  self->rectX_ = rectX;
  self->rectY_ = rectY;
  self->rectW_ = rectW;
  self->rectH_ = rectH;
  GeogebraCommonMainApp_debugWithNSString_(JreStrcat("DCDCDCD", rectX, 'x', rectY, ',', rectW, ',', rectH));
  GeogebraCommonMainApp_debugWithNSString_(JreStrcat("ICI", gridWidth_, 'x', gridHeight_));
  GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$DCD", @"res", xScale, ' ', yScale));
  GeogebraCommonKernelImplicitGeoImplicitCurve_setAndConsume_grid_(self, [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ gridHeight_, gridWidth_ }]);
  GeogebraCommonKernelImplicitGeoImplicitCurve_setAndConsume_evald_(self, [IOSBooleanArray newArrayWithDimensions:2 lengths:(jint[]){ gridHeight_ - 1, gridWidth_ - 1 }]);
  for (jint i = 0; i < gridHeight_; i++) {
    for (jint j = 0; j < gridWidth_; j++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(grid_, i)), j) = [self evaluateImplicitCurveWithDoubleArray:GeogebraCommonKernelImplicitGeoImplicitCurve_getRealWorldCoordinatesWithInt_withInt_(self, i, j)];
    }
  }
  id<JavaUtilList> locusPoints = [((GeogebraCommonKernelGeosGeoLocus *) nil_chk(locus_)) getPoints];
  [((id<JavaUtilList>) nil_chk(locusPoints)) clear];
  jint i = 0;
  jint j = -1;
  while (YES) {
    if (j >= gridWidth_ - 2) {
      j = 0;
      i++;
    }
    else {
      j++;
    }
    if (i >= gridHeight_ - 2) {
      break;
    }
    IOSObjectArray *ps = GeogebraCommonKernelImplicitGeoImplicitCurve_getPointsForGridWithInt_withInt_(self, i, j);
    if (ps != nil) {
      {
        IOSObjectArray *a__ = ps;
        GeogebraCommonKernelMyPoint * const *b__ = a__->buffer_;
        GeogebraCommonKernelMyPoint * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          GeogebraCommonKernelMyPoint *p = *b__++;
          [locusPoints addWithId:p];
        }
      }
    }
  }
}

- (IOSObjectArray *)getPointsForGridWithInt:(jint)i
                                    withInt:(jint)j {
  return GeogebraCommonKernelImplicitGeoImplicitCurve_getPointsForGridWithInt_withInt_(self, i, j);
}

- (jdouble)fWithDoubleArray:(IOSDoubleArray *)vals {
  return [self evaluateImplicitCurveWithDoubleArray:vals];
}

- (GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum *)getGridTypeWithInt:(jint)i
                                                                              withInt:(jint)j {
  return GeogebraCommonKernelImplicitGeoImplicitCurve_getGridTypeWithInt_withInt_(self, i, j);
}

- (jint)mySignFunWithDouble:(jdouble)val {
  return GeogebraCommonKernelImplicitGeoImplicitCurve_mySignFunWithDouble_(self, val);
}

- (jint)signAbsSumWithDoubleArray:(IOSDoubleArray *)args {
  jint s = 0;
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(args))->size_; i++) {
    s += GeogebraCommonKernelImplicitGeoImplicitCurve_mySignFunWithDouble_(self, IOSDoubleArray_Get(args, i));
  }
  return JavaLangMath_absWithInt_(s);
}

- (jdouble)getRealWorldYWithInt:(jint)i {
  return GeogebraCommonKernelImplicitGeoImplicitCurve_getRealWorldYWithInt_(self, i);
}

- (jdouble)getRealWorldXWithInt:(jint)j {
  return GeogebraCommonKernelImplicitGeoImplicitCurve_getRealWorldXWithInt_(self, j);
}

- (IOSDoubleArray *)getRealWorldCoordinatesWithInt:(jint)i
                                           withInt:(jint)j {
  return GeogebraCommonKernelImplicitGeoImplicitCurve_getRealWorldCoordinatesWithInt_withInt_(self, i, j);
}

- (jboolean)euclidianViewUpdate {
  if ([self isDefined]) {
    [self updatePath];
    return YES;
  }
  return NO;
}

- (GeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return GeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY();
}

- (void)dealloc {
  RELEASE_(expression_);
  RELEASE_(locus_);
  RELEASE_(evalArray_);
  RELEASE_(grid_);
  RELEASE_(evald_);
  RELEASE_(rwCoords_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:", "GeoImplicitCurve", NULL, 0x2, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelArithmeticEquation:", "GeoImplicitCurve", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelArithmeticFunctionNVar:", "GeoImplicitCurve", NULL, 0x1, NULL, NULL },
    { "fromEquationWithGeogebraCommonKernelArithmeticEquation:", "fromEquation", "V", 0x2, NULL, NULL },
    { "fromFunctionWithGeogebraCommonKernelArithmeticFunctionNVar:", "fromFunction", "V", 0x2, NULL, NULL },
    { "getGeoClassType", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x1, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x4, NULL, NULL },
    { "isEqualWithGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x1, NULL, NULL },
    { "evaluateImplicitCurveWithDouble:withDouble:", "evaluateImplicitCurve", "D", 0x1, NULL, NULL },
    { "evaluateImplicitCurveWithDoubleArray:", "evaluateImplicitCurve", "D", 0x1, NULL, NULL },
    { "getLocus", NULL, "Lgeogebra.common.kernel.geos.GeoLocus;", 0x1, NULL, NULL },
    { "updatePath", NULL, "V", 0x1, NULL, NULL },
    { "updatePathWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "updatePath", "V", 0x1, NULL, NULL },
    { "getPointsForGridWithInt:withInt:", "getPointsForGrid", "[Lgeogebra.common.kernel.MyPoint;", 0x2, NULL, NULL },
    { "fWithDoubleArray:", "f", "D", 0x2, NULL, NULL },
    { "getGridTypeWithInt:withInt:", "getGridType", "Lgeogebra.common.kernel.implicit.GeoImplicitCurve$GridTypeEnum;", 0x2, NULL, NULL },
    { "mySignFunWithDouble:", "mySignFun", "I", 0x2, NULL, NULL },
    { "signAbsSumWithDoubleArray:", "signAbsSum", "I", 0x2, NULL, NULL },
    { "getRealWorldYWithInt:", "getRealWorldY", "D", 0x2, NULL, NULL },
    { "getRealWorldXWithInt:", "getRealWorldX", "D", 0x2, NULL, NULL },
    { "getRealWorldCoordinatesWithInt:withInt:", "getRealWorldCoordinates", "[D", 0x2, NULL, NULL },
    { "euclidianViewUpdate", NULL, "Z", 0x1, NULL, NULL },
    { "getLastHitType", NULL, "Lgeogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "expression_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.FunctionNVar;", NULL, NULL,  },
    { "locus_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoLocus;", NULL, NULL,  },
    { "gridWidth_", NULL, 0x2, "I", NULL, NULL,  },
    { "gridHeight_", NULL, 0x2, "I", NULL, NULL,  },
    { "evalArray_", NULL, 0x2, "[D", NULL, NULL,  },
    { "grid_", NULL, 0x2, "[[D", NULL, NULL,  },
    { "evald_", NULL, 0x2, "[[Z", NULL, NULL,  },
    { "rectX_", NULL, 0x2, "D", NULL, NULL,  },
    { "rectY_", NULL, 0x2, "D", NULL, NULL,  },
    { "rectW_", NULL, 0x2, "D", NULL, NULL,  },
    { "rectH_", NULL, 0x2, "D", NULL, NULL,  },
    { "rwCoords_", NULL, 0x2, "[D", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.kernel.implicit.GeoImplicitCurve$GridTypeEnum;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelImplicitGeoImplicitCurve = { 2, "GeoImplicitCurve", "geogebra.common.kernel.implicit", NULL, 0x1, 29, methods, 12, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonKernelImplicitGeoImplicitCurve;
}

@end

void GeogebraCommonKernelImplicitGeoImplicitCurve_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelImplicitGeoImplicitCurve *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelGeosGeoElement_initWithGeogebraCommonKernelConstruction_(self, c);
  GeogebraCommonKernelImplicitGeoImplicitCurve_setAndConsume_evalArray_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonKernelImplicitGeoImplicitCurve_setAndConsume_rwCoords_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonKernelImplicitGeoImplicitCurve_setAndConsume_locus_(self, new_GeogebraCommonKernelGeosGeoLocus_initWithGeogebraCommonKernelConstruction_(c));
  [self->locus_ setDefinedWithBoolean:YES];
  [((GeogebraCommonKernelConstruction *) nil_chk(c)) registerEuclidianViewCEWithGeogebraCommonKernelEuclidianViewCE:self];
}

GeogebraCommonKernelImplicitGeoImplicitCurve *new_GeogebraCommonKernelImplicitGeoImplicitCurve_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelImplicitGeoImplicitCurve *self = [GeogebraCommonKernelImplicitGeoImplicitCurve alloc];
  GeogebraCommonKernelImplicitGeoImplicitCurve_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void GeogebraCommonKernelImplicitGeoImplicitCurve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticEquation_(GeogebraCommonKernelImplicitGeoImplicitCurve *self, GeogebraCommonKernelConstruction *c, NSString *label, GeogebraCommonKernelArithmeticEquation *equation) {
  GeogebraCommonKernelImplicitGeoImplicitCurve_initWithGeogebraCommonKernelConstruction_(self, c);
  [self setLabelWithNSString:label];
  GeogebraCommonKernelImplicitGeoImplicitCurve_fromEquationWithGeogebraCommonKernelArithmeticEquation_(self, equation);
  [self updatePath];
}

GeogebraCommonKernelImplicitGeoImplicitCurve *new_GeogebraCommonKernelImplicitGeoImplicitCurve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticEquation_(GeogebraCommonKernelConstruction *c, NSString *label, GeogebraCommonKernelArithmeticEquation *equation) {
  GeogebraCommonKernelImplicitGeoImplicitCurve *self = [GeogebraCommonKernelImplicitGeoImplicitCurve alloc];
  GeogebraCommonKernelImplicitGeoImplicitCurve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticEquation_(self, c, label, equation);
  return self;
}

void GeogebraCommonKernelImplicitGeoImplicitCurve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunctionNVar_(GeogebraCommonKernelImplicitGeoImplicitCurve *self, GeogebraCommonKernelConstruction *c, NSString *label, GeogebraCommonKernelArithmeticFunctionNVar *function) {
  GeogebraCommonKernelImplicitGeoImplicitCurve_initWithGeogebraCommonKernelConstruction_(self, c);
  [self setLabelWithNSString:label];
  GeogebraCommonKernelImplicitGeoImplicitCurve_fromFunctionWithGeogebraCommonKernelArithmeticFunctionNVar_(self, function);
  [self updatePath];
}

GeogebraCommonKernelImplicitGeoImplicitCurve *new_GeogebraCommonKernelImplicitGeoImplicitCurve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunctionNVar_(GeogebraCommonKernelConstruction *c, NSString *label, GeogebraCommonKernelArithmeticFunctionNVar *function) {
  GeogebraCommonKernelImplicitGeoImplicitCurve *self = [GeogebraCommonKernelImplicitGeoImplicitCurve alloc];
  GeogebraCommonKernelImplicitGeoImplicitCurve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunctionNVar_(self, c, label, function);
  return self;
}

void GeogebraCommonKernelImplicitGeoImplicitCurve_fromEquationWithGeogebraCommonKernelArithmeticEquation_(GeogebraCommonKernelImplicitGeoImplicitCurve *self, GeogebraCommonKernelArithmeticEquation *equation) {
  GeogebraCommonKernelArithmeticExpressionNode *leftHandSide = [((GeogebraCommonKernelArithmeticEquation *) nil_chk(equation)) getLHS];
  GeogebraCommonKernelArithmeticExpressionNode *rightHandSide = [equation getRHS];
  GeogebraCommonKernelArithmeticExpressionNode *functionExpression = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, leftHandSide, GeogebraCommonPluginOperationEnum_get_MINUS(), rightHandSide) autorelease];
  GeogebraCommonKernelArithmeticFunctionVariable *x = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(self->kernel_, @"x") autorelease];
  GeogebraCommonKernelArithmeticFunctionVariable *y = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(self->kernel_, @"y") autorelease];
  GeogebraCommonKernelArithmeticTraversing_VariableReplacer *repl = GeogebraCommonKernelArithmeticTraversing_VariableReplacer_getReplacer();
  GeogebraCommonKernelArithmeticTraversing_VariableReplacer_addVarsWithNSString_withGeogebraCommonKernelArithmeticExpressionValue_(@"x", x);
  GeogebraCommonKernelArithmeticTraversing_VariableReplacer_addVarsWithNSString_withGeogebraCommonKernelArithmeticExpressionValue_(@"y", y);
  [functionExpression traverseWithGeogebraCommonKernelArithmeticTraversing:repl];
  GeogebraCommonKernelImplicitGeoImplicitCurve_setAndConsume_expression_(self, new_GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariableArray_(functionExpression, [IOSObjectArray arrayWithObjects:(id[]){ x, y } count:2 type:GeogebraCommonKernelArithmeticFunctionVariable_class_()]));
}

void GeogebraCommonKernelImplicitGeoImplicitCurve_fromFunctionWithGeogebraCommonKernelArithmeticFunctionNVar_(GeogebraCommonKernelImplicitGeoImplicitCurve *self, GeogebraCommonKernelArithmeticFunctionNVar *function) {
  GeogebraCommonKernelImplicitGeoImplicitCurve_set_expression_(self, function);
}

IOSObjectArray *GeogebraCommonKernelImplicitGeoImplicitCurve_getPointsForGridWithInt_withInt_(GeogebraCommonKernelImplicitGeoImplicitCurve *self, jint i, jint j) {
  GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum *gridType = GeogebraCommonKernelImplicitGeoImplicitCurve_getGridTypeWithInt_withInt_(self, i, j);
  GeogebraCommonKernelMyPoint *P, *Q;
  jdouble qx, qy, px, py;
  IOSDoubleArray *A = GeogebraCommonKernelImplicitGeoImplicitCurve_getRealWorldCoordinatesWithInt_withInt_(self, i, j);
  IOSDoubleArray *B = GeogebraCommonKernelImplicitGeoImplicitCurve_getRealWorldCoordinatesWithInt_withInt_(self, i, j + 1);
  IOSDoubleArray *C = GeogebraCommonKernelImplicitGeoImplicitCurve_getRealWorldCoordinatesWithInt_withInt_(self, i + 1, j + 1);
  IOSDoubleArray *D = GeogebraCommonKernelImplicitGeoImplicitCurve_getRealWorldCoordinatesWithInt_withInt_(self, i + 1, j);
  switch ([gridType ordinal]) {
    case GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnum_T1000:
    qx = IOSDoubleArray_Get(nil_chk(A), 0);
    py = IOSDoubleArray_Get(A, 1);
    qy = (IOSDoubleArray_Get(A, 1) + IOSDoubleArray_Get(nil_chk(D), 1)) / 2.0;
    px = (IOSDoubleArray_Get(nil_chk(B), 0) + IOSDoubleArray_Get(A, 0)) / 2.0;
    P = [new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(px, py, NO) autorelease];
    Q = [new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(qx, qy, YES) autorelease];
    return [IOSObjectArray arrayWithObjects:(id[]){ P, Q } count:2 type:GeogebraCommonKernelMyPoint_class_()];
    case GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnum_T0100:
    qx = IOSDoubleArray_Get(nil_chk(B), 0);
    py = IOSDoubleArray_Get(B, 1);
    qy = (IOSDoubleArray_Get(B, 1) + IOSDoubleArray_Get(nil_chk(D), 1)) / 2.0;
    px = (IOSDoubleArray_Get(B, 0) + IOSDoubleArray_Get(nil_chk(A), 0)) / 2.0;
    P = [new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(px, py, NO) autorelease];
    Q = [new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(qx, qy, YES) autorelease];
    return [IOSObjectArray arrayWithObjects:(id[]){ P, Q } count:2 type:GeogebraCommonKernelMyPoint_class_()];
    case GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnum_T0010:
    qx = IOSDoubleArray_Get(nil_chk(B), 0);
    py = IOSDoubleArray_Get(nil_chk(C), 1);
    qy = (IOSDoubleArray_Get(nil_chk(D), 1) + IOSDoubleArray_Get(B, 1)) / 2.0;
    px = (IOSDoubleArray_Get(D, 0) + IOSDoubleArray_Get(C, 0)) / 2.0;
    P = [new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(px, py, NO) autorelease];
    Q = [new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(qx, qy, YES) autorelease];
    return [IOSObjectArray arrayWithObjects:(id[]){ P, Q } count:2 type:GeogebraCommonKernelMyPoint_class_()];
    case GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnum_T0001:
    qx = IOSDoubleArray_Get(nil_chk(A), 0);
    py = IOSDoubleArray_Get(nil_chk(C), 1);
    qy = (IOSDoubleArray_Get(A, 1) + IOSDoubleArray_Get(nil_chk(D), 1)) / 2.0;
    px = (IOSDoubleArray_Get(D, 0) + IOSDoubleArray_Get(C, 0)) / 2.0;
    P = [new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(px, py, NO) autorelease];
    Q = [new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(qx, qy, YES) autorelease];
    return [IOSObjectArray arrayWithObjects:(id[]){ P, Q } count:2 type:GeogebraCommonKernelMyPoint_class_()];
    case GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnum_T1001:
    py = IOSDoubleArray_Get(nil_chk(C), 1);
    px = (IOSDoubleArray_Get(nil_chk(D), 0) + IOSDoubleArray_Get(C, 0)) / 2.0;
    qy = IOSDoubleArray_Get(nil_chk(A), 1);
    qx = (IOSDoubleArray_Get(A, 0) + IOSDoubleArray_Get(nil_chk(B), 0)) / 2.0;
    P = [new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(px, py, NO) autorelease];
    Q = [new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(qx, qy, YES) autorelease];
    return [IOSObjectArray arrayWithObjects:(id[]){ P, Q } count:2 type:GeogebraCommonKernelMyPoint_class_()];
    case GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnum_T1100:
    qx = IOSDoubleArray_Get(nil_chk(A), 0);
    qy = (IOSDoubleArray_Get(A, 1) + IOSDoubleArray_Get(nil_chk(D), 1)) / 2.0;
    px = IOSDoubleArray_Get(nil_chk(B), 0);
    py = (IOSDoubleArray_Get(D, 1) + IOSDoubleArray_Get(B, 1)) / 2.0;
    P = [new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(px, py, NO) autorelease];
    Q = [new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(qx, qy, YES) autorelease];
    return [IOSObjectArray arrayWithObjects:(id[]){ P, Q } count:2 type:GeogebraCommonKernelMyPoint_class_()];
    case GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnum_T1010:
    P = [new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(0, 0, NO) autorelease];
    Q = [new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(0, 0, YES) autorelease];
    return [IOSObjectArray arrayWithObjects:(id[]){ P, Q } count:2 type:GeogebraCommonKernelMyPoint_class_()];
    case GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnum_T0101:
    P = [new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(0, 0, NO) autorelease];
    Q = [new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(0, 0, YES) autorelease];
    return [IOSObjectArray arrayWithObjects:(id[]){ P, Q } count:2 type:GeogebraCommonKernelMyPoint_class_()];
  }
  return nil;
}

GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum *GeogebraCommonKernelImplicitGeoImplicitCurve_getGridTypeWithInt_withInt_(GeogebraCommonKernelImplicitGeoImplicitCurve *self, jint i, jint j) {
  jdouble nw = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->grid_), i)), j);
  jdouble ne = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->grid_, i)), j + 1);
  jdouble sw = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->grid_, i + 1)), j);
  jdouble se = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->grid_, i + 1)), j + 1);
  jint snw = GeogebraCommonKernelImplicitGeoImplicitCurve_mySignFunWithDouble_(self, nw);
  jint sne = GeogebraCommonKernelImplicitGeoImplicitCurve_mySignFunWithDouble_(self, ne);
  jint ssw = GeogebraCommonKernelImplicitGeoImplicitCurve_mySignFunWithDouble_(self, sw);
  jint sse = GeogebraCommonKernelImplicitGeoImplicitCurve_mySignFunWithDouble_(self, se);
  jdouble sum = JavaLangMath_absWithInt_(snw + sne + ssw + sse);
  if (sum == 4) {
    return GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_get_T0000();
  }
  if (sum == 2) {
    if (snw != sne) {
      if (snw != ssw) {
        return GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_get_T1000();
      }
      return GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_get_T0100();
    }
    if (ssw != snw) {
      return GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_get_T0001();
    }
    return GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_get_T0010();
  }
  if (snw == ssw) {
    return GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_get_T1001();
  }
  if (snw == sne) {
    return GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_get_T1100();
  }
  if (snw > 0) {
    return GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_get_T1010();
  }
  return GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_get_T0101();
}

jint GeogebraCommonKernelImplicitGeoImplicitCurve_mySignFunWithDouble_(GeogebraCommonKernelImplicitGeoImplicitCurve *self, jdouble val) {
  if (val > 0) {
    return 1;
  }
  return -1;
}

jdouble GeogebraCommonKernelImplicitGeoImplicitCurve_getRealWorldYWithInt_(GeogebraCommonKernelImplicitGeoImplicitCurve *self, jint i) {
  jdouble s = self->rectH_ / self->gridHeight_;
  return self->rectY_ - i * s;
}

jdouble GeogebraCommonKernelImplicitGeoImplicitCurve_getRealWorldXWithInt_(GeogebraCommonKernelImplicitGeoImplicitCurve *self, jint j) {
  jdouble s = self->rectW_ / self->gridWidth_;
  return self->rectX_ + j * s;
}

IOSDoubleArray *GeogebraCommonKernelImplicitGeoImplicitCurve_getRealWorldCoordinatesWithInt_withInt_(GeogebraCommonKernelImplicitGeoImplicitCurve *self, jint i, jint j) {
  jdouble x = GeogebraCommonKernelImplicitGeoImplicitCurve_getRealWorldXWithInt_(self, j);
  jdouble y = GeogebraCommonKernelImplicitGeoImplicitCurve_getRealWorldYWithInt_(self, i);
  return [IOSDoubleArray arrayWithDoubles:(jdouble[]){ x, y } count:2];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelImplicitGeoImplicitCurve)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum)

GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum *GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_values_[9];

@implementation GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_values() {
  GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_initialize();
  return [IOSObjectArray arrayWithObjects:GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_values_ count:9 type:GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_class_()];
}

+ (IOSObjectArray *)values {
  return GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_values();
}

+ (GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum *)valueOfWithNSString:(NSString *)name {
  return GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_valueOfWithNSString_(name);
}

GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum *GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_valueOfWithNSString_(NSString *name) {
  GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_initialize();
  for (int i = 0; i < 9; i++) {
    GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum *e = GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum class]) {
    GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_T0000 = new_GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_initWithNSString_withInt_(@"T0000", 0);
    GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_T1000 = new_GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_initWithNSString_withInt_(@"T1000", 1);
    GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_T0100 = new_GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_initWithNSString_withInt_(@"T0100", 2);
    GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_T0010 = new_GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_initWithNSString_withInt_(@"T0010", 3);
    GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_T0001 = new_GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_initWithNSString_withInt_(@"T0001", 4);
    GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_T1001 = new_GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_initWithNSString_withInt_(@"T1001", 5);
    GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_T1100 = new_GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_initWithNSString_withInt_(@"T1100", 6);
    GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_T1010 = new_GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_initWithNSString_withInt_(@"T1010", 7);
    GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_T0101 = new_GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_initWithNSString_withInt_(@"T0101", 8);
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "T0000", "T0000", 0x4019, "Lgeogebra.common.kernel.implicit.GeoImplicitCurve$GridTypeEnum;", &GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_T0000, NULL,  },
    { "T1000", "T1000", 0x4019, "Lgeogebra.common.kernel.implicit.GeoImplicitCurve$GridTypeEnum;", &GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_T1000, NULL,  },
    { "T0100", "T0100", 0x4019, "Lgeogebra.common.kernel.implicit.GeoImplicitCurve$GridTypeEnum;", &GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_T0100, NULL,  },
    { "T0010", "T0010", 0x4019, "Lgeogebra.common.kernel.implicit.GeoImplicitCurve$GridTypeEnum;", &GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_T0010, NULL,  },
    { "T0001", "T0001", 0x4019, "Lgeogebra.common.kernel.implicit.GeoImplicitCurve$GridTypeEnum;", &GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_T0001, NULL,  },
    { "T1001", "T1001", 0x4019, "Lgeogebra.common.kernel.implicit.GeoImplicitCurve$GridTypeEnum;", &GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_T1001, NULL,  },
    { "T1100", "T1100", 0x4019, "Lgeogebra.common.kernel.implicit.GeoImplicitCurve$GridTypeEnum;", &GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_T1100, NULL,  },
    { "T1010", "T1010", 0x4019, "Lgeogebra.common.kernel.implicit.GeoImplicitCurve$GridTypeEnum;", &GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_T1010, NULL,  },
    { "T0101", "T0101", 0x4019, "Lgeogebra.common.kernel.implicit.GeoImplicitCurve$GridTypeEnum;", &GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_T0101, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.kernel.implicit.GeoImplicitCurve$GridTypeEnum;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum = { 2, "GridTypeEnum", "geogebra.common.kernel.implicit", "GeoImplicitCurve", 0x401a, 0, NULL, 9, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lgeogebra/common/kernel/implicit/GeoImplicitCurve$GridTypeEnum;>;" };
  return &_GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum;
}

@end

void GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_initWithNSString_withInt_(GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum *new_GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum *self = [GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum alloc];
  GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelImplicitGeoImplicitCurve_GridTypeEnumEnum)
