//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/dialog/options/model/LineEqnModel.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/gui/dialog/options/model/IComboListener.h"
#include "geogebra/common/gui/dialog/options/model/LineEqnModel.h"
#include "geogebra/common/gui/dialog/options/model/MultipleOptionsModel.h"
#include "geogebra/common/gui/dialog/options/model/OptionsModel.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoSegment.h"
#include "geogebra/common/main/Localization.h"
#include "java/lang/Integer.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"

@interface GeogebraCommonGuiDialogOptionsModelLineEqnModel () {
 @public
  id<JavaUtilList> eqnValues_;
}

- (GeogebraCommonKernelGeosGeoLine *)getLineAtWithInt:(jint)index;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogOptionsModelLineEqnModel, eqnValues_, id<JavaUtilList>)

__attribute__((unused)) static GeogebraCommonKernelGeosGeoLine *GeogebraCommonGuiDialogOptionsModelLineEqnModel_getLineAtWithInt_(GeogebraCommonGuiDialogOptionsModelLineEqnModel *self, jint index);

@implementation GeogebraCommonGuiDialogOptionsModelLineEqnModel

- (instancetype)initWithGeogebraCommonGuiDialogOptionsModelIComboListener:(id<GeogebraCommonGuiDialogOptionsModelIComboListener>)listener {
  GeogebraCommonGuiDialogOptionsModelLineEqnModel_initWithGeogebraCommonGuiDialogOptionsModelIComboListener_(self, listener);
  return self;
}

- (jboolean)isValidAtWithInt:(jint)index {
  jboolean valid = YES;
  id geo = [self getObjectAtWithInt:index];
  if (!([geo isKindOfClass:[GeogebraCommonKernelGeosGeoLine class]]) || [geo isKindOfClass:[GeogebraCommonKernelGeosGeoSegment class]]) {
    valid = NO;
  }
  return valid;
}

- (GeogebraCommonKernelGeosGeoLine *)getLineAtWithInt:(jint)index {
  return GeogebraCommonGuiDialogOptionsModelLineEqnModel_getLineAtWithInt_(self, index);
}

- (void)updateProperties {
  jint value0 = [self getValueAtWithInt:0];
  jboolean equalMode = YES;
  for (jint i = 0; i < [self getGeosLength]; i++) {
    if ([self getValueAtWithInt:i] != value0) {
      equalMode = NO;
    }
  }
  [((id<GeogebraCommonGuiDialogOptionsModelIComboListener>) nil_chk([self getListener])) setSelectedIndexWithInt:equalMode ? [((id<JavaUtilList>) nil_chk(eqnValues_)) indexOfWithId:JavaLangInteger_valueOfWithInt_(value0)] : -1];
}

- (id<JavaUtilList>)getChoichesWithGeogebraCommonMainLocalization:(GeogebraCommonMainLocalization *)loc {
  return JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ [((GeogebraCommonMainLocalization *) nil_chk(loc)) getPlainWithNSString:@"ImplicitLineEquation"], [loc getPlainWithNSString:@"ExplicitLineEquation"], [loc getPlainWithNSString:@"ParametricForm"] } count:3 type:NSString_class_()]);
}

- (void)applyWithInt:(jint)index
             withInt:(jint)value {
  [((GeogebraCommonKernelGeosGeoLine *) nil_chk(GeogebraCommonGuiDialogOptionsModelLineEqnModel_getLineAtWithInt_(self, index))) setModeWithInt:[((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(eqnValues_)) getWithInt:value])) intValue]];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoAtWithInt:index])) updateRepaint];
}

- (jint)getValueAtWithInt:(jint)index {
  return [((GeogebraCommonKernelGeosGeoLine *) nil_chk(GeogebraCommonGuiDialogOptionsModelLineEqnModel_getLineAtWithInt_(self, index))) getMode];
}

- (void)dealloc {
  RELEASE_(eqnValues_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGuiDialogOptionsModelIComboListener:", "LineEqnModel", NULL, 0x1, NULL, NULL },
    { "isValidAtWithInt:", "isValidAt", "Z", 0x1, NULL, NULL },
    { "getLineAtWithInt:", "getLineAt", "Lgeogebra.common.kernel.geos.GeoLine;", 0x2, NULL, NULL },
    { "updateProperties", NULL, "V", 0x1, NULL, NULL },
    { "getChoichesWithGeogebraCommonMainLocalization:", "getChoiches", "Ljava.util.List;", 0x1, NULL, NULL },
    { "applyWithInt:withInt:", "apply", "V", 0x4, NULL, NULL },
    { "getValueAtWithInt:", "getValueAt", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "eqnValues_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Ljava/lang/Integer;>;",  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiDialogOptionsModelLineEqnModel = { 2, "LineEqnModel", "geogebra.common.gui.dialog.options.model", NULL, 0x1, 7, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiDialogOptionsModelLineEqnModel;
}

@end

void GeogebraCommonGuiDialogOptionsModelLineEqnModel_initWithGeogebraCommonGuiDialogOptionsModelIComboListener_(GeogebraCommonGuiDialogOptionsModelLineEqnModel *self, id<GeogebraCommonGuiDialogOptionsModelIComboListener> listener) {
  GeogebraCommonGuiDialogOptionsModelMultipleOptionsModel_initWithGeogebraCommonGuiDialogOptionsModelIComboListener_(self, listener);
  GeogebraCommonGuiDialogOptionsModelLineEqnModel_set_eqnValues_(self, JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelGeosGeoLine_EQUATION_IMPLICIT), JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelGeosGeoLine_EQUATION_EXPLICIT), JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelGeosGeoLine_PARAMETRIC) } count:3 type:JavaLangInteger_class_()]));
}

GeogebraCommonGuiDialogOptionsModelLineEqnModel *new_GeogebraCommonGuiDialogOptionsModelLineEqnModel_initWithGeogebraCommonGuiDialogOptionsModelIComboListener_(id<GeogebraCommonGuiDialogOptionsModelIComboListener> listener) {
  GeogebraCommonGuiDialogOptionsModelLineEqnModel *self = [GeogebraCommonGuiDialogOptionsModelLineEqnModel alloc];
  GeogebraCommonGuiDialogOptionsModelLineEqnModel_initWithGeogebraCommonGuiDialogOptionsModelIComboListener_(self, listener);
  return self;
}

GeogebraCommonKernelGeosGeoLine *GeogebraCommonGuiDialogOptionsModelLineEqnModel_getLineAtWithInt_(GeogebraCommonGuiDialogOptionsModelLineEqnModel *self, jint index) {
  return (GeogebraCommonKernelGeosGeoLine *) check_class_cast([self getObjectAtWithInt:index], [GeogebraCommonKernelGeosGeoLine class]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiDialogOptionsModelLineEqnModel)
