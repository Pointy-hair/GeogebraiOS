//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/com/vividsolutions/jts/operation/overlay/EdgeSetNoder.java
//


#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/algorithm/LineIntersector.h"
#include "com/vividsolutions/jts/geomgraph/Edge.h"
#include "com/vividsolutions/jts/geomgraph/EdgeIntersectionList.h"
#include "com/vividsolutions/jts/geomgraph/index/EdgeSetIntersector.h"
#include "com/vividsolutions/jts/geomgraph/index/SegmentIntersector.h"
#include "com/vividsolutions/jts/geomgraph/index/SimpleMCSweepLineIntersector.h"
#include "com/vividsolutions/jts/operation/overlay/EdgeSetNoder.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@interface ComVividsolutionsJtsOperationOverlayEdgeSetNoder () {
 @public
  ComVividsolutionsJtsAlgorithmLineIntersector *li_;
  id<JavaUtilList> inputEdges_;
}

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationOverlayEdgeSetNoder, li_, ComVividsolutionsJtsAlgorithmLineIntersector *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationOverlayEdgeSetNoder, inputEdges_, id<JavaUtilList>)

@implementation ComVividsolutionsJtsOperationOverlayEdgeSetNoder

- (instancetype)initWithComVividsolutionsJtsAlgorithmLineIntersector:(ComVividsolutionsJtsAlgorithmLineIntersector *)li {
  ComVividsolutionsJtsOperationOverlayEdgeSetNoder_initWithComVividsolutionsJtsAlgorithmLineIntersector_(self, li);
  return self;
}

- (void)addEdgesWithJavaUtilList:(id<JavaUtilList>)edges {
  [((id<JavaUtilList>) nil_chk(inputEdges_)) addAllWithJavaUtilCollection:edges];
}

- (id<JavaUtilList>)getNodedEdges {
  ComVividsolutionsJtsGeomgraphIndexEdgeSetIntersector *esi = [new_ComVividsolutionsJtsGeomgraphIndexSimpleMCSweepLineIntersector_init() autorelease];
  ComVividsolutionsJtsGeomgraphIndexSegmentIntersector *si = [new_ComVividsolutionsJtsGeomgraphIndexSegmentIntersector_initWithComVividsolutionsJtsAlgorithmLineIntersector_withBoolean_withBoolean_(li_, YES, NO) autorelease];
  [esi computeIntersectionsWithJavaUtilList:inputEdges_ withComVividsolutionsJtsGeomgraphIndexSegmentIntersector:si withBoolean:YES];
  id<JavaUtilList> splitEdges = [new_JavaUtilArrayList_init() autorelease];
  for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk(inputEdges_)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphEdge *e = (ComVividsolutionsJtsGeomgraphEdge *) check_class_cast([i next], [ComVividsolutionsJtsGeomgraphEdge class]);
    [((ComVividsolutionsJtsGeomgraphEdgeIntersectionList *) nil_chk([((ComVividsolutionsJtsGeomgraphEdge *) nil_chk(e)) getEdgeIntersectionList])) addSplitEdgesWithJavaUtilList:splitEdges];
  }
  return splitEdges;
}

- (void)dealloc {
  RELEASE_(li_);
  RELEASE_(inputEdges_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComVividsolutionsJtsAlgorithmLineIntersector:", "EdgeSetNoder", NULL, 0x1, NULL, NULL },
    { "addEdgesWithJavaUtilList:", "addEdges", "V", 0x1, NULL, NULL },
    { "getNodedEdges", NULL, "Ljava.util.List;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "li_", NULL, 0x2, "Lcom.vividsolutions.jts.algorithm.LineIntersector;", NULL, NULL,  },
    { "inputEdges_", NULL, 0x2, "Ljava.util.List;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsOperationOverlayEdgeSetNoder = { 2, "EdgeSetNoder", "com.vividsolutions.jts.operation.overlay", NULL, 0x1, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsOperationOverlayEdgeSetNoder;
}

@end

void ComVividsolutionsJtsOperationOverlayEdgeSetNoder_initWithComVividsolutionsJtsAlgorithmLineIntersector_(ComVividsolutionsJtsOperationOverlayEdgeSetNoder *self, ComVividsolutionsJtsAlgorithmLineIntersector *li) {
  NSObject_init(self);
  ComVividsolutionsJtsOperationOverlayEdgeSetNoder_setAndConsume_inputEdges_(self, new_JavaUtilArrayList_init());
  ComVividsolutionsJtsOperationOverlayEdgeSetNoder_set_li_(self, li);
}

ComVividsolutionsJtsOperationOverlayEdgeSetNoder *new_ComVividsolutionsJtsOperationOverlayEdgeSetNoder_initWithComVividsolutionsJtsAlgorithmLineIntersector_(ComVividsolutionsJtsAlgorithmLineIntersector *li) {
  ComVividsolutionsJtsOperationOverlayEdgeSetNoder *self = [ComVividsolutionsJtsOperationOverlayEdgeSetNoder alloc];
  ComVividsolutionsJtsOperationOverlayEdgeSetNoder_initWithComVividsolutionsJtsAlgorithmLineIntersector_(self, li);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsOperationOverlayEdgeSetNoder)
