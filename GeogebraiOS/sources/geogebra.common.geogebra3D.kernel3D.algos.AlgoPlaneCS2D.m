//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoPlaneCS2D.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoElement3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPlaneCS2D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "geogebra/common/main/Localization.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D () {
 @public
  id<GeogebraCommonKernelKernelNDGeoCoordSys2D> csInput_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D, csInput_, id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                            withNSString:(NSString *)label
           withGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)csInput {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoCoordSys2D_(self, c, label, csInput);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
           withGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)csInput {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoCoordSys2D_(self, c, csInput);
  return self;
}

- (void)compute {
  GeogebraCommonKernelMatrixCoordSys *coordsys = [((id<GeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(cs_)) getCoordSys];
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(csInput_, [GeogebraCommonKernelGeosGeoElement class])))) isDefined]) {
    [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys)) setUndefined];
    return;
  }
  [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys)) setWithGeogebraCommonKernelMatrixCoordSys:[((id<GeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(csInput_)) getCoordSys]];
  if ([coordsys isDefined]) [coordsys makeEquationVector];
}

- (id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)getCoordSys {
  return cs_;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Plane();
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"PlaneContainingA" withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(csInput_, [GeogebraCommonKernelGeosGeoElement class])))) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(cs_);
  RELEASE_(csInput_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoCoordSys2D:", "AlgoPlaneCS2D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoCoordSys2D:", "AlgoPlaneCS2D", NULL, 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getCoordSys", NULL, "Lgeogebra.common.kernel.kernelND.GeoCoordSys2D;", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "cs_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoCoordSys2D;", NULL, NULL,  },
    { "csInput_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoCoordSys2D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D = { 2, "AlgoPlaneCS2D", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 6, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoCoordSys2D_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D *self, GeogebraCommonKernelConstruction *c, NSString *label, id<GeogebraCommonKernelKernelNDGeoCoordSys2D> csInput) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoCoordSys2D_(self, c, csInput);
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->cs_, [GeogebraCommonKernelGeosGeoElement class])))) setLabelWithNSString:label];
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoCoordSys2D_(GeogebraCommonKernelConstruction *c, NSString *label, id<GeogebraCommonKernelKernelNDGeoCoordSys2D> csInput) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoCoordSys2D_(self, c, label, csInput);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoCoordSys2D_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D *self, GeogebraCommonKernelConstruction *c, id<GeogebraCommonKernelKernelNDGeoCoordSys2D> csInput) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoElement3D_initWithGeogebraCommonKernelConstruction_(self, c);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D_set_csInput_(self, csInput);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D_setAndConsume_cs_(self, new_GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_initWithGeogebraCommonKernelConstruction_(c));
  [self setInputOutputWithGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast(csInput, [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()] withGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->cs_, [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()]];
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoCoordSys2D_(GeogebraCommonKernelConstruction *c, id<GeogebraCommonKernelKernelNDGeoCoordSys2D> csInput) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoCoordSys2D_(self, c, csInput);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D)
