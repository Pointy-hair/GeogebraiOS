//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoPlanePoint.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoElement3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoPlane.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoPlanePoint.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/Localization.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlanePoint () {
 @public
  id<GeogebraCommonKernelKernelNDGeoPointND> point_;
  GeogebraCommonKernelGeosGeoElement *secondInput_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlanePoint, point_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlanePoint, secondInput_, GeogebraCommonKernelGeosGeoElement *)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlanePoint

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)secondInput {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlanePoint_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, point, secondInput);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_OrthogonalPlane();
}

- (GeogebraCommonKernelMatrixCoords *)getPoint {
  return [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point_)) getInhomCoordsInD3];
}

- (GeogebraCommonKernelGeosGeoElement *)getSecondInput {
  return secondInput_;
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"PlaneThroughAPerpendicularToB" withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(secondInput_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(point_);
  RELEASE_(secondInput_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelGeosGeoElement:", "AlgoOrthoPlanePoint", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getPoint", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x4, NULL, NULL },
    { "getSecondInput", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "point_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "secondInput_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlanePoint = { 2, "AlgoOrthoPlanePoint", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x401, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlanePoint;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlanePoint_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlanePoint *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> point, GeogebraCommonKernelGeosGeoElement *secondInput) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlane_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlanePoint_set_point_(self, point);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlanePoint_set_secondInput_(self, secondInput);
  [self setInputOutputWithGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [GeogebraCommonKernelGeosGeoElement class]), secondInput } count:2 type:GeogebraCommonKernelGeosGeoElement_class_()] withGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ [self getPlane] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()]];
  [self compute];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk([self getPlane])) setLabelWithNSString:label];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlanePoint)
