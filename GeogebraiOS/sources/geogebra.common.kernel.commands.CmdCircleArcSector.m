//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/commands/CmdCircleArcSector.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CmdCircleArcSector.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoConicPart.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/MyError.h"

@implementation GeogebraCommonKernelCommandsCmdCircleArcSector

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                           withInt:(jint)type {
  GeogebraCommonKernelCommandsCmdCircleArcSector_initWithGeogebraCommonKernelKernel_withInt_(self, kernel, type);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSBooleanArray *ok = [IOSBooleanArray arrayWithLength:n];
  IOSObjectArray *arg;
  {
    IOSObjectArray *ret;
    switch (n) {
      case 3:
      arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
      if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoPoint])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPoint])) && (*IOSBooleanArray_GetRef(ok, 2) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoPoint]))) {
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [self circleArcSectorWithNSString:[c getLabel] withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelKernelNDGeoPointND)) withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelKernelNDGeoPointND)) withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelKernelNDGeoPointND))] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelCommandsCommandProcessor_getBadArgWithBooleanArray_withGeogebraCommonKernelGeosGeoElementArray_(ok, arg)];
      case 4:
      arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
      ret = [self process4WithGeogebraCommonKernelArithmeticCommand:c withGeogebraCommonKernelGeosGeoElementArray:arg withBooleanArray:ok];
      if (ret != nil) {
        return ret;
      }
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelCommandsCommandProcessor_getBadArgWithBooleanArray_withGeogebraCommonKernelGeosGeoElementArray_(ok, arg)];
      default:
      @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
    }
  }
}

- (GeogebraCommonKernelGeosGeoElement *)circleArcSectorWithNSString:(NSString *)label
                         withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)center
                         withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)startPoint
                         withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)endPoint {
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) CircleArcSectorWithNSString:label withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(center, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(startPoint, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(endPoint, [GeogebraCommonKernelGeosGeoPoint class]) withInt:type_];
}

- (IOSObjectArray *)process4WithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c
                          withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)arg
                                                     withBooleanArray:(IOSBooleanArray *)ok {
  @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getName] withInt:4];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:withInt:", "CmdCircleArcSector", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, "Lgeogebra.common.main.MyError;", NULL },
    { "circleArcSectorWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "circleArcSector", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "process4WithGeogebraCommonKernelArithmeticCommand:withGeogebraCommonKernelGeosGeoElementArray:withBooleanArray:", "process4", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, "Lgeogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "type_", NULL, 0x4, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCommandsCmdCircleArcSector = { 2, "CmdCircleArcSector", "geogebra.common.kernel.commands", NULL, 0x1, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCommandsCmdCircleArcSector;
}

@end

void GeogebraCommonKernelCommandsCmdCircleArcSector_initWithGeogebraCommonKernelKernel_withInt_(GeogebraCommonKernelCommandsCmdCircleArcSector *self, GeogebraCommonKernelKernel *kernel, jint type) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
  self->type_ = type;
}

GeogebraCommonKernelCommandsCmdCircleArcSector *new_GeogebraCommonKernelCommandsCmdCircleArcSector_initWithGeogebraCommonKernelKernel_withInt_(GeogebraCommonKernelKernel *kernel, jint type) {
  GeogebraCommonKernelCommandsCmdCircleArcSector *self = [GeogebraCommonKernelCommandsCmdCircleArcSector alloc];
  GeogebraCommonKernelCommandsCmdCircleArcSector_initWithGeogebraCommonKernelKernel_withInt_(self, kernel, type);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCommandsCmdCircleArcSector)
